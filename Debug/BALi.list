
BALi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a100  0800a100  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000204  0800a30c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800a30c  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fcd  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f62  00000000  00000000  000291ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d33  00000000  00000000  0002c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000925e  00000000  00000000  0003de03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058cb5  00000000  00000000  00047061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009fd16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  0009fd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009454 	.word	0x08009454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08009454 	.word	0x08009454

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <convDecByteToHex>:

	// LIDAR
	bool enableLIDAR = false;

uint8_t *convDecByteToHex(uint8_t byte)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d803      	bhi.n	8000f7c <convDecByteToHex+0x20>
    {
        temp += '0';
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e002      	b.n	8000f82 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3337      	adds	r3, #55	; 0x37
 8000f80:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8000f82:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d803      	bhi.n	8000f9c <convDecByteToHex+0x40>
    {
        temp += '0';
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e002      	b.n	8000fa2 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3337      	adds	r3, #55	; 0x37
 8000fa0:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	7013      	strb	r3, [r2, #0]

    return hex;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <convDecByteToHex+0x5c>)
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000224 	.word	0x20000224

08000fbc <setBMA020_Range>:
	i2cSendByteToSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR1,   daten);
}


void setBMA020_Range(I2C_TypeDef *i2c, uint8_t Range)							// Ändern der Empfindlichkeit (Range) 2 4 8g
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	uint8_t daten;
	i2cReadByteFromSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR2, &daten);
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	2214      	movs	r2, #20
 8000fce:	2138      	movs	r1, #56	; 0x38
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f003 fa30 	bl	8004436 <i2cReadByteFromSlaveReg>

	switch (Range)
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d002      	beq.n	8000fe2 <setBMA020_Range+0x26>
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d009      	beq.n	8000ff4 <setBMA020_Range+0x38>
 8000fe0:	e016      	b.n	8001010 <setBMA020_Range+0x54>
	{
	case 2:															// Empfindlichkeit: +/- 2g
		{
		daten &= 0b11100111;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f023 0318 	bic.w	r3, r3, #24
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	73fb      	strb	r3, [r7, #15]
		_range = 2;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <setBMA020_Range+0x84>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	701a      	strb	r2, [r3, #0]
		break;
 8000ff2:	e01a      	b.n	800102a <setBMA020_Range+0x6e>
		}
	case 4:															// Empfindlichkeit: +/- 4g
		{
		daten &= 0b11101111;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f023 0310 	bic.w	r3, r3, #16
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
		daten |= 0b00001000;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
		_range = 4;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <setBMA020_Range+0x84>)
 800100a:	2204      	movs	r2, #4
 800100c:	701a      	strb	r2, [r3, #0]
		break;
 800100e:	e00c      	b.n	800102a <setBMA020_Range+0x6e>
		}
	default:																	// Empfindlichkeit: +/- 8g
		{
		daten &= 0b11110111;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f023 0308 	bic.w	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
		daten |= 0b00010000;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
		_range = 8;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <setBMA020_Range+0x84>)
 8001026:	2208      	movs	r2, #8
 8001028:	701a      	strb	r2, [r3, #0]
		}
	}
	i2cSendByteToSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR2, daten);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2214      	movs	r2, #20
 800102e:	2138      	movs	r1, #56	; 0x38
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f003 f955 	bl	80042e0 <i2cSendByteToSlaveReg>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000000e 	.word	0x2000000e

08001044 <i2cBMA020INIT>:
	i2cSendByteToSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR2, daten);
}


int8_t i2cBMA020INIT(I2C_TypeDef *i2c, int8_t restart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	static int8_t step = -4;

	if ((restart != 0) && (step == -4))
 8001050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <i2cBMA020INIT+0x26>
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <i2cBMA020INIT+0xa4>)
 800105a:	f993 3000 	ldrsb.w	r3, [r3]
 800105e:	f113 0f04 	cmn.w	r3, #4
 8001062:	d102      	bne.n	800106a <i2cBMA020INIT+0x26>
	{
		step = -3;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <i2cBMA020INIT+0xa4>)
 8001066:	22fd      	movs	r2, #253	; 0xfd
 8001068:	701a      	strb	r2, [r3, #0]
	}

	switch (step)
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <i2cBMA020INIT+0xa4>)
 800106c:	f993 3000 	ldrsb.w	r3, [r3]
 8001070:	3304      	adds	r3, #4
 8001072:	2b03      	cmp	r3, #3
 8001074:	d82e      	bhi.n	80010d4 <i2cBMA020INIT+0x90>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <i2cBMA020INIT+0x38>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	0800109d 	.word	0x0800109d
 8001084:	080010b1 	.word	0x080010b1
 8001088:	080010c1 	.word	0x080010c1
	{
		case -4:		// CLK Speed von I2C auf Fast Mode
		{
			i2cSetClkSpd(i2c, I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 800108c:	2104      	movs	r1, #4
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 f858 	bl	8004144 <i2cSetClkSpd>
			step = -2;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <i2cBMA020INIT+0xa4>)
 8001096:	22fe      	movs	r2, #254	; 0xfe
 8001098:	701a      	strb	r2, [r3, #0]
		}
		break;
 800109a:	e01e      	b.n	80010da <i2cBMA020INIT+0x96>

		}
		*/
		case -3:
		{		// SW Reset
			i2cSendByteToSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR3, BMA020_SWRESET); // reboot memory content
 800109c:	2302      	movs	r3, #2
 800109e:	220a      	movs	r2, #10
 80010a0:	2138      	movs	r1, #56	; 0x38
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f003 f91c 	bl	80042e0 <i2cSendByteToSlaveReg>
			step = -2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <i2cBMA020INIT+0xa4>)
 80010aa:	22fe      	movs	r2, #254	; 0xfe
 80010ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010ae:	e014      	b.n	80010da <i2cBMA020INIT+0x96>
		case -2:
		{
			setBMA020_Range(i2c, 2);
 80010b0:	2102      	movs	r1, #2
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff82 	bl	8000fbc <setBMA020_Range>
			step = -1;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <i2cBMA020INIT+0xa4>)
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010be:	e00c      	b.n	80010da <i2cBMA020INIT+0x96>
		case -1:
		{		// Config Range & Bandwidth
			i2cSendByteToSlaveReg(i2c, i2cAddr_BMA020, BMA020_CR2, (BMA020_ACCEL_RANGE_2g|BMA020_ACCEL_BANDW_190)); // Set Range to ±2g, Set Filter bandwidth to 190Hz
 80010c0:	2303      	movs	r3, #3
 80010c2:	2214      	movs	r2, #20
 80010c4:	2138      	movs	r1, #56	; 0x38
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f003 f90a 	bl	80042e0 <i2cSendByteToSlaveReg>
			step = 0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <i2cBMA020INIT+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010d2:	e002      	b.n	80010da <i2cBMA020INIT+0x96>
		default:
		{
			step = -4;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <i2cBMA020INIT+0xa4>)
 80010d6:	22fc      	movs	r2, #252	; 0xfc
 80010d8:	701a      	strb	r2, [r3, #0]
	// Empfindlichkeit einstellen (+/- 2,4,8 Bit)
	setBMA020_Range(i2c, 2);
	// Bandbreite einstellen
	setBMA020_Bandwidth(i2c, (int16_t) 750);
	*/
	return step;
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <i2cBMA020INIT+0xa4>)
 80010dc:	f993 3000 	ldrsb.w	r3, [r3]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000000f 	.word	0x2000000f

080010ec <i2cBMA020XYZ>:

int16_t i2cBMA020XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint8_t _rdata[6];
	int16_t schiebeReg;
	i2cBurstRegRead(i2c, i2cAddr_BMA020, BMA020_DR, _rdata, 6);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2206      	movs	r2, #6
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	2202      	movs	r2, #2
 8001100:	2138      	movs	r1, #56	; 0x38
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f003 fa03 	bl	800450e <i2cBurstRegRead>

	float skal_div = 1/4.088;															// Zwischenspeicher für Bearbeitung der dez. Achsdaten
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <i2cBMA020XYZ+0xb4>)
 800110a:	617b      	str	r3, [r7, #20]
	int i;

	switch (_range)													// Skalierungsfaktoren für den Messberich +/-(2,4,8g) ermitteln
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <i2cBMA020XYZ+0xb8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d002      	beq.n	800111a <i2cBMA020XYZ+0x2e>
 8001114:	2b04      	cmp	r3, #4
 8001116:	d003      	beq.n	8001120 <i2cBMA020XYZ+0x34>
 8001118:	e004      	b.n	8001124 <i2cBMA020XYZ+0x38>
	{
	case 2:
		{
		skal_div =1/16.352;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <i2cBMA020XYZ+0xbc>)
 800111c:	617b      	str	r3, [r7, #20]
		break;
 800111e:	e001      	b.n	8001124 <i2cBMA020XYZ+0x38>
		}
	case 4:
		{
		skal_div = 1/8.176;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <i2cBMA020XYZ+0xc0>)
 8001122:	617b      	str	r3, [r7, #20]
		}
	}

	for (i=0;i<=2;i++)
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	e031      	b.n	800118e <i2cBMA020XYZ+0xa2>
	{

		schiebeReg = _rdata[2*i+1];									// MSB in Schieberegister schreiben
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	3301      	adds	r3, #1
 8001130:	3318      	adds	r3, #24
 8001132:	443b      	add	r3, r7
 8001134:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001138:	81fb      	strh	r3, [r7, #14]
		schiebeReg <<= 8;											// Schieben an die ersten 8 Bit
 800113a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	81fb      	strh	r3, [r7, #14]

		if(BMA020precision)
		{
			schiebeReg += _rdata[2*i];										// Addieren des jeweiligen LSB zum MSB
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	3318      	adds	r3, #24
 8001148:	443b      	add	r3, r7
 800114a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800114e:	b29a      	uxth	r2, r3
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	4413      	add	r3, r2
 8001154:	b29b      	uxth	r3, r3
 8001156:	81fb      	strh	r3, [r7, #14]
			schiebeReg &= 0xFFC0; //b1111111111000000; 					// Abschneiden der geringeren Stellen, da diese keine Daten enthalten
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800115e:	81fb      	strh	r3, [r7, #14]
		}
		xyz[i] = (int16_t)(((int16_t)schiebeReg) * skal_div);									// Konvertieren in Integer-Format und Messbereich einrechnen (2,4,8g) einberechnen
 8001160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001180:	ee17 2a90 	vmov	r2, s15
 8001184:	b212      	sxth	r2, r2
 8001186:	801a      	strh	r2, [r3, #0]
	for (i=0;i<=2;i++)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	3301      	adds	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2b02      	cmp	r3, #2
 8001192:	ddca      	ble.n	800112a <i2cBMA020XYZ+0x3e>
	}

	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	3e7a7d3f 	.word	0x3e7a7d3f
 80011a4:	2000000e 	.word	0x2000000e
 80011a8:	3d7a7d3f 	.word	0x3d7a7d3f
 80011ac:	3dfa7d3f 	.word	0x3dfa7d3f

080011b0 <i2cLIS3DH_XYZ>:


*/

int16_t i2cLIS3DH_XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
#ifdef XYZopt
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (OUTxyz|I2Crepeat),(uint8_t *) xyz, 6);
 80011ba:	2306      	movs	r3, #6
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	22a8      	movs	r2, #168	; 0xa8
 80011c2:	2118      	movs	r1, #24
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f003 f9a2 	bl	800450e <i2cBurstRegRead>
	xyz++;
	*xyz = (readBuffer[3]<<8) + readBuffer[2];
	xyz++;
	*xyz = (readBuffer[5]<<8) + readBuffer[4];
#endif
	return 0;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <i2cLIS3DH_Temp>:
- read both the ADC output 3 registers (because of BDU enabled): OUT_ADC_3_L(0x0C) and OUT_ADC_3_H(0x0D).
Useful bits: 8, left aligned, hence useful data in OUT_ADC_3_H.
Temperature sensor output change vs temperature: 1digit/degrCelsius
*/
int8_t i2cLIS3DH_Temp(I2C_TypeDef *i2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[2];
	//i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, (ADC3Temp+1), (uint8_t *) &readBuffer[1]);  	// only Hihg byte with data
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (ADC3Temp|I2Crepeat), readBuffer, 2);					// but BDU =1 required for update data to read both, high and low Byte
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2202      	movs	r2, #2
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	228c      	movs	r2, #140	; 0x8c
 80011e6:	2118      	movs	r1, #24
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f003 f990 	bl	800450e <i2cBurstRegRead>
	return ((int8_t) readBuffer[1]);					// send a delta Temp Value
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	b25b      	sxtb	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <RFID_LED>:


void RFID_LED(I2C_TypeDef *i2c, bool LEDon)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if (LEDon == 1)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <RFID_LED+0x20>
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDon, 3);
 800120e:	2303      	movs	r3, #3
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <RFID_LED+0x34>)
 8001212:	2150      	movs	r1, #80	; 0x50
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f003 f8b1 	bl	800437c <i2cBurstWrite>
	}
	else
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
	}
}
 800121a:	e005      	b.n	8001228 <RFID_LED+0x2c>
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
 800121c:	2303      	movs	r3, #3
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <RFID_LED+0x38>)
 8001220:	2150      	movs	r1, #80	; 0x50
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f003 f8aa 	bl	800437c <i2cBurstWrite>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <RFID_readCard>:

int8_t RFID_readCard(I2C_TypeDef *i2c, char *CardID)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
	uint8_t readBuffer[14];
	uint8_t len, i, j = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	77bb      	strb	r3, [r7, #30]
	int8_t typeCard = -1;
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	777b      	strb	r3, [r7, #29]
	static int8_t RFID_Status;
	char *p_out;

	switch (step)
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <RFID_readCard+0x128>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d002      	beq.n	8001258 <RFID_readCard+0x20>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d00a      	beq.n	800126c <RFID_readCard+0x34>
 8001256:	e078      	b.n	800134a <RFID_readCard+0x112>
	{
		case 1:
		{
			i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getMifareUID, 2);
 8001258:	2302      	movs	r3, #2
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <RFID_readCard+0x12c>)
 800125c:	2150      	movs	r1, #80	; 0x50
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f003 f88c 	bl	800437c <i2cBurstWrite>
			step = 2;
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <RFID_readCard+0x128>)
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
			break;
 800126a:	e073      	b.n	8001354 <RFID_readCard+0x11c>
		}
		case 2:
		{
			i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xC);
 800126c:	f107 0208 	add.w	r2, r7, #8
 8001270:	230c      	movs	r3, #12
 8001272:	2150      	movs	r1, #80	; 0x50
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f003 f9e2 	bl	800463e <i2cBurstRead>
			len = readBuffer[0]-2;
 800127a:	7a3b      	ldrb	r3, [r7, #8]
 800127c:	3b02      	subs	r3, #2
 800127e:	773b      	strb	r3, [r7, #28]
			step = 1;
 8001280:	4b37      	ldr	r3, [pc, #220]	; (8001360 <RFID_readCard+0x128>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
			if (RFID_Status != readBuffer[2])
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <RFID_readCard+0x130>)
 8001288:	f993 3000 	ldrsb.w	r3, [r3]
 800128c:	461a      	mov	r2, r3
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	429a      	cmp	r2, r3
 8001292:	d05e      	beq.n	8001352 <RFID_readCard+0x11a>
			{
				typeCard = readBuffer[len];
 8001294:	7f3b      	ldrb	r3, [r7, #28]
 8001296:	3320      	adds	r3, #32
 8001298:	443b      	add	r3, r7
 800129a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800129e:	777b      	strb	r3, [r7, #29]
				j = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	77bb      	strb	r3, [r7, #30]
				for (i = 0; i< 8; i++ )
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	e042      	b.n	8001330 <RFID_readCard+0xf8>
				{
					if (i < len)
 80012aa:	7ffa      	ldrb	r2, [r7, #31]
 80012ac:	7f3b      	ldrb	r3, [r7, #28]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d22b      	bcs.n	800130a <RFID_readCard+0xd2>
					{
						if (i == len-1) { CardID[j++]='-'; }					// add the Type number after this  -
 80012b2:	7ffa      	ldrb	r2, [r7, #31]
 80012b4:	7f3b      	ldrb	r3, [r7, #28]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <RFID_readCard+0x94>
 80012bc:	7fbb      	ldrb	r3, [r7, #30]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	77ba      	strb	r2, [r7, #30]
 80012c2:	461a      	mov	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	222d      	movs	r2, #45	; 0x2d
 80012ca:	701a      	strb	r2, [r3, #0]
						p_out =	(char *) convDecByteToHex(readBuffer[i+3]);
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	3303      	adds	r3, #3
 80012d0:	3320      	adds	r3, #32
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe3f 	bl	8000f5c <convDecByteToHex>
 80012de:	61b8      	str	r0, [r7, #24]
						CardID[j++]  = (char)*(p_out++);
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	61ba      	str	r2, [r7, #24]
 80012e6:	7fba      	ldrb	r2, [r7, #30]
 80012e8:	1c51      	adds	r1, r2, #1
 80012ea:	77b9      	strb	r1, [r7, #30]
 80012ec:	4611      	mov	r1, r2
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	440a      	add	r2, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	7013      	strb	r3, [r2, #0]
						CardID[j++] =(char)*p_out;
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	77ba      	strb	r2, [r7, #30]
 80012fc:	461a      	mov	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e00f      	b.n	800132a <RFID_readCard+0xf2>
					}
					else
					{CardID[j++]='.'; CardID[j++]='.';}
 800130a:	7fbb      	ldrb	r3, [r7, #30]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	77ba      	strb	r2, [r7, #30]
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	222e      	movs	r2, #46	; 0x2e
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	7fbb      	ldrb	r3, [r7, #30]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	77ba      	strb	r2, [r7, #30]
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	222e      	movs	r2, #46	; 0x2e
 8001328:	701a      	strb	r2, [r3, #0]
				for (i = 0; i< 8; i++ )
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	3301      	adds	r3, #1
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	2b07      	cmp	r3, #7
 8001334:	d9b9      	bls.n	80012aa <RFID_readCard+0x72>

				}
				CardID[j]='.';
 8001336:	7fbb      	ldrb	r3, [r7, #30]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	4413      	add	r3, r2
 800133c:	222e      	movs	r2, #46	; 0x2e
 800133e:	701a      	strb	r2, [r3, #0]
				RFID_Status = readBuffer[2];
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b25a      	sxtb	r2, r3
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <RFID_readCard+0x130>)
 8001346:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001348:	e003      	b.n	8001352 <RFID_readCard+0x11a>
		}
		default:
		{
			step = 1;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <RFID_readCard+0x128>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e000      	b.n	8001354 <RFID_readCard+0x11c>
			break;
 8001352:	bf00      	nop
		}
	}
	return typeCard;
 8001354:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000010 	.word	0x20000010
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000226 	.word	0x20000226

0800136c <RFID_readFWVersion>:

int8_t RFID_readFWVersion(I2C_TypeDef *i2c, char *strFirmware)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
		uint8_t readBuffer[16];
		uint8_t i, len;
		int8_t status = -1;
 8001376:	23ff      	movs	r3, #255	; 0xff
 8001378:	77bb      	strb	r3, [r7, #30]

		switch (step)
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <RFID_readFWVersion+0xbc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	2b03      	cmp	r3, #3
 8001382:	d848      	bhi.n	8001416 <RFID_readFWVersion+0xaa>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <RFID_readFWVersion+0x20>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013ad 	.word	0x080013ad
 8001394:	080013c1 	.word	0x080013c1
 8001398:	08001407 	.word	0x08001407
		{
			case 1:
			{
				RFID_LED(i2c,0);
 800139c:	2100      	movs	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff2c 	bl	80011fc <RFID_LED>
				step = 2;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <RFID_readFWVersion+0xbc>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
				break;
 80013aa:	e037      	b.n	800141c <RFID_readFWVersion+0xb0>
			}
			case 2:
			{
				i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getFirmwareVersion, 2);
 80013ac:	2302      	movs	r3, #2
 80013ae:	4a1f      	ldr	r2, [pc, #124]	; (800142c <RFID_readFWVersion+0xc0>)
 80013b0:	2150      	movs	r1, #80	; 0x50
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f002 ffe2 	bl	800437c <i2cBurstWrite>
				step = 3;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <RFID_readFWVersion+0xbc>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	701a      	strb	r2, [r3, #0]
				break;
 80013be:	e02d      	b.n	800141c <RFID_readFWVersion+0xb0>
			}
			case 3:
			{
				i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xF);
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	230f      	movs	r3, #15
 80013c6:	2150      	movs	r1, #80	; 0x50
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f003 f938 	bl	800463e <i2cBurstRead>
				len = readBuffer[0];
 80013ce:	7b3b      	ldrb	r3, [r7, #12]
 80013d0:	777b      	strb	r3, [r7, #29]
				status = readBuffer[2];
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	77bb      	strb	r3, [r7, #30]
				step = 4;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <RFID_readFWVersion+0xbc>)
 80013d8:	2204      	movs	r2, #4
 80013da:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 80013dc:	2300      	movs	r3, #0
 80013de:	77fb      	strb	r3, [r7, #31]
 80013e0:	e00c      	b.n	80013fc <RFID_readFWVersion+0x90>
				{
				 strFirmware[i] = readBuffer[i+3];
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	1cda      	adds	r2, r3, #3
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	440b      	add	r3, r1
 80013ec:	3220      	adds	r2, #32
 80013ee:	443a      	add	r2, r7
 80013f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80013f4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77fb      	strb	r3, [r7, #31]
 80013fc:	7ffa      	ldrb	r2, [r7, #31]
 80013fe:	7f7b      	ldrb	r3, [r7, #29]
 8001400:	429a      	cmp	r2, r3
 8001402:	d9ee      	bls.n	80013e2 <RFID_readFWVersion+0x76>
				}

				break;
 8001404:	e00a      	b.n	800141c <RFID_readFWVersion+0xb0>
			}
			case 4:
			{
				RFID_LED(i2c,0);
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fef7 	bl	80011fc <RFID_LED>
				step = 1;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <RFID_readFWVersion+0xbc>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
				break;
 8001414:	e002      	b.n	800141c <RFID_readFWVersion+0xb0>
			}

			default:
			{
				step = 1;
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <RFID_readFWVersion+0xbc>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
			}
		}
		return status;
 800141c:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000011 	.word	0x20000011
 800142c:	20000008 	.word	0x20000008

08001430 <main>:
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr);



int main(void)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b0a2      	sub	sp, #136	; 0x88
 8001434:	af00      	add	r7, sp, #0
/*  I2C Variables  */

	uint8_t        scanAddr = 0x7F;  //7Bit Adresse
 8001436:	237f      	movs	r3, #127	; 0x7f
 8001438:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	I2C_TypeDef   *i2c  = I2C1;
 800143c:	4bc3      	ldr	r3, [pc, #780]	; (800174c <main+0x31c>)
 800143e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	I2C_TypeDef   *i2c2  = I2C2;
 8001442:	4bc3      	ldr	r3, [pc, #780]	; (8001750 <main+0x320>)
 8001444:	677b      	str	r3, [r7, #116]	; 0x74
	int8_t ret;
	uint32_t   i2cTaskTime = 50UL;
 8001446:	2332      	movs	r3, #50	; 0x32
 8001448:	67fb      	str	r3, [r7, #124]	; 0x7c

/*  End I2C Variables  */

	char strCardID[]   = ".  .  .  .  .  .  .\0";
 800144a:	4bc2      	ldr	r3, [pc, #776]	; (8001754 <main+0x324>)
 800144c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001450:	461d      	mov	r5, r3
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800145a:	6020      	str	r0, [r4, #0]
 800145c:	3404      	adds	r4, #4
 800145e:	7021      	strb	r1, [r4, #0]
	char strFirmware[] = ". . .          \0";  // dummyString with NULL
 8001460:	4bbd      	ldr	r3, [pc, #756]	; (8001758 <main+0x328>)
 8001462:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	7023      	strb	r3, [r4, #0]
	//int testmode = 1;
   	//unsigned int r = 0;

       // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &I2C_Timer, &ST7735_Timer /*, weitere Timer */ };
 8001470:	4aba      	ldr	r2, [pc, #744]	; (800175c <main+0x32c>)
 8001472:	463b      	mov	r3, r7
 8001474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 800147c:	2302      	movs	r3, #2
 800147e:	673b      	str	r3, [r7, #112]	; 0x70


    BalaHWsetup();
 8001480:	f001 f898 	bl	80025b4 <BalaHWsetup>

    /* initialize the rotary push button module */
    initRotaryPushButton();
 8001484:	f001 f8bc 	bl	8002600 <initRotaryPushButton>


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f003 fd70 	bl	8004f70 <systickInit>

    systickSetMillis(&I2C_Timer, i2cTaskTime);
 8001490:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001492:	48b3      	ldr	r0, [pc, #716]	; (8001760 <main+0x330>)
 8001494:	f003 fd5e 	bl	8004f54 <systickSetMillis>
    //lcd7735_initR(0);
    LED_red_on;
 8001498:	210f      	movs	r1, #15
 800149a:	48b2      	ldr	r0, [pc, #712]	; (8001764 <main+0x334>)
 800149c:	f002 fc4a 	bl	8003d34 <gpioResetPin>

    //lcd7735_setup();
    //Inits needed for TFT Display

    	spiInit();
 80014a0:	f001 f9a0 	bl	80027e4 <spiInit>
    	tftInitR(INITR_REDTAB);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 fa5b 	bl	8002960 <tftInitR>
    //tftSetup();
    //  tftInitR(INITR_REDTAB);

    tftSetRotation(LANDSCAPE);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f001 ff24 	bl	80032f8 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 80014b0:	48ad      	ldr	r0, [pc, #692]	; (8001768 <main+0x338>)
 80014b2:	f001 fc17 	bl	8002ce4 <tftSetFont>
    tftFillScreen(tft_BLACK);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f001 ff04 	bl	80032c4 <tftFillScreen>

    LED_red_off;
 80014bc:	210f      	movs	r1, #15
 80014be:	48a9      	ldr	r0, [pc, #676]	; (8001764 <main+0x334>)
 80014c0:	f002 fc0d 	bl	8003cde <gpioSetPin>

    tftPrint((char *)"I2C Scanner running \0",0,0,0);
 80014c4:	2300      	movs	r3, #0
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	48a8      	ldr	r0, [pc, #672]	; (800176c <main+0x33c>)
 80014cc:	f001 fe60 	bl	8003190 <tftPrint>
    tftPrint((char *)"Select I2C Connector \0",0,14,0);
 80014d0:	2300      	movs	r3, #0
 80014d2:	220e      	movs	r2, #14
 80014d4:	2100      	movs	r1, #0
 80014d6:	48a6      	ldr	r0, [pc, #664]	; (8001770 <main+0x340>)
 80014d8:	f001 fe5a 	bl	8003190 <tftPrint>



    while (1)
    {
	   if (true == timerTrigger)
 80014dc:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <main+0x344>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <main+0xc2>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 80014e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	463b      	mov	r3, r7
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fd97 	bl	8005020 <systickUpdateTimerList>
	   }

	   if (isSystickExpired(I2C_Timer))
 80014f2:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <main+0x330>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fd5c 	bl	8004fb4 <isSystickExpired>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 82e8 	beq.w	8001ad4 <main+0x6a4>
	   {
		   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 8001504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001506:	4896      	ldr	r0, [pc, #600]	; (8001760 <main+0x330>)
 8001508:	f003 fd46 	bl	8004f98 <systickSetTicktime>
		   LED_green_off;
 800150c:	210e      	movs	r1, #14
 800150e:	4895      	ldr	r0, [pc, #596]	; (8001764 <main+0x334>)
 8001510:	f002 fbe5 	bl	8003cde <gpioSetPin>


		   switch (testmode)
 8001514:	4b98      	ldr	r3, [pc, #608]	; (8001778 <main+0x348>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b08      	cmp	r3, #8
 800151a:	f200 82d7 	bhi.w	8001acc <main+0x69c>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <main+0xf4>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001549 	.word	0x08001549
 8001528:	08001561 	.word	0x08001561
 800152c:	080016e1 	.word	0x080016e1
 8001530:	08001725 	.word	0x08001725
 8001534:	080017b1 	.word	0x080017b1
 8001538:	08001811 	.word	0x08001811
 800153c:	080018e7 	.word	0x080018e7
 8001540:	08001947 	.word	0x08001947
 8001544:	08001a71 	.word	0x08001a71
		   {
		   	   case 0:  //I2C Scan
		   	   {
		   		   //lcd7735_setForeground(ST7735_YELLOW);
		   		   i2cSetClkSpd(i2c,  I2C_CLOCK_400);
 8001548:	2103      	movs	r1, #3
 800154a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800154e:	f002 fdf9 	bl	8004144 <i2cSetClkSpd>
		   		   i2cSetClkSpd(i2c2,  I2C_CLOCK_400);
 8001552:	2103      	movs	r1, #3
 8001554:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001556:	f002 fdf5 	bl	8004144 <i2cSetClkSpd>
		   		   //tftPrint((char *)".  .  .  .  . \0",66,14,0);
		   		   testmode  = 1;
 800155a:	4b87      	ldr	r3, [pc, #540]	; (8001778 <main+0x348>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
		   	   }
		   	   case 1:  //I2C Scan
		   	   {
		   		   LED_red_on;
 8001560:	210f      	movs	r1, #15
 8001562:	4880      	ldr	r0, [pc, #512]	; (8001764 <main+0x334>)
 8001564:	f002 fbe6 	bl	8003d34 <gpioResetPin>
		   		   if ( I2C_SCAN(i2c, scanAddr) != 0)
 8001568:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800156c:	4619      	mov	r1, r3
 800156e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001572:	f000 fad5 	bl	8001b20 <I2C_SCAN>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d070      	beq.n	800165e <main+0x22e>
				   {
					   LED_red_off;
 800157c:	210f      	movs	r1, #15
 800157e:	4879      	ldr	r0, [pc, #484]	; (8001764 <main+0x334>)
 8001580:	f002 fbad 	bl	8003cde <gpioSetPin>
					   switch (scanAddr)
 8001584:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001588:	2b50      	cmp	r3, #80	; 0x50
 800158a:	d00a      	beq.n	80015a2 <main+0x172>
 800158c:	2b50      	cmp	r3, #80	; 0x50
 800158e:	dc67      	bgt.n	8001660 <main+0x230>
 8001590:	2b38      	cmp	r3, #56	; 0x38
 8001592:	d03f      	beq.n	8001614 <main+0x1e4>
 8001594:	2b38      	cmp	r3, #56	; 0x38
 8001596:	dc63      	bgt.n	8001660 <main+0x230>
 8001598:	2b18      	cmp	r3, #24
 800159a:	d015      	beq.n	80015c8 <main+0x198>
 800159c:	2b29      	cmp	r3, #41	; 0x29
 800159e:	d00f      	beq.n	80015c0 <main+0x190>
 80015a0:	e05e      	b.n	8001660 <main+0x230>
					   {
						   case i2cAddr_RFID:
						   {
							   enableRFID = true;
 80015a2:	4b76      	ldr	r3, [pc, #472]	; (800177c <main+0x34c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"RFID connected \0",0,28,0);
 80015a8:	2300      	movs	r3, #0
 80015aa:	221c      	movs	r2, #28
 80015ac:	2100      	movs	r1, #0
 80015ae:	4874      	ldr	r0, [pc, #464]	; (8001780 <main+0x350>)
 80015b0:	f001 fdee 	bl	8003190 <tftPrint>
							   RFID_LED(i2c,true);
 80015b4:	2101      	movs	r1, #1
 80015b6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015ba:	f7ff fe1f 	bl	80011fc <RFID_LED>
							   break;
 80015be:	e04f      	b.n	8001660 <main+0x230>
						   }
						   case i2cAddr_LIDAR:
						   {
							   enableLIDAR = true;
 80015c0:	4b70      	ldr	r3, [pc, #448]	; (8001784 <main+0x354>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
							   //lcd7735_print((char *)"TOF/LIADR connected \0",0,28,0);
							   break;
 80015c6:	e04b      	b.n	8001660 <main+0x230>
						   }
						   case i2cAddr_LIS3DH:
						   {
							   enableLIS3DH = true;
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <main+0x358>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"LIS3DH connected \0",0,28,0);
 80015ce:	2300      	movs	r3, #0
 80015d0:	221c      	movs	r2, #28
 80015d2:	2100      	movs	r1, #0
 80015d4:	486d      	ldr	r0, [pc, #436]	; (800178c <main+0x35c>)
 80015d6:	f001 fddb 	bl	8003190 <tftPrint>

							   tftPrint((char *)"Temp:\0",0,40,0);
 80015da:	2300      	movs	r3, #0
 80015dc:	2228      	movs	r2, #40	; 0x28
 80015de:	2100      	movs	r1, #0
 80015e0:	486b      	ldr	r0, [pc, #428]	; (8001790 <main+0x360>)
 80015e2:	f001 fdd5 	bl	8003190 <tftPrint>
							   tftPrint((char *)"X:\0",0,50,0);
 80015e6:	2300      	movs	r3, #0
 80015e8:	2232      	movs	r2, #50	; 0x32
 80015ea:	2100      	movs	r1, #0
 80015ec:	4869      	ldr	r0, [pc, #420]	; (8001794 <main+0x364>)
 80015ee:	f001 fdcf 	bl	8003190 <tftPrint>
							   tftPrint((char *)"Y:\0",0,60,0);
 80015f2:	2300      	movs	r3, #0
 80015f4:	223c      	movs	r2, #60	; 0x3c
 80015f6:	2100      	movs	r1, #0
 80015f8:	4867      	ldr	r0, [pc, #412]	; (8001798 <main+0x368>)
 80015fa:	f001 fdc9 	bl	8003190 <tftPrint>
							   tftPrint((char *)"Z:\0",0,70,0);
 80015fe:	2300      	movs	r3, #0
 8001600:	2246      	movs	r2, #70	; 0x46
 8001602:	2100      	movs	r1, #0
 8001604:	4865      	ldr	r0, [pc, #404]	; (800179c <main+0x36c>)
 8001606:	f001 fdc3 	bl	8003190 <tftPrint>
							   LED_blue_on;
 800160a:	210d      	movs	r1, #13
 800160c:	4855      	ldr	r0, [pc, #340]	; (8001764 <main+0x334>)
 800160e:	f002 fb91 	bl	8003d34 <gpioResetPin>
							   break;
 8001612:	e025      	b.n	8001660 <main+0x230>
						   }
						   case i2cAddr_BMA020:
						   {
							   enableBMA020 = true;
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <main+0x370>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"BMA020 connected \0",0,28,0);
 800161a:	2300      	movs	r3, #0
 800161c:	221c      	movs	r2, #28
 800161e:	2100      	movs	r1, #0
 8001620:	4860      	ldr	r0, [pc, #384]	; (80017a4 <main+0x374>)
 8001622:	f001 fdb5 	bl	8003190 <tftPrint>

							   tftPrint((char *)"X:\0",0,50,0);
 8001626:	2300      	movs	r3, #0
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	2100      	movs	r1, #0
 800162c:	4859      	ldr	r0, [pc, #356]	; (8001794 <main+0x364>)
 800162e:	f001 fdaf 	bl	8003190 <tftPrint>
							   tftPrint((char *)"Y:\0",0,60,0);
 8001632:	2300      	movs	r3, #0
 8001634:	223c      	movs	r2, #60	; 0x3c
 8001636:	2100      	movs	r1, #0
 8001638:	4857      	ldr	r0, [pc, #348]	; (8001798 <main+0x368>)
 800163a:	f001 fda9 	bl	8003190 <tftPrint>
							   tftPrint((char *)"Z:\0",0,70,0);
 800163e:	2300      	movs	r3, #0
 8001640:	2246      	movs	r2, #70	; 0x46
 8001642:	2100      	movs	r1, #0
 8001644:	4855      	ldr	r0, [pc, #340]	; (800179c <main+0x36c>)
 8001646:	f001 fda3 	bl	8003190 <tftPrint>
							   LED_blue_on;
 800164a:	210d      	movs	r1, #13
 800164c:	4845      	ldr	r0, [pc, #276]	; (8001764 <main+0x334>)
 800164e:	f002 fb71 	bl	8003d34 <gpioResetPin>
							   testmode = 4;
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <main+0x348>)
 8001654:	2204      	movs	r2, #4
 8001656:	701a      	strb	r2, [r3, #0]
		 					   i2cTaskTime = 200;
 8001658:	23c8      	movs	r3, #200	; 0xc8
 800165a:	67fb      	str	r3, [r7, #124]	; 0x7c
							   break;
 800165c:	e000      	b.n	8001660 <main+0x230>
						   }


					   }
				   }
 800165e:	bf00      	nop

				   if ((scanAddr == 0) && (enableRFID))
 8001660:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <main+0x250>
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <main+0x34c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <main+0x250>
				   {
					   scanAddr = 0x7F;
 8001670:	237f      	movs	r3, #127	; 0x7f
 8001672:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   i2cTaskTime = 200UL;
 8001676:	23c8      	movs	r3, #200	; 0xc8
 8001678:	67fb      	str	r3, [r7, #124]	; 0x7c
					   		// SL018 only works with 100kHz
					   testmode = 2;
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <main+0x348>)
 800167c:	2202      	movs	r2, #2
 800167e:	701a      	strb	r2, [r3, #0]
				   }
				   if ((scanAddr == 0) && (enableLIS3DH))
 8001680:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10b      	bne.n	80016a0 <main+0x270>
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <main+0x358>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <main+0x270>
				   {
					   scanAddr = 0x7F;
 8001690:	237f      	movs	r3, #127	; 0x7f
 8001692:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   testmode = 4;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <main+0x348>)
 8001698:	2204      	movs	r2, #4
 800169a:	701a      	strb	r2, [r3, #0]
					   i2cTaskTime = 200;
 800169c:	23c8      	movs	r3, #200	; 0xc8
 800169e:	67fb      	str	r3, [r7, #124]	; 0x7c

				   }
				   if ((scanAddr == 0))
 80016a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d115      	bne.n	80016d4 <main+0x2a4>
				   {
					   scanAddr = 0x7F;
 80016a8:	237f      	movs	r3, #127	; 0x7f
 80016aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   if (i2c == I2C1)
 80016ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016b2:	4a26      	ldr	r2, [pc, #152]	; (800174c <main+0x31c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d103      	bne.n	80016c0 <main+0x290>
					   {
						   i2c = I2C2;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <main+0x320>)
 80016ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016be:	e005      	b.n	80016cc <main+0x29c>
					   }
					   else
					   {
						   i2c = I2C1;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <main+0x31c>)
 80016c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						   tftFillScreen(tft_BLACK);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f001 fdfc 	bl	80032c4 <tftFillScreen>
					   }
				       testmode = 0;
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <main+0x348>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
				   }
				   else
				   {
					   scanAddr -=1;
				   }
				   break;
 80016d2:	e20e      	b.n	8001af2 <main+0x6c2>
					   scanAddr -=1;
 80016d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016d8:	3b01      	subs	r3, #1
 80016da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				   break;
 80016de:	e208      	b.n	8001af2 <main+0x6c2>
				}
		   	   	case 2:  // read RFID Firmware
				{
					if (RFID_readFWVersion(i2c, (char *)strFirmware) >= 0)
 80016e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e4:	4619      	mov	r1, r3
 80016e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80016ea:	f7ff fe3f 	bl	800136c <RFID_readFWVersion>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f2c0 81f1 	blt.w	8001ad8 <main+0x6a8>
					{
						tftPrint((char *)"FW: \0",0,48,0);
 80016f6:	2300      	movs	r3, #0
 80016f8:	2230      	movs	r2, #48	; 0x30
 80016fa:	2100      	movs	r1, #0
 80016fc:	482a      	ldr	r0, [pc, #168]	; (80017a8 <main+0x378>)
 80016fe:	f001 fd47 	bl	8003190 <tftPrint>
						tftPrint((char *)strFirmware,24,48,0);
 8001702:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001706:	2300      	movs	r3, #0
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	2118      	movs	r1, #24
 800170c:	f001 fd40 	bl	8003190 <tftPrint>
						testmode = 3;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <main+0x348>)
 8001712:	2203      	movs	r2, #3
 8001714:	701a      	strb	r2, [r3, #0]
						tftPrint((char *)"ID:\0",0,70,0);
 8001716:	2300      	movs	r3, #0
 8001718:	2246      	movs	r2, #70	; 0x46
 800171a:	2100      	movs	r1, #0
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <main+0x37c>)
 800171e:	f001 fd37 	bl	8003190 <tftPrint>
					else
					{
						;
					}
				}
				break;
 8001722:	e1d9      	b.n	8001ad8 <main+0x6a8>
		   	   	case 3:  // read RFID ID
		   		{
		   			if (RFID_readCard(i2c, strCardID)> 0)
 8001724:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001728:	4619      	mov	r1, r3
 800172a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800172e:	f7ff fd83 	bl	8001238 <RFID_readCard>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	f340 81d1 	ble.w	8001adc <main+0x6ac>
		   			{
		   				tftPrint((char *)strCardID,24,70,0);
 800173a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800173e:	2300      	movs	r3, #0
 8001740:	2246      	movs	r2, #70	; 0x46
 8001742:	2118      	movs	r1, #24
 8001744:	f001 fd24 	bl	8003190 <tftPrint>
		   			}
		   		}
		   		break;
 8001748:	e1c8      	b.n	8001adc <main+0x6ac>
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400
 8001750:	40005800 	.word	0x40005800
 8001754:	08009580 	.word	0x08009580
 8001758:	08009598 	.word	0x08009598
 800175c:	080095ac 	.word	0x080095ac
 8001760:	2000022c 	.word	0x2000022c
 8001764:	40020400 	.word	0x40020400
 8001768:	080095d8 	.word	0x080095d8
 800176c:	08009470 	.word	0x08009470
 8001770:	08009488 	.word	0x08009488
 8001774:	20000227 	.word	0x20000227
 8001778:	20000012 	.word	0x20000012
 800177c:	20000220 	.word	0x20000220
 8001780:	080094a0 	.word	0x080094a0
 8001784:	20000223 	.word	0x20000223
 8001788:	20000221 	.word	0x20000221
 800178c:	080094b4 	.word	0x080094b4
 8001790:	080094c8 	.word	0x080094c8
 8001794:	080094d0 	.word	0x080094d0
 8001798:	080094d4 	.word	0x080094d4
 800179c:	080094d8 	.word	0x080094d8
 80017a0:	20000222 	.word	0x20000222
 80017a4:	080094dc 	.word	0x080094dc
 80017a8:	080094f0 	.word	0x080094f0
 80017ac:	080094f8 	.word	0x080094f8

// LIS3DH function
		   	 	case 4:  // BMA020 Init		   			   		{
		   	 	{
		   			LED_red_off;
 80017b0:	210f      	movs	r1, #15
 80017b2:	48d0      	ldr	r0, [pc, #832]	; (8001af4 <main+0x6c4>)
 80017b4:	f002 fa93 	bl	8003cde <gpioSetPin>
		   			//currentSensor = SENSOR_BMA020;
		   			ret = i2cBMA020INIT(i2c, 0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80017be:	f7ff fc41 	bl	8001044 <i2cBMA020INIT>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		   	 		//i2cBMA020INIT(i2c, 0);
					if (ret > 0)										// no LIS3DH Sensor present
 80017c8:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dd0b      	ble.n	80017e8 <main+0x3b8>
					{
						tftPrint("BMA020 not Present ",0,0,0);
 80017d0:	2300      	movs	r3, #0
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	48c8      	ldr	r0, [pc, #800]	; (8001af8 <main+0x6c8>)
 80017d8:	f001 fcda 	bl	8003190 <tftPrint>
						i2cTaskTime = 500;
 80017dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017e0:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 1;
 80017e2:	4bc6      	ldr	r3, [pc, #792]	; (8001afc <main+0x6cc>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
					}
					if (ret == 0)										// LIS3DH init-procedure finished
 80017e8:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 8177 	bne.w	8001ae0 <main+0x6b0>
					{
						tftPrint("(C)24Fl I2C BMA020 ",0,0,0);
 80017f2:	2300      	movs	r3, #0
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	48c1      	ldr	r0, [pc, #772]	; (8001b00 <main+0x6d0>)
 80017fa:	f001 fcc9 	bl	8003190 <tftPrint>
						i2cTaskTime = 70;									// Tasktime for display 70ms
 80017fe:	2346      	movs	r3, #70	; 0x46
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 5;
 8001802:	4bbe      	ldr	r3, [pc, #760]	; (8001afc <main+0x6cc>)
 8001804:	2205      	movs	r2, #5
 8001806:	701a      	strb	r2, [r3, #0]
						timeTMode5 = 100;							// count of cycles in Mode5
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
					}
				}
				break;
 800180e:	e167      	b.n	8001ae0 <main+0x6b0>
		   	 	case 5:  // read BMA020 Data
				{
					LED_blue_on;
 8001810:	210d      	movs	r1, #13
 8001812:	48b8      	ldr	r0, [pc, #736]	; (8001af4 <main+0x6c4>)
 8001814:	f002 fa8e 	bl	8003d34 <gpioResetPin>

					i2cBMA020XYZ(i2c,(int16_t *) XYZraw);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001822:	f7ff fc63 	bl	80010ec <i2cBMA020XYZ>
					//low_pass(XYZraw, XYZfilt, 10);
					XYZ[0] = (float) XYZraw[0];  //skalierung 1mg/digit at +-2g
 8001826:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001832:	edc7 7a04 	vstr	s15, [r7, #16]
					XYZ[1] = (float) XYZraw[1];
 8001836:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	edc7 7a05 	vstr	s15, [r7, #20]
					XYZ[2] = (float) XYZraw[2];
 8001846:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	edc7 7a06 	vstr	s15, [r7, #24]
					sprintf(strX, "%+6.0f", XYZ[0]);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe7d 	bl	8000558 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001866:	49a7      	ldr	r1, [pc, #668]	; (8001b04 <main+0x6d4>)
 8001868:	f004 f958 	bl	8005b1c <siprintf>
					tftPrint((char *)strX,20,50,0);
 800186c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001870:	2300      	movs	r3, #0
 8001872:	2232      	movs	r2, #50	; 0x32
 8001874:	2114      	movs	r1, #20
 8001876:	f001 fc8b 	bl	8003190 <tftPrint>
					sprintf(strY, "%+6.0f", XYZ[1]);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800188a:	499e      	ldr	r1, [pc, #632]	; (8001b04 <main+0x6d4>)
 800188c:	f004 f946 	bl	8005b1c <siprintf>
					tftPrint((char *)strY,20,60,0);
 8001890:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001894:	2300      	movs	r3, #0
 8001896:	223c      	movs	r2, #60	; 0x3c
 8001898:	2114      	movs	r1, #20
 800189a:	f001 fc79 	bl	8003190 <tftPrint>
					sprintf(strZ, "%+6.0f", XYZ[2]);
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe59 	bl	8000558 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80018ae:	4995      	ldr	r1, [pc, #596]	; (8001b04 <main+0x6d4>)
 80018b0:	f004 f934 	bl	8005b1c <siprintf>
					tftPrint((char *)strZ,20,70,0);
 80018b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80018b8:	2300      	movs	r3, #0
 80018ba:	2246      	movs	r2, #70	; 0x46
 80018bc:	2114      	movs	r1, #20
 80018be:	f001 fc67 	bl	8003190 <tftPrint>
					if ((timeTMode5--) > 0)
 80018c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	f8a7 207a 	strh.w	r2, [r7, #122]	; 0x7a
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8109 	beq.w	8001ae4 <main+0x6b4>
					{
						testmode = 5;
 80018d2:	4b8a      	ldr	r3, [pc, #552]	; (8001afc <main+0x6cc>)
 80018d4:	2205      	movs	r2, #5
 80018d6:	701a      	strb	r2, [r3, #0]
						//tftPrint("T:    BMA020 (C)24Fl",0,0,0);
						i2cTaskTime = 200;
 80018d8:	23c8      	movs	r3, #200	; 0xc8
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
						LED_blue_off;
 80018dc:	210d      	movs	r1, #13
 80018de:	4885      	ldr	r0, [pc, #532]	; (8001af4 <main+0x6c4>)
 80018e0:	f002 f9fd 	bl	8003cde <gpioSetPin>

					}
		   	 	}
				break;
 80018e4:	e0fe      	b.n	8001ae4 <main+0x6b4>
		 	 	case 6:  // LIS3DH Init		   			   		{
				{
					LED_red_off;
 80018e6:	210f      	movs	r1, #15
 80018e8:	4882      	ldr	r0, [pc, #520]	; (8001af4 <main+0x6c4>)
 80018ea:	f002 f9f8 	bl	8003cde <gpioSetPin>
					int8_t ret = i2cLIS3DH_init(i2c, 0);
 80018ee:	2100      	movs	r1, #0
 80018f0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80018f4:	f001 fd94 	bl	8003420 <i2cLIS3DH_init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
					if (ret > 0)										// no LIS3DH Sensor present
 80018fe:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8001902:	2b00      	cmp	r3, #0
 8001904:	dd0b      	ble.n	800191e <main+0x4ee>
					{
						tftPrint("LIS3DH not Present ",0,0,0);
 8001906:	2300      	movs	r3, #0
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	487e      	ldr	r0, [pc, #504]	; (8001b08 <main+0x6d8>)
 800190e:	f001 fc3f 	bl	8003190 <tftPrint>
						i2cTaskTime = 500;
 8001912:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001916:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 1;
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <main+0x6cc>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
					}
					if (ret == 0)										// LIS3DH init-procedure finished
 800191e:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80e0 	bne.w	8001ae8 <main+0x6b8>
					{
						tftPrint("(C)23Fl I2C LIS3DH ",0,0,0);
 8001928:	2300      	movs	r3, #0
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	4877      	ldr	r0, [pc, #476]	; (8001b0c <main+0x6dc>)
 8001930:	f001 fc2e 	bl	8003190 <tftPrint>
						i2cTaskTime = 70;									// Tasktime for display 70ms
 8001934:	2346      	movs	r3, #70	; 0x46
 8001936:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 7;
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <main+0x6cc>)
 800193a:	2207      	movs	r2, #7
 800193c:	701a      	strb	r2, [r3, #0]
						timeTMode5 = 10;							// count of cycles in Mode5
 800193e:	230a      	movs	r3, #10
 8001940:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
					}
				}
				break;
 8001944:	e0d0      	b.n	8001ae8 <main+0x6b8>
		   		case 7:  // read LIS3DH Data
		   		{
		   			LED_blue_on;
 8001946:	210d      	movs	r1, #13
 8001948:	486a      	ldr	r0, [pc, #424]	; (8001af4 <main+0x6c4>)
 800194a:	f002 f9f3 	bl	8003d34 <gpioResetPin>

		   			Temp = i2cLIS3DH_Temp(i2c);
 800194e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001952:	f7ff fc3f 	bl	80011d4 <i2cLIS3DH_Temp>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		   			sprintf(strT, "%+3i", Temp);
 800195c:	f997 206f 	ldrsb.w	r2, [r7, #111]	; 0x6f
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	496a      	ldr	r1, [pc, #424]	; (8001b10 <main+0x6e0>)
 8001966:	4618      	mov	r0, r3
 8001968:	f004 f8d8 	bl	8005b1c <siprintf>
		   			tftPrint((char *)strT,40,40,0);
 800196c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001970:	2300      	movs	r3, #0
 8001972:	2228      	movs	r2, #40	; 0x28
 8001974:	2128      	movs	r1, #40	; 0x28
 8001976:	f001 fc0b 	bl	8003190 <tftPrint>

		   			i2cLIS3DH_XYZ(i2c,(int16_t *) XYZraw);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001984:	f7ff fc14 	bl	80011b0 <i2cLIS3DH_XYZ>

  					XYZ[0] = (float) XYZraw[0]/0x3FFF;  //skalierung 1mg/digit at +-2g
 8001988:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001b14 <main+0x6e4>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	edc7 7a04 	vstr	s15, [r7, #16]
		   			XYZ[1] = (float) XYZraw[1]/0x3FFF;
 80019a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001b14 <main+0x6e4>
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	edc7 7a05 	vstr	s15, [r7, #20]
		   			XYZ[2] = (float) XYZraw[2]/0x3FFF;
 80019b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001b14 <main+0x6e4>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	edc7 7a06 	vstr	s15, [r7, #24]
		   			sprintf(strX, "%+6.3f", XYZ[0]);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdc0 	bl	8000558 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80019e0:	494d      	ldr	r1, [pc, #308]	; (8001b18 <main+0x6e8>)
 80019e2:	f004 f89b 	bl	8005b1c <siprintf>
		   			tftPrint((char *)strX,20,50,0);
 80019e6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80019ea:	2300      	movs	r3, #0
 80019ec:	2232      	movs	r2, #50	; 0x32
 80019ee:	2114      	movs	r1, #20
 80019f0:	f001 fbce 	bl	8003190 <tftPrint>
		   			sprintf(strY, "%+6.3f", XYZ[1]);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a04:	4944      	ldr	r1, [pc, #272]	; (8001b18 <main+0x6e8>)
 8001a06:	f004 f889 	bl	8005b1c <siprintf>
		   			tftPrint((char *)strY,20,60,0);
 8001a0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a0e:	2300      	movs	r3, #0
 8001a10:	223c      	movs	r2, #60	; 0x3c
 8001a12:	2114      	movs	r1, #20
 8001a14:	f001 fbbc 	bl	8003190 <tftPrint>
		   			sprintf(strZ, "%+6.3f", XYZ[2]);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd9c 	bl	8000558 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001a28:	493b      	ldr	r1, [pc, #236]	; (8001b18 <main+0x6e8>)
 8001a2a:	f004 f877 	bl	8005b1c <siprintf>
		   			tftPrint((char *)strZ,20,70,0);
 8001a2e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001a32:	2300      	movs	r3, #0
 8001a34:	2246      	movs	r2, #70	; 0x46
 8001a36:	2114      	movs	r1, #20
 8001a38:	f001 fbaa 	bl	8003190 <tftPrint>
					if ((timeTMode5--) > 0)
 8001a3c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	f8a7 207a 	strh.w	r2, [r7, #122]	; 0x7a
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d050      	beq.n	8001aec <main+0x6bc>
					{
						testmode = 8;
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <main+0x6cc>)
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	701a      	strb	r2, [r3, #0]
						tftFillScreen(tft_BLACK);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f001 fc37 	bl	80032c4 <tftFillScreen>
						tftPrint("T:    LIS3DH (C)23Fl",0,0,0);
 8001a56:	2300      	movs	r3, #0
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	482f      	ldr	r0, [pc, #188]	; (8001b1c <main+0x6ec>)
 8001a5e:	f001 fb97 	bl	8003190 <tftPrint>
						i2cTaskTime = 20;
 8001a62:	2314      	movs	r3, #20
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
						LED_blue_off;
 8001a66:	210d      	movs	r1, #13
 8001a68:	4822      	ldr	r0, [pc, #136]	; (8001af4 <main+0x6c4>)
 8001a6a:	f002 f938 	bl	8003cde <gpioSetPin>

					}
				    break;
 8001a6e:	e03d      	b.n	8001aec <main+0x6bc>
				}
		   		case 8:  // Scope display the LIS3DH Data
				{
					i2cLIS3DH_XYZ(i2c, XYZraw);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a7a:	f7ff fb99 	bl	80011b0 <i2cLIS3DH_XYZ>

					XYZ2AlphaBeta(XYZraw, AlphaBeta);
 8001a7e:	f107 0208 	add.w	r2, r7, #8
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f97f 	bl	8001d8c <XYZ2AlphaBeta>
					if (AlBeScreen(AlphaBeta) == 0)
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fa2e 	bl	8001ef4 <AlBeScreen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d128      	bne.n	8001af0 <main+0x6c0>
					{
						Temp = i2cLIS3DH_Temp(i2c);
 8001a9e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001aa2:	f7ff fb97 	bl	80011d4 <i2cLIS3DH_Temp>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						sprintf(strT, "%+3i", Temp);
 8001aac:	f997 206f 	ldrsb.w	r2, [r7, #111]	; 0x6f
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <main+0x6e0>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 f830 	bl	8005b1c <siprintf>
						tftPrint((char *)strT,12,0,0);
 8001abc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210c      	movs	r1, #12
 8001ac6:	f001 fb63 	bl	8003190 <tftPrint>
					}
					//testmode = 2;
					break;
 8001aca:	e011      	b.n	8001af0 <main+0x6c0>
				}

//end LIS3DH function
		   	   default:
				{
					testmode = 0;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <main+0x6cc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e503      	b.n	80014dc <main+0xac>
				}
		   }  //end switch (testmode)
	   } // end if systickexp
 8001ad4:	bf00      	nop
 8001ad6:	e501      	b.n	80014dc <main+0xac>
				break;
 8001ad8:	bf00      	nop
 8001ada:	e4ff      	b.n	80014dc <main+0xac>
		   		break;
 8001adc:	bf00      	nop
 8001ade:	e4fd      	b.n	80014dc <main+0xac>
				break;
 8001ae0:	bf00      	nop
 8001ae2:	e4fb      	b.n	80014dc <main+0xac>
				break;
 8001ae4:	bf00      	nop
 8001ae6:	e4f9      	b.n	80014dc <main+0xac>
				break;
 8001ae8:	bf00      	nop
 8001aea:	e4f7      	b.n	80014dc <main+0xac>
				    break;
 8001aec:	bf00      	nop
 8001aee:	e4f5      	b.n	80014dc <main+0xac>
					break;
 8001af0:	bf00      	nop
	   if (true == timerTrigger)
 8001af2:	e4f3      	b.n	80014dc <main+0xac>
 8001af4:	40020400 	.word	0x40020400
 8001af8:	08009500 	.word	0x08009500
 8001afc:	20000012 	.word	0x20000012
 8001b00:	08009514 	.word	0x08009514
 8001b04:	08009528 	.word	0x08009528
 8001b08:	08009530 	.word	0x08009530
 8001b0c:	08009544 	.word	0x08009544
 8001b10:	08009558 	.word	0x08009558
 8001b14:	467ffc00 	.word	0x467ffc00
 8001b18:	08009560 	.word	0x08009560
 8001b1c:	08009568 	.word	0x08009568

08001b20 <I2C_SCAN>:
 */



uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <I2C_SCAN+0xd0>)
 8001b2e:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 28
	uint8_t foundAddr = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a2f      	ldr	r2, [pc, #188]	; (8001bf4 <I2C_SCAN+0xd4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <I2C_SCAN+0x22>
    {
	   port = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	75fb      	strb	r3, [r7, #23]
 8001b40:	e001      	b.n	8001b46 <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001b4e:	221c      	movs	r2, #28
 8001b50:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001b54:	221c      	movs	r2, #28
 8001b56:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f002 fde8 	bl	8004732 <i2cFindSlaveAddr>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d110      	bne.n	8001b94 <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <I2C_SCAN+0xdc>)
 8001b76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001b7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b82:	2300      	movs	r3, #0
 8001b84:	6938      	ldr	r0, [r7, #16]
 8001b86:	f001 fb03 	bl	8003190 <tftPrint>
		yPos[port] = 66;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001b8e:	2142      	movs	r1, #66	; 0x42
 8001b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f9e0 	bl	8000f5c <convDecByteToHex>
 8001b9c:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01f      	beq.n	8001be4 <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <I2C_SCAN+0xdc>)
 8001ba8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	f001 faea 	bl	8003190 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	320e      	adds	r2, #14
 8001bc8:	490b      	ldr	r1, [pc, #44]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	dd04      	ble.n	8001be4 <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <I2C_SCAN+0xd8>)
 8001bde:	211c      	movs	r1, #28
 8001be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]

}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	080095b4 	.word	0x080095b4
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	20000014 	.word	0x20000014
 8001bfc:	2000001c 	.word	0x2000001c

08001c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_kill>:

int _kill(int pid, int sig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1a:	f003 fae1 	bl	80051e0 <__errno>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2216      	movs	r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
  return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_exit>:

void _exit (int status)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffe7 	bl	8001c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c42:	e7fe      	b.n	8001c42 <_exit+0x12>

08001c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e00a      	b.n	8001c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c56:	f3af 8000 	nop.w
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	b2ca      	uxtb	r2, r1
 8001c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf0      	blt.n	8001c56 <_read+0x12>
  }

  return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e009      	b.n	8001ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	60ba      	str	r2, [r7, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf1      	blt.n	8001c90 <_write+0x12>
  }
  return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_close>:

int _close(int file)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_isatty>:

int _isatty(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f003 fa46 	bl	80051e0 <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	220c      	movs	r2, #12
 8001d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20018000 	.word	0x20018000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	20000230 	.word	0x20000230
 8001d88:	200002c0 	.word	0x200002c0

08001d8c <XYZ2AlphaBeta>:
#include "ST7735.h"
#include "xyzScope.h"


void XYZ2AlphaBeta(int16_t *XYZ_raw, float *AlphaBeta)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
		float X = (float) XYZ_raw[0]/160;  //Skalierung 10mg/digit at +-2g
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001eec <XYZ2AlphaBeta+0x160>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	edc7 7a05 	vstr	s15, [r7, #20]
		float Y = (float) XYZ_raw[1]/160;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3302      	adds	r3, #2
 8001db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001eec <XYZ2AlphaBeta+0x160>
 8001dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc8:	edc7 7a04 	vstr	s15, [r7, #16]
		float Z = (float) XYZ_raw[2]/160;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ddc:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001eec <XYZ2AlphaBeta+0x160>
 8001de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de4:	edc7 7a03 	vstr	s15, [r7, #12]

		AlphaBeta[0] = atan(X/Z);
 8001de8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001df4:	ee16 0a90 	vmov	r0, s13
 8001df8:	f7fe fbae 	bl	8000558 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f006 f904 	bl	8008010 <atan>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fed2 	bl	8000bb8 <__aeabi_d2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]
		if (Z<0)
 8001e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d51b      	bpl.n	8001e60 <XYZ2AlphaBeta+0xd4>
		{
			if (X<0)  {AlphaBeta[0] -=_pi;}
 8001e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d50a      	bpl.n	8001e4c <XYZ2AlphaBeta+0xc0>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ef0 <XYZ2AlphaBeta+0x164>
 8001e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	edc3 7a00 	vstr	s15, [r3]
 8001e4a:	e009      	b.n	8001e60 <XYZ2AlphaBeta+0xd4>
			else {AlphaBeta[0] +=_pi;}
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ef0 <XYZ2AlphaBeta+0x164>
 8001e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	edc3 7a00 	vstr	s15, [r3]
		}

		AlphaBeta[1] = atan(Y/Z);
 8001e60:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e6c:	ee16 0a90 	vmov	r0, s13
 8001e70:	f7fe fb72 	bl	8000558 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f006 f8c8 	bl	8008010 <atan>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	1d0c      	adds	r4, r1, #4
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fe94 	bl	8000bb8 <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	6023      	str	r3, [r4, #0]
		if (Z<0)
 8001e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d400      	bmi.n	8001ea4 <XYZ2AlphaBeta+0x118>
		{
			if (Y<0)  {AlphaBeta[1] -=_pi;}
			else {AlphaBeta[1] +=_pi;}
		}
}
 8001ea2:	e01f      	b.n	8001ee4 <XYZ2AlphaBeta+0x158>
			if (Y<0)  {AlphaBeta[1] -=_pi;}
 8001ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d50c      	bpl.n	8001ecc <XYZ2AlphaBeta+0x140>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001ef0 <XYZ2AlphaBeta+0x164>
 8001ec2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ec6:	edc3 7a00 	vstr	s15, [r3]
}
 8001eca:	e00b      	b.n	8001ee4 <XYZ2AlphaBeta+0x158>
			else {AlphaBeta[1] +=_pi;}
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001ef0 <XYZ2AlphaBeta+0x164>
 8001edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
}
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	43200000 	.word	0x43200000
 8001ef0:	40490625 	.word	0x40490625

08001ef4 <AlBeScreen>:

uint16_t AlBeScreen(float *AlphaBeta)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
#define bDots 12

	//const float _pi=3.141;
	const int16_t a_midxyl[3] = {30,40,14};			// alpha circle xpos, ypos ,length
	const int16_t b_midxyl[3] = {100,40,38};		// beta circle xpos, ypos ,length
	const uint16_t aColor = tft_YELLOW;
 8001efc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f00:	83fb      	strh	r3, [r7, #30]
	const uint16_t bColor = tft_MAGENTA;
 8001f02:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001f06:	83bb      	strh	r3, [r7, #28]
	static int16_t j, XYa[2][aDots], XYb[2][bDots];								// aDots Wertepaare für Winkeldarstellung alpha
	float xgrad, ygrad;

	// Variables for Oszi Function
	const int16_t oszi[3] = {92,28,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
	const uint16_t osziColor = tft_GREY;
 8001f08:	f641 1323 	movw	r3, #6435	; 0x1923
 8001f0c:	837b      	strh	r3, [r7, #26]

	static int16_t timepos = 0;


	xgrad = cos(AlphaBeta[0])*a_midxyl[2];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb20 	bl	8000558 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f006 fa06 	bl	8008330 <cos>
 8001f24:	4604      	mov	r4, r0
 8001f26:	460d      	mov	r5, r1
 8001f28:	4b8d      	ldr	r3, [pc, #564]	; (8002160 <AlBeScreen+0x26c>)
 8001f2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb00 	bl	8000534 <__aeabi_i2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe fb64 	bl	8000608 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fe36 	bl	8000bb8 <__aeabi_d2f>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[0])*a_midxyl[2];
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe faff 	bl	8000558 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f006 fa71 	bl	8008448 <sin>
 8001f66:	4604      	mov	r4, r0
 8001f68:	460d      	mov	r5, r1
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <AlBeScreen+0x26c>)
 8001f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fadf 	bl	8000534 <__aeabi_i2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fb43 	bl	8000608 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe15 	bl	8000bb8 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	613b      	str	r3, [r7, #16]
	for (j = 0; j<aDots; j++ )
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <AlBeScreen+0x270>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	e094      	b.n	80020c4 <AlBeScreen+0x1d0>
	{
		tftDrawPixel(XYa[0][j],XYa[1][j],tft_BLACK);
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <AlBeScreen+0x270>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b71      	ldr	r3, [pc, #452]	; (8002168 <AlBeScreen+0x274>)
 8001fa4:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001fa8:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <AlBeScreen+0x270>)
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	; (8002168 <AlBeScreen+0x274>)
 8001fb0:	3306      	adds	r3, #6
 8001fb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f000 fd75 	bl	8002aa8 <tftDrawPixel>
		XYa[0][j] = lround(a_midxyl[0] + xgrad*(2*j - (float)aDots+1)/(aDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8001fbe:	4b68      	ldr	r3, [pc, #416]	; (8002160 <AlBeScreen+0x26c>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <AlBeScreen+0x270>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001fe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff4:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001ff8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	ee17 0a90 	vmov	r0, s15
 8002004:	f7fe faa8 	bl	8000558 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f006 f9d7 	bl	80083c2 <lround>
 8002014:	4601      	mov	r1, r0
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <AlBeScreen+0x270>)
 8002018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201c:	461a      	mov	r2, r3
 800201e:	b209      	sxth	r1, r1
 8002020:	4b51      	ldr	r3, [pc, #324]	; (8002168 <AlBeScreen+0x274>)
 8002022:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYa[1][j] = lround(a_midxyl[1] + ygrad*(2*j - (float)aDots+1)/(aDots-1));
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <AlBeScreen+0x26c>)
 8002028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <AlBeScreen+0x270>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800204c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002050:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002054:	edd7 7a04 	vldr	s15, [r7, #16]
 8002058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800205c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8002060:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	ee17 0a90 	vmov	r0, s15
 800206c:	f7fe fa74 	bl	8000558 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f006 f9a3 	bl	80083c2 <lround>
 800207c:	4602      	mov	r2, r0
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <AlBeScreen+0x270>)
 8002080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002084:	b211      	sxth	r1, r2
 8002086:	4a38      	ldr	r2, [pc, #224]	; (8002168 <AlBeScreen+0x274>)
 8002088:	3306      	adds	r3, #6
 800208a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYa[0][j],XYa[1][j],aColor);
 800208e:	4b35      	ldr	r3, [pc, #212]	; (8002164 <AlBeScreen+0x270>)
 8002090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002094:	461a      	mov	r2, r3
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <AlBeScreen+0x274>)
 8002098:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <AlBeScreen+0x270>)
 800209e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a2:	4a31      	ldr	r2, [pc, #196]	; (8002168 <AlBeScreen+0x274>)
 80020a4:	3306      	adds	r3, #6
 80020a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80020aa:	8bfa      	ldrh	r2, [r7, #30]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f000 fcfb 	bl	8002aa8 <tftDrawPixel>
	for (j = 0; j<aDots; j++ )
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <AlBeScreen+0x270>)
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21a      	sxth	r2, r3
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <AlBeScreen+0x270>)
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <AlBeScreen+0x270>)
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	f77f af65 	ble.w	8001f9a <AlBeScreen+0xa6>
	}
	//lcd7735_drawPixel(a_midxyl[0],a_midxyl[1],ST7735_RED);

	xgrad = cos(AlphaBeta[1])*b_midxyl[2];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa3e 	bl	8000558 <__aeabi_f2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f006 f924 	bl	8008330 <cos>
 80020e8:	4604      	mov	r4, r0
 80020ea:	460d      	mov	r5, r1
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <AlBeScreen+0x278>)
 80020ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa1e 	bl	8000534 <__aeabi_i2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe fa82 	bl	8000608 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd54 	bl	8000bb8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[1])*b_midxyl[2];
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa1c 	bl	8000558 <__aeabi_f2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f006 f98e 	bl	8008448 <sin>
 800212c:	4604      	mov	r4, r0
 800212e:	460d      	mov	r5, r1
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <AlBeScreen+0x278>)
 8002132:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f9fc 	bl	8000534 <__aeabi_i2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe fa60 	bl	8000608 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fd32 	bl	8000bb8 <__aeabi_d2f>
 8002154:	4603      	mov	r3, r0
 8002156:	613b      	str	r3, [r7, #16]
	for (j = 0; j<bDots; j++ )
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <AlBeScreen+0x270>)
 800215a:	2200      	movs	r2, #0
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e09c      	b.n	800229a <AlBeScreen+0x3a6>
 8002160:	080095c0 	.word	0x080095c0
 8002164:	20000234 	.word	0x20000234
 8002168:	20000238 	.word	0x20000238
 800216c:	080095c8 	.word	0x080095c8
	{
		tftDrawPixel(XYb[0][j],XYb[1][j],tft_BLACK);
 8002170:	4b9f      	ldr	r3, [pc, #636]	; (80023f0 <AlBeScreen+0x4fc>)
 8002172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002176:	461a      	mov	r2, r3
 8002178:	4b9e      	ldr	r3, [pc, #632]	; (80023f4 <AlBeScreen+0x500>)
 800217a:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800217e:	4b9c      	ldr	r3, [pc, #624]	; (80023f0 <AlBeScreen+0x4fc>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	4a9b      	ldr	r2, [pc, #620]	; (80023f4 <AlBeScreen+0x500>)
 8002186:	330c      	adds	r3, #12
 8002188:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	f000 fc8a 	bl	8002aa8 <tftDrawPixel>
		XYb[0][j] = lround(b_midxyl[0] + xgrad*(2*j - (float)bDots+1)/(bDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002194:	4b98      	ldr	r3, [pc, #608]	; (80023f8 <AlBeScreen+0x504>)
 8002196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a2:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <AlBeScreen+0x4fc>)
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80021b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021be:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80021c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021ca:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 80021ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	ee17 0a90 	vmov	r0, s15
 80021da:	f7fe f9bd 	bl	8000558 <__aeabi_f2d>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f006 f8ec 	bl	80083c2 <lround>
 80021ea:	4601      	mov	r1, r0
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <AlBeScreen+0x4fc>)
 80021ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f2:	461a      	mov	r2, r3
 80021f4:	b209      	sxth	r1, r1
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <AlBeScreen+0x500>)
 80021f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYb[1][j] = lround(b_midxyl[1] + ygrad*(2*j - (float)bDots+1)/(bDots-1));
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <AlBeScreen+0x504>)
 80021fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220a:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <AlBeScreen+0x4fc>)
 800220c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800221e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002226:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800222a:	edd7 7a04 	vldr	s15, [r7, #16]
 800222e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002232:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002236:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	ee17 0a90 	vmov	r0, s15
 8002242:	f7fe f989 	bl	8000558 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f006 f8b8 	bl	80083c2 <lround>
 8002252:	4602      	mov	r2, r0
 8002254:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <AlBeScreen+0x4fc>)
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	b211      	sxth	r1, r2
 800225c:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <AlBeScreen+0x500>)
 800225e:	330c      	adds	r3, #12
 8002260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYb[0][j],XYb[1][j],bColor);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <AlBeScreen+0x4fc>)
 8002266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226a:	461a      	mov	r2, r3
 800226c:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <AlBeScreen+0x500>)
 800226e:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002272:	4b5f      	ldr	r3, [pc, #380]	; (80023f0 <AlBeScreen+0x4fc>)
 8002274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002278:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <AlBeScreen+0x500>)
 800227a:	330c      	adds	r3, #12
 800227c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002280:	8bba      	ldrh	r2, [r7, #28]
 8002282:	4619      	mov	r1, r3
 8002284:	f000 fc10 	bl	8002aa8 <tftDrawPixel>
	for (j = 0; j<bDots; j++ )
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <AlBeScreen+0x4fc>)
 800228a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228e:	b29b      	uxth	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	b21a      	sxth	r2, r3
 8002296:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <AlBeScreen+0x4fc>)
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <AlBeScreen+0x4fc>)
 800229c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a0:	2b0b      	cmp	r3, #11
 80022a2:	f77f af65 	ble.w	8002170 <AlBeScreen+0x27c>
	}



// kleines Oszi als Zeitmitschrieb
	int16_t Ya = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[0]/_pi);			// - ST7735 y = 0 upper line inverter direct to y Scale
 80022a6:	4b55      	ldr	r3, [pc, #340]	; (80023fc <AlBeScreen+0x508>)
 80022a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <AlBeScreen+0x508>)
 80022b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002400 <AlBeScreen+0x50c>
 80022ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d2:	ee17 3a90 	vmov	r3, s15
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	b29b      	uxth	r3, r3
 80022de:	81fb      	strh	r3, [r7, #14]
	int16_t Yb = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[1]/_pi);
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <AlBeScreen+0x508>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b44      	ldr	r3, [pc, #272]	; (80023fc <AlBeScreen+0x508>)
 80022ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002302:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002400 <AlBeScreen+0x50c>
 8002306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230e:	ee17 3a90 	vmov	r3, s15
 8002312:	b21b      	sxth	r3, r3
 8002314:	b29b      	uxth	r3, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	81bb      	strh	r3, [r7, #12]
	int16_t osziHight = oszi[1]*2;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <AlBeScreen+0x508>)
 800231e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002322:	b29b      	uxth	r3, r3
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b29b      	uxth	r3, r3
 8002328:	817b      	strh	r3, [r7, #10]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <AlBeScreen+0x510>)
 800232c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <AlBeScreen+0x508>)
 8002332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <AlBeScreen+0x508>)
 800233a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800233e:	b29b      	uxth	r3, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b29b      	uxth	r3, r3
 8002344:	b219      	sxth	r1, r3
 8002346:	8b7b      	ldrh	r3, [r7, #26]
 8002348:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800234c:	f000 fc6a 	bl	8002c24 <tftDrawFastVLine>
	if (Ya == Yb)
 8002350:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002354:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d10a      	bne.n	8002372 <AlBeScreen+0x47e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <AlBeScreen+0x510>)
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fb9c 	bl	8002aa8 <tftDrawPixel>
 8002370:	e011      	b.n	8002396 <AlBeScreen+0x4a2>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <AlBeScreen+0x510>)
 8002374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002378:	8bfa      	ldrh	r2, [r7, #30]
 800237a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb92 	bl	8002aa8 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <AlBeScreen+0x510>)
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	8bba      	ldrh	r2, [r7, #28]
 800238c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fb89 	bl	8002aa8 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <AlBeScreen+0x510>)
 8002398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <AlBeScreen+0x510>)
 80023a6:	801a      	strh	r2, [r3, #0]
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <AlBeScreen+0x510>)
 80023aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <AlBeScreen+0x508>)
 80023b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dd02      	ble.n	80023be <AlBeScreen+0x4ca>
	{
		timepos = 0;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <AlBeScreen+0x510>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <AlBeScreen+0x510>)
 80023c0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <AlBeScreen+0x508>)
 80023c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <AlBeScreen+0x508>)
 80023cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023d0:	0fda      	lsrs	r2, r3, #31
 80023d2:	4413      	add	r3, r2
 80023d4:	105b      	asrs	r3, r3, #1
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023dc:	f000 fc22 	bl	8002c24 <tftDrawFastVLine>
	return timepos;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <AlBeScreen+0x510>)
 80023e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e6:	b29b      	uxth	r3, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000234 	.word	0x20000234
 80023f4:	20000250 	.word	0x20000250
 80023f8:	080095c8 	.word	0x080095c8
 80023fc:	080095d0 	.word	0x080095d0
 8002400:	40490625 	.word	0x40490625
 8002404:	20000280 	.word	0x20000280

08002408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800240a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800240c:	f002 fe56 	bl	80050bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <LoopForever+0x6>)
  ldr r1, =_edata
 8002412:	490d      	ldr	r1, [pc, #52]	; (8002448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <LoopForever+0xe>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002428:	4c0a      	ldr	r4, [pc, #40]	; (8002454 <LoopForever+0x16>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002436:	f002 fed9 	bl	80051ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243a:	f7fe fff9 	bl	8001430 <main>

0800243e <LoopForever>:

LoopForever:
  b LoopForever
 800243e:	e7fe      	b.n	800243e <LoopForever>
  ldr   r0, =_estack
 8002440:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800244c:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8002450:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002454:	200002bc 	.word	0x200002bc

08002458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>
	...

0800245c <i2cActivate>:
// Init hardware



void i2cActivate()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <i2cActivate+0xc8>)
 8002464:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <i2cActivate+0xcc>)
 8002468:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <i2cActivate+0xd0>)
 800246c:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 fe34 	bl	80040dc <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f001 fb21 	bl	8003abc <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 800247a:	2202      	movs	r2, #2
 800247c:	2108      	movs	r1, #8
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f001 fbe2 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8002484:	2204      	movs	r2, #4
 8002486:	2108      	movs	r1, #8
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f001 fc7f 	bl	8003d8c <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 800248e:	2202      	movs	r2, #2
 8002490:	2109      	movs	r1, #9
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f001 fbd8 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8002498:	2204      	movs	r2, #4
 800249a:	2109      	movs	r1, #9
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f001 fc75 	bl	8003d8c <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 80024a2:	2201      	movs	r2, #1
 80024a4:	2108      	movs	r1, #8
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f001 fcd9 	bl	8003e5e <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 80024ac:	2201      	movs	r2, #1
 80024ae:	2109      	movs	r1, #9
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f001 fcd4 	bl	8003e5e <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 80024b6:	2300      	movs	r3, #0
 80024b8:	2211      	movs	r2, #17
 80024ba:	2100      	movs	r1, #0
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f001 febf 	bl	8004240 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f002 f924 	bl	8004710 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f001 fe07 	bl	80040dc <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 80024ce:	2202      	movs	r2, #2
 80024d0:	210a      	movs	r1, #10
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f001 fbb8 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 80024d8:	2204      	movs	r2, #4
 80024da:	210a      	movs	r1, #10
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f001 fc55 	bl	8003d8c <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 80024e2:	2202      	movs	r2, #2
 80024e4:	2103      	movs	r1, #3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f001 fbae 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 80024ec:	2209      	movs	r2, #9
 80024ee:	2103      	movs	r1, #3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 fc4b 	bl	8003d8c <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 80024f6:	2201      	movs	r2, #1
 80024f8:	210a      	movs	r1, #10
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f001 fcaf 	bl	8003e5e <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8002500:	2201      	movs	r2, #1
 8002502:	2103      	movs	r1, #3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f001 fcaa 	bl	8003e5e <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800250a:	2300      	movs	r3, #0
 800250c:	2211      	movs	r2, #17
 800250e:	2100      	movs	r1, #0
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	f001 fe95 	bl	8004240 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	f002 f8fa 	bl	8004710 <i2cEnableDevice>
#endif /* BALA2024 */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40005400 	.word	0x40005400
 8002528:	40005800 	.word	0x40005800
 800252c:	40020400 	.word	0x40020400

08002530 <ledActivate>:




void ledActivate(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8002534:	481e      	ldr	r0, [pc, #120]	; (80025b0 <ledActivate+0x80>)
 8002536:	f001 fb23 	bl	8003b80 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800253a:	2201      	movs	r2, #1
 800253c:	210f      	movs	r1, #15
 800253e:	481c      	ldr	r0, [pc, #112]	; (80025b0 <ledActivate+0x80>)
 8002540:	f001 fb82 	bl	8003c48 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8002544:	2200      	movs	r2, #0
 8002546:	210f      	movs	r1, #15
 8002548:	4819      	ldr	r0, [pc, #100]	; (80025b0 <ledActivate+0x80>)
 800254a:	f001 fc88 	bl	8003e5e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800254e:	2201      	movs	r2, #1
 8002550:	210f      	movs	r1, #15
 8002552:	4817      	ldr	r0, [pc, #92]	; (80025b0 <ledActivate+0x80>)
 8002554:	f001 fccc 	bl	8003ef0 <gpioSelectPushPullMode>
    LED_red_off;
 8002558:	210f      	movs	r1, #15
 800255a:	4815      	ldr	r0, [pc, #84]	; (80025b0 <ledActivate+0x80>)
 800255c:	f001 fbbf 	bl	8003cde <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8002560:	2201      	movs	r2, #1
 8002562:	210e      	movs	r1, #14
 8002564:	4812      	ldr	r0, [pc, #72]	; (80025b0 <ledActivate+0x80>)
 8002566:	f001 fb6f 	bl	8003c48 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 800256a:	2200      	movs	r2, #0
 800256c:	210e      	movs	r1, #14
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <ledActivate+0x80>)
 8002570:	f001 fc75 	bl	8003e5e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8002574:	2201      	movs	r2, #1
 8002576:	210e      	movs	r1, #14
 8002578:	480d      	ldr	r0, [pc, #52]	; (80025b0 <ledActivate+0x80>)
 800257a:	f001 fcb9 	bl	8003ef0 <gpioSelectPushPullMode>
    LED_green_off;
 800257e:	210e      	movs	r1, #14
 8002580:	480b      	ldr	r0, [pc, #44]	; (80025b0 <ledActivate+0x80>)
 8002582:	f001 fbac 	bl	8003cde <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8002586:	2201      	movs	r2, #1
 8002588:	210d      	movs	r1, #13
 800258a:	4809      	ldr	r0, [pc, #36]	; (80025b0 <ledActivate+0x80>)
 800258c:	f001 fb5c 	bl	8003c48 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8002590:	2200      	movs	r2, #0
 8002592:	210d      	movs	r1, #13
 8002594:	4806      	ldr	r0, [pc, #24]	; (80025b0 <ledActivate+0x80>)
 8002596:	f001 fc62 	bl	8003e5e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 800259a:	2201      	movs	r2, #1
 800259c:	210d      	movs	r1, #13
 800259e:	4804      	ldr	r0, [pc, #16]	; (80025b0 <ledActivate+0x80>)
 80025a0:	f001 fca6 	bl	8003ef0 <gpioSelectPushPullMode>
    LED_blue_off;
 80025a4:	210d      	movs	r1, #13
 80025a6:	4802      	ldr	r0, [pc, #8]	; (80025b0 <ledActivate+0x80>)
 80025a8:	f001 fb99 	bl	8003cde <gpioSetPin>
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020400 	.word	0x40020400

080025b4 <BalaHWsetup>:




void BalaHWsetup(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 80025b8:	f7ff ffba 	bl	8002530 <ledActivate>
   i2cActivate();
 80025bc:	f7ff ff4e 	bl	800245c <i2cActivate>

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8002604:	482b      	ldr	r0, [pc, #172]	; (80026b4 <initRotaryPushButton+0xb4>)
 8002606:	f001 fa59 	bl	8003abc <gpioInitPort>
	gpioInitPort(GPIOB);
 800260a:	482b      	ldr	r0, [pc, #172]	; (80026b8 <initRotaryPushButton+0xb8>)
 800260c:	f001 fa56 	bl	8003abc <gpioInitPort>
	gpioInitPort(GPIOC);
 8002610:	482a      	ldr	r0, [pc, #168]	; (80026bc <initRotaryPushButton+0xbc>)
 8002612:	f001 fa53 	bl	8003abc <gpioInitPort>
	gpioInitPort(GPIOD);
 8002616:	482a      	ldr	r0, [pc, #168]	; (80026c0 <initRotaryPushButton+0xc0>)
 8002618:	f001 fa50 	bl	8003abc <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <initRotaryPushButton+0xc4>)
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <initRotaryPushButton+0xc4>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4821      	ldr	r0, [pc, #132]	; (80026b8 <initRotaryPushButton+0xb8>)
 8002632:	f001 fb09 	bl	8003c48 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8002636:	2201      	movs	r2, #1
 8002638:	2100      	movs	r1, #0
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <initRotaryPushButton+0xb8>)
 800263c:	f001 fc58 	bl	8003ef0 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 8002640:	2200      	movs	r2, #0
 8002642:	2101      	movs	r1, #1
 8002644:	481c      	ldr	r0, [pc, #112]	; (80026b8 <initRotaryPushButton+0xb8>)
 8002646:	f001 faff 	bl	8003c48 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 800264a:	2201      	movs	r2, #1
 800264c:	2101      	movs	r1, #1
 800264e:	481a      	ldr	r0, [pc, #104]	; (80026b8 <initRotaryPushButton+0xb8>)
 8002650:	f001 fc4e 	bl	8003ef0 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8002654:	2200      	movs	r2, #0
 8002656:	210a      	movs	r1, #10
 8002658:	4816      	ldr	r0, [pc, #88]	; (80026b4 <initRotaryPushButton+0xb4>)
 800265a:	f001 faf5 	bl	8003c48 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800265e:	2201      	movs	r2, #1
 8002660:	210a      	movs	r1, #10
 8002662:	4814      	ldr	r0, [pc, #80]	; (80026b4 <initRotaryPushButton+0xb4>)
 8002664:	f001 fc44 	bl	8003ef0 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8002668:	f000 ffd2 	bl	8003610 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 800266c:	2100      	movs	r1, #0
 800266e:	4812      	ldr	r0, [pc, #72]	; (80026b8 <initRotaryPushButton+0xb8>)
 8002670:	f000 ffea 	bl	8003648 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 8002674:	210a      	movs	r1, #10
 8002676:	480f      	ldr	r0, [pc, #60]	; (80026b4 <initRotaryPushButton+0xb4>)
 8002678:	f000 ffe6 	bl	8003648 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 800267c:	2000      	movs	r0, #0
 800267e:	f001 f897 	bl	80037b0 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 8002682:	200a      	movs	r0, #10
 8002684:	f001 f894 	bl	80037b0 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8002688:	2101      	movs	r1, #1
 800268a:	2000      	movs	r0, #0
 800268c:	f001 f8b2 	bl	80037f4 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 8002690:	2100      	movs	r1, #0
 8002692:	200a      	movs	r0, #10
 8002694:	f001 f8ae 	bl	80037f4 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8002698:	2006      	movs	r0, #6
 800269a:	f7ff ff93 	bl	80025c4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 800269e:	2028      	movs	r0, #40	; 0x28
 80026a0:	f7ff ff90 	bl	80025c4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80026a4:	b662      	cpsie	i
}
 80026a6:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <initRotaryPushButton+0xc8>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	20000289 	.word	0x20000289

080026cc <EXTI0_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for ROT A.
 *               Checks ROT B and updates the position accordingly.
 */
void ROTARY_A_HANDLER(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 80026d0:	2101      	movs	r1, #1
 80026d2:	480f      	ldr	r0, [pc, #60]	; (8002710 <EXTI0_IRQHandler+0x44>)
 80026d4:	f001 fc69 	bl	8003faa <gpioGetPinState>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <EXTI0_IRQHandler+0x48>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <EXTI0_IRQHandler+0x48>)
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e004      	b.n	80026f4 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <EXTI0_IRQHandler+0x48>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <EXTI0_IRQHandler+0x48>)
 80026f2:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <EXTI0_IRQHandler+0x4c>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <EXTI0_IRQHandler+0x4c>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <EXTI0_IRQHandler+0x4c>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6153      	str	r3, [r2, #20]
	}
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40020400 	.word	0x40020400
 8002714:	20000284 	.word	0x20000284
 8002718:	40013c00 	.word	0x40013c00

0800271c <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <EXTI15_10_IRQHandler+0x2c>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <EXTI15_10_IRQHandler+0x30>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <EXTI15_10_IRQHandler+0x30>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <EXTI15_10_IRQHandler+0x30>)
 8002738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273c:	6153      	str	r3, [r2, #20]
	}
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	20000288 	.word	0x20000288
 800274c:	40013c00 	.word	0x40013c00

08002750 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <delayms+0x18>)
 800275c:	f002 fc8a 	bl	8005074 <systickDelay>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000228 	.word	0x20000228

0800276c <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <tftSPISenddata+0x20>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	220f      	movs	r2, #15
 800277e:	4904      	ldr	r1, [pc, #16]	; (8002790 <tftSPISenddata+0x24>)
 8002780:	f002 fb69 	bl	8004e56 <spiWriteByte>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000028 	.word	0x20000028
 8002790:	40020000 	.word	0x40020000

08002794 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 800279e:	2105      	movs	r1, #5
 80027a0:	4805      	ldr	r0, [pc, #20]	; (80027b8 <tftSendCmd+0x24>)
 80027a2:	f001 fac7 	bl	8003d34 <gpioResetPin>
    tftSPISenddata(cmd);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ffdf 	bl	800276c <tftSPISenddata>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40020400 	.word	0x40020400

080027bc <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80027c6:	2105      	movs	r1, #5
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <tftSendData+0x24>)
 80027ca:	f001 fa88 	bl	8003cde <gpioSetPin>
    tftSPISenddata(data);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ffcb 	bl	800276c <tftSPISenddata>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40020400 	.word	0x40020400

080027e4 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 80027ea:	4825      	ldr	r0, [pc, #148]	; (8002880 <spiInit+0x9c>)
 80027ec:	f001 f9c8 	bl	8003b80 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 80027f0:	2201      	movs	r2, #1
 80027f2:	2104      	movs	r1, #4
 80027f4:	4822      	ldr	r0, [pc, #136]	; (8002880 <spiInit+0x9c>)
 80027f6:	f001 fa27 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 80027fa:	4821      	ldr	r0, [pc, #132]	; (8002880 <spiInit+0x9c>)
 80027fc:	f001 f9c0 	bl	8003b80 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002800:	2201      	movs	r2, #1
 8002802:	2105      	movs	r1, #5
 8002804:	481e      	ldr	r0, [pc, #120]	; (8002880 <spiInit+0x9c>)
 8002806:	f001 fa1f 	bl	8003c48 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 800280a:	481e      	ldr	r0, [pc, #120]	; (8002884 <spiInit+0xa0>)
 800280c:	f001 f956 	bl	8003abc <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002810:	2201      	movs	r2, #1
 8002812:	210f      	movs	r1, #15
 8002814:	481b      	ldr	r0, [pc, #108]	; (8002884 <spiInit+0xa0>)
 8002816:	f001 fa17 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 800281a:	2201      	movs	r2, #1
 800281c:	210f      	movs	r1, #15
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <spiInit+0xa0>)
 8002820:	f001 fb66 	bl	8003ef0 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8002824:	4817      	ldr	r0, [pc, #92]	; (8002884 <spiInit+0xa0>)
 8002826:	f001 f949 	bl	8003abc <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 800282a:	2202      	movs	r2, #2
 800282c:	2105      	movs	r1, #5
 800282e:	4815      	ldr	r0, [pc, #84]	; (8002884 <spiInit+0xa0>)
 8002830:	f001 fa0a 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8002834:	2205      	movs	r2, #5
 8002836:	2105      	movs	r1, #5
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <spiInit+0xa0>)
 800283a:	f001 faa7 	bl	8003d8c <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 800283e:	2202      	movs	r2, #2
 8002840:	2107      	movs	r1, #7
 8002842:	4810      	ldr	r0, [pc, #64]	; (8002884 <spiInit+0xa0>)
 8002844:	f001 fa00 	bl	8003c48 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8002848:	2205      	movs	r2, #5
 800284a:	2107      	movs	r1, #7
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <spiInit+0xa0>)
 800284e:	f001 fa9d 	bl	8003d8c <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <spiInit+0xa4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 faa2 	bl	8004da0 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <spiInit+0xa4>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	9303      	str	r3, [sp, #12]
 8002864:	2300      	movs	r3, #0
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2300      	movs	r3, #0
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2301      	movs	r3, #1
 8002872:	2200      	movs	r2, #0
 8002874:	2103      	movs	r1, #3
 8002876:	f002 f9a5 	bl	8004bc4 <spiInitSPI>

}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40020400 	.word	0x40020400
 8002884:	40020000 	.word	0x40020000
 8002888:	20000028 	.word	0x20000028

0800288c <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 800289e:	e033      	b.n	8002908 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff73 	bl	8002794 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c8:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80028ca:	e006      	b.n	80028da <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff71 	bl	80027bc <tftSendData>
		while(numArgs--) {                   //   For each argument...
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	73ba      	strb	r2, [r7, #14]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f3      	bne.n	80028cc <commandList+0x40>
		}

		if(ms) {
 80028e4:	89bb      	ldrh	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80028f4:	89bb      	ldrh	r3, [r7, #12]
 80028f6:	2bff      	cmp	r3, #255	; 0xff
 80028f8:	d102      	bne.n	8002900 <commandList+0x74>
 80028fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028fe:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8002900:	89bb      	ldrh	r3, [r7, #12]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff24 	bl	8002750 <delayms>
	while(numCommands--) {                 // For each command...
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	73fa      	strb	r2, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1c6      	bne.n	80028a0 <commandList+0x14>
		}
	}
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8002924:	210f      	movs	r1, #15
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <commonInit+0x3c>)
 8002928:	f001 fa04 	bl	8003d34 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 800292c:	2104      	movs	r1, #4
 800292e:	480b      	ldr	r0, [pc, #44]	; (800295c <commonInit+0x40>)
 8002930:	f001 fa00 	bl	8003d34 <gpioResetPin>
	delayms(50);  //default value 500
 8002934:	2032      	movs	r0, #50	; 0x32
 8002936:	f7ff ff0b 	bl	8002750 <delayms>
	ST7735_RST1;
 800293a:	2104      	movs	r1, #4
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <commonInit+0x40>)
 800293e:	f001 f9ce 	bl	8003cde <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <commonInit+0x32>
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff9f 	bl	800288c <commandList>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400

08002960 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 800296a:	2032      	movs	r0, #50	; 0x32
 800296c:	f7ff fef0 	bl	8002750 <delayms>
	commonInit(Rcmd1);
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <tftInitR+0x58>)
 8002972:	f7ff ffd3 	bl	800291c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 800297c:	480f      	ldr	r0, [pc, #60]	; (80029bc <tftInitR+0x5c>)
 800297e:	f7ff ff85 	bl	800288c <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <tftInitR+0x60>)
 8002984:	2202      	movs	r2, #2
 8002986:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <tftInitR+0x64>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e002      	b.n	8002996 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <tftInitR+0x68>)
 8002992:	f7ff ff7b 	bl	800288c <commandList>
	}
	commandList(Rcmd3);
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <tftInitR+0x6c>)
 8002998:	f7ff ff78 	bl	800288c <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d105      	bne.n	80029ae <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80029a2:	2036      	movs	r0, #54	; 0x36
 80029a4:	f7ff fef6 	bl	8002794 <tftSendCmd>
		tftSendData(0xC0);
 80029a8:	20c0      	movs	r0, #192	; 0xc0
 80029aa:	f7ff ff07 	bl	80027bc <tftSendData>
	}

	//  tabcolor = options;
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08009a50 	.word	0x08009a50
 80029bc:	08009a8c 	.word	0x08009a8c
 80029c0:	2000028c 	.word	0x2000028c
 80029c4:	20000290 	.word	0x20000290
 80029c8:	08009a9c 	.word	0x08009a9c
 80029cc:	08009aac 	.word	0x08009aac

080029d0 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4604      	mov	r4, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	71fb      	strb	r3, [r7, #7]
 80029e2:	4603      	mov	r3, r0
 80029e4:	71bb      	strb	r3, [r7, #6]
 80029e6:	460b      	mov	r3, r1
 80029e8:	717b      	strb	r3, [r7, #5]
 80029ea:	4613      	mov	r3, r2
 80029ec:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 80029ee:	202a      	movs	r0, #42	; 0x2a
 80029f0:	f7ff fed0 	bl	8002794 <tftSendCmd>
	tftSendData(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff fee1 	bl	80027bc <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <tftSetAddrWindow+0x98>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4413      	add	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fed8 	bl	80027bc <tftSendData>
	tftSendData(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fed5 	bl	80027bc <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <tftSetAddrWindow+0x98>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	797b      	ldrb	r3, [r7, #5]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fecc 	bl	80027bc <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002a24:	202b      	movs	r0, #43	; 0x2b
 8002a26:	f7ff feb5 	bl	8002794 <tftSendCmd>
	tftSendData(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff fec6 	bl	80027bc <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <tftSetAddrWindow+0x9c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	79bb      	ldrb	r3, [r7, #6]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff febd 	bl	80027bc <tftSendData>
	tftSendData(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff feba 	bl	80027bc <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <tftSetAddrWindow+0x9c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	793b      	ldrb	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff feb1 	bl	80027bc <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 8002a5a:	202c      	movs	r0, #44	; 0x2c
 8002a5c:	f7ff fe9a 	bl	8002794 <tftSendCmd>
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	2000028c 	.word	0x2000028c
 8002a6c:	20000290 	.word	0x20000290

08002a70 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8002a7a:	2105      	movs	r1, #5
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <tftPushColor+0x34>)
 8002a7e:	f001 f92e 	bl	8003cde <gpioSetPin>
	putpix(color);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fe6e 	bl	800276c <tftSPISenddata>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fe69 	bl	800276c <tftSPISenddata>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40020400 	.word	0x40020400

08002aa8 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	80bb      	strh	r3, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db22      	blt.n	8002b08 <tftDrawPixel+0x60>
 8002ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <tftDrawPixel+0x68>)
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	da1c      	bge.n	8002b08 <tftDrawPixel+0x60>
 8002ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db18      	blt.n	8002b08 <tftDrawPixel+0x60>
 8002ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <tftDrawPixel+0x6c>)
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	da12      	bge.n	8002b08 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	b2d8      	uxtb	r0, r3
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	b2d9      	uxtb	r1, r3
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	88bb      	ldrh	r3, [r7, #4]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f7ff ff69 	bl	80029d0 <tftSetAddrWindow>
	tftPushColor(color);
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ffb5 	bl	8002a70 <tftPushColor>
 8002b06:	e000      	b.n	8002b0a <tftDrawPixel+0x62>
		return;
 8002b08:	bf00      	nop
}
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000024 	.word	0x20000024
 8002b14:	20000026 	.word	0x20000026

08002b18 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4604      	mov	r4, r0
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	80fb      	strh	r3, [r7, #6]
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80bb      	strh	r3, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]
 8002b32:	4613      	mov	r3, r2
 8002b34:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <tftFillRect+0x100>)
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	da65      	bge.n	8002c0e <tftFillRect+0xf6>
 8002b42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <tftFillRect+0x104>)
 8002b48:	8812      	ldrh	r2, [r2, #0]
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	da5f      	bge.n	8002c0e <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 8002b4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <tftFillRect+0x100>)
 8002b5a:	8812      	ldrh	r2, [r2, #0]
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	dd05      	ble.n	8002b6c <tftFillRect+0x54>
		{
		w = width  - x;
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <tftFillRect+0x100>)
 8002b62:	881a      	ldrh	r2, [r3, #0]
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8002b6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a29      	ldr	r2, [pc, #164]	; (8002c1c <tftFillRect+0x104>)
 8002b78:	8812      	ldrh	r2, [r2, #0]
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	dd05      	ble.n	8002b8a <tftFillRect+0x72>
		{
		h = height - y;
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <tftFillRect+0x104>)
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	88bb      	ldrh	r3, [r7, #4]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	b2d8      	uxtb	r0, r3
 8002b8e:	88bb      	ldrh	r3, [r7, #4]
 8002b90:	b2d9      	uxtb	r1, r3
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b2dc      	uxtb	r4, r3
 8002ba2:	88bb      	ldrh	r3, [r7, #4]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	883b      	ldrh	r3, [r7, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	f7ff ff0c 	bl	80029d0 <tftSetAddrWindow>

	ST7735_DC1;
 8002bb8:	2105      	movs	r1, #5
 8002bba:	4819      	ldr	r0, [pc, #100]	; (8002c20 <tftFillRect+0x108>)
 8002bbc:	f001 f88f 	bl	8003cde <gpioSetPin>
	for(y=h; y>0; y--)
 8002bc0:	883b      	ldrh	r3, [r7, #0]
 8002bc2:	80bb      	strh	r3, [r7, #4]
 8002bc4:	e01e      	b.n	8002c04 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	80fb      	strh	r3, [r7, #6]
 8002bca:	e011      	b.n	8002bf0 <tftFillRect+0xd8>
		{
			putpix(color);
 8002bcc:	8b3b      	ldrh	r3, [r7, #24]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fdc9 	bl	800276c <tftSPISenddata>
 8002bda:	8b3b      	ldrh	r3, [r7, #24]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fdc4 	bl	800276c <tftSPISenddata>
		for(x=w; x>0; x--)
 8002be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	80fb      	strh	r3, [r7, #6]
 8002bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	dce9      	bgt.n	8002bcc <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8002bf8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	80bb      	strh	r3, [r7, #4]
 8002c04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	dcdc      	bgt.n	8002bc6 <tftFillRect+0xae>
 8002c0c:	e000      	b.n	8002c10 <tftFillRect+0xf8>
		return;
 8002c0e:	bf00      	nop
		}
	}
}
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000024 	.word	0x20000024
 8002c1c:	20000026 	.word	0x20000026
 8002c20:	40020400 	.word	0x40020400

08002c24 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	4603      	mov	r3, r0
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	807b      	strh	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <tftDrawFastVLine+0xb4>)
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	da3f      	bge.n	8002cce <tftDrawFastVLine+0xaa>
 8002c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <tftDrawFastVLine+0xb8>)
 8002c54:	8812      	ldrh	r2, [r2, #0]
 8002c56:	4293      	cmp	r3, r2
 8002c58:	da39      	bge.n	8002cce <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8002c5a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <tftDrawFastVLine+0xb8>)
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	dd05      	ble.n	8002c78 <tftDrawFastVLine+0x54>
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <tftDrawFastVLine+0xb8>)
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	88bb      	ldrh	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	88bb      	ldrh	r3, [r7, #4]
 8002c7e:	b2d9      	uxtb	r1, r3
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	b2dc      	uxtb	r4, r3
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4622      	mov	r2, r4
 8002c96:	f7ff fe9b 	bl	80029d0 <tftSetAddrWindow>

	ST7735_DC1;
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	4810      	ldr	r0, [pc, #64]	; (8002ce0 <tftDrawFastVLine+0xbc>)
 8002c9e:	f001 f81e 	bl	8003cde <gpioSetPin>
	while (h--) {
 8002ca2:	e00b      	b.n	8002cbc <tftDrawFastVLine+0x98>
		putpix(color);
 8002ca4:	883b      	ldrh	r3, [r7, #0]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fd5d 	bl	800276c <tftSPISenddata>
 8002cb2:	883b      	ldrh	r3, [r7, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd58 	bl	800276c <tftSPISenddata>
	while (h--) {
 8002cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	807a      	strh	r2, [r7, #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1eb      	bne.n	8002ca4 <tftDrawFastVLine+0x80>
 8002ccc:	e000      	b.n	8002cd0 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8002cce:	bf00      	nop
	}
}
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000024 	.word	0x20000024
 8002cdc:	20000026 	.word	0x20000026
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <tftSetFont+0x40>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <tftSetFont+0x40>)
 8002cf8:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	785a      	ldrb	r2, [r3, #1]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <tftSetFont+0x40>)
 8002d00:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	789a      	ldrb	r2, [r3, #2]
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <tftSetFont+0x40>)
 8002d08:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3303      	adds	r3, #3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <tftSetFont+0x40>)
 8002d14:	811a      	strh	r2, [r3, #8]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000298 	.word	0x20000298

08002d28 <tftPrintChar>:
 * charval is ASCII-Value of char to print
 * x is x position of character
 * y is y position of character
*/
void tftPrintChar(uint8_t charval, int x, int y)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002d36:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d38:	791b      	ldrb	r3, [r3, #4]
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	d803      	bhi.n	8002d46 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	77bb      	strb	r3, [r7, #30]
 8002d44:	e003      	b.n	8002d4e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d48:	791b      	ldrb	r3, [r3, #4]
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <tftPrintChar+0x1e4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d15e      	bne.n	8002e14 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	b2d8      	uxtb	r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d60:	791a      	ldrb	r2, [r3, #4]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b2dc      	uxtb	r4, r3
 8002d6e:	4b66      	ldr	r3, [pc, #408]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d70:	795a      	ldrb	r2, [r3, #5]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4622      	mov	r2, r4
 8002d80:	f7ff fe26 	bl	80029d0 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4a60      	ldr	r2, [pc, #384]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d88:	7992      	ldrb	r2, [r2, #6]
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	7fbb      	ldrb	r3, [r7, #30]
 8002d90:	b299      	uxth	r1, r3
 8002d92:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <tftPrintChar+0x1e0>)
 8002d94:	795b      	ldrb	r3, [r3, #5]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	fb11 f303 	smulbb	r3, r1, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	fb12 f303 	smulbb	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3304      	adds	r3, #4
 8002da6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	83bb      	strh	r3, [r7, #28]
 8002dac:	e029      	b.n	8002e02 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <tftPrintChar+0x1e0>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	8b7b      	ldrh	r3, [r7, #26]
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e017      	b.n	8002df0 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002dc0:	7cfa      	ldrb	r2, [r7, #19]
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	f1c3 0307 	rsb	r3, r3, #7
 8002dc8:	fa42 f303 	asr.w	r3, r2, r3
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002dd4:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <tftPrintChar+0x1e8>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe49 	bl	8002a70 <tftPushColor>
 8002dde:	e004      	b.n	8002dea <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <tftPrintChar+0x1ec>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fe43 	bl	8002a70 <tftPushColor>
			for(i=0;i<8;i++)
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
 8002dec:	3301      	adds	r3, #1
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
 8002df2:	2b07      	cmp	r3, #7
 8002df4:	d9e4      	bls.n	8002dc0 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8002dfc:	8bbb      	ldrh	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	83bb      	strh	r3, [r7, #28]
 8002e02:	8bba      	ldrh	r2, [r7, #28]
 8002e04:	7fbb      	ldrb	r3, [r7, #30]
 8002e06:	4940      	ldr	r1, [pc, #256]	; (8002f08 <tftPrintChar+0x1e0>)
 8002e08:	7949      	ldrb	r1, [r1, #5]
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dbcd      	blt.n	8002dae <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002e12:	e075      	b.n	8002f00 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <tftPrintChar+0x1e0>)
 8002e18:	7992      	ldrb	r2, [r2, #6]
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	7fbb      	ldrb	r3, [r7, #30]
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <tftPrintChar+0x1e0>)
 8002e24:	795b      	ldrb	r3, [r3, #5]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	fb11 f303 	smulbb	r3, r1, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	fb12 f303 	smulbb	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3304      	adds	r3, #4
 8002e36:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	83bb      	strh	r3, [r7, #28]
 8002e3c:	e05a      	b.n	8002ef4 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e04b      	b.n	8002edc <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <tftPrintChar+0x1e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	8b79      	ldrh	r1, [r7, #26]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	440a      	add	r2, r1
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e03a      	b.n	8002ed0 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
 8002e60:	4413      	add	r3, r2
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2d8      	uxtb	r0, r3
 8002e70:	8bbb      	ldrh	r3, [r7, #28]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2d9      	uxtb	r1, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2dc      	uxtb	r4, r3
 8002e96:	8bbb      	ldrh	r3, [r7, #28]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	f7ff fd92 	bl	80029d0 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8002eac:	7cfa      	ldrb	r2, [r7, #19]
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	f1c3 0307 	rsb	r3, r3, #7
 8002eb4:	fa42 f303 	asr.w	r3, r2, r3
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <tftPrintChar+0x1e8>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fdd3 	bl	8002a70 <tftPushColor>
				for(i=0;i<8;i++)
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
 8002ed2:	2b07      	cmp	r3, #7
 8002ed4:	d9c1      	bls.n	8002e5a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	7fbb      	ldrb	r3, [r7, #30]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbaf      	blt.n	8002e44 <tftPrintChar+0x11c>
			temp+=(fz);
 8002ee4:	7fbb      	ldrb	r3, [r7, #30]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	8b7b      	ldrh	r3, [r7, #26]
 8002eea:	4413      	add	r3, r2
 8002eec:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002eee:	8bbb      	ldrh	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	83bb      	strh	r3, [r7, #28]
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <tftPrintChar+0x1e0>)
 8002ef6:	795b      	ldrb	r3, [r3, #5]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	8bba      	ldrh	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d39e      	bcc.n	8002e3e <tftPrintChar+0x116>
}
 8002f00:	bf00      	nop
 8002f02:	3724      	adds	r7, #36	; 0x24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}
 8002f08:	20000298 	.word	0x20000298
 8002f0c:	200002a4 	.word	0x200002a4
 8002f10:	2000002c 	.word	0x2000002c
 8002f14:	200002a6 	.word	0x200002a6

08002f18 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b08e      	sub	sp, #56	; 0x38
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002f2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f2c:	f7fd fb02 	bl	8000534 <__aeabi_i2d>
 8002f30:	a395      	add	r3, pc, #596	; (adr r3, 8003188 <tftRotateChar+0x270>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fb67 	bl	8000608 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <tftRotateChar+0x260>)
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	2b07      	cmp	r3, #7
 8002f48:	d804      	bhi.n	8002f54 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <tftRotateChar+0x260>)
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002f52:	e017      	b.n	8002f84 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <tftRotateChar+0x260>)
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	4a85      	ldr	r2, [pc, #532]	; (8003178 <tftRotateChar+0x260>)
 8002f62:	7992      	ldrb	r2, [r2, #6]
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f6c:	b299      	uxth	r1, r3
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <tftRotateChar+0x260>)
 8002f70:	795b      	ldrb	r3, [r3, #5]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	fb11 f303 	smulbb	r3, r1, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	fb12 f303 	smulbb	r3, r2, r3
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3304      	adds	r3, #4
 8002f82:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002f8a:	e0e6      	b.n	800315a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f90:	e0d2      	b.n	8003138 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8002f92:	4b79      	ldr	r3, [pc, #484]	; (8003178 <tftRotateChar+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9a:	440a      	add	r2, r1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002fa8:	e0be      	b.n	8003128 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8002faa:	68b8      	ldr	r0, [r7, #8]
 8002fac:	f7fd fac2 	bl	8000534 <__aeabi_i2d>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	441a      	add	r2, r3
 8002fbe:	4b6e      	ldr	r3, [pc, #440]	; (8003178 <tftRotateChar+0x260>)
 8002fc0:	791b      	ldrb	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fab1 	bl	8000534 <__aeabi_i2d>
 8002fd2:	4680      	mov	r8, r0
 8002fd4:	4689      	mov	r9, r1
 8002fd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fda:	f005 f9a9 	bl	8008330 <cos>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	f7fd fb0f 	bl	8000608 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4692      	mov	sl, r2
 8002ff0:	469b      	mov	fp, r3
 8002ff2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fa9c 	bl	8000534 <__aeabi_i2d>
 8002ffc:	4680      	mov	r8, r0
 8002ffe:	4689      	mov	r9, r1
 8003000:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003004:	f005 fa20 	bl	8008448 <sin>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4640      	mov	r0, r8
 800300e:	4649      	mov	r1, r9
 8003010:	f7fd fafa 	bl	8000608 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4650      	mov	r0, sl
 800301a:	4659      	mov	r1, fp
 800301c:	f7fd f93c 	bl	8000298 <__aeabi_dsub>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd f938 	bl	800029c <__adddf3>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd98 	bl	8000b68 <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd fa79 	bl	8000534 <__aeabi_i2d>
 8003042:	4604      	mov	r4, r0
 8003044:	460d      	mov	r5, r1
 8003046:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fa72 	bl	8000534 <__aeabi_i2d>
 8003050:	4680      	mov	r8, r0
 8003052:	4689      	mov	r9, r1
 8003054:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003058:	f005 f96a 	bl	8008330 <cos>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4640      	mov	r0, r8
 8003062:	4649      	mov	r1, r9
 8003064:	f7fd fad0 	bl	8000608 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4692      	mov	sl, r2
 800306e:	469b      	mov	fp, r3
 8003070:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	441a      	add	r2, r3
 800307a:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <tftRotateChar+0x260>)
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	4619      	mov	r1, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa53 	bl	8000534 <__aeabi_i2d>
 800308e:	4680      	mov	r8, r0
 8003090:	4689      	mov	r9, r1
 8003092:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003096:	f005 f9d7 	bl	8008448 <sin>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4640      	mov	r0, r8
 80030a0:	4649      	mov	r1, r9
 80030a2:	f7fd fab1 	bl	8000608 <__aeabi_dmul>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4650      	mov	r0, sl
 80030ac:	4659      	mov	r1, fp
 80030ae:	f7fd f8f5 	bl	800029c <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4620      	mov	r0, r4
 80030b8:	4629      	mov	r1, r5
 80030ba:	f7fd f8ef 	bl	800029c <__adddf3>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	f7fd fd4f 	bl	8000b68 <__aeabi_d2iz>
 80030ca:	4603      	mov	r3, r0
 80030cc:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	b2d8      	uxtb	r0, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	b2d9      	uxtb	r1, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f7ff fc73 	bl	80029d0 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 80030ea:	7ffa      	ldrb	r2, [r7, #31]
 80030ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030f0:	f1c3 0307 	rsb	r3, r3, #7
 80030f4:	fa42 f303 	asr.w	r3, r2, r3
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <tftRotateChar+0x264>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fcb3 	bl	8002a70 <tftPushColor>
 800310a:	e008      	b.n	800311e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <tftRotateChar+0x268>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <tftRotateChar+0x26c>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fca9 	bl	8002a70 <tftPushColor>
			for(i=0;i<8;i++)
 800311e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003122:	3301      	adds	r3, #1
 8003124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800312c:	2b07      	cmp	r3, #7
 800312e:	f67f af3c 	bls.w	8002faa <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	3301      	adds	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003138:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800313c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313e:	429a      	cmp	r2, r3
 8003140:	f6ff af27 	blt.w	8002f92 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8003144:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003148:	b29a      	uxth	r2, r3
 800314a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800314c:	4413      	add	r3, r2
 800314e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8003150:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003154:	3301      	adds	r3, #1
 8003156:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <tftRotateChar+0x260>)
 800315c:	795b      	ldrb	r3, [r3, #5]
 800315e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003162:	429a      	cmp	r2, r3
 8003164:	f4ff af12 	bcc.w	8002f8c <tftRotateChar+0x74>
	}
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3738      	adds	r7, #56	; 0x38
 800316e:	46bd      	mov	sp, r7
 8003170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003174:	f3af 8000 	nop.w
 8003178:	20000298 	.word	0x20000298
 800317c:	2000002c 	.word	0x2000002c
 8003180:	200002a4 	.word	0x200002a4
 8003184:	200002a6 	.word	0x200002a6
 8003188:	1eb851ec 	.word	0x1eb851ec
 800318c:	3f91eb85 	.word	0x3f91eb85

08003190 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7fd f818 	bl	80001e0 <strlen>
 80031b0:	4603      	mov	r3, r0
 80031b2:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f113 0f02 	cmn.w	r3, #2
 80031ba:	d10a      	bne.n	80031d2 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <tftPrint+0x128>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <tftPrint+0x12c>)
 80031c4:	791b      	ldrb	r3, [r3, #4]
 80031c6:	4619      	mov	r1, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d10d      	bne.n	80031f6 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <tftPrint+0x130>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <tftPrint+0x12c>)
 80031e2:	791b      	ldrb	r3, [r3, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	0fda      	lsrs	r2, r3, #31
 80031f0:	4413      	add	r3, r2
 80031f2:	105b      	asrs	r3, r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e053      	b.n	80032a4 <tftPrint+0x114>
	{
		lettercount++;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	3301      	adds	r3, #1
 8003200:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d112      	bne.n	800322e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	60fa      	str	r2, [r7, #12]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	69f9      	ldr	r1, [r7, #28]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd87 	bl	8002d28 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 800321a:	4b28      	ldr	r3, [pc, #160]	; (80032bc <tftPrint+0x12c>)
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e00a      	b.n	8003244 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60fa      	str	r2, [r7, #12]
 8003234:	7818      	ldrb	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	f7ff fe6a 	bl	8002f18 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8003244:	f000 f8a8 	bl	8003398 <tftGetWidth>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <tftPrint+0x12c>)
 800324e:	791b      	ldrb	r3, [r3, #4]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	4293      	cmp	r3, r2
 800325c:	db1f      	blt.n	800329e <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <tftPrint+0x12c>)
 8003268:	795b      	ldrb	r3, [r3, #5]
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8003272:	f000 f89d 	bl	80033b0 <tftGetHeight>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <tftPrint+0x12c>)
 800327c:	795b      	ldrb	r3, [r3, #5]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	dd09      	ble.n	800329a <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8003286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800328a:	f7ff fa61 	bl	8002750 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f818 	bl	80032c4 <tftFillScreen>
				y=0; // start at top left of new Page
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	e001      	b.n	800329e <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	3301      	adds	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dba7      	blt.n	80031fc <tftPrint+0x6c>
			}

		}

	}
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000024 	.word	0x20000024
 80032bc:	20000298 	.word	0x20000298
 80032c0:	20000026 	.word	0x20000026

080032c4 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <tftFillScreen+0x2c>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <tftFillScreen+0x30>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b219      	sxth	r1, r3
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	460b      	mov	r3, r1
 80032e0:	2100      	movs	r1, #0
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7ff fc18 	bl	8002b18 <tftFillRect>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000024 	.word	0x20000024
 80032f4:	20000026 	.word	0x20000026

080032f8 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800330a:	2036      	movs	r0, #54	; 0x36
 800330c:	f7ff fa42 	bl	8002794 <tftSendCmd>

	switch (rotation)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d836      	bhi.n	8003384 <tftSetRotation+0x8c>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <tftSetRotation+0x24>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003341 	.word	0x08003341
 8003324:	08003355 	.word	0x08003355
 8003328:	08003369 	.word	0x08003369
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800332c:	20c0      	movs	r0, #192	; 0xc0
 800332e:	f7ff fa45 	bl	80027bc <tftSendData>
		width  = ST7735_TFTWIDTH;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <tftSetRotation+0x94>)
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <tftSetRotation+0x98>)
 800333a:	22a0      	movs	r2, #160	; 0xa0
 800333c:	801a      	strh	r2, [r3, #0]
		break;
 800333e:	e01d      	b.n	800337c <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8003340:	20a0      	movs	r0, #160	; 0xa0
 8003342:	f7ff fa3b 	bl	80027bc <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <tftSetRotation+0x94>)
 8003348:	22a0      	movs	r2, #160	; 0xa0
 800334a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <tftSetRotation+0x98>)
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	801a      	strh	r2, [r3, #0]
		   break;
 8003352:	e013      	b.n	800337c <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 8003354:	2000      	movs	r0, #0
 8003356:	f7ff fa31 	bl	80027bc <tftSendData>
		   width  = ST7735_TFTWIDTH;
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <tftSetRotation+0x94>)
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <tftSetRotation+0x98>)
 8003362:	22a0      	movs	r2, #160	; 0xa0
 8003364:	801a      	strh	r2, [r3, #0]
		   break;
 8003366:	e009      	b.n	800337c <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8003368:	2060      	movs	r0, #96	; 0x60
 800336a:	f7ff fa27 	bl	80027bc <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <tftSetRotation+0x94>)
 8003370:	22a0      	movs	r2, #160	; 0xa0
 8003372:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <tftSetRotation+0x98>)
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	801a      	strh	r2, [r3, #0]
		   break;
 800337a:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <tftSetRotation+0x9c>)
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	7013      	strb	r3, [r2, #0]
 8003382:	e000      	b.n	8003386 <tftSetRotation+0x8e>
		   return;
 8003384:	bf00      	nop
}
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000024 	.word	0x20000024
 8003390:	20000026 	.word	0x20000026
 8003394:	20000294 	.word	0x20000294

08003398 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <tftGetWidth+0x14>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	20000024 	.word	0x20000024

080033b0 <tftGetHeight>:


uint8_t tftGetHeight()
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <tftGetHeight+0x14>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000026 	.word	0x20000026

080033c8 <sensor_presCheck>:

bool enable3DGSensor = false;
AccelerometerSensor currentSensor = SENSOR_NONE;

int8_t sensor_presCheck(I2C_TypeDef *i2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

	i2cReadByteFromSlaveReg(i2c, i2cAddr_Sensor[currentSensor], DummyReg[currentSensor], &ret);
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <sensor_presCheck+0x48>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <sensor_presCheck+0x4c>)
 80033dc:	5c99      	ldrb	r1, [r3, r2]
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <sensor_presCheck+0x48>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <sensor_presCheck+0x50>)
 80033e6:	5c9a      	ldrb	r2, [r3, r2]
 80033e8:	f107 030f 	add.w	r3, r7, #15
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 f822 	bl	8004436 <i2cReadByteFromSlaveReg>
	//spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (DummyReg|spiRead), ret, 2);
	if (dummyVal[currentSensor] == ret)
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <sensor_presCheck+0x48>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <sensor_presCheck+0x54>)
 80033fa:	5c9a      	ldrb	r2, [r3, r2]
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d101      	bne.n	8003406 <sensor_presCheck+0x3e>
	{
		return 1;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <sensor_presCheck+0x40>
	}
	else
	{
		return 0;
 8003406:	2300      	movs	r3, #0
	}
	return 1;
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200002a8 	.word	0x200002a8
 8003414:	08009ad8 	.word	0x08009ad8
 8003418:	08009adc 	.word	0x08009adc
 800341c:	08009ae0 	.word	0x08009ae0

08003420 <i2cLIS3DH_init>:

}


int8_t i2cLIS3DH_init(I2C_TypeDef *i2c, int8_t restart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
	int8_t step = stepStart[SENSOR_LIS3DH];
 800342c:	23f9      	movs	r3, #249	; 0xf9
 800342e:	73fb      	strb	r3, [r7, #15]

	if ((restart != 0) && (step == stepStart[SENSOR_LIS3DH]))
 8003430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <i2cLIS3DH_init+0x30>
 8003438:	f06f 0206 	mvn.w	r2, #6
 800343c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003440:	4293      	cmp	r3, r2
 8003442:	d105      	bne.n	8003450 <i2cLIS3DH_init+0x30>
	{
		step = stepStart[SENSOR_LIS3DH] + 1;
 8003444:	f06f 0306 	mvn.w	r3, #6
 8003448:	b2db      	uxtb	r3, r3
 800344a:	3301      	adds	r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	73fb      	strb	r3, [r7, #15]
	}
	switch (step)
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	3307      	adds	r3, #7
 8003456:	2b06      	cmp	r3, #6
 8003458:	d865      	bhi.n	8003526 <i2cLIS3DH_init+0x106>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <i2cLIS3DH_init+0x40>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	0800347d 	.word	0x0800347d
 8003464:	0800348b 	.word	0x0800348b
 8003468:	080034a1 	.word	0x080034a1
 800346c:	080034bb 	.word	0x080034bb
 8003470:	080034d5 	.word	0x080034d5
 8003474:	080034ef 	.word	0x080034ef
 8003478:	0800350d 	.word	0x0800350d
	case -7:		// CLK Speed von I2C auf Fast Mode
	{
		//i2cResetDevice(i2c);
		//i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_400);

		i2cSetClkSpd(i2c, I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 800347c:	2104      	movs	r1, #4
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fe60 	bl	8004144 <i2cSetClkSpd>
		//i2cEnableDevice(i2c);
		step = -6;
 8003484:	23fa      	movs	r3, #250	; 0xfa
 8003486:	73fb      	strb	r3, [r7, #15]
		break;
 8003488:	e04f      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	case -6:		//
	{
		if (1 == sensor_presCheck(i2c))
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff9c 	bl	80033c8 <sensor_presCheck>
 8003490:	4603      	mov	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <i2cLIS3DH_init+0x7c>
		{
			step = -5;
 8003496:	23fb      	movs	r3, #251	; 0xfb
 8003498:	73fb      	strb	r3, [r7, #15]
		} else
		{
			return 1;		//1 = failure
		}
		break;
 800349a:	e046      	b.n	800352a <i2cLIS3DH_init+0x10a>
			return 1;		//1 = failure
 800349c:	2301      	movs	r3, #1
 800349e:	e046      	b.n	800352e <i2cLIS3DH_init+0x10e>
	}
	case -5:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg5, 0b10000000); // reboot memory content
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <i2cLIS3DH_init+0x118>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <i2cLIS3DH_init+0x11c>)
 80034a8:	5c99      	ldrb	r1, [r3, r2]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	2224      	movs	r2, #36	; 0x24
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 ff16 	bl	80042e0 <i2cSendByteToSlaveReg>
		step = -4;
 80034b4:	23fc      	movs	r3, #252	; 0xfc
 80034b6:	73fb      	strb	r3, [r7, #15]
		break;
 80034b8:	e037      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	case -4:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg4, 0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <i2cLIS3DH_init+0x118>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <i2cLIS3DH_init+0x11c>)
 80034c2:	5c99      	ldrb	r1, [r3, r2]
 80034c4:	238c      	movs	r3, #140	; 0x8c
 80034c6:	2223      	movs	r2, #35	; 0x23
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 ff09 	bl	80042e0 <i2cSendByteToSlaveReg>
		step = -3;
 80034ce:	23fd      	movs	r3, #253	; 0xfd
 80034d0:	73fb      	strb	r3, [r7, #15]
		break;
 80034d2:	e02a      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	case -3:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg1,
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <i2cLIS3DH_init+0x118>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <i2cLIS3DH_init+0x11c>)
 80034dc:	5c99      	ldrb	r1, [r3, r2]
 80034de:	2397      	movs	r3, #151	; 0x97
 80034e0:	2220      	movs	r2, #32
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fefc 	bl	80042e0 <i2cSendByteToSlaveReg>
				(uint8_t) 0b10010111); //
		step = -2;
 80034e8:	23fe      	movs	r3, #254	; 0xfe
 80034ea:	73fb      	strb	r3, [r7, #15]
		break;
 80034ec:	e01d      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	case -2:
	{
		uint8_t LIS3DH_Reg4 = 0b10001000;	// BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80034ee:	2388      	movs	r3, #136	; 0x88
 80034f0:	73bb      	strb	r3, [r7, #14]
#ifdef XYZopt
//			LIS3DH_Reg4 |=        0b01000000;			// enable to switch High and Low Byte order. special Hint: High Byte first for a fast read sequence to array of int16
#endif
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg4, LIS3DH_Reg4); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <i2cLIS3DH_init+0x118>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <i2cLIS3DH_init+0x11c>)
 80034fa:	5c99      	ldrb	r1, [r3, r2]
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2223      	movs	r2, #35	; 0x23
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 feed 	bl	80042e0 <i2cSendByteToSlaveReg>
		step = -1;
 8003506:	23ff      	movs	r3, #255	; 0xff
 8003508:	73fb      	strb	r3, [r7, #15]
		break;
 800350a:	e00e      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	case -1:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_ADCConfReg,
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <i2cLIS3DH_init+0x118>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <i2cLIS3DH_init+0x11c>)
 8003514:	5c99      	ldrb	r1, [r3, r2]
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	221f      	movs	r2, #31
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fee0 	bl	80042e0 <i2cSendByteToSlaveReg>
				(uint8_t) 0b11000000); // ADC Temp 0 0 0 0 0 0

		step = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
		break;
 8003524:	e001      	b.n	800352a <i2cLIS3DH_init+0x10a>
	}
	default:
	{
		step = -7;
 8003526:	23f9      	movs	r3, #249	; 0xf9
 8003528:	73fb      	strb	r3, [r7, #15]
	}
	}
	return step;
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200002a8 	.word	0x200002a8
 800353c:	08009ad8 	.word	0x08009ad8

08003540 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d03e      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d03b      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d038      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d035      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d032      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d02f      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d02c      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b07      	cmp	r3, #7
 8003578:	d029      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d026      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	2b09      	cmp	r3, #9
 8003584:	d023      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b0a      	cmp	r3, #10
 800358a:	d020      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	2b0b      	cmp	r3, #11
 8003590:	d01d      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d01a      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	2b0d      	cmp	r3, #13
 800359c:	d017      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b0e      	cmp	r3, #14
 80035a2:	d014      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d011      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d00e      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	2b11      	cmp	r3, #17
 80035b4:	d00b      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b12      	cmp	r3, #18
 80035ba:	d008      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2b14      	cmp	r3, #20
 80035c0:	d005      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b15      	cmp	r3, #21
 80035c6:	d002      	beq.n	80035ce <extiVerifyIrqNum+0x8e>
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b16      	cmp	r3, #22
 80035cc:	d101      	bne.n	80035d2 <extiVerifyIrqNum+0x92>
    {
        return true;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <extiVerifyIrqNum+0x94>
    }
    return false;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <extiVerifyTrigger+0x1c>
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d002      	beq.n	80035fc <extiVerifyTrigger+0x1c>
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d101      	bne.n	8003600 <extiVerifyTrigger+0x20>
    {
        return true;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <extiVerifyTrigger+0x22>
    }
    return false;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8003616:	2300      	movs	r3, #0
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	e008      	b.n	800362e <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <extiInit+0x34>)
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	3302      	adds	r3, #2
 8003622:	2100      	movs	r1, #0
 8003624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	3301      	adds	r3, #1
 800362c:	71fb      	strb	r3, [r7, #7]
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d9f3      	bls.n	800361c <extiInit+0xc>
    }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40013800 	.word	0x40013800

08003648 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f937 	bl	80038d4 <gpioVerifyPort>
 8003666:	4603      	mov	r3, r0
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 8003672:	23ff      	movs	r3, #255	; 0xff
 8003674:	e08a      	b.n	800378c <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f95d 	bl	8003938 <gpioVerifyPin>
 800367e:	4603      	mov	r3, r0
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 800368a:	23fe      	movs	r3, #254	; 0xfe
 800368c:	e07e      	b.n	800378c <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d841      	bhi.n	8003718 <extiConfigIrq+0xd0>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <extiConfigIrq+0x54>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036dd 	.word	0x080036dd
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036e9 	.word	0x080036e9
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080036e9 	.word	0x080036e9
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003709 	.word	0x08003709
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
            break;
 80036e6:	e017      	b.n	8003718 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	3b04      	subs	r3, #4
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	73bb      	strb	r3, [r7, #14]
            index = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
            break;
 80036f6:	e00f      	b.n	8003718 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	3b08      	subs	r3, #8
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8003702:	2302      	movs	r3, #2
 8003704:	73fb      	strb	r3, [r7, #15]
            break;
 8003706:	e007      	b.n	8003718 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	3b0c      	subs	r3, #12
 800370c:	b2db      	uxtb	r3, r3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
            break;
 8003716:	bf00      	nop
    }

    if (GPIOA == port)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <extiConfigIrq+0x14c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d102      	bne.n	8003726 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8003720:	2300      	movs	r3, #0
 8003722:	737b      	strb	r3, [r7, #13]
 8003724:	e021      	b.n	800376a <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <extiConfigIrq+0x150>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d102      	bne.n	8003734 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 800372e:	2301      	movs	r3, #1
 8003730:	737b      	strb	r3, [r7, #13]
 8003732:	e01a      	b.n	800376a <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a19      	ldr	r2, [pc, #100]	; (800379c <extiConfigIrq+0x154>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d102      	bne.n	8003742 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 800373c:	2302      	movs	r3, #2
 800373e:	737b      	strb	r3, [r7, #13]
 8003740:	e013      	b.n	800376a <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <extiConfigIrq+0x158>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d102      	bne.n	8003750 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 800374a:	2303      	movs	r3, #3
 800374c:	737b      	strb	r3, [r7, #13]
 800374e:	e00c      	b.n	800376a <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <extiConfigIrq+0x15c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d102      	bne.n	800375e <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8003758:	2304      	movs	r3, #4
 800375a:	737b      	strb	r3, [r7, #13]
 800375c:	e005      	b.n	800376a <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <extiConfigIrq+0x160>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 8003766:	2307      	movs	r3, #7
 8003768:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <extiConfigIrq+0x164>)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	3302      	adds	r3, #2
 8003770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003774:	7b79      	ldrb	r1, [r7, #13]
 8003776:	7bbb      	ldrb	r3, [r7, #14]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	4618      	mov	r0, r3
 800377e:	490b      	ldr	r1, [pc, #44]	; (80037ac <extiConfigIrq+0x164>)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	4302      	orrs	r2, r0
 8003784:	3302      	adds	r3, #2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40020000 	.word	0x40020000
 8003798:	40020400 	.word	0x40020400
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40021c00 	.word	0x40021c00
 80037ac:	40013800 	.word	0x40013800

080037b0 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff febf 	bl	8003540 <extiVerifyIrqNum>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 80037ce:	23d8      	movs	r3, #216	; 0xd8
 80037d0:	e00a      	b.n	80037e8 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <extiEnableIrq+0x40>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4611      	mov	r1, r2
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <extiEnableIrq+0x40>)
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40013c00 	.word	0x40013c00

080037f4 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	460a      	mov	r2, r1
 80037fe:	71fb      	strb	r3, [r7, #7]
 8003800:	4613      	mov	r3, r2
 8003802:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fe9a 	bl	8003540 <extiVerifyIrqNum>
 800380c:	4603      	mov	r3, r0
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8003818:	23d8      	movs	r3, #216	; 0xd8
 800381a:	e055      	b.n	80038c8 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 800381c:	79bb      	ldrb	r3, [r7, #6]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fede 	bl	80035e0 <extiVerifyTrigger>
 8003824:	4603      	mov	r3, r0
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8003830:	23d7      	movs	r3, #215	; 0xd7
 8003832:	e049      	b.n	80038c8 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8003834:	79bb      	ldrb	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	79fa      	ldrb	r2, [r7, #7]
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	4611      	mov	r1, r2
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	79fa      	ldrb	r2, [r7, #7]
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f202 	lsl.w	r2, r1, r2
 800385a:	43d2      	mvns	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 8003860:	400b      	ands	r3, r1
 8003862:	60d3      	str	r3, [r2, #12]
 8003864:	e02f      	b.n	80038c6 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d115      	bne.n	8003898 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	79fa      	ldrb	r2, [r7, #7]
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4611      	mov	r1, r2
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 800387c:	430b      	orrs	r3, r1
 800387e:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	43d2      	mvns	r2, r2
 800388e:	4611      	mov	r1, r2
 8003890:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 8003892:	400b      	ands	r3, r1
 8003894:	6093      	str	r3, [r2, #8]
 8003896:	e016      	b.n	80038c6 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d113      	bne.n	80038c6 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	79fa      	ldrb	r2, [r7, #7]
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	4611      	mov	r1, r2
 80038ac:	4a08      	ldr	r2, [pc, #32]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4611      	mov	r1, r2
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <extiSetTriggerEdge+0xdc>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <gpioVerifyPort+0x4c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <gpioVerifyPort+0x38>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <gpioVerifyPort+0x50>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <gpioVerifyPort+0x38>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <gpioVerifyPort+0x54>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <gpioVerifyPort+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0d      	ldr	r2, [pc, #52]	; (800392c <gpioVerifyPort+0x58>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <gpioVerifyPort+0x5c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <gpioVerifyPort+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <gpioVerifyPort+0x60>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <gpioVerifyPort+0x3c>
    {
        return true;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <gpioVerifyPort+0x3e>
    }
    return false;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40020000 	.word	0x40020000
 8003924:	40020400 	.word	0x40020400
 8003928:	40020800 	.word	0x40020800
 800392c:	40020c00 	.word	0x40020c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40021c00 	.word	0x40021c00

08003938 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02c      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d029      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d026      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d023      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d020      	beq.n	80039a2 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d01d      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d01a      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b07      	cmp	r3, #7
 8003970:	d017      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d014      	beq.n	80039a2 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b09      	cmp	r3, #9
 800397c:	d011      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b0a      	cmp	r3, #10
 8003982:	d00e      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	2b0b      	cmp	r3, #11
 8003988:	d00b      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d008      	beq.n	80039a2 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	2b0d      	cmp	r3, #13
 8003994:	d005      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b0e      	cmp	r3, #14
 800399a:	d002      	beq.n	80039a2 <gpioVerifyPin+0x6a>
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	d101      	bne.n	80039a6 <gpioVerifyPin+0x6e>
    {
        return true;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <gpioVerifyPin+0x70>
    }
    return false;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02c      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d029      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d026      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d023      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d020      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b05      	cmp	r3, #5
 80039e0:	d01d      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d01a      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	d017      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d014      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d011      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b0a      	cmp	r3, #10
 80039fe:	d00e      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b0b      	cmp	r3, #11
 8003a04:	d00b      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d008      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b0d      	cmp	r3, #13
 8003a10:	d005      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b0e      	cmp	r3, #14
 8003a16:	d002      	beq.n	8003a1e <gpioVerifyAltFunc+0x6a>
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	d101      	bne.n	8003a22 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <gpioVerifyPinMode+0x22>
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d005      	beq.n	8003a52 <gpioVerifyPinMode+0x22>
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d002      	beq.n	8003a52 <gpioVerifyPinMode+0x22>
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d101      	bne.n	8003a56 <gpioVerifyPinMode+0x26>
    {
        return true;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <gpioVerifyPinMode+0x28>
    }

    return false;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <gpioVerifyOutputType+0x16>
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <gpioVerifyOutputType+0x1a>
    {
        return true;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <gpioVerifyPushPullMode+0x1c>
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <gpioVerifyPushPullMode+0x1c>
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d101      	bne.n	8003aac <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff05 	bl	80038d4 <gpioVerifyPort>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d042      	beq.n	8003b56 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <gpioInitPort+0xa8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d106      	bne.n	8003ae6 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <gpioInitPort+0xac>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <gpioInitPort+0xac>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae4:	e035      	b.n	8003b52 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <gpioInitPort+0xb0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d106      	bne.n	8003afc <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <gpioInitPort+0xac>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <gpioInitPort+0xac>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	6313      	str	r3, [r2, #48]	; 0x30
 8003afa:	e02a      	b.n	8003b52 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <gpioInitPort+0xb4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d106      	bne.n	8003b12 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <gpioInitPort+0xac>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <gpioInitPort+0xac>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b10:	e01f      	b.n	8003b52 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <gpioInitPort+0xb8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d106      	bne.n	8003b28 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <gpioInitPort+0xac>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <gpioInitPort+0xac>)
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	e014      	b.n	8003b52 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <gpioInitPort+0xbc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d106      	bne.n	8003b3e <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <gpioInitPort+0xac>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <gpioInitPort+0xac>)
 8003b36:	f043 0310 	orr.w	r3, r3, #16
 8003b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3c:	e009      	b.n	8003b52 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <gpioInitPort+0xc0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d105      	bne.n	8003b52 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <gpioInitPort+0xac>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <gpioInitPort+0xac>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e001      	b.n	8003b5a <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020400 	.word	0x40020400
 8003b70:	40020800 	.word	0x40020800
 8003b74:	40020c00 	.word	0x40020c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40021c00 	.word	0x40021c00

08003b80 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fea3 	bl	80038d4 <gpioVerifyPort>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f083 0301 	eor.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	e041      	b.n	8003c24 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <gpioSelectPort+0xac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d106      	bne.n	8003bb6 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <gpioSelectPort+0xb0>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb4:	e035      	b.n	8003c22 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <gpioSelectPort+0xb4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d106      	bne.n	8003bcc <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	e02a      	b.n	8003c22 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <gpioSelectPort+0xb8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d106      	bne.n	8003be2 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	6313      	str	r3, [r2, #48]	; 0x30
 8003be0:	e01f      	b.n	8003c22 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <gpioSelectPort+0xbc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d106      	bne.n	8003bf8 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <gpioSelectPort+0xb0>)
 8003bf0:	f043 0308 	orr.w	r3, r3, #8
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	e014      	b.n	8003c22 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <gpioSelectPort+0xc0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d106      	bne.n	8003c0e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <gpioSelectPort+0xb0>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <gpioSelectPort+0xb0>)
 8003c06:	f043 0310 	orr.w	r3, r3, #16
 8003c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0c:	e009      	b.n	8003c22 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <gpioSelectPort+0xc4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d105      	bne.n	8003c22 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <gpioSelectPort+0xb0>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <gpioSelectPort+0xb0>)
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40021c00 	.word	0x40021c00

08003c48 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
 8003c54:	4613      	mov	r3, r2
 8003c56:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fe3b 	bl	80038d4 <gpioVerifyPort>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e032      	b.n	8003cd6 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fe60 	bl	8003938 <gpioVerifyPin>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f083 0301 	eor.w	r3, r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003c84:	f06f 0301 	mvn.w	r3, #1
 8003c88:	e025      	b.n	8003cd6 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8003c8a:	78bb      	ldrb	r3, [r7, #2]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fecf 	bl	8003a30 <gpioVerifyPinMode>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f083 0301 	eor.w	r3, r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8003c9e:	f06f 0305 	mvn.w	r3, #5
 8003ca2:	e018      	b.n	8003cd6 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	0052      	lsls	r2, r2, #1
 8003cac:	2103      	movs	r1, #3
 8003cae:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb2:	43d2      	mvns	r2, r2
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8003cba:	78bb      	ldrb	r3, [r7, #2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	78b9      	ldrb	r1, [r7, #2]
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	0052      	lsls	r2, r2, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fdf2 	bl	80038d4 <gpioVerifyPort>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f083 0301 	eor.w	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e014      	b.n	8003d2c <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fe17 	bl	8003938 <gpioVerifyPin>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003d16:	f06f 0301 	mvn.w	r3, #1
 8003d1a:	e007      	b.n	8003d2c <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff fdc7 	bl	80038d4 <gpioVerifyPort>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f083 0301 	eor.w	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e015      	b.n	8003d84 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fdec 	bl	8003938 <gpioVerifyPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003d6c:	f06f 0301 	mvn.w	r3, #1
 8003d70:	e008      	b.n	8003d84 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	3310      	adds	r3, #16
 8003d76:	2201      	movs	r2, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fd99 	bl	80038d4 <gpioVerifyPort>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	e050      	b.n	8003e56 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fdbe 	bl	8003938 <gpioVerifyPin>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f083 0301 	eor.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8003dc8:	f06f 0301 	mvn.w	r3, #1
 8003dcc:	e043      	b.n	8003e56 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8003dce:	78bb      	ldrb	r3, [r7, #2]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fdef 	bl	80039b4 <gpioVerifyAltFunc>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8003de2:	f06f 0302 	mvn.w	r3, #2
 8003de6:	e036      	b.n	8003e56 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff2a 	bl	8003c48 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b07      	cmp	r3, #7
 8003df8:	d815      	bhi.n	8003e26 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	210f      	movs	r1, #15
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	43d2      	mvns	r2, r2
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	78b9      	ldrb	r1, [r7, #2]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	e016      	b.n	8003e54 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	3a08      	subs	r2, #8
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	210f      	movs	r1, #15
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	43d2      	mvns	r2, r2
 8003e38:	401a      	ands	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	78b9      	ldrb	r1, [r7, #2]
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	3a08      	subs	r2, #8
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	70fb      	strb	r3, [r7, #3]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fd30 	bl	80038d4 <gpioVerifyPort>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	e030      	b.n	8003ee8 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fd55 	bl	8003938 <gpioVerifyPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	e023      	b.n	8003ee8 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8003ea0:	78bb      	ldrb	r3, [r7, #2]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fdde 	bl	8003a64 <gpioVerifyOutputType>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f083 0301 	eor.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8003eb4:	f06f 0303 	mvn.w	r3, #3
 8003eb8:	e016      	b.n	8003ee8 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec6:	43d2      	mvns	r2, r2
 8003ec8:	401a      	ands	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8003ece:	78bb      	ldrb	r3, [r7, #2]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fce7 	bl	80038d4 <gpioVerifyPort>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f083 0301 	eor.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e044      	b.n	8003fa2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fd0c 	bl	8003938 <gpioVerifyPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003f2c:	f06f 0301 	mvn.w	r3, #1
 8003f30:	e037      	b.n	8003fa2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8003f32:	78bb      	ldrb	r3, [r7, #2]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fda9 	bl	8003a8c <gpioVerifyPushPullMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f083 0301 	eor.w	r3, r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8003f46:	f06f 0306 	mvn.w	r3, #6
 8003f4a:	e02a      	b.n	8003fa2 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	0052      	lsls	r2, r2, #1
 8003f54:	2103      	movs	r1, #3
 8003f56:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5a:	43d2      	mvns	r2, r2
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11a      	bne.n	8003fa0 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8003f6a:	78bb      	ldrb	r3, [r7, #2]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10a      	bne.n	8003f86 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e00c      	b.n	8003fa0 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8003f86:	78bb      	ldrb	r3, [r7, #2]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d109      	bne.n	8003fa0 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	0052      	lsls	r2, r2, #1
 8003f94:	2102      	movs	r1, #2
 8003f96:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003ff6:	bf00      	nop
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f9      	beq.n	8003ff8 <__i2c_start+0x16>
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8004026:	bf00      	nop
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f9      	beq.n	8004028 <__i2c_stop+0x16>
 }
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 800404a:	bf00      	nop
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2da      	uxtb	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf0c      	ite	eq
 8004062:	2301      	moveq	r3, #1
 8004064:	2300      	movne	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ed      	bne.n	800404c <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8004086:	bf00      	nop
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f9      	beq.n	8004088 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e002      	b.n	80040a0 <__i2c_Chk_TX_empty+0x22>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3301      	adds	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b13      	cmp	r3, #19
 80040a4:	d9f9      	bls.n	800409a <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <i2cVerifyDutyCycle+0x16>
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <i2cSelectI2C+0x58>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d106      	bne.n	80040fa <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <i2cSelectI2C+0x5c>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <i2cSelectI2C+0x5c>)
 80040f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
 80040f8:	e014      	b.n	8004124 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a0f      	ldr	r2, [pc, #60]	; (800413c <i2cSelectI2C+0x60>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d106      	bne.n	8004110 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <i2cSelectI2C+0x5c>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <i2cSelectI2C+0x5c>)
 8004108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	e009      	b.n	8004124 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <i2cSelectI2C+0x64>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d105      	bne.n	8004124 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <i2cSelectI2C+0x5c>)
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	4a06      	ldr	r2, [pc, #24]	; (8004138 <i2cSelectI2C+0x5c>)
 800411e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004122:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40005400 	.word	0x40005400
 8004138:	40023800 	.word	0x40023800
 800413c:	40005800 	.word	0x40005800
 8004140:	40005c00 	.word	0x40005c00

08004144 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <i2cSetClkSpd+0x2a>
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d008      	beq.n	800416e <i2cSetClkSpd+0x2a>
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d005      	beq.n	800416e <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d002      	beq.n	800416e <i2cSetClkSpd+0x2a>
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b04      	cmp	r3, #4
 800416c:	d160      	bne.n	8004230 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 800416e:	bf00      	nop
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800418a:	f023 030f 	bic.w	r3, r3, #15
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	61da      	str	r2, [r3, #28]
    	switch (spd)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d836      	bhi.n	8004212 <i2cSetClkSpd+0xce>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <i2cSetClkSpd+0x68>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041c1 	.word	0x080041c1
 80041b0:	080041cf 	.word	0x080041cf
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041f9 	.word	0x080041f9
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	61da      	str	r2, [r3, #28]
				break;
 80041cc:	e02e      	b.n	800422c <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	61da      	str	r2, [r3, #28]
    			break;
 80041da:	e027      	b.n	800422c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	61da      	str	r2, [r3, #28]
    				break;
 80041e8:	e020      	b.n	800422c <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f043 0214 	orr.w	r2, r3, #20
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	61da      	str	r2, [r3, #28]
    			break;
 80041f6:	e019      	b.n	800422c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f043 0205 	orr.w	r2, r3, #5
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	61da      	str	r2, [r3, #28]
				break;
 8004210:	e00c      	b.n	800422c <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	61da      	str	r2, [r3, #28]
    			break;
 800422a:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e001      	b.n	8004234 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8004230:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	70fb      	strb	r3, [r7, #3]
 8004252:	460b      	mov	r3, r1
 8004254:	70bb      	strb	r3, [r7, #2]
 8004256:	4613      	mov	r3, r2
 8004258:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff29 	bl	80040b4 <i2cVerifyDutyCycle>
 8004262:	4603      	mov	r3, r0
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 800426e:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8004272:	e02f      	b.n	80042d4 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800427a:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 800428e:	f000 fbad 	bl	80049ec <rccGetPclk1Freq>
 8004292:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <i2cInitI2C+0x9c>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	0c9a      	lsrs	r2, r3, #18
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2211      	movs	r2, #17
 80042a6:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff3f 	bl	8004144 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	431bde83 	.word	0x431bde83

080042e0 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	4608      	mov	r0, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	70fb      	strb	r3, [r7, #3]
 80042f2:	460b      	mov	r3, r1
 80042f4:	70bb      	strb	r3, [r7, #2]
 80042f6:	4613      	mov	r3, r2
 80042f8:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 80042fa:	bf00      	nop
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f9      	bne.n	80042fc <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fe6a 	bl	8003fe2 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800430e:	bf00      	nop
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f9      	beq.n	8004310 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8004326:	bf00      	nop
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f9      	beq.n	8004328 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fe84 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fe9f 	bl	800407e <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8004340:	78ba      	ldrb	r2, [r7, #2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fe99 	bl	800407e <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fe78 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8004352:	787a      	ldrb	r2, [r7, #1]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8004358:	bf00      	nop
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f9      	beq.n	800435a <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fe6b 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fe50 	bl	8004012 <__i2c_stop>


    return I2C_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	460b      	mov	r3, r1
 800438a:	72fb      	strb	r3, [r7, #11]
 800438c:	4613      	mov	r3, r2
 800438e:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 8004394:	bf00      	nop
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f9      	bne.n	8004396 <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff fe17 	bl	8003fe2 <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80043b4:	bf00      	nop
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f9      	beq.n	80043b6 <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80043cc:	bf00      	nop
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f9      	beq.n	80043ce <i2cBurstWrite+0x52>

    while (numBytes < len)
 80043da:	e016      	b.n	800440a <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff fe4e 	bl	800407e <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fe2d 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 80043f6:	bf00      	nop
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f9      	beq.n	80043f8 <i2cBurstWrite+0x7c>

        numBytes++;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	3301      	adds	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 800440a:	7dfa      	ldrb	r2, [r7, #23]
 800440c:	7abb      	ldrb	r3, [r7, #10]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3e4      	bcc.n	80043dc <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8004412:	bf00      	nop
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f9      	beq.n	8004414 <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff fe0e 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff fdf3 	bl	8004012 <__i2c_stop>

    return I2C_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	72fb      	strb	r3, [r7, #11]
 8004444:	4613      	mov	r3, r2
 8004446:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8004448:	bf00      	nop
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f9      	bne.n	800444a <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff fdc3 	bl	8003fe2 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800445c:	bf00      	nop
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f9      	beq.n	800445e <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 800446a:	7afb      	ldrb	r3, [r7, #11]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8004474:	bf00      	nop
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f9      	beq.n	8004476 <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fddd 	bl	8004042 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8004488:	7aba      	ldrb	r2, [r7, #10]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fdf5 	bl	800407e <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fdd4 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 80044a6:	bf00      	nop
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f9      	beq.n	80044a8 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	461a      	mov	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80044c2:	bf00      	nop
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f9      	beq.n	80044c4 <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fdb0 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fd95 	bl	8004012 <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 80044e8:	bf00      	nop
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f9      	beq.n	80044ea <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6919      	ldr	r1, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	b2ca      	uxtb	r2, r1
 8004502:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	72fb      	strb	r3, [r7, #11]
 800451c:	4613      	mov	r3, r2
 800451e:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8004520:	bf00      	nop
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f9      	bne.n	8004522 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff fd57 	bl	8003fe2 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8004534:	bf00      	nop
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f9      	beq.n	8004536 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	461a      	mov	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 800454c:	bf00      	nop
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f9      	beq.n	800454e <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff fd71 	bl	8004042 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8004560:	7aba      	ldrb	r2, [r7, #10]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fd89 	bl	800407e <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 800456c:	bf00      	nop
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f9      	beq.n	800456e <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fd61 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 800458c:	bf00      	nop
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f9      	beq.n	800458e <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 800459a:	7afb      	ldrb	r3, [r7, #11]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 80045a8:	bf00      	nop
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f9      	beq.n	80045aa <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80045c2:	e02e      	b.n	8004622 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 80045c4:	7e3b      	ldrb	r3, [r7, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d117      	bne.n	80045fa <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff fd33 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80045dc:	bf00      	nop
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f9      	beq.n	80045de <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6919      	ldr	r1, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	b2ca      	uxtb	r2, r1
 80045f6:	701a      	strb	r2, [r3, #0]
            break;
 80045f8:	e016      	b.n	8004628 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fd21 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8004600:	bf00      	nop
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f9      	beq.n	8004602 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	b2ca      	uxtb	r2, r1
 800461a:	701a      	strb	r2, [r3, #0]
            num--;
 800461c:	7e3b      	ldrb	r3, [r7, #24]
 800461e:	3b01      	subs	r3, #1
 8004620:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8004622:	7e3b      	ldrb	r3, [r7, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1cd      	bne.n	80045c4 <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff fd0a 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fcef 	bl	8004012 <__i2c_stop>

    return I2C_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <i2cBurstRead>:

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	461a      	mov	r2, r3
 800464a:	460b      	mov	r3, r1
 800464c:	72fb      	strb	r3, [r7, #11]
 800464e:	4613      	mov	r3, r2
 8004650:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8004652:	bf00      	nop
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fcb8 	bl	8003fe2 <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8004680:	bf00      	nop
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f9      	beq.n	8004682 <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fcd7 	bl	8004042 <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80046a0:	e02e      	b.n	8004700 <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 80046a2:	7abb      	ldrb	r3, [r7, #10]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11a      	bne.n	80046de <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff fcc4 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fca9 	bl	8004012 <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80046c0:	bf00      	nop
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f9      	beq.n	80046c2 <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	b2ca      	uxtb	r2, r1
 80046da:	701a      	strb	r2, [r3, #0]
            break;
 80046dc:	e013      	b.n	8004706 <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80046de:	bf00      	nop
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f9      	beq.n	80046e0 <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6919      	ldr	r1, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	b2ca      	uxtb	r2, r1
 80046f8:	701a      	strb	r2, [r3, #0]
            num--;
 80046fa:	7abb      	ldrb	r3, [r7, #10]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 8004700:	7abb      	ldrb	r3, [r7, #10]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1cd      	bne.n	80046a2 <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f043 0201 	orr.w	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fc4f 	bl	8003fe2 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fc77 	bl	8004042 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e002      	b.n	800476c <i2cFindSlaveAddr+0x3a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004772:	d3f8      	bcc.n	8004766 <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	e000      	b.n	8004786 <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8004784:	2300      	movs	r3, #0
    }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b094      	sub	sp, #80	; 0x50
 8004796:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8004798:	2300      	movs	r3, #0
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 800479c:	2300      	movs	r3, #0
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80047a0:	2300      	movs	r3, #0
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 80047a4:	2300      	movs	r3, #0
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a8:	4b79      	ldr	r3, [pc, #484]	; (8004990 <rccGetSysClock+0x200>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d00d      	beq.n	80047d0 <rccGetSysClock+0x40>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	f200 80e1 	bhi.w	800497c <rccGetSysClock+0x1ec>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <rccGetSysClock+0x34>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d003      	beq.n	80047ca <rccGetSysClock+0x3a>
 80047c2:	e0db      	b.n	800497c <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80047c4:	4b73      	ldr	r3, [pc, #460]	; (8004994 <rccGetSysClock+0x204>)
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80047c8:	e0db      	b.n	8004982 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80047ca:	4b73      	ldr	r3, [pc, #460]	; (8004998 <rccGetSysClock+0x208>)
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80047ce:	e0d8      	b.n	8004982 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <rccGetSysClock+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d8:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <rccGetSysClock+0x200>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d063      	beq.n	80048ae <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <rccGetSysClock+0x200>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2200      	movs	r2, #0
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
 80047fa:	2300      	movs	r3, #0
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
 80047fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	f04f 0000 	mov.w	r0, #0
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	0159      	lsls	r1, r3, #5
 8004810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004814:	0150      	lsls	r0, r2, #5
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4621      	mov	r1, r4
 800481c:	1a51      	subs	r1, r2, r1
 800481e:	6139      	str	r1, [r7, #16]
 8004820:	4629      	mov	r1, r5
 8004822:	eb63 0301 	sbc.w	r3, r3, r1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004834:	4659      	mov	r1, fp
 8004836:	018b      	lsls	r3, r1, #6
 8004838:	4651      	mov	r1, sl
 800483a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483e:	4651      	mov	r1, sl
 8004840:	018a      	lsls	r2, r1, #6
 8004842:	4651      	mov	r1, sl
 8004844:	ebb2 0801 	subs.w	r8, r2, r1
 8004848:	4659      	mov	r1, fp
 800484a:	eb63 0901 	sbc.w	r9, r3, r1
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004862:	4690      	mov	r8, r2
 8004864:	4699      	mov	r9, r3
 8004866:	4623      	mov	r3, r4
 8004868:	eb18 0303 	adds.w	r3, r8, r3
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	462b      	mov	r3, r5
 8004870:	eb49 0303 	adc.w	r3, r9, r3
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004882:	4629      	mov	r1, r5
 8004884:	024b      	lsls	r3, r1, #9
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800488c:	4621      	mov	r1, r4
 800488e:	024a      	lsls	r2, r1, #9
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004896:	2200      	movs	r2, #0
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
 800489a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800489c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048a0:	f7fc f9da 	bl	8000c58 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80048a8:	4613      	mov	r3, r2
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ac:	e058      	b.n	8004960 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80048ae:	4b38      	ldr	r3, [pc, #224]	; (8004990 <rccGetSysClock+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	2200      	movs	r2, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	4611      	mov	r1, r2
 80048ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048be:	623b      	str	r3, [r7, #32]
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	0159      	lsls	r1, r3, #5
 80048d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048da:	0150      	lsls	r0, r2, #5
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4641      	mov	r1, r8
 80048e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004900:	ebb2 040a 	subs.w	r4, r2, sl
 8004904:	eb63 050b 	sbc.w	r5, r3, fp
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	00eb      	lsls	r3, r5, #3
 8004912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004916:	00e2      	lsls	r2, r4, #3
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	4643      	mov	r3, r8
 800491e:	18e3      	adds	r3, r4, r3
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	464b      	mov	r3, r9
 8004924:	eb45 0303 	adc.w	r3, r5, r3
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004936:	4629      	mov	r1, r5
 8004938:	028b      	lsls	r3, r1, #10
 800493a:	4621      	mov	r1, r4
 800493c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004940:	4621      	mov	r1, r4
 8004942:	028a      	lsls	r2, r1, #10
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	2200      	movs	r2, #0
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	61fa      	str	r2, [r7, #28]
 8004950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004954:	f7fc f980 	bl	8000c58 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 800495c:	4613      	mov	r3, r2
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <rccGetSysClock+0x200>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	3301      	adds	r3, #1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8004970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800497a:	e002      	b.n	8004982 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <rccGetSysClock+0x204>)
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8004980:	bf00      	nop
    }

    return sysClock;
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004984:	4618      	mov	r0, r3
 8004986:	3750      	adds	r7, #80	; 0x50
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	00f42400 	.word	0x00f42400
 8004998:	007a1200 	.word	0x007a1200

0800499c <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 80049a2:	f7ff fef5 	bl	8004790 <rccGetSysClock>
 80049a6:	4601      	mov	r1, r0
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <rccGetHclkFreq+0x44>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b0:	22f0      	movs	r2, #240	; 0xf0
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	40d3      	lsrs	r3, r2
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <rccGetHclkFreq+0x48>)
 80049c8:	5cd3      	ldrb	r3, [r2, r3]
 80049ca:	fa21 f303 	lsr.w	r3, r1, r3
 80049ce:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <rccGetHclkFreq+0x4c>)
 80049d0:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <rccGetHclkFreq+0x4c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	08009ae4 	.word	0x08009ae4
 80049e8:	20000030 	.word	0x20000030

080049ec <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80049f2:	f7ff ffd3 	bl	800499c <rccGetHclkFreq>
 80049f6:	4601      	mov	r1, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <rccGetPclk1Freq+0x3c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a00:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	fa92 f2a2 	rbit	r2, r2
 8004a0c:	603a      	str	r2, [r7, #0]
  return result;
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	fab2 f282 	clz	r2, r2
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	40d3      	lsrs	r3, r2
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <rccGetPclk1Freq+0x40>)
 8004a1a:	5cd3      	ldrb	r3, [r2, r3]
 8004a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08009ae4 	.word	0x08009ae4

08004a30 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8004a38:	bf00      	nop
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f9      	beq.n	8004a3a <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8004a46:	2300      	movs	r3, #0
 8004a48:	81fb      	strh	r3, [r7, #14]
 8004a4a:	e002      	b.n	8004a52 <__spi_Chk_TX_empty+0x22>
 8004a4c:	89fb      	ldrh	r3, [r7, #14]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	81fb      	strh	r3, [r7, #14]
 8004a52:	89fb      	ldrh	r3, [r7, #14]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d9f9      	bls.n	8004a4c <__spi_Chk_TX_empty+0x1c>

}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8004a6e:	bf00      	nop
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <__spi_Chk_notBSY+0xa>
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a0c      	ldr	r2, [pc, #48]	; (8004ac8 <spiVerifySPI+0x3c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <spiVerifySPI+0x28>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <spiVerifySPI+0x40>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <spiVerifySPI+0x28>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <spiVerifySPI+0x44>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <spiVerifySPI+0x28>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <spiVerifySPI+0x48>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <spiVerifySPI+0x2c>
    {
        return true;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <spiVerifySPI+0x2e>
    }
    return false;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40013000 	.word	0x40013000
 8004acc:	40003800 	.word	0x40003800
 8004ad0:	40003c00 	.word	0x40003c00
 8004ad4:	40013400 	.word	0x40013400

08004ad8 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d014      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d011      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d00e      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d00b      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d008      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d005      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d002      	beq.n	8004b12 <spiVerifyClkDivider+0x3a>
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d101      	bne.n	8004b16 <spiVerifyClkDivider+0x3e>
    {
        return true;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <spiVerifyClkDivider+0x40>
    }
    return false;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d002      	beq.n	8004b3a <spiVerifySSM+0x16>
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <spiVerifySSM+0x1a>
    {
        return true;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <spiVerifySSM+0x1c>
    }
    return false;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <spiVerifyOpMode+0x16>
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <spiVerifyOpMode+0x1a>
    {
        return true;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <spiVerifyOpMode+0x1c>
    }
    return false;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <spiVerifyPhase+0x16>
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <spiVerifyPhase+0x1a>
    {
        return true;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <spiVerifyPhase+0x1c>
    }
    return false;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <spiVerifyIdlePolarity+0x16>
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	4608      	mov	r0, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	70fb      	strb	r3, [r7, #3]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70bb      	strb	r3, [r7, #2]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff77 	bl	8004ad8 <spiVerifyClkDivider>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f083 0301 	eor.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8004bf6:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8004bfa:	e0cc      	b.n	8004d96 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff ff90 	bl	8004b24 <spiVerifySSM>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8004c10:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8004c14:	e0bf      	b.n	8004d96 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8004c16:	7f3b      	ldrb	r3, [r7, #28]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff97 	bl	8004b4c <spiVerifyOpMode>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f083 0301 	eor.w	r3, r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8004c2a:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8004c2e:	e0b2      	b.n	8004d96 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8004c30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff9d 	bl	8004b74 <spiVerifyPhase>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8004c46:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8004c4a:	e0a4      	b.n	8004d96 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8004c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ffa3 	bl	8004b9c <spiVerifyIdlePolarity>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f083 0301 	eor.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8004c62:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8004c66:	e096      	b.n	8004d96 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	2b07      	cmp	r3, #7
 8004c6c:	d83a      	bhi.n	8004ce4 <spiInitSPI+0x120>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <spiInitSPI+0xb0>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c95 	.word	0x08004c95
 8004c78:	08004c9f 	.word	0x08004c9f
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	08004cdb 	.word	0x08004cdb
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004c9a:	81fb      	strh	r3, [r7, #14]
            break;
 8004c9c:	e027      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	81fb      	strh	r3, [r7, #14]
            break;
 8004ca6:	e022      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8004ca8:	89fb      	ldrh	r3, [r7, #14]
 8004caa:	f043 0310 	orr.w	r3, r3, #16
 8004cae:	81fb      	strh	r3, [r7, #14]
            break;
 8004cb0:	e01d      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	f043 0318 	orr.w	r3, r3, #24
 8004cb8:	81fb      	strh	r3, [r7, #14]
            break;
 8004cba:	e018      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8004cbc:	89fb      	ldrh	r3, [r7, #14]
 8004cbe:	f043 0320 	orr.w	r3, r3, #32
 8004cc2:	81fb      	strh	r3, [r7, #14]
            break;
 8004cc4:	e013      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004ccc:	81fb      	strh	r3, [r7, #14]
            break;
 8004cce:	e00e      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004cd6:	81fb      	strh	r3, [r7, #14]
            break;
 8004cd8:	e009      	b.n	8004cee <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004ce0:	81fb      	strh	r3, [r7, #14]
            break;
 8004ce2:	e004      	b.n	8004cee <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	f043 0318 	orr.w	r3, r3, #24
 8004cea:	81fb      	strh	r3, [r7, #14]
            break;
 8004cec:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8004cee:	78bb      	ldrb	r3, [r7, #2]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8004cf4:	89fb      	ldrh	r3, [r7, #14]
 8004cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cfa:	81fb      	strh	r3, [r7, #14]
 8004cfc:	e003      	b.n	8004d06 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d04:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8004d06:	787b      	ldrb	r3, [r7, #1]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d110      	bne.n	8004d2e <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d12:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8004d14:	7e3b      	ldrb	r3, [r7, #24]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d104      	bne.n	8004d24 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	81fb      	strh	r3, [r7, #14]
 8004d22:	e008      	b.n	8004d36 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8004d24:	89fb      	ldrh	r3, [r7, #14]
 8004d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2a:	81fb      	strh	r3, [r7, #14]
 8004d2c:	e003      	b.n	8004d36 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8004d2e:	89fb      	ldrh	r3, [r7, #14]
 8004d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d34:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8004d36:	7f3b      	ldrb	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	81fb      	strh	r3, [r7, #14]
 8004d44:	e003      	b.n	8004d4e <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8004d46:	89fb      	ldrh	r3, [r7, #14]
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8004d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8004d56:	89fb      	ldrh	r3, [r7, #14]
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	81fb      	strh	r3, [r7, #14]
 8004d5e:	e003      	b.n	8004d68 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8004d68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	f023 0302 	bic.w	r3, r3, #2
 8004d76:	81fb      	strh	r3, [r7, #14]
 8004d78:	e003      	b.n	8004d82 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8004d7a:	89fb      	ldrh	r3, [r7, #14]
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8004d82:	89fa      	ldrh	r2, [r7, #14]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f846 	bl	8004e20 <spiEnableSPI>

    return SPI_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <spiSelectSPI+0x6c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d106      	bne.n	8004dbe <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <spiSelectSPI+0x70>)
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <spiSelectSPI+0x70>)
 8004db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dba:	6453      	str	r3, [r2, #68]	; 0x44
 8004dbc:	e01f      	b.n	8004dfe <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <spiSelectSPI+0x74>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d106      	bne.n	8004dd4 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <spiSelectSPI+0x70>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <spiSelectSPI+0x70>)
 8004dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	e014      	b.n	8004dfe <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <spiSelectSPI+0x78>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d106      	bne.n	8004dea <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <spiSelectSPI+0x70>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <spiSelectSPI+0x70>)
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	6413      	str	r3, [r2, #64]	; 0x40
 8004de8:	e009      	b.n	8004dfe <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <spiSelectSPI+0x7c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d105      	bne.n	8004dfe <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <spiSelectSPI+0x70>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	4a06      	ldr	r2, [pc, #24]	; (8004e10 <spiSelectSPI+0x70>)
 8004df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dfc:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40013000 	.word	0x40013000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40003800 	.word	0x40003800
 8004e18:	40003c00 	.word	0x40003c00
 8004e1c:	40013400 	.word	0x40013400

08004e20 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fe2f 	bl	8004a8c <spiVerifySPI>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f083 0301 	eor.w	r3, r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8004e3a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8004e3e:	e006      	b.n	8004e4e <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	4611      	mov	r1, r2
 8004e62:	461a      	mov	r2, r3
 8004e64:	460b      	mov	r3, r1
 8004e66:	71fb      	strb	r3, [r7, #7]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fd62 	bl	8003938 <gpioVerifyPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8004e80:	f06f 0301 	mvn.w	r3, #1
 8004e84:	e016      	b.n	8004eb4 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff fdd2 	bl	8004a30 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68b8      	ldr	r0, [r7, #8]
 8004e92:	f7fe ff4f 	bl	8003d34 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8004e96:	79ba      	ldrb	r2, [r7, #6]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fdc7 	bl	8004a30 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fddf 	bl	8004a66 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	68b8      	ldr	r0, [r7, #8]
 8004eae:	f7fe ff16 	bl	8003cde <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	db0a      	blt.n	8004ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	490c      	ldr	r1, [pc, #48]	; (8004f08 <__NVIC_SetPriority+0x4c>)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	0112      	lsls	r2, r2, #4
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee4:	e00a      	b.n	8004efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	4908      	ldr	r1, [pc, #32]	; (8004f0c <__NVIC_SetPriority+0x50>)
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	3b04      	subs	r3, #4
 8004ef4:	0112      	lsls	r2, r2, #4
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	440b      	add	r3, r1
 8004efa:	761a      	strb	r2, [r3, #24]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000e100 	.word	0xe000e100
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f20:	d301      	bcc.n	8004f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f22:	2301      	movs	r3, #1
 8004f24:	e00f      	b.n	8004f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <SysTick_Config+0x40>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f2e:	210f      	movs	r1, #15
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	f7ff ffc2 	bl	8004ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Config+0x40>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <SysTick_Config+0x40>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8004f78:	f000 f8b2 	bl	80050e0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <systickInit+0x24>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ffc2 	bl	8004f10 <SysTick_Config>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000030 	.word	0x20000030

08004f98 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <isSystickExpired+0x16>
	{
		timerState = true;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <SysTick_Handler+0x14>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000227 	.word	0x20000227

08004ff0 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <systickUpdateTimer+0x1a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <systickUpdateTimer+0x2c>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20000227 	.word	0x20000227

08005020 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 800502c:	2300      	movs	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]
 8005030:	e011      	b.n	8005056 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <systickUpdateTimerList+0x30>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3301      	adds	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	429a      	cmp	r2, r3
 800505c:	d3e9      	bcc.n	8005032 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <systickUpdateTimerList+0x50>)
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000227 	.word	0x20000227

08005074 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff67 	bl	8004f54 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8005086:	e006      	b.n	8005096 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <systickDelay+0x44>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ffad 	bl	8004ff0 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff8a 	bl	8004fb4 <isSystickExpired>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f083 0301 	eor.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ed      	bne.n	8005088 <systickDelay+0x14>
        }
    }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000227 	.word	0x20000227

080050bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <SystemInit+0x20>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <SystemInit+0x20>)
 80050c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	2302      	movs	r3, #2
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	2302      	movs	r3, #2
 80050f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80050fa:	4b34      	ldr	r3, [pc, #208]	; (80051cc <SystemCoreClockUpdate+0xec>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d011      	beq.n	800512e <SystemCoreClockUpdate+0x4e>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d844      	bhi.n	800519a <SystemCoreClockUpdate+0xba>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <SystemCoreClockUpdate+0x3e>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d004      	beq.n	8005126 <SystemCoreClockUpdate+0x46>
 800511c:	e03d      	b.n	800519a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800511e:	4b2c      	ldr	r3, [pc, #176]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <SystemCoreClockUpdate+0xf4>)
 8005122:	601a      	str	r2, [r3, #0]
      break;
 8005124:	e03d      	b.n	80051a2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005126:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <SystemCoreClockUpdate+0xf8>)
 800512a:	601a      	str	r2, [r3, #0]
      break;
 800512c:	e039      	b.n	80051a2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <SystemCoreClockUpdate+0xec>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	0d9b      	lsrs	r3, r3, #22
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <SystemCoreClockUpdate+0xec>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005142:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800514a:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <SystemCoreClockUpdate+0xf8>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <SystemCoreClockUpdate+0xec>)
 8005154:	6852      	ldr	r2, [r2, #4]
 8005156:	0992      	lsrs	r2, r2, #6
 8005158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e00b      	b.n	800517c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005164:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <SystemCoreClockUpdate+0xf4>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <SystemCoreClockUpdate+0xec>)
 800516e:	6852      	ldr	r2, [r2, #4]
 8005170:	0992      	lsrs	r2, r2, #6
 8005172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <SystemCoreClockUpdate+0xec>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	4a0e      	ldr	r2, [pc, #56]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 8005196:	6013      	str	r3, [r2, #0]
      break;
 8005198:	e003      	b.n	80051a2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 800519c:	4a0d      	ldr	r2, [pc, #52]	; (80051d4 <SystemCoreClockUpdate+0xf4>)
 800519e:	601a      	str	r2, [r3, #0]
      break;
 80051a0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <SystemCoreClockUpdate+0xec>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	4a0b      	ldr	r2, [pc, #44]	; (80051dc <SystemCoreClockUpdate+0xfc>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <SystemCoreClockUpdate+0xf0>)
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40023800 	.word	0x40023800
 80051d0:	20000030 	.word	0x20000030
 80051d4:	00f42400 	.word	0x00f42400
 80051d8:	007a1200 	.word	0x007a1200
 80051dc:	08009af4 	.word	0x08009af4

080051e0 <__errno>:
 80051e0:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <__errno+0x8>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000034 	.word	0x20000034

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4d0d      	ldr	r5, [pc, #52]	; (8005224 <__libc_init_array+0x38>)
 80051f0:	4c0d      	ldr	r4, [pc, #52]	; (8005228 <__libc_init_array+0x3c>)
 80051f2:	1b64      	subs	r4, r4, r5
 80051f4:	10a4      	asrs	r4, r4, #2
 80051f6:	2600      	movs	r6, #0
 80051f8:	42a6      	cmp	r6, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	4d0b      	ldr	r5, [pc, #44]	; (800522c <__libc_init_array+0x40>)
 80051fe:	4c0c      	ldr	r4, [pc, #48]	; (8005230 <__libc_init_array+0x44>)
 8005200:	f004 f928 	bl	8009454 <_init>
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	2600      	movs	r6, #0
 800520a:	42a6      	cmp	r6, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	f855 3b04 	ldr.w	r3, [r5], #4
 8005214:	4798      	blx	r3
 8005216:	3601      	adds	r6, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	f855 3b04 	ldr.w	r3, [r5], #4
 800521e:	4798      	blx	r3
 8005220:	3601      	adds	r6, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	0800a100 	.word	0x0800a100
 8005228:	0800a100 	.word	0x0800a100
 800522c:	0800a100 	.word	0x0800a100
 8005230:	0800a104 	.word	0x0800a104

08005234 <memset>:
 8005234:	4402      	add	r2, r0
 8005236:	4603      	mov	r3, r0
 8005238:	4293      	cmp	r3, r2
 800523a:	d100      	bne.n	800523e <memset+0xa>
 800523c:	4770      	bx	lr
 800523e:	f803 1b01 	strb.w	r1, [r3], #1
 8005242:	e7f9      	b.n	8005238 <memset+0x4>

08005244 <__cvt>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	461d      	mov	r5, r3
 800524e:	4614      	mov	r4, r2
 8005250:	bfbc      	itt	lt
 8005252:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005256:	4614      	movlt	r4, r2
 8005258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800525a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800525c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005260:	bfb6      	itet	lt
 8005262:	461d      	movlt	r5, r3
 8005264:	2300      	movge	r3, #0
 8005266:	232d      	movlt	r3, #45	; 0x2d
 8005268:	7013      	strb	r3, [r2, #0]
 800526a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800526c:	f023 0820 	bic.w	r8, r3, #32
 8005270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005274:	d005      	beq.n	8005282 <__cvt+0x3e>
 8005276:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800527a:	d100      	bne.n	800527e <__cvt+0x3a>
 800527c:	3601      	adds	r6, #1
 800527e:	2302      	movs	r3, #2
 8005280:	e000      	b.n	8005284 <__cvt+0x40>
 8005282:	2303      	movs	r3, #3
 8005284:	aa07      	add	r2, sp, #28
 8005286:	9204      	str	r2, [sp, #16]
 8005288:	aa06      	add	r2, sp, #24
 800528a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800528e:	e9cd 3600 	strd	r3, r6, [sp]
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	f000 fcef 	bl	8005c78 <_dtoa_r>
 800529a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800529e:	4607      	mov	r7, r0
 80052a0:	d102      	bne.n	80052a8 <__cvt+0x64>
 80052a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052a4:	07db      	lsls	r3, r3, #31
 80052a6:	d522      	bpl.n	80052ee <__cvt+0xaa>
 80052a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ac:	eb07 0906 	add.w	r9, r7, r6
 80052b0:	d110      	bne.n	80052d4 <__cvt+0x90>
 80052b2:	783b      	ldrb	r3, [r7, #0]
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d10a      	bne.n	80052ce <__cvt+0x8a>
 80052b8:	2200      	movs	r2, #0
 80052ba:	2300      	movs	r3, #0
 80052bc:	4620      	mov	r0, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	f7fb fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80052c4:	b918      	cbnz	r0, 80052ce <__cvt+0x8a>
 80052c6:	f1c6 0601 	rsb	r6, r6, #1
 80052ca:	f8ca 6000 	str.w	r6, [sl]
 80052ce:	f8da 3000 	ldr.w	r3, [sl]
 80052d2:	4499      	add	r9, r3
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	4620      	mov	r0, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fb fbfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80052e0:	b108      	cbz	r0, 80052e6 <__cvt+0xa2>
 80052e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80052e6:	2230      	movs	r2, #48	; 0x30
 80052e8:	9b07      	ldr	r3, [sp, #28]
 80052ea:	454b      	cmp	r3, r9
 80052ec:	d307      	bcc.n	80052fe <__cvt+0xba>
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052f2:	1bdb      	subs	r3, r3, r7
 80052f4:	4638      	mov	r0, r7
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	b008      	add	sp, #32
 80052fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fe:	1c59      	adds	r1, r3, #1
 8005300:	9107      	str	r1, [sp, #28]
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e7f0      	b.n	80052e8 <__cvt+0xa4>

08005306 <__exponent>:
 8005306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005308:	4603      	mov	r3, r0
 800530a:	2900      	cmp	r1, #0
 800530c:	bfb8      	it	lt
 800530e:	4249      	neglt	r1, r1
 8005310:	f803 2b02 	strb.w	r2, [r3], #2
 8005314:	bfb4      	ite	lt
 8005316:	222d      	movlt	r2, #45	; 0x2d
 8005318:	222b      	movge	r2, #43	; 0x2b
 800531a:	2909      	cmp	r1, #9
 800531c:	7042      	strb	r2, [r0, #1]
 800531e:	dd2a      	ble.n	8005376 <__exponent+0x70>
 8005320:	f10d 0407 	add.w	r4, sp, #7
 8005324:	46a4      	mov	ip, r4
 8005326:	270a      	movs	r7, #10
 8005328:	46a6      	mov	lr, r4
 800532a:	460a      	mov	r2, r1
 800532c:	fb91 f6f7 	sdiv	r6, r1, r7
 8005330:	fb07 1516 	mls	r5, r7, r6, r1
 8005334:	3530      	adds	r5, #48	; 0x30
 8005336:	2a63      	cmp	r2, #99	; 0x63
 8005338:	f104 34ff 	add.w	r4, r4, #4294967295
 800533c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005340:	4631      	mov	r1, r6
 8005342:	dcf1      	bgt.n	8005328 <__exponent+0x22>
 8005344:	3130      	adds	r1, #48	; 0x30
 8005346:	f1ae 0502 	sub.w	r5, lr, #2
 800534a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800534e:	1c44      	adds	r4, r0, #1
 8005350:	4629      	mov	r1, r5
 8005352:	4561      	cmp	r1, ip
 8005354:	d30a      	bcc.n	800536c <__exponent+0x66>
 8005356:	f10d 0209 	add.w	r2, sp, #9
 800535a:	eba2 020e 	sub.w	r2, r2, lr
 800535e:	4565      	cmp	r5, ip
 8005360:	bf88      	it	hi
 8005362:	2200      	movhi	r2, #0
 8005364:	4413      	add	r3, r2
 8005366:	1a18      	subs	r0, r3, r0
 8005368:	b003      	add	sp, #12
 800536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005370:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005374:	e7ed      	b.n	8005352 <__exponent+0x4c>
 8005376:	2330      	movs	r3, #48	; 0x30
 8005378:	3130      	adds	r1, #48	; 0x30
 800537a:	7083      	strb	r3, [r0, #2]
 800537c:	70c1      	strb	r1, [r0, #3]
 800537e:	1d03      	adds	r3, r0, #4
 8005380:	e7f1      	b.n	8005366 <__exponent+0x60>
	...

08005384 <_printf_float>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	ed2d 8b02 	vpush	{d8}
 800538c:	b091      	sub	sp, #68	; 0x44
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f001 fa5b 	bl	8006854 <_localeconv_r>
 800539e:	f8d0 a000 	ldr.w	sl, [r0]
 80053a2:	4650      	mov	r0, sl
 80053a4:	f7fa ff1c 	bl	80001e0 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930e      	str	r3, [sp, #56]	; 0x38
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	9309      	str	r3, [sp, #36]	; 0x24
 80053b0:	f8d8 3000 	ldr.w	r3, [r8]
 80053b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053b8:	3307      	adds	r3, #7
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	f103 0208 	add.w	r2, r3, #8
 80053c2:	f8c8 2000 	str.w	r2, [r8]
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80053dc:	ee08 0a10 	vmov	s16, r0
 80053e0:	4ba0      	ldr	r3, [pc, #640]	; (8005664 <_printf_float+0x2e0>)
 80053e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053e6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ea:	f7fb fba7 	bl	8000b3c <__aeabi_dcmpun>
 80053ee:	bb88      	cbnz	r0, 8005454 <_printf_float+0xd0>
 80053f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053f4:	4b9b      	ldr	r3, [pc, #620]	; (8005664 <_printf_float+0x2e0>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	f7fb fb81 	bl	8000b00 <__aeabi_dcmple>
 80053fe:	bb48      	cbnz	r0, 8005454 <_printf_float+0xd0>
 8005400:	2200      	movs	r2, #0
 8005402:	2300      	movs	r3, #0
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fb fb70 	bl	8000aec <__aeabi_dcmplt>
 800540c:	b110      	cbz	r0, 8005414 <_printf_float+0x90>
 800540e:	232d      	movs	r3, #45	; 0x2d
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	4b94      	ldr	r3, [pc, #592]	; (8005668 <_printf_float+0x2e4>)
 8005416:	4895      	ldr	r0, [pc, #596]	; (800566c <_printf_float+0x2e8>)
 8005418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800541c:	bf94      	ite	ls
 800541e:	4698      	movls	r8, r3
 8005420:	4680      	movhi	r8, r0
 8005422:	2303      	movs	r3, #3
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	f04f 0900 	mov.w	r9, #0
 8005432:	9700      	str	r7, [sp, #0]
 8005434:	4633      	mov	r3, r6
 8005436:	aa0f      	add	r2, sp, #60	; 0x3c
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f9da 	bl	80057f4 <_printf_common>
 8005440:	3001      	adds	r0, #1
 8005442:	f040 8092 	bne.w	800556a <_printf_float+0x1e6>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	b011      	add	sp, #68	; 0x44
 800544c:	ecbd 8b02 	vpop	{d8}
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fb fb6e 	bl	8000b3c <__aeabi_dcmpun>
 8005460:	b140      	cbz	r0, 8005474 <_printf_float+0xf0>
 8005462:	464b      	mov	r3, r9
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfbc      	itt	lt
 8005468:	232d      	movlt	r3, #45	; 0x2d
 800546a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800546e:	4880      	ldr	r0, [pc, #512]	; (8005670 <_printf_float+0x2ec>)
 8005470:	4b80      	ldr	r3, [pc, #512]	; (8005674 <_printf_float+0x2f0>)
 8005472:	e7d1      	b.n	8005418 <_printf_float+0x94>
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 800547c:	d143      	bne.n	8005506 <_printf_float+0x182>
 800547e:	2306      	movs	r3, #6
 8005480:	6063      	str	r3, [r4, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	aa0e      	add	r2, sp, #56	; 0x38
 800548a:	e9cd b204 	strd	fp, r2, [sp, #16]
 800548e:	aa0d      	add	r2, sp, #52	; 0x34
 8005490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005494:	9203      	str	r2, [sp, #12]
 8005496:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800549a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	4628      	mov	r0, r5
 80054aa:	910a      	str	r1, [sp, #40]	; 0x28
 80054ac:	f7ff feca 	bl	8005244 <__cvt>
 80054b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054b2:	2947      	cmp	r1, #71	; 0x47
 80054b4:	4680      	mov	r8, r0
 80054b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054b8:	d108      	bne.n	80054cc <_printf_float+0x148>
 80054ba:	1cc8      	adds	r0, r1, #3
 80054bc:	db02      	blt.n	80054c4 <_printf_float+0x140>
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	4299      	cmp	r1, r3
 80054c2:	dd40      	ble.n	8005546 <_printf_float+0x1c2>
 80054c4:	f1ab 0b02 	sub.w	fp, fp, #2
 80054c8:	fa5f fb8b 	uxtb.w	fp, fp
 80054cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054d0:	d81f      	bhi.n	8005512 <_printf_float+0x18e>
 80054d2:	3901      	subs	r1, #1
 80054d4:	465a      	mov	r2, fp
 80054d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054da:	910d      	str	r1, [sp, #52]	; 0x34
 80054dc:	f7ff ff13 	bl	8005306 <__exponent>
 80054e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054e2:	1813      	adds	r3, r2, r0
 80054e4:	2a01      	cmp	r2, #1
 80054e6:	4681      	mov	r9, r0
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	dc02      	bgt.n	80054f2 <_printf_float+0x16e>
 80054ec:	6822      	ldr	r2, [r4, #0]
 80054ee:	07d2      	lsls	r2, r2, #31
 80054f0:	d501      	bpl.n	80054f6 <_printf_float+0x172>
 80054f2:	3301      	adds	r3, #1
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d099      	beq.n	8005432 <_printf_float+0xae>
 80054fe:	232d      	movs	r3, #45	; 0x2d
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005504:	e795      	b.n	8005432 <_printf_float+0xae>
 8005506:	2947      	cmp	r1, #71	; 0x47
 8005508:	d1bb      	bne.n	8005482 <_printf_float+0xfe>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1b9      	bne.n	8005482 <_printf_float+0xfe>
 800550e:	2301      	movs	r3, #1
 8005510:	e7b6      	b.n	8005480 <_printf_float+0xfc>
 8005512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005516:	d118      	bne.n	800554a <_printf_float+0x1c6>
 8005518:	2900      	cmp	r1, #0
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	dd0b      	ble.n	8005536 <_printf_float+0x1b2>
 800551e:	6121      	str	r1, [r4, #16]
 8005520:	b913      	cbnz	r3, 8005528 <_printf_float+0x1a4>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d502      	bpl.n	800552e <_printf_float+0x1aa>
 8005528:	3301      	adds	r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	e7df      	b.n	80054f6 <_printf_float+0x172>
 8005536:	b913      	cbnz	r3, 800553e <_printf_float+0x1ba>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d501      	bpl.n	8005542 <_printf_float+0x1be>
 800553e:	3302      	adds	r3, #2
 8005540:	e7f4      	b.n	800552c <_printf_float+0x1a8>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f2      	b.n	800552c <_printf_float+0x1a8>
 8005546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554c:	4299      	cmp	r1, r3
 800554e:	db05      	blt.n	800555c <_printf_float+0x1d8>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6121      	str	r1, [r4, #16]
 8005554:	07d8      	lsls	r0, r3, #31
 8005556:	d5ea      	bpl.n	800552e <_printf_float+0x1aa>
 8005558:	1c4b      	adds	r3, r1, #1
 800555a:	e7e7      	b.n	800552c <_printf_float+0x1a8>
 800555c:	2900      	cmp	r1, #0
 800555e:	bfd4      	ite	le
 8005560:	f1c1 0202 	rsble	r2, r1, #2
 8005564:	2201      	movgt	r2, #1
 8005566:	4413      	add	r3, r2
 8005568:	e7e0      	b.n	800552c <_printf_float+0x1a8>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	055a      	lsls	r2, r3, #21
 800556e:	d407      	bmi.n	8005580 <_printf_float+0x1fc>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	4642      	mov	r2, r8
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d12c      	bne.n	80055d8 <_printf_float+0x254>
 800557e:	e762      	b.n	8005446 <_printf_float+0xc2>
 8005580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005584:	f240 80e0 	bls.w	8005748 <_printf_float+0x3c4>
 8005588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	f7fb faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d034      	beq.n	8005602 <_printf_float+0x27e>
 8005598:	4a37      	ldr	r2, [pc, #220]	; (8005678 <_printf_float+0x2f4>)
 800559a:	2301      	movs	r3, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af4f 	beq.w	8005446 <_printf_float+0xc2>
 80055a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055ac:	429a      	cmp	r2, r3
 80055ae:	db02      	blt.n	80055b6 <_printf_float+0x232>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07d8      	lsls	r0, r3, #31
 80055b4:	d510      	bpl.n	80055d8 <_printf_float+0x254>
 80055b6:	ee18 3a10 	vmov	r3, s16
 80055ba:	4652      	mov	r2, sl
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af3f 	beq.w	8005446 <_printf_float+0xc2>
 80055c8:	f04f 0800 	mov.w	r8, #0
 80055cc:	f104 091a 	add.w	r9, r4, #26
 80055d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4543      	cmp	r3, r8
 80055d6:	dc09      	bgt.n	80055ec <_printf_float+0x268>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	f100 8105 	bmi.w	80057ea <_printf_float+0x466>
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055e4:	4298      	cmp	r0, r3
 80055e6:	bfb8      	it	lt
 80055e8:	4618      	movlt	r0, r3
 80055ea:	e72e      	b.n	800544a <_printf_float+0xc6>
 80055ec:	2301      	movs	r3, #1
 80055ee:	464a      	mov	r2, r9
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af25 	beq.w	8005446 <_printf_float+0xc2>
 80055fc:	f108 0801 	add.w	r8, r8, #1
 8005600:	e7e6      	b.n	80055d0 <_printf_float+0x24c>
 8005602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	dc39      	bgt.n	800567c <_printf_float+0x2f8>
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <_printf_float+0x2f4>)
 800560a:	2301      	movs	r3, #1
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af17 	beq.w	8005446 <_printf_float+0xc2>
 8005618:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800561c:	4313      	orrs	r3, r2
 800561e:	d102      	bne.n	8005626 <_printf_float+0x2a2>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	d5d8      	bpl.n	80055d8 <_printf_float+0x254>
 8005626:	ee18 3a10 	vmov	r3, s16
 800562a:	4652      	mov	r2, sl
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	f43f af07 	beq.w	8005446 <_printf_float+0xc2>
 8005638:	f04f 0900 	mov.w	r9, #0
 800563c:	f104 0a1a 	add.w	sl, r4, #26
 8005640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005642:	425b      	negs	r3, r3
 8005644:	454b      	cmp	r3, r9
 8005646:	dc01      	bgt.n	800564c <_printf_float+0x2c8>
 8005648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564a:	e792      	b.n	8005572 <_printf_float+0x1ee>
 800564c:	2301      	movs	r3, #1
 800564e:	4652      	mov	r2, sl
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f aef5 	beq.w	8005446 <_printf_float+0xc2>
 800565c:	f109 0901 	add.w	r9, r9, #1
 8005660:	e7ee      	b.n	8005640 <_printf_float+0x2bc>
 8005662:	bf00      	nop
 8005664:	7fefffff 	.word	0x7fefffff
 8005668:	08009b08 	.word	0x08009b08
 800566c:	08009b0c 	.word	0x08009b0c
 8005670:	08009b14 	.word	0x08009b14
 8005674:	08009b10 	.word	0x08009b10
 8005678:	08009b18 	.word	0x08009b18
 800567c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800567e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005680:	429a      	cmp	r2, r3
 8005682:	bfa8      	it	ge
 8005684:	461a      	movge	r2, r3
 8005686:	2a00      	cmp	r2, #0
 8005688:	4691      	mov	r9, r2
 800568a:	dc37      	bgt.n	80056fc <_printf_float+0x378>
 800568c:	f04f 0b00 	mov.w	fp, #0
 8005690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005694:	f104 021a 	add.w	r2, r4, #26
 8005698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800569a:	9309      	str	r3, [sp, #36]	; 0x24
 800569c:	eba3 0309 	sub.w	r3, r3, r9
 80056a0:	455b      	cmp	r3, fp
 80056a2:	dc33      	bgt.n	800570c <_printf_float+0x388>
 80056a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056a8:	429a      	cmp	r2, r3
 80056aa:	db3b      	blt.n	8005724 <_printf_float+0x3a0>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07da      	lsls	r2, r3, #31
 80056b0:	d438      	bmi.n	8005724 <_printf_float+0x3a0>
 80056b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056b8:	1a9a      	subs	r2, r3, r2
 80056ba:	eba3 0901 	sub.w	r9, r3, r1
 80056be:	4591      	cmp	r9, r2
 80056c0:	bfa8      	it	ge
 80056c2:	4691      	movge	r9, r2
 80056c4:	f1b9 0f00 	cmp.w	r9, #0
 80056c8:	dc35      	bgt.n	8005736 <_printf_float+0x3b2>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056d2:	f104 0a1a 	add.w	sl, r4, #26
 80056d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	eba3 0309 	sub.w	r3, r3, r9
 80056e0:	4543      	cmp	r3, r8
 80056e2:	f77f af79 	ble.w	80055d8 <_printf_float+0x254>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f aea8 	beq.w	8005446 <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	e7ec      	b.n	80056d6 <_printf_float+0x352>
 80056fc:	4613      	mov	r3, r2
 80056fe:	4631      	mov	r1, r6
 8005700:	4642      	mov	r2, r8
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d1c0      	bne.n	800568c <_printf_float+0x308>
 800570a:	e69c      	b.n	8005446 <_printf_float+0xc2>
 800570c:	2301      	movs	r3, #1
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	9209      	str	r2, [sp, #36]	; 0x24
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f ae95 	beq.w	8005446 <_printf_float+0xc2>
 800571c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571e:	f10b 0b01 	add.w	fp, fp, #1
 8005722:	e7b9      	b.n	8005698 <_printf_float+0x314>
 8005724:	ee18 3a10 	vmov	r3, s16
 8005728:	4652      	mov	r2, sl
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d1be      	bne.n	80056b2 <_printf_float+0x32e>
 8005734:	e687      	b.n	8005446 <_printf_float+0xc2>
 8005736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005738:	464b      	mov	r3, r9
 800573a:	4442      	add	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d1c1      	bne.n	80056ca <_printf_float+0x346>
 8005746:	e67e      	b.n	8005446 <_printf_float+0xc2>
 8005748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800574a:	2a01      	cmp	r2, #1
 800574c:	dc01      	bgt.n	8005752 <_printf_float+0x3ce>
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d538      	bpl.n	80057c4 <_printf_float+0x440>
 8005752:	2301      	movs	r3, #1
 8005754:	4642      	mov	r2, r8
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f ae72 	beq.w	8005446 <_printf_float+0xc2>
 8005762:	ee18 3a10 	vmov	r3, s16
 8005766:	4652      	mov	r2, sl
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae69 	beq.w	8005446 <_printf_float+0xc2>
 8005774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005780:	b9d8      	cbnz	r0, 80057ba <_printf_float+0x436>
 8005782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005784:	f108 0201 	add.w	r2, r8, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	d10e      	bne.n	80057b2 <_printf_float+0x42e>
 8005794:	e657      	b.n	8005446 <_printf_float+0xc2>
 8005796:	2301      	movs	r3, #1
 8005798:	4652      	mov	r2, sl
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae50 	beq.w	8005446 <_printf_float+0xc2>
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4543      	cmp	r3, r8
 80057b0:	dcf1      	bgt.n	8005796 <_printf_float+0x412>
 80057b2:	464b      	mov	r3, r9
 80057b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b8:	e6dc      	b.n	8005574 <_printf_float+0x1f0>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0a1a 	add.w	sl, r4, #26
 80057c2:	e7f2      	b.n	80057aa <_printf_float+0x426>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4642      	mov	r2, r8
 80057c8:	e7df      	b.n	800578a <_printf_float+0x406>
 80057ca:	2301      	movs	r3, #1
 80057cc:	464a      	mov	r2, r9
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae36 	beq.w	8005446 <_printf_float+0xc2>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	4543      	cmp	r3, r8
 80057e6:	dcf0      	bgt.n	80057ca <_printf_float+0x446>
 80057e8:	e6fa      	b.n	80055e0 <_printf_float+0x25c>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0919 	add.w	r9, r4, #25
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x45a>

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	68e5      	ldr	r5, [r4, #12]
 800585e:	6832      	ldr	r2, [r6, #0]
 8005860:	f003 0306 	and.w	r3, r3, #6
 8005864:	2b04      	cmp	r3, #4
 8005866:	bf08      	it	eq
 8005868:	1aad      	subeq	r5, r5, r2
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d8 	beq.w	8005aa2 <_printf_i+0x1d2>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80a3 	beq.w	8005a3e <_printf_i+0x16e>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a89 	.word	0x08005a89
 8005940:	080059ad 	.word	0x080059ad
 8005944:	08005a6b 	.word	0x08005a6b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aab 	.word	0x08005aab
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a73 	.word	0x08005a73
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e0a3      	b.n	8005ac4 <_printf_i+0x1f4>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	6829      	ldr	r1, [r5, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	f101 0304 	add.w	r3, r1, #4
 8005986:	d50a      	bpl.n	800599e <_printf_i+0xce>
 8005988:	680e      	ldr	r6, [r1, #0]
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	2e00      	cmp	r6, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0xc8>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	4276      	negs	r6, r6
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	485e      	ldr	r0, [pc, #376]	; (8005b14 <_printf_i+0x244>)
 800599a:	230a      	movs	r3, #10
 800599c:	e019      	b.n	80059d2 <_printf_i+0x102>
 800599e:	680e      	ldr	r6, [r1, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	bf18      	it	ne
 80059a8:	b236      	sxthne	r6, r6
 80059aa:	e7ef      	b.n	800598c <_printf_i+0xbc>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0601      	lsls	r1, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xec>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xf2>
 80059bc:	0646      	lsls	r6, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe8>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4854      	ldr	r0, [pc, #336]	; (8005b14 <_printf_i+0x244>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x118>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04d      	beq.n	8005a84 <_printf_i+0x1b4>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x11a>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x14c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x14c>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee2 	bl	80057f4 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14c      	bne.n	8005ace <_printf_i+0x1fe>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4835      	ldr	r0, [pc, #212]	; (8005b14 <_printf_i+0x244>)
 8005a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	6029      	str	r1, [r5, #0]
 8005a4e:	061d      	lsls	r5, r3, #24
 8005a50:	d514      	bpl.n	8005a7c <_printf_i+0x1ac>
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	bf44      	itt	mi
 8005a56:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5a:	6023      	strmi	r3, [r4, #0]
 8005a5c:	b91e      	cbnz	r6, 8005a66 <_printf_i+0x196>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7b0      	b.n	80059cc <_printf_i+0xfc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	2378      	movs	r3, #120	; 0x78
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <_printf_i+0x248>)
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	e7e3      	b.n	8005a44 <_printf_i+0x174>
 8005a7c:	0659      	lsls	r1, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2b6      	uxthmi	r6, r6
 8005a82:	e7e6      	b.n	8005a52 <_printf_i+0x182>
 8005a84:	4615      	mov	r5, r2
 8005a86:	e7bb      	b.n	8005a00 <_printf_i+0x130>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6826      	ldr	r6, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6028      	str	r0, [r5, #0]
 8005a92:	0635      	lsls	r5, r6, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1cc>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1d2>
 8005a9c:	0670      	lsls	r0, r6, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1c8>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7ba      	b.n	8005a20 <_printf_i+0x150>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fa fb9a 	bl	80001f0 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1f2>
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	e7a8      	b.n	8005a20 <_printf_i+0x150>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ab      	beq.n	8005a34 <_printf_i+0x164>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x23a>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a4      	b.n	8005a38 <_printf_i+0x168>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09b      	beq.n	8005a34 <_printf_i+0x164>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x21e>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x212>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x22e>
 8005b12:	bf00      	nop
 8005b14:	08009b1a 	.word	0x08009b1a
 8005b18:	08009b2b 	.word	0x08009b2b

08005b1c <siprintf>:
 8005b1c:	b40e      	push	{r1, r2, r3}
 8005b1e:	b500      	push	{lr}
 8005b20:	b09c      	sub	sp, #112	; 0x70
 8005b22:	ab1d      	add	r3, sp, #116	; 0x74
 8005b24:	9002      	str	r0, [sp, #8]
 8005b26:	9006      	str	r0, [sp, #24]
 8005b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b2c:	4809      	ldr	r0, [pc, #36]	; (8005b54 <siprintf+0x38>)
 8005b2e:	9107      	str	r1, [sp, #28]
 8005b30:	9104      	str	r1, [sp, #16]
 8005b32:	4909      	ldr	r1, [pc, #36]	; (8005b58 <siprintf+0x3c>)
 8005b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	a902      	add	r1, sp, #8
 8005b40:	f001 fb76 	bl	8007230 <_svfiprintf_r>
 8005b44:	9b02      	ldr	r3, [sp, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	b01c      	add	sp, #112	; 0x70
 8005b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b50:	b003      	add	sp, #12
 8005b52:	4770      	bx	lr
 8005b54:	20000034 	.word	0x20000034
 8005b58:	ffff0208 	.word	0xffff0208

08005b5c <quorem>:
 8005b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	6903      	ldr	r3, [r0, #16]
 8005b62:	690c      	ldr	r4, [r1, #16]
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	4607      	mov	r7, r0
 8005b68:	f2c0 8081 	blt.w	8005c6e <quorem+0x112>
 8005b6c:	3c01      	subs	r4, #1
 8005b6e:	f101 0814 	add.w	r8, r1, #20
 8005b72:	f100 0514 	add.w	r5, r0, #20
 8005b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b84:	3301      	adds	r3, #1
 8005b86:	429a      	cmp	r2, r3
 8005b88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b90:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b94:	d331      	bcc.n	8005bfa <quorem+0x9e>
 8005b96:	f04f 0e00 	mov.w	lr, #0
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	46ac      	mov	ip, r5
 8005b9e:	46f2      	mov	sl, lr
 8005ba0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ba4:	b293      	uxth	r3, r2
 8005ba6:	fb06 e303 	mla	r3, r6, r3, lr
 8005baa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005bb4:	f8dc a000 	ldr.w	sl, [ip]
 8005bb8:	0c12      	lsrs	r2, r2, #16
 8005bba:	fa13 f38a 	uxtah	r3, r3, sl
 8005bbe:	fb06 e202 	mla	r2, r6, r2, lr
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bca:	b292      	uxth	r2, r2
 8005bcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bd4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bd8:	4581      	cmp	r9, r0
 8005bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bde:	f84c 3b04 	str.w	r3, [ip], #4
 8005be2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005be6:	d2db      	bcs.n	8005ba0 <quorem+0x44>
 8005be8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bec:	b92b      	cbnz	r3, 8005bfa <quorem+0x9e>
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	3b04      	subs	r3, #4
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	d32e      	bcc.n	8005c56 <quorem+0xfa>
 8005bf8:	613c      	str	r4, [r7, #16]
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f001 f8c6 	bl	8006d8c <__mcmp>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	db24      	blt.n	8005c4e <quorem+0xf2>
 8005c04:	3601      	adds	r6, #1
 8005c06:	4628      	mov	r0, r5
 8005c08:	f04f 0c00 	mov.w	ip, #0
 8005c0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c10:	f8d0 e000 	ldr.w	lr, [r0]
 8005c14:	b293      	uxth	r3, r2
 8005c16:	ebac 0303 	sub.w	r3, ip, r3
 8005c1a:	0c12      	lsrs	r2, r2, #16
 8005c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8005c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c2e:	45c1      	cmp	r9, r8
 8005c30:	f840 3b04 	str.w	r3, [r0], #4
 8005c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c38:	d2e8      	bcs.n	8005c0c <quorem+0xb0>
 8005c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c42:	b922      	cbnz	r2, 8005c4e <quorem+0xf2>
 8005c44:	3b04      	subs	r3, #4
 8005c46:	429d      	cmp	r5, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	d30a      	bcc.n	8005c62 <quorem+0x106>
 8005c4c:	613c      	str	r4, [r7, #16]
 8005c4e:	4630      	mov	r0, r6
 8005c50:	b003      	add	sp, #12
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d1cc      	bne.n	8005bf8 <quorem+0x9c>
 8005c5e:	3c01      	subs	r4, #1
 8005c60:	e7c7      	b.n	8005bf2 <quorem+0x96>
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	3b04      	subs	r3, #4
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	d1f0      	bne.n	8005c4c <quorem+0xf0>
 8005c6a:	3c01      	subs	r4, #1
 8005c6c:	e7eb      	b.n	8005c46 <quorem+0xea>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e7ee      	b.n	8005c50 <quorem+0xf4>
 8005c72:	0000      	movs	r0, r0
 8005c74:	0000      	movs	r0, r0
	...

08005c78 <_dtoa_r>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	ed2d 8b04 	vpush	{d8-d9}
 8005c80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c82:	b093      	sub	sp, #76	; 0x4c
 8005c84:	4604      	mov	r4, r0
 8005c86:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8005c8a:	4616      	mov	r6, r2
 8005c8c:	461f      	mov	r7, r3
 8005c8e:	4692      	mov	sl, r2
 8005c90:	469b      	mov	fp, r3
 8005c92:	b975      	cbnz	r5, 8005cb2 <_dtoa_r+0x3a>
 8005c94:	2010      	movs	r0, #16
 8005c96:	f000 fde1 	bl	800685c <malloc>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c9e:	b920      	cbnz	r0, 8005caa <_dtoa_r+0x32>
 8005ca0:	4ba9      	ldr	r3, [pc, #676]	; (8005f48 <_dtoa_r+0x2d0>)
 8005ca2:	21ea      	movs	r1, #234	; 0xea
 8005ca4:	48a9      	ldr	r0, [pc, #676]	; (8005f4c <_dtoa_r+0x2d4>)
 8005ca6:	f001 fbd3 	bl	8007450 <__assert_func>
 8005caa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cae:	6005      	str	r5, [r0, #0]
 8005cb0:	60c5      	str	r5, [r0, #12]
 8005cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb4:	6819      	ldr	r1, [r3, #0]
 8005cb6:	b151      	cbz	r1, 8005cce <_dtoa_r+0x56>
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	604a      	str	r2, [r1, #4]
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4093      	lsls	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fe20 	bl	8006908 <_Bfree>
 8005cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	1e3b      	subs	r3, r7, #0
 8005cd0:	bfaa      	itet	ge
 8005cd2:	2300      	movge	r3, #0
 8005cd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005cd8:	f8c8 3000 	strge.w	r3, [r8]
 8005cdc:	4b9c      	ldr	r3, [pc, #624]	; (8005f50 <_dtoa_r+0x2d8>)
 8005cde:	bfbc      	itt	lt
 8005ce0:	2201      	movlt	r2, #1
 8005ce2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ce6:	ea33 030b 	bics.w	r3, r3, fp
 8005cea:	d11b      	bne.n	8005d24 <_dtoa_r+0xac>
 8005cec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cee:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cf8:	4333      	orrs	r3, r6
 8005cfa:	f000 8596 	beq.w	800682a <_dtoa_r+0xbb2>
 8005cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d00:	b963      	cbnz	r3, 8005d1c <_dtoa_r+0xa4>
 8005d02:	4b94      	ldr	r3, [pc, #592]	; (8005f54 <_dtoa_r+0x2dc>)
 8005d04:	e022      	b.n	8005d4c <_dtoa_r+0xd4>
 8005d06:	4b94      	ldr	r3, [pc, #592]	; (8005f58 <_dtoa_r+0x2e0>)
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	9804      	ldr	r0, [sp, #16]
 8005d12:	b013      	add	sp, #76	; 0x4c
 8005d14:	ecbd 8b04 	vpop	{d8-d9}
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	4b8d      	ldr	r3, [pc, #564]	; (8005f54 <_dtoa_r+0x2dc>)
 8005d1e:	9304      	str	r3, [sp, #16]
 8005d20:	3303      	adds	r3, #3
 8005d22:	e7f3      	b.n	8005d0c <_dtoa_r+0x94>
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	f7fa fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d30:	ec4b ab19 	vmov	d9, sl, fp
 8005d34:	4680      	mov	r8, r0
 8005d36:	b158      	cbz	r0, 8005d50 <_dtoa_r+0xd8>
 8005d38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 856f 	beq.w	8006824 <_dtoa_r+0xbac>
 8005d46:	4885      	ldr	r0, [pc, #532]	; (8005f5c <_dtoa_r+0x2e4>)
 8005d48:	6018      	str	r0, [r3, #0]
 8005d4a:	1e43      	subs	r3, r0, #1
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	e7df      	b.n	8005d10 <_dtoa_r+0x98>
 8005d50:	ab10      	add	r3, sp, #64	; 0x40
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	ab11      	add	r3, sp, #68	; 0x44
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4652      	mov	r2, sl
 8005d5a:	465b      	mov	r3, fp
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f001 f8bb 	bl	8006ed8 <__d2b>
 8005d62:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005d66:	ee08 0a10 	vmov	s16, r0
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	f000 8084 	beq.w	8005e78 <_dtoa_r+0x200>
 8005d70:	ee19 3a90 	vmov	r3, s19
 8005d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d78:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d7c:	4656      	mov	r6, sl
 8005d7e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d82:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d86:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005d8a:	4b75      	ldr	r3, [pc, #468]	; (8005f60 <_dtoa_r+0x2e8>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fa81 	bl	8000298 <__aeabi_dsub>
 8005d96:	a366      	add	r3, pc, #408	; (adr r3, 8005f30 <_dtoa_r+0x2b8>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fc34 	bl	8000608 <__aeabi_dmul>
 8005da0:	a365      	add	r3, pc, #404	; (adr r3, 8005f38 <_dtoa_r+0x2c0>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fa79 	bl	800029c <__adddf3>
 8005daa:	4606      	mov	r6, r0
 8005dac:	4628      	mov	r0, r5
 8005dae:	460f      	mov	r7, r1
 8005db0:	f7fa fbc0 	bl	8000534 <__aeabi_i2d>
 8005db4:	a362      	add	r3, pc, #392	; (adr r3, 8005f40 <_dtoa_r+0x2c8>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fc25 	bl	8000608 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fa69 	bl	800029c <__adddf3>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	f7fa fecb 	bl	8000b68 <__aeabi_d2iz>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	9003      	str	r0, [sp, #12]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa fe86 	bl	8000aec <__aeabi_dcmplt>
 8005de0:	b150      	cbz	r0, 8005df8 <_dtoa_r+0x180>
 8005de2:	9803      	ldr	r0, [sp, #12]
 8005de4:	f7fa fba6 	bl	8000534 <__aeabi_i2d>
 8005de8:	4632      	mov	r2, r6
 8005dea:	463b      	mov	r3, r7
 8005dec:	f7fa fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8005df0:	b910      	cbnz	r0, 8005df8 <_dtoa_r+0x180>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	9303      	str	r3, [sp, #12]
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	2b16      	cmp	r3, #22
 8005dfc:	d85a      	bhi.n	8005eb4 <_dtoa_r+0x23c>
 8005dfe:	9a03      	ldr	r2, [sp, #12]
 8005e00:	4b58      	ldr	r3, [pc, #352]	; (8005f64 <_dtoa_r+0x2ec>)
 8005e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	ec51 0b19 	vmov	r0, r1, d9
 8005e0e:	f7fa fe6d 	bl	8000aec <__aeabi_dcmplt>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d050      	beq.n	8005eb8 <_dtoa_r+0x240>
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	9303      	str	r3, [sp, #12]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e22:	1b5d      	subs	r5, r3, r5
 8005e24:	1e6b      	subs	r3, r5, #1
 8005e26:	9308      	str	r3, [sp, #32]
 8005e28:	bf45      	ittet	mi
 8005e2a:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e2e:	9307      	strmi	r3, [sp, #28]
 8005e30:	2300      	movpl	r3, #0
 8005e32:	2300      	movmi	r3, #0
 8005e34:	bf4c      	ite	mi
 8005e36:	9308      	strmi	r3, [sp, #32]
 8005e38:	9307      	strpl	r3, [sp, #28]
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	db3d      	blt.n	8005ebc <_dtoa_r+0x244>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	9a03      	ldr	r2, [sp, #12]
 8005e44:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e46:	4413      	add	r3, r2
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	f200 808b 	bhi.w	8005f6c <_dtoa_r+0x2f4>
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	bfc4      	itt	gt
 8005e5a:	3b04      	subgt	r3, #4
 8005e5c:	9320      	strgt	r3, [sp, #128]	; 0x80
 8005e5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e60:	f1a3 0302 	sub.w	r3, r3, #2
 8005e64:	bfcc      	ite	gt
 8005e66:	2500      	movgt	r5, #0
 8005e68:	2501      	movle	r5, #1
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	f200 8089 	bhi.w	8005f82 <_dtoa_r+0x30a>
 8005e70:	e8df f003 	tbb	[pc, r3]
 8005e74:	59383a2d 	.word	0x59383a2d
 8005e78:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e7c:	441d      	add	r5, r3
 8005e7e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	bfc1      	itttt	gt
 8005e86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e8a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e8e:	fa0b f303 	lslgt.w	r3, fp, r3
 8005e92:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e96:	bfda      	itte	le
 8005e98:	f1c3 0320 	rsble	r3, r3, #32
 8005e9c:	fa06 f003 	lslle.w	r0, r6, r3
 8005ea0:	4318      	orrgt	r0, r3
 8005ea2:	f7fa fb37 	bl	8000514 <__aeabi_ui2d>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005eae:	3d01      	subs	r5, #1
 8005eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8005eb2:	e76a      	b.n	8005d8a <_dtoa_r+0x112>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e7b2      	b.n	8005e1e <_dtoa_r+0x1a6>
 8005eb8:	900c      	str	r0, [sp, #48]	; 0x30
 8005eba:	e7b1      	b.n	8005e20 <_dtoa_r+0x1a8>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	9a03      	ldr	r2, [sp, #12]
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	4253      	negs	r3, r2
 8005ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec8:	2300      	movs	r3, #0
 8005eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ecc:	e7bf      	b.n	8005e4e <_dtoa_r+0x1d6>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	dc57      	bgt.n	8005f88 <_dtoa_r+0x310>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	9221      	str	r2, [sp, #132]	; 0x84
 8005ee2:	e00c      	b.n	8005efe <_dtoa_r+0x286>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e7f3      	b.n	8005ed0 <_dtoa_r+0x258>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eec:	930a      	str	r3, [sp, #40]	; 0x28
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	9306      	str	r3, [sp, #24]
 8005efa:	bfb8      	it	lt
 8005efc:	2301      	movlt	r3, #1
 8005efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f00:	2200      	movs	r2, #0
 8005f02:	6042      	str	r2, [r0, #4]
 8005f04:	2204      	movs	r2, #4
 8005f06:	f102 0614 	add.w	r6, r2, #20
 8005f0a:	429e      	cmp	r6, r3
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	d93f      	bls.n	8005f90 <_dtoa_r+0x318>
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fcb9 	bl	8006888 <_Balloc>
 8005f16:	9004      	str	r0, [sp, #16]
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d13d      	bne.n	8005f98 <_dtoa_r+0x320>
 8005f1c:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <_dtoa_r+0x2f0>)
 8005f1e:	4602      	mov	r2, r0
 8005f20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f24:	e6be      	b.n	8005ca4 <_dtoa_r+0x2c>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7df      	b.n	8005eea <_dtoa_r+0x272>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	636f4361 	.word	0x636f4361
 8005f34:	3fd287a7 	.word	0x3fd287a7
 8005f38:	8b60c8b3 	.word	0x8b60c8b3
 8005f3c:	3fc68a28 	.word	0x3fc68a28
 8005f40:	509f79fb 	.word	0x509f79fb
 8005f44:	3fd34413 	.word	0x3fd34413
 8005f48:	08009b49 	.word	0x08009b49
 8005f4c:	08009b60 	.word	0x08009b60
 8005f50:	7ff00000 	.word	0x7ff00000
 8005f54:	08009b45 	.word	0x08009b45
 8005f58:	08009b3c 	.word	0x08009b3c
 8005f5c:	08009b19 	.word	0x08009b19
 8005f60:	3ff80000 	.word	0x3ff80000
 8005f64:	08009c50 	.word	0x08009c50
 8005f68:	08009bbb 	.word	0x08009bbb
 8005f6c:	2501      	movs	r5, #1
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9320      	str	r3, [sp, #128]	; 0x80
 8005f72:	950a      	str	r5, [sp, #40]	; 0x28
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2312      	movs	r3, #18
 8005f80:	e7ae      	b.n	8005ee0 <_dtoa_r+0x268>
 8005f82:	2301      	movs	r3, #1
 8005f84:	930a      	str	r3, [sp, #40]	; 0x28
 8005f86:	e7f5      	b.n	8005f74 <_dtoa_r+0x2fc>
 8005f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005f8e:	e7b6      	b.n	8005efe <_dtoa_r+0x286>
 8005f90:	3101      	adds	r1, #1
 8005f92:	6041      	str	r1, [r0, #4]
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	e7b6      	b.n	8005f06 <_dtoa_r+0x28e>
 8005f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9a:	9a04      	ldr	r2, [sp, #16]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	2b0e      	cmp	r3, #14
 8005fa2:	f200 809d 	bhi.w	80060e0 <_dtoa_r+0x468>
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	f000 809a 	beq.w	80060e0 <_dtoa_r+0x468>
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd32      	ble.n	8006018 <_dtoa_r+0x3a0>
 8005fb2:	4ab7      	ldr	r2, [pc, #732]	; (8006290 <_dtoa_r+0x618>)
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	05d8      	lsls	r0, r3, #23
 8005fc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005fc8:	d516      	bpl.n	8005ff8 <_dtoa_r+0x380>
 8005fca:	4bb2      	ldr	r3, [pc, #712]	; (8006294 <_dtoa_r+0x61c>)
 8005fcc:	ec51 0b19 	vmov	r0, r1, d9
 8005fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fd4:	f7fa fc42 	bl	800085c <__aeabi_ddiv>
 8005fd8:	f007 070f 	and.w	r7, r7, #15
 8005fdc:	4682      	mov	sl, r0
 8005fde:	468b      	mov	fp, r1
 8005fe0:	2503      	movs	r5, #3
 8005fe2:	4eac      	ldr	r6, [pc, #688]	; (8006294 <_dtoa_r+0x61c>)
 8005fe4:	b957      	cbnz	r7, 8005ffc <_dtoa_r+0x384>
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	464b      	mov	r3, r9
 8005fea:	4650      	mov	r0, sl
 8005fec:	4659      	mov	r1, fp
 8005fee:	f7fa fc35 	bl	800085c <__aeabi_ddiv>
 8005ff2:	4682      	mov	sl, r0
 8005ff4:	468b      	mov	fp, r1
 8005ff6:	e028      	b.n	800604a <_dtoa_r+0x3d2>
 8005ff8:	2502      	movs	r5, #2
 8005ffa:	e7f2      	b.n	8005fe2 <_dtoa_r+0x36a>
 8005ffc:	07f9      	lsls	r1, r7, #31
 8005ffe:	d508      	bpl.n	8006012 <_dtoa_r+0x39a>
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006008:	f7fa fafe 	bl	8000608 <__aeabi_dmul>
 800600c:	3501      	adds	r5, #1
 800600e:	4680      	mov	r8, r0
 8006010:	4689      	mov	r9, r1
 8006012:	107f      	asrs	r7, r7, #1
 8006014:	3608      	adds	r6, #8
 8006016:	e7e5      	b.n	8005fe4 <_dtoa_r+0x36c>
 8006018:	f000 809b 	beq.w	8006152 <_dtoa_r+0x4da>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	4f9d      	ldr	r7, [pc, #628]	; (8006294 <_dtoa_r+0x61c>)
 8006020:	425e      	negs	r6, r3
 8006022:	4b9b      	ldr	r3, [pc, #620]	; (8006290 <_dtoa_r+0x618>)
 8006024:	f006 020f 	and.w	r2, r6, #15
 8006028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	ec51 0b19 	vmov	r0, r1, d9
 8006034:	f7fa fae8 	bl	8000608 <__aeabi_dmul>
 8006038:	1136      	asrs	r6, r6, #4
 800603a:	4682      	mov	sl, r0
 800603c:	468b      	mov	fp, r1
 800603e:	2300      	movs	r3, #0
 8006040:	2502      	movs	r5, #2
 8006042:	2e00      	cmp	r6, #0
 8006044:	d17a      	bne.n	800613c <_dtoa_r+0x4c4>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1d3      	bne.n	8005ff2 <_dtoa_r+0x37a>
 800604a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8082 	beq.w	8006156 <_dtoa_r+0x4de>
 8006052:	4b91      	ldr	r3, [pc, #580]	; (8006298 <_dtoa_r+0x620>)
 8006054:	2200      	movs	r2, #0
 8006056:	4650      	mov	r0, sl
 8006058:	4659      	mov	r1, fp
 800605a:	f7fa fd47 	bl	8000aec <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d079      	beq.n	8006156 <_dtoa_r+0x4de>
 8006062:	9b06      	ldr	r3, [sp, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d076      	beq.n	8006156 <_dtoa_r+0x4de>
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dd36      	ble.n	80060dc <_dtoa_r+0x464>
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	4650      	mov	r0, sl
 8006072:	4659      	mov	r1, fp
 8006074:	1e5f      	subs	r7, r3, #1
 8006076:	2200      	movs	r2, #0
 8006078:	4b88      	ldr	r3, [pc, #544]	; (800629c <_dtoa_r+0x624>)
 800607a:	f7fa fac5 	bl	8000608 <__aeabi_dmul>
 800607e:	9e05      	ldr	r6, [sp, #20]
 8006080:	4682      	mov	sl, r0
 8006082:	468b      	mov	fp, r1
 8006084:	3501      	adds	r5, #1
 8006086:	4628      	mov	r0, r5
 8006088:	f7fa fa54 	bl	8000534 <__aeabi_i2d>
 800608c:	4652      	mov	r2, sl
 800608e:	465b      	mov	r3, fp
 8006090:	f7fa faba 	bl	8000608 <__aeabi_dmul>
 8006094:	4b82      	ldr	r3, [pc, #520]	; (80062a0 <_dtoa_r+0x628>)
 8006096:	2200      	movs	r2, #0
 8006098:	f7fa f900 	bl	800029c <__adddf3>
 800609c:	46d0      	mov	r8, sl
 800609e:	46d9      	mov	r9, fp
 80060a0:	4682      	mov	sl, r0
 80060a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	d158      	bne.n	800615c <_dtoa_r+0x4e4>
 80060aa:	4b7e      	ldr	r3, [pc, #504]	; (80062a4 <_dtoa_r+0x62c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa f8f1 	bl	8000298 <__aeabi_dsub>
 80060b6:	4652      	mov	r2, sl
 80060b8:	465b      	mov	r3, fp
 80060ba:	4680      	mov	r8, r0
 80060bc:	4689      	mov	r9, r1
 80060be:	f7fa fd33 	bl	8000b28 <__aeabi_dcmpgt>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f040 8295 	bne.w	80065f2 <_dtoa_r+0x97a>
 80060c8:	4652      	mov	r2, sl
 80060ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa fd0b 	bl	8000aec <__aeabi_dcmplt>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	f040 8289 	bne.w	80065ee <_dtoa_r+0x976>
 80060dc:	ec5b ab19 	vmov	sl, fp, d9
 80060e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f2c0 8148 	blt.w	8006378 <_dtoa_r+0x700>
 80060e8:	9a03      	ldr	r2, [sp, #12]
 80060ea:	2a0e      	cmp	r2, #14
 80060ec:	f300 8144 	bgt.w	8006378 <_dtoa_r+0x700>
 80060f0:	4b67      	ldr	r3, [pc, #412]	; (8006290 <_dtoa_r+0x618>)
 80060f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f280 80d5 	bge.w	80062ac <_dtoa_r+0x634>
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f300 80d1 	bgt.w	80062ac <_dtoa_r+0x634>
 800610a:	f040 826f 	bne.w	80065ec <_dtoa_r+0x974>
 800610e:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <_dtoa_r+0x62c>)
 8006110:	2200      	movs	r2, #0
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa fa77 	bl	8000608 <__aeabi_dmul>
 800611a:	4652      	mov	r2, sl
 800611c:	465b      	mov	r3, fp
 800611e:	f7fa fcf9 	bl	8000b14 <__aeabi_dcmpge>
 8006122:	9e06      	ldr	r6, [sp, #24]
 8006124:	4637      	mov	r7, r6
 8006126:	2800      	cmp	r0, #0
 8006128:	f040 8245 	bne.w	80065b6 <_dtoa_r+0x93e>
 800612c:	9d04      	ldr	r5, [sp, #16]
 800612e:	2331      	movs	r3, #49	; 0x31
 8006130:	f805 3b01 	strb.w	r3, [r5], #1
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	e240      	b.n	80065be <_dtoa_r+0x946>
 800613c:	07f2      	lsls	r2, r6, #31
 800613e:	d505      	bpl.n	800614c <_dtoa_r+0x4d4>
 8006140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006144:	f7fa fa60 	bl	8000608 <__aeabi_dmul>
 8006148:	3501      	adds	r5, #1
 800614a:	2301      	movs	r3, #1
 800614c:	1076      	asrs	r6, r6, #1
 800614e:	3708      	adds	r7, #8
 8006150:	e777      	b.n	8006042 <_dtoa_r+0x3ca>
 8006152:	2502      	movs	r5, #2
 8006154:	e779      	b.n	800604a <_dtoa_r+0x3d2>
 8006156:	9f03      	ldr	r7, [sp, #12]
 8006158:	9e06      	ldr	r6, [sp, #24]
 800615a:	e794      	b.n	8006086 <_dtoa_r+0x40e>
 800615c:	9904      	ldr	r1, [sp, #16]
 800615e:	4b4c      	ldr	r3, [pc, #304]	; (8006290 <_dtoa_r+0x618>)
 8006160:	4431      	add	r1, r6
 8006162:	910d      	str	r1, [sp, #52]	; 0x34
 8006164:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006166:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800616a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800616e:	2900      	cmp	r1, #0
 8006170:	d043      	beq.n	80061fa <_dtoa_r+0x582>
 8006172:	494d      	ldr	r1, [pc, #308]	; (80062a8 <_dtoa_r+0x630>)
 8006174:	2000      	movs	r0, #0
 8006176:	f7fa fb71 	bl	800085c <__aeabi_ddiv>
 800617a:	4652      	mov	r2, sl
 800617c:	465b      	mov	r3, fp
 800617e:	f7fa f88b 	bl	8000298 <__aeabi_dsub>
 8006182:	9d04      	ldr	r5, [sp, #16]
 8006184:	4682      	mov	sl, r0
 8006186:	468b      	mov	fp, r1
 8006188:	4649      	mov	r1, r9
 800618a:	4640      	mov	r0, r8
 800618c:	f7fa fcec 	bl	8000b68 <__aeabi_d2iz>
 8006190:	4606      	mov	r6, r0
 8006192:	f7fa f9cf 	bl	8000534 <__aeabi_i2d>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4640      	mov	r0, r8
 800619c:	4649      	mov	r1, r9
 800619e:	f7fa f87b 	bl	8000298 <__aeabi_dsub>
 80061a2:	3630      	adds	r6, #48	; 0x30
 80061a4:	f805 6b01 	strb.w	r6, [r5], #1
 80061a8:	4652      	mov	r2, sl
 80061aa:	465b      	mov	r3, fp
 80061ac:	4680      	mov	r8, r0
 80061ae:	4689      	mov	r9, r1
 80061b0:	f7fa fc9c 	bl	8000aec <__aeabi_dcmplt>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d163      	bne.n	8006280 <_dtoa_r+0x608>
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	4936      	ldr	r1, [pc, #216]	; (8006298 <_dtoa_r+0x620>)
 80061be:	2000      	movs	r0, #0
 80061c0:	f7fa f86a 	bl	8000298 <__aeabi_dsub>
 80061c4:	4652      	mov	r2, sl
 80061c6:	465b      	mov	r3, fp
 80061c8:	f7fa fc90 	bl	8000aec <__aeabi_dcmplt>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f040 80b5 	bne.w	800633c <_dtoa_r+0x6c4>
 80061d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d4:	429d      	cmp	r5, r3
 80061d6:	d081      	beq.n	80060dc <_dtoa_r+0x464>
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <_dtoa_r+0x624>)
 80061da:	2200      	movs	r2, #0
 80061dc:	4650      	mov	r0, sl
 80061de:	4659      	mov	r1, fp
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	4b2d      	ldr	r3, [pc, #180]	; (800629c <_dtoa_r+0x624>)
 80061e6:	4682      	mov	sl, r0
 80061e8:	468b      	mov	fp, r1
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	2200      	movs	r2, #0
 80061f0:	f7fa fa0a 	bl	8000608 <__aeabi_dmul>
 80061f4:	4680      	mov	r8, r0
 80061f6:	4689      	mov	r9, r1
 80061f8:	e7c6      	b.n	8006188 <_dtoa_r+0x510>
 80061fa:	4650      	mov	r0, sl
 80061fc:	4659      	mov	r1, fp
 80061fe:	f7fa fa03 	bl	8000608 <__aeabi_dmul>
 8006202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006204:	9d04      	ldr	r5, [sp, #16]
 8006206:	930f      	str	r3, [sp, #60]	; 0x3c
 8006208:	4682      	mov	sl, r0
 800620a:	468b      	mov	fp, r1
 800620c:	4649      	mov	r1, r9
 800620e:	4640      	mov	r0, r8
 8006210:	f7fa fcaa 	bl	8000b68 <__aeabi_d2iz>
 8006214:	4606      	mov	r6, r0
 8006216:	f7fa f98d 	bl	8000534 <__aeabi_i2d>
 800621a:	3630      	adds	r6, #48	; 0x30
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	f7fa f838 	bl	8000298 <__aeabi_dsub>
 8006228:	f805 6b01 	strb.w	r6, [r5], #1
 800622c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800622e:	429d      	cmp	r5, r3
 8006230:	4680      	mov	r8, r0
 8006232:	4689      	mov	r9, r1
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	d124      	bne.n	8006284 <_dtoa_r+0x60c>
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <_dtoa_r+0x630>)
 800623c:	4650      	mov	r0, sl
 800623e:	4659      	mov	r1, fp
 8006240:	f7fa f82c 	bl	800029c <__adddf3>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4640      	mov	r0, r8
 800624a:	4649      	mov	r1, r9
 800624c:	f7fa fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 8006250:	2800      	cmp	r0, #0
 8006252:	d173      	bne.n	800633c <_dtoa_r+0x6c4>
 8006254:	4652      	mov	r2, sl
 8006256:	465b      	mov	r3, fp
 8006258:	4913      	ldr	r1, [pc, #76]	; (80062a8 <_dtoa_r+0x630>)
 800625a:	2000      	movs	r0, #0
 800625c:	f7fa f81c 	bl	8000298 <__aeabi_dsub>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4640      	mov	r0, r8
 8006266:	4649      	mov	r1, r9
 8006268:	f7fa fc40 	bl	8000aec <__aeabi_dcmplt>
 800626c:	2800      	cmp	r0, #0
 800626e:	f43f af35 	beq.w	80060dc <_dtoa_r+0x464>
 8006272:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006274:	1e6b      	subs	r3, r5, #1
 8006276:	930f      	str	r3, [sp, #60]	; 0x3c
 8006278:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800627c:	2b30      	cmp	r3, #48	; 0x30
 800627e:	d0f8      	beq.n	8006272 <_dtoa_r+0x5fa>
 8006280:	9703      	str	r7, [sp, #12]
 8006282:	e049      	b.n	8006318 <_dtoa_r+0x6a0>
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <_dtoa_r+0x624>)
 8006286:	f7fa f9bf 	bl	8000608 <__aeabi_dmul>
 800628a:	4680      	mov	r8, r0
 800628c:	4689      	mov	r9, r1
 800628e:	e7bd      	b.n	800620c <_dtoa_r+0x594>
 8006290:	08009c50 	.word	0x08009c50
 8006294:	08009c28 	.word	0x08009c28
 8006298:	3ff00000 	.word	0x3ff00000
 800629c:	40240000 	.word	0x40240000
 80062a0:	401c0000 	.word	0x401c0000
 80062a4:	40140000 	.word	0x40140000
 80062a8:	3fe00000 	.word	0x3fe00000
 80062ac:	9d04      	ldr	r5, [sp, #16]
 80062ae:	4656      	mov	r6, sl
 80062b0:	465f      	mov	r7, fp
 80062b2:	4642      	mov	r2, r8
 80062b4:	464b      	mov	r3, r9
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa facf 	bl	800085c <__aeabi_ddiv>
 80062be:	f7fa fc53 	bl	8000b68 <__aeabi_d2iz>
 80062c2:	4682      	mov	sl, r0
 80062c4:	f7fa f936 	bl	8000534 <__aeabi_i2d>
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	f7fa f99c 	bl	8000608 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80062dc:	f7f9 ffdc 	bl	8000298 <__aeabi_dsub>
 80062e0:	f805 6b01 	strb.w	r6, [r5], #1
 80062e4:	9e04      	ldr	r6, [sp, #16]
 80062e6:	9f06      	ldr	r7, [sp, #24]
 80062e8:	1bae      	subs	r6, r5, r6
 80062ea:	42b7      	cmp	r7, r6
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	d135      	bne.n	800635e <_dtoa_r+0x6e6>
 80062f2:	f7f9 ffd3 	bl	800029c <__adddf3>
 80062f6:	4642      	mov	r2, r8
 80062f8:	464b      	mov	r3, r9
 80062fa:	4606      	mov	r6, r0
 80062fc:	460f      	mov	r7, r1
 80062fe:	f7fa fc13 	bl	8000b28 <__aeabi_dcmpgt>
 8006302:	b9d0      	cbnz	r0, 800633a <_dtoa_r+0x6c2>
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006310:	b110      	cbz	r0, 8006318 <_dtoa_r+0x6a0>
 8006312:	f01a 0f01 	tst.w	sl, #1
 8006316:	d110      	bne.n	800633a <_dtoa_r+0x6c2>
 8006318:	4620      	mov	r0, r4
 800631a:	ee18 1a10 	vmov	r1, s16
 800631e:	f000 faf3 	bl	8006908 <_Bfree>
 8006322:	2300      	movs	r3, #0
 8006324:	9803      	ldr	r0, [sp, #12]
 8006326:	702b      	strb	r3, [r5, #0]
 8006328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800632a:	3001      	adds	r0, #1
 800632c:	6018      	str	r0, [r3, #0]
 800632e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006330:	2b00      	cmp	r3, #0
 8006332:	f43f aced 	beq.w	8005d10 <_dtoa_r+0x98>
 8006336:	601d      	str	r5, [r3, #0]
 8006338:	e4ea      	b.n	8005d10 <_dtoa_r+0x98>
 800633a:	9f03      	ldr	r7, [sp, #12]
 800633c:	462b      	mov	r3, r5
 800633e:	461d      	mov	r5, r3
 8006340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006344:	2a39      	cmp	r2, #57	; 0x39
 8006346:	d106      	bne.n	8006356 <_dtoa_r+0x6de>
 8006348:	9a04      	ldr	r2, [sp, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	d1f7      	bne.n	800633e <_dtoa_r+0x6c6>
 800634e:	9904      	ldr	r1, [sp, #16]
 8006350:	2230      	movs	r2, #48	; 0x30
 8006352:	3701      	adds	r7, #1
 8006354:	700a      	strb	r2, [r1, #0]
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	3201      	adds	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	e790      	b.n	8006280 <_dtoa_r+0x608>
 800635e:	4ba6      	ldr	r3, [pc, #664]	; (80065f8 <_dtoa_r+0x980>)
 8006360:	2200      	movs	r2, #0
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	2200      	movs	r2, #0
 8006368:	2300      	movs	r3, #0
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	f7fa fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006372:	2800      	cmp	r0, #0
 8006374:	d09d      	beq.n	80062b2 <_dtoa_r+0x63a>
 8006376:	e7cf      	b.n	8006318 <_dtoa_r+0x6a0>
 8006378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800637a:	2a00      	cmp	r2, #0
 800637c:	f000 80d7 	beq.w	800652e <_dtoa_r+0x8b6>
 8006380:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006382:	2a01      	cmp	r2, #1
 8006384:	f300 80ba 	bgt.w	80064fc <_dtoa_r+0x884>
 8006388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800638a:	2a00      	cmp	r2, #0
 800638c:	f000 80b2 	beq.w	80064f4 <_dtoa_r+0x87c>
 8006390:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006394:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006396:	9d07      	ldr	r5, [sp, #28]
 8006398:	9a07      	ldr	r2, [sp, #28]
 800639a:	441a      	add	r2, r3
 800639c:	9207      	str	r2, [sp, #28]
 800639e:	9a08      	ldr	r2, [sp, #32]
 80063a0:	2101      	movs	r1, #1
 80063a2:	441a      	add	r2, r3
 80063a4:	4620      	mov	r0, r4
 80063a6:	9208      	str	r2, [sp, #32]
 80063a8:	f000 fb66 	bl	8006a78 <__i2b>
 80063ac:	4607      	mov	r7, r0
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	dd0c      	ble.n	80063cc <_dtoa_r+0x754>
 80063b2:	9b08      	ldr	r3, [sp, #32]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dd09      	ble.n	80063cc <_dtoa_r+0x754>
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	9a07      	ldr	r2, [sp, #28]
 80063bc:	bfa8      	it	ge
 80063be:	462b      	movge	r3, r5
 80063c0:	1ad2      	subs	r2, r2, r3
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	9a08      	ldr	r2, [sp, #32]
 80063c6:	1aed      	subs	r5, r5, r3
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	b31b      	cbz	r3, 8006418 <_dtoa_r+0x7a0>
 80063d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80af 	beq.w	8006536 <_dtoa_r+0x8be>
 80063d8:	2e00      	cmp	r6, #0
 80063da:	dd13      	ble.n	8006404 <_dtoa_r+0x78c>
 80063dc:	4639      	mov	r1, r7
 80063de:	4632      	mov	r2, r6
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fc09 	bl	8006bf8 <__pow5mult>
 80063e6:	ee18 2a10 	vmov	r2, s16
 80063ea:	4601      	mov	r1, r0
 80063ec:	4607      	mov	r7, r0
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fb58 	bl	8006aa4 <__multiply>
 80063f4:	ee18 1a10 	vmov	r1, s16
 80063f8:	4680      	mov	r8, r0
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fa84 	bl	8006908 <_Bfree>
 8006400:	ee08 8a10 	vmov	s16, r8
 8006404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006406:	1b9a      	subs	r2, r3, r6
 8006408:	d006      	beq.n	8006418 <_dtoa_r+0x7a0>
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	4620      	mov	r0, r4
 8006410:	f000 fbf2 	bl	8006bf8 <__pow5mult>
 8006414:	ee08 0a10 	vmov	s16, r0
 8006418:	2101      	movs	r1, #1
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fb2c 	bl	8006a78 <__i2b>
 8006420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006422:	2b00      	cmp	r3, #0
 8006424:	4606      	mov	r6, r0
 8006426:	f340 8088 	ble.w	800653a <_dtoa_r+0x8c2>
 800642a:	461a      	mov	r2, r3
 800642c:	4601      	mov	r1, r0
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fbe2 	bl	8006bf8 <__pow5mult>
 8006434:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006436:	2b01      	cmp	r3, #1
 8006438:	4606      	mov	r6, r0
 800643a:	f340 8081 	ble.w	8006540 <_dtoa_r+0x8c8>
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	6933      	ldr	r3, [r6, #16]
 8006444:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006448:	6918      	ldr	r0, [r3, #16]
 800644a:	f000 fac5 	bl	80069d8 <__hi0bits>
 800644e:	f1c0 0020 	rsb	r0, r0, #32
 8006452:	9b08      	ldr	r3, [sp, #32]
 8006454:	4418      	add	r0, r3
 8006456:	f010 001f 	ands.w	r0, r0, #31
 800645a:	f000 8092 	beq.w	8006582 <_dtoa_r+0x90a>
 800645e:	f1c0 0320 	rsb	r3, r0, #32
 8006462:	2b04      	cmp	r3, #4
 8006464:	f340 808a 	ble.w	800657c <_dtoa_r+0x904>
 8006468:	f1c0 001c 	rsb	r0, r0, #28
 800646c:	9b07      	ldr	r3, [sp, #28]
 800646e:	4403      	add	r3, r0
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	4403      	add	r3, r0
 8006476:	4405      	add	r5, r0
 8006478:	9308      	str	r3, [sp, #32]
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd07      	ble.n	8006490 <_dtoa_r+0x818>
 8006480:	ee18 1a10 	vmov	r1, s16
 8006484:	461a      	mov	r2, r3
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fc10 	bl	8006cac <__lshift>
 800648c:	ee08 0a10 	vmov	s16, r0
 8006490:	9b08      	ldr	r3, [sp, #32]
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd05      	ble.n	80064a2 <_dtoa_r+0x82a>
 8006496:	4631      	mov	r1, r6
 8006498:	461a      	mov	r2, r3
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fc06 	bl	8006cac <__lshift>
 80064a0:	4606      	mov	r6, r0
 80064a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d06e      	beq.n	8006586 <_dtoa_r+0x90e>
 80064a8:	ee18 0a10 	vmov	r0, s16
 80064ac:	4631      	mov	r1, r6
 80064ae:	f000 fc6d 	bl	8006d8c <__mcmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	da67      	bge.n	8006586 <_dtoa_r+0x90e>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	ee18 1a10 	vmov	r1, s16
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	220a      	movs	r2, #10
 80064c2:	2300      	movs	r3, #0
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fa41 	bl	800694c <__multadd>
 80064ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064cc:	ee08 0a10 	vmov	s16, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 81b1 	beq.w	8006838 <_dtoa_r+0xbc0>
 80064d6:	2300      	movs	r3, #0
 80064d8:	4639      	mov	r1, r7
 80064da:	220a      	movs	r2, #10
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 fa35 	bl	800694c <__multadd>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	4607      	mov	r7, r0
 80064e8:	f300 808e 	bgt.w	8006608 <_dtoa_r+0x990>
 80064ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	dc51      	bgt.n	8006596 <_dtoa_r+0x91e>
 80064f2:	e089      	b.n	8006608 <_dtoa_r+0x990>
 80064f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064fa:	e74b      	b.n	8006394 <_dtoa_r+0x71c>
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	1e5e      	subs	r6, r3, #1
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	42b3      	cmp	r3, r6
 8006504:	bfbf      	itttt	lt
 8006506:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8006508:	9609      	strlt	r6, [sp, #36]	; 0x24
 800650a:	1af2      	sublt	r2, r6, r3
 800650c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800650e:	bfb6      	itet	lt
 8006510:	189b      	addlt	r3, r3, r2
 8006512:	1b9e      	subge	r6, r3, r6
 8006514:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	bfb8      	it	lt
 800651a:	2600      	movlt	r6, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfb7      	itett	lt
 8006520:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
 8006524:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
 8006528:	1a9d      	sublt	r5, r3, r2
 800652a:	2300      	movlt	r3, #0
 800652c:	e734      	b.n	8006398 <_dtoa_r+0x720>
 800652e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006530:	9d07      	ldr	r5, [sp, #28]
 8006532:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006534:	e73b      	b.n	80063ae <_dtoa_r+0x736>
 8006536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006538:	e767      	b.n	800640a <_dtoa_r+0x792>
 800653a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800653c:	2b01      	cmp	r3, #1
 800653e:	dc18      	bgt.n	8006572 <_dtoa_r+0x8fa>
 8006540:	f1ba 0f00 	cmp.w	sl, #0
 8006544:	d115      	bne.n	8006572 <_dtoa_r+0x8fa>
 8006546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800654a:	b993      	cbnz	r3, 8006572 <_dtoa_r+0x8fa>
 800654c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006550:	0d1b      	lsrs	r3, r3, #20
 8006552:	051b      	lsls	r3, r3, #20
 8006554:	b183      	cbz	r3, 8006578 <_dtoa_r+0x900>
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	9b08      	ldr	r3, [sp, #32]
 800655e:	3301      	adds	r3, #1
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	f04f 0801 	mov.w	r8, #1
 8006566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	f47f af6a 	bne.w	8006442 <_dtoa_r+0x7ca>
 800656e:	2001      	movs	r0, #1
 8006570:	e76f      	b.n	8006452 <_dtoa_r+0x7da>
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	e7f6      	b.n	8006566 <_dtoa_r+0x8ee>
 8006578:	4698      	mov	r8, r3
 800657a:	e7f4      	b.n	8006566 <_dtoa_r+0x8ee>
 800657c:	f43f af7d 	beq.w	800647a <_dtoa_r+0x802>
 8006580:	4618      	mov	r0, r3
 8006582:	301c      	adds	r0, #28
 8006584:	e772      	b.n	800646c <_dtoa_r+0x7f4>
 8006586:	9b06      	ldr	r3, [sp, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	dc37      	bgt.n	80065fc <_dtoa_r+0x984>
 800658c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800658e:	2b02      	cmp	r3, #2
 8006590:	dd34      	ble.n	80065fc <_dtoa_r+0x984>
 8006592:	9b06      	ldr	r3, [sp, #24]
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	b96b      	cbnz	r3, 80065b6 <_dtoa_r+0x93e>
 800659a:	4631      	mov	r1, r6
 800659c:	2205      	movs	r2, #5
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 f9d4 	bl	800694c <__multadd>
 80065a4:	4601      	mov	r1, r0
 80065a6:	4606      	mov	r6, r0
 80065a8:	ee18 0a10 	vmov	r0, s16
 80065ac:	f000 fbee 	bl	8006d8c <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f73f adbb 	bgt.w	800612c <_dtoa_r+0x4b4>
 80065b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b8:	9d04      	ldr	r5, [sp, #16]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	4631      	mov	r1, r6
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f99f 	bl	8006908 <_Bfree>
 80065ca:	2f00      	cmp	r7, #0
 80065cc:	f43f aea4 	beq.w	8006318 <_dtoa_r+0x6a0>
 80065d0:	f1b8 0f00 	cmp.w	r8, #0
 80065d4:	d005      	beq.n	80065e2 <_dtoa_r+0x96a>
 80065d6:	45b8      	cmp	r8, r7
 80065d8:	d003      	beq.n	80065e2 <_dtoa_r+0x96a>
 80065da:	4641      	mov	r1, r8
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 f993 	bl	8006908 <_Bfree>
 80065e2:	4639      	mov	r1, r7
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 f98f 	bl	8006908 <_Bfree>
 80065ea:	e695      	b.n	8006318 <_dtoa_r+0x6a0>
 80065ec:	2600      	movs	r6, #0
 80065ee:	4637      	mov	r7, r6
 80065f0:	e7e1      	b.n	80065b6 <_dtoa_r+0x93e>
 80065f2:	9703      	str	r7, [sp, #12]
 80065f4:	4637      	mov	r7, r6
 80065f6:	e599      	b.n	800612c <_dtoa_r+0x4b4>
 80065f8:	40240000 	.word	0x40240000
 80065fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80ca 	beq.w	8006798 <_dtoa_r+0xb20>
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	2d00      	cmp	r5, #0
 800660a:	dd05      	ble.n	8006618 <_dtoa_r+0x9a0>
 800660c:	4639      	mov	r1, r7
 800660e:	462a      	mov	r2, r5
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fb4b 	bl	8006cac <__lshift>
 8006616:	4607      	mov	r7, r0
 8006618:	f1b8 0f00 	cmp.w	r8, #0
 800661c:	d05b      	beq.n	80066d6 <_dtoa_r+0xa5e>
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4620      	mov	r0, r4
 8006622:	f000 f931 	bl	8006888 <_Balloc>
 8006626:	4605      	mov	r5, r0
 8006628:	b928      	cbnz	r0, 8006636 <_dtoa_r+0x9be>
 800662a:	4b87      	ldr	r3, [pc, #540]	; (8006848 <_dtoa_r+0xbd0>)
 800662c:	4602      	mov	r2, r0
 800662e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006632:	f7ff bb37 	b.w	8005ca4 <_dtoa_r+0x2c>
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	3202      	adds	r2, #2
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	f107 010c 	add.w	r1, r7, #12
 8006640:	300c      	adds	r0, #12
 8006642:	f000 f913 	bl	800686c <memcpy>
 8006646:	2201      	movs	r2, #1
 8006648:	4629      	mov	r1, r5
 800664a:	4620      	mov	r0, r4
 800664c:	f000 fb2e 	bl	8006cac <__lshift>
 8006650:	9b04      	ldr	r3, [sp, #16]
 8006652:	f103 0901 	add.w	r9, r3, #1
 8006656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665a:	4413      	add	r3, r2
 800665c:	9308      	str	r3, [sp, #32]
 800665e:	f00a 0301 	and.w	r3, sl, #1
 8006662:	46b8      	mov	r8, r7
 8006664:	9307      	str	r3, [sp, #28]
 8006666:	4607      	mov	r7, r0
 8006668:	4631      	mov	r1, r6
 800666a:	ee18 0a10 	vmov	r0, s16
 800666e:	f7ff fa75 	bl	8005b5c <quorem>
 8006672:	4641      	mov	r1, r8
 8006674:	9005      	str	r0, [sp, #20]
 8006676:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800667a:	ee18 0a10 	vmov	r0, s16
 800667e:	f000 fb85 	bl	8006d8c <__mcmp>
 8006682:	463a      	mov	r2, r7
 8006684:	9006      	str	r0, [sp, #24]
 8006686:	4631      	mov	r1, r6
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fb9b 	bl	8006dc4 <__mdiff>
 800668e:	68c2      	ldr	r2, [r0, #12]
 8006690:	f109 3bff 	add.w	fp, r9, #4294967295
 8006694:	4605      	mov	r5, r0
 8006696:	bb02      	cbnz	r2, 80066da <_dtoa_r+0xa62>
 8006698:	4601      	mov	r1, r0
 800669a:	ee18 0a10 	vmov	r0, s16
 800669e:	f000 fb75 	bl	8006d8c <__mcmp>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4629      	mov	r1, r5
 80066a6:	4620      	mov	r0, r4
 80066a8:	9209      	str	r2, [sp, #36]	; 0x24
 80066aa:	f000 f92d 	bl	8006908 <_Bfree>
 80066ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b2:	ea43 0102 	orr.w	r1, r3, r2
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	430b      	orrs	r3, r1
 80066ba:	464d      	mov	r5, r9
 80066bc:	d10f      	bne.n	80066de <_dtoa_r+0xa66>
 80066be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066c2:	d02a      	beq.n	800671a <_dtoa_r+0xaa2>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd02      	ble.n	80066d0 <_dtoa_r+0xa58>
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80066d0:	f88b a000 	strb.w	sl, [fp]
 80066d4:	e775      	b.n	80065c2 <_dtoa_r+0x94a>
 80066d6:	4638      	mov	r0, r7
 80066d8:	e7ba      	b.n	8006650 <_dtoa_r+0x9d8>
 80066da:	2201      	movs	r2, #1
 80066dc:	e7e2      	b.n	80066a4 <_dtoa_r+0xa2c>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db04      	blt.n	80066ee <_dtoa_r+0xa76>
 80066e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80066e6:	430b      	orrs	r3, r1
 80066e8:	9907      	ldr	r1, [sp, #28]
 80066ea:	430b      	orrs	r3, r1
 80066ec:	d122      	bne.n	8006734 <_dtoa_r+0xabc>
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	ddee      	ble.n	80066d0 <_dtoa_r+0xa58>
 80066f2:	ee18 1a10 	vmov	r1, s16
 80066f6:	2201      	movs	r2, #1
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fad7 	bl	8006cac <__lshift>
 80066fe:	4631      	mov	r1, r6
 8006700:	ee08 0a10 	vmov	s16, r0
 8006704:	f000 fb42 	bl	8006d8c <__mcmp>
 8006708:	2800      	cmp	r0, #0
 800670a:	dc03      	bgt.n	8006714 <_dtoa_r+0xa9c>
 800670c:	d1e0      	bne.n	80066d0 <_dtoa_r+0xa58>
 800670e:	f01a 0f01 	tst.w	sl, #1
 8006712:	d0dd      	beq.n	80066d0 <_dtoa_r+0xa58>
 8006714:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006718:	d1d7      	bne.n	80066ca <_dtoa_r+0xa52>
 800671a:	2339      	movs	r3, #57	; 0x39
 800671c:	f88b 3000 	strb.w	r3, [fp]
 8006720:	462b      	mov	r3, r5
 8006722:	461d      	mov	r5, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800672a:	2a39      	cmp	r2, #57	; 0x39
 800672c:	d071      	beq.n	8006812 <_dtoa_r+0xb9a>
 800672e:	3201      	adds	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	e746      	b.n	80065c2 <_dtoa_r+0x94a>
 8006734:	2a00      	cmp	r2, #0
 8006736:	dd07      	ble.n	8006748 <_dtoa_r+0xad0>
 8006738:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800673c:	d0ed      	beq.n	800671a <_dtoa_r+0xaa2>
 800673e:	f10a 0301 	add.w	r3, sl, #1
 8006742:	f88b 3000 	strb.w	r3, [fp]
 8006746:	e73c      	b.n	80065c2 <_dtoa_r+0x94a>
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800674e:	4599      	cmp	r9, r3
 8006750:	d047      	beq.n	80067e2 <_dtoa_r+0xb6a>
 8006752:	ee18 1a10 	vmov	r1, s16
 8006756:	2300      	movs	r3, #0
 8006758:	220a      	movs	r2, #10
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f8f6 	bl	800694c <__multadd>
 8006760:	45b8      	cmp	r8, r7
 8006762:	ee08 0a10 	vmov	s16, r0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	f04f 020a 	mov.w	r2, #10
 800676e:	4641      	mov	r1, r8
 8006770:	4620      	mov	r0, r4
 8006772:	d106      	bne.n	8006782 <_dtoa_r+0xb0a>
 8006774:	f000 f8ea 	bl	800694c <__multadd>
 8006778:	4680      	mov	r8, r0
 800677a:	4607      	mov	r7, r0
 800677c:	f109 0901 	add.w	r9, r9, #1
 8006780:	e772      	b.n	8006668 <_dtoa_r+0x9f0>
 8006782:	f000 f8e3 	bl	800694c <__multadd>
 8006786:	4639      	mov	r1, r7
 8006788:	4680      	mov	r8, r0
 800678a:	2300      	movs	r3, #0
 800678c:	220a      	movs	r2, #10
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f8dc 	bl	800694c <__multadd>
 8006794:	4607      	mov	r7, r0
 8006796:	e7f1      	b.n	800677c <_dtoa_r+0xb04>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	9d04      	ldr	r5, [sp, #16]
 800679e:	ee18 0a10 	vmov	r0, s16
 80067a2:	4631      	mov	r1, r6
 80067a4:	f7ff f9da 	bl	8005b5c <quorem>
 80067a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	f805 ab01 	strb.w	sl, [r5], #1
 80067b2:	1aea      	subs	r2, r5, r3
 80067b4:	9b05      	ldr	r3, [sp, #20]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	dd09      	ble.n	80067ce <_dtoa_r+0xb56>
 80067ba:	ee18 1a10 	vmov	r1, s16
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f8c2 	bl	800694c <__multadd>
 80067c8:	ee08 0a10 	vmov	s16, r0
 80067cc:	e7e7      	b.n	800679e <_dtoa_r+0xb26>
 80067ce:	9b05      	ldr	r3, [sp, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bfc8      	it	gt
 80067d4:	461d      	movgt	r5, r3
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	bfd8      	it	le
 80067da:	2501      	movle	r5, #1
 80067dc:	441d      	add	r5, r3
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	ee18 1a10 	vmov	r1, s16
 80067e6:	2201      	movs	r2, #1
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fa5f 	bl	8006cac <__lshift>
 80067ee:	4631      	mov	r1, r6
 80067f0:	ee08 0a10 	vmov	s16, r0
 80067f4:	f000 faca 	bl	8006d8c <__mcmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	dc91      	bgt.n	8006720 <_dtoa_r+0xaa8>
 80067fc:	d102      	bne.n	8006804 <_dtoa_r+0xb8c>
 80067fe:	f01a 0f01 	tst.w	sl, #1
 8006802:	d18d      	bne.n	8006720 <_dtoa_r+0xaa8>
 8006804:	462b      	mov	r3, r5
 8006806:	461d      	mov	r5, r3
 8006808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800680c:	2a30      	cmp	r2, #48	; 0x30
 800680e:	d0fa      	beq.n	8006806 <_dtoa_r+0xb8e>
 8006810:	e6d7      	b.n	80065c2 <_dtoa_r+0x94a>
 8006812:	9a04      	ldr	r2, [sp, #16]
 8006814:	429a      	cmp	r2, r3
 8006816:	d184      	bne.n	8006722 <_dtoa_r+0xaaa>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	2331      	movs	r3, #49	; 0x31
 8006820:	7013      	strb	r3, [r2, #0]
 8006822:	e6ce      	b.n	80065c2 <_dtoa_r+0x94a>
 8006824:	4b09      	ldr	r3, [pc, #36]	; (800684c <_dtoa_r+0xbd4>)
 8006826:	f7ff ba91 	b.w	8005d4c <_dtoa_r+0xd4>
 800682a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f aa6a 	bne.w	8005d06 <_dtoa_r+0x8e>
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <_dtoa_r+0xbd8>)
 8006834:	f7ff ba8a 	b.w	8005d4c <_dtoa_r+0xd4>
 8006838:	9b05      	ldr	r3, [sp, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dcae      	bgt.n	800679c <_dtoa_r+0xb24>
 800683e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006840:	2b02      	cmp	r3, #2
 8006842:	f73f aea8 	bgt.w	8006596 <_dtoa_r+0x91e>
 8006846:	e7a9      	b.n	800679c <_dtoa_r+0xb24>
 8006848:	08009bbb 	.word	0x08009bbb
 800684c:	08009b18 	.word	0x08009b18
 8006850:	08009b3c 	.word	0x08009b3c

08006854 <_localeconv_r>:
 8006854:	4800      	ldr	r0, [pc, #0]	; (8006858 <_localeconv_r+0x4>)
 8006856:	4770      	bx	lr
 8006858:	20000188 	.word	0x20000188

0800685c <malloc>:
 800685c:	4b02      	ldr	r3, [pc, #8]	; (8006868 <malloc+0xc>)
 800685e:	4601      	mov	r1, r0
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f000 bc15 	b.w	8007090 <_malloc_r>
 8006866:	bf00      	nop
 8006868:	20000034 	.word	0x20000034

0800686c <memcpy>:
 800686c:	440a      	add	r2, r1
 800686e:	4291      	cmp	r1, r2
 8006870:	f100 33ff 	add.w	r3, r0, #4294967295
 8006874:	d100      	bne.n	8006878 <memcpy+0xc>
 8006876:	4770      	bx	lr
 8006878:	b510      	push	{r4, lr}
 800687a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800687e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006882:	4291      	cmp	r1, r2
 8006884:	d1f9      	bne.n	800687a <memcpy+0xe>
 8006886:	bd10      	pop	{r4, pc}

08006888 <_Balloc>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	b976      	cbnz	r6, 80068b0 <_Balloc+0x28>
 8006892:	2010      	movs	r0, #16
 8006894:	f7ff ffe2 	bl	800685c <malloc>
 8006898:	4602      	mov	r2, r0
 800689a:	6260      	str	r0, [r4, #36]	; 0x24
 800689c:	b920      	cbnz	r0, 80068a8 <_Balloc+0x20>
 800689e:	4b18      	ldr	r3, [pc, #96]	; (8006900 <_Balloc+0x78>)
 80068a0:	4818      	ldr	r0, [pc, #96]	; (8006904 <_Balloc+0x7c>)
 80068a2:	2166      	movs	r1, #102	; 0x66
 80068a4:	f000 fdd4 	bl	8007450 <__assert_func>
 80068a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ac:	6006      	str	r6, [r0, #0]
 80068ae:	60c6      	str	r6, [r0, #12]
 80068b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068b2:	68f3      	ldr	r3, [r6, #12]
 80068b4:	b183      	cbz	r3, 80068d8 <_Balloc+0x50>
 80068b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068be:	b9b8      	cbnz	r0, 80068f0 <_Balloc+0x68>
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f605 	lsl.w	r6, r1, r5
 80068c6:	1d72      	adds	r2, r6, #5
 80068c8:	0092      	lsls	r2, r2, #2
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fb5e 	bl	8006f8c <_calloc_r>
 80068d0:	b160      	cbz	r0, 80068ec <_Balloc+0x64>
 80068d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068d6:	e00e      	b.n	80068f6 <_Balloc+0x6e>
 80068d8:	2221      	movs	r2, #33	; 0x21
 80068da:	2104      	movs	r1, #4
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fb55 	bl	8006f8c <_calloc_r>
 80068e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e4:	60f0      	str	r0, [r6, #12]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e4      	bne.n	80068b6 <_Balloc+0x2e>
 80068ec:	2000      	movs	r0, #0
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	6802      	ldr	r2, [r0, #0]
 80068f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068f6:	2300      	movs	r3, #0
 80068f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068fc:	e7f7      	b.n	80068ee <_Balloc+0x66>
 80068fe:	bf00      	nop
 8006900:	08009b49 	.word	0x08009b49
 8006904:	08009bcc 	.word	0x08009bcc

08006908 <_Bfree>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800690c:	4605      	mov	r5, r0
 800690e:	460c      	mov	r4, r1
 8006910:	b976      	cbnz	r6, 8006930 <_Bfree+0x28>
 8006912:	2010      	movs	r0, #16
 8006914:	f7ff ffa2 	bl	800685c <malloc>
 8006918:	4602      	mov	r2, r0
 800691a:	6268      	str	r0, [r5, #36]	; 0x24
 800691c:	b920      	cbnz	r0, 8006928 <_Bfree+0x20>
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <_Bfree+0x3c>)
 8006920:	4809      	ldr	r0, [pc, #36]	; (8006948 <_Bfree+0x40>)
 8006922:	218a      	movs	r1, #138	; 0x8a
 8006924:	f000 fd94 	bl	8007450 <__assert_func>
 8006928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800692c:	6006      	str	r6, [r0, #0]
 800692e:	60c6      	str	r6, [r0, #12]
 8006930:	b13c      	cbz	r4, 8006942 <_Bfree+0x3a>
 8006932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006934:	6862      	ldr	r2, [r4, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800693c:	6021      	str	r1, [r4, #0]
 800693e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	08009b49 	.word	0x08009b49
 8006948:	08009bcc 	.word	0x08009bcc

0800694c <__multadd>:
 800694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006950:	690d      	ldr	r5, [r1, #16]
 8006952:	4607      	mov	r7, r0
 8006954:	460c      	mov	r4, r1
 8006956:	461e      	mov	r6, r3
 8006958:	f101 0c14 	add.w	ip, r1, #20
 800695c:	2000      	movs	r0, #0
 800695e:	f8dc 3000 	ldr.w	r3, [ip]
 8006962:	b299      	uxth	r1, r3
 8006964:	fb02 6101 	mla	r1, r2, r1, r6
 8006968:	0c1e      	lsrs	r6, r3, #16
 800696a:	0c0b      	lsrs	r3, r1, #16
 800696c:	fb02 3306 	mla	r3, r2, r6, r3
 8006970:	b289      	uxth	r1, r1
 8006972:	3001      	adds	r0, #1
 8006974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006978:	4285      	cmp	r5, r0
 800697a:	f84c 1b04 	str.w	r1, [ip], #4
 800697e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006982:	dcec      	bgt.n	800695e <__multadd+0x12>
 8006984:	b30e      	cbz	r6, 80069ca <__multadd+0x7e>
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	42ab      	cmp	r3, r5
 800698a:	dc19      	bgt.n	80069c0 <__multadd+0x74>
 800698c:	6861      	ldr	r1, [r4, #4]
 800698e:	4638      	mov	r0, r7
 8006990:	3101      	adds	r1, #1
 8006992:	f7ff ff79 	bl	8006888 <_Balloc>
 8006996:	4680      	mov	r8, r0
 8006998:	b928      	cbnz	r0, 80069a6 <__multadd+0x5a>
 800699a:	4602      	mov	r2, r0
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <__multadd+0x84>)
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <__multadd+0x88>)
 80069a0:	21b5      	movs	r1, #181	; 0xb5
 80069a2:	f000 fd55 	bl	8007450 <__assert_func>
 80069a6:	6922      	ldr	r2, [r4, #16]
 80069a8:	3202      	adds	r2, #2
 80069aa:	f104 010c 	add.w	r1, r4, #12
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	300c      	adds	r0, #12
 80069b2:	f7ff ff5b 	bl	800686c <memcpy>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7ff ffa5 	bl	8006908 <_Bfree>
 80069be:	4644      	mov	r4, r8
 80069c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069c4:	3501      	adds	r5, #1
 80069c6:	615e      	str	r6, [r3, #20]
 80069c8:	6125      	str	r5, [r4, #16]
 80069ca:	4620      	mov	r0, r4
 80069cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d0:	08009bbb 	.word	0x08009bbb
 80069d4:	08009bcc 	.word	0x08009bcc

080069d8 <__hi0bits>:
 80069d8:	0c03      	lsrs	r3, r0, #16
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	b9d3      	cbnz	r3, 8006a14 <__hi0bits+0x3c>
 80069de:	0400      	lsls	r0, r0, #16
 80069e0:	2310      	movs	r3, #16
 80069e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069e6:	bf04      	itt	eq
 80069e8:	0200      	lsleq	r0, r0, #8
 80069ea:	3308      	addeq	r3, #8
 80069ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069f0:	bf04      	itt	eq
 80069f2:	0100      	lsleq	r0, r0, #4
 80069f4:	3304      	addeq	r3, #4
 80069f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069fa:	bf04      	itt	eq
 80069fc:	0080      	lsleq	r0, r0, #2
 80069fe:	3302      	addeq	r3, #2
 8006a00:	2800      	cmp	r0, #0
 8006a02:	db05      	blt.n	8006a10 <__hi0bits+0x38>
 8006a04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a08:	f103 0301 	add.w	r3, r3, #1
 8006a0c:	bf08      	it	eq
 8006a0e:	2320      	moveq	r3, #32
 8006a10:	4618      	mov	r0, r3
 8006a12:	4770      	bx	lr
 8006a14:	2300      	movs	r3, #0
 8006a16:	e7e4      	b.n	80069e2 <__hi0bits+0xa>

08006a18 <__lo0bits>:
 8006a18:	6803      	ldr	r3, [r0, #0]
 8006a1a:	f013 0207 	ands.w	r2, r3, #7
 8006a1e:	4601      	mov	r1, r0
 8006a20:	d00b      	beq.n	8006a3a <__lo0bits+0x22>
 8006a22:	07da      	lsls	r2, r3, #31
 8006a24:	d423      	bmi.n	8006a6e <__lo0bits+0x56>
 8006a26:	0798      	lsls	r0, r3, #30
 8006a28:	bf49      	itett	mi
 8006a2a:	085b      	lsrmi	r3, r3, #1
 8006a2c:	089b      	lsrpl	r3, r3, #2
 8006a2e:	2001      	movmi	r0, #1
 8006a30:	600b      	strmi	r3, [r1, #0]
 8006a32:	bf5c      	itt	pl
 8006a34:	600b      	strpl	r3, [r1, #0]
 8006a36:	2002      	movpl	r0, #2
 8006a38:	4770      	bx	lr
 8006a3a:	b298      	uxth	r0, r3
 8006a3c:	b9a8      	cbnz	r0, 8006a6a <__lo0bits+0x52>
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	2010      	movs	r0, #16
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	b90a      	cbnz	r2, 8006a4a <__lo0bits+0x32>
 8006a46:	3008      	adds	r0, #8
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	071a      	lsls	r2, r3, #28
 8006a4c:	bf04      	itt	eq
 8006a4e:	091b      	lsreq	r3, r3, #4
 8006a50:	3004      	addeq	r0, #4
 8006a52:	079a      	lsls	r2, r3, #30
 8006a54:	bf04      	itt	eq
 8006a56:	089b      	lsreq	r3, r3, #2
 8006a58:	3002      	addeq	r0, #2
 8006a5a:	07da      	lsls	r2, r3, #31
 8006a5c:	d403      	bmi.n	8006a66 <__lo0bits+0x4e>
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	f100 0001 	add.w	r0, r0, #1
 8006a64:	d005      	beq.n	8006a72 <__lo0bits+0x5a>
 8006a66:	600b      	str	r3, [r1, #0]
 8006a68:	4770      	bx	lr
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	e7e9      	b.n	8006a42 <__lo0bits+0x2a>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	4770      	bx	lr
 8006a72:	2020      	movs	r0, #32
 8006a74:	4770      	bx	lr
	...

08006a78 <__i2b>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	f7ff ff03 	bl	8006888 <_Balloc>
 8006a82:	4602      	mov	r2, r0
 8006a84:	b928      	cbnz	r0, 8006a92 <__i2b+0x1a>
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <__i2b+0x24>)
 8006a88:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <__i2b+0x28>)
 8006a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a8e:	f000 fcdf 	bl	8007450 <__assert_func>
 8006a92:	2301      	movs	r3, #1
 8006a94:	6144      	str	r4, [r0, #20]
 8006a96:	6103      	str	r3, [r0, #16]
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08009bbb 	.word	0x08009bbb
 8006aa0:	08009bcc 	.word	0x08009bcc

08006aa4 <__multiply>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	690a      	ldr	r2, [r1, #16]
 8006aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	bfb8      	it	lt
 8006ab4:	460b      	movlt	r3, r1
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	bfbc      	itt	lt
 8006aba:	464c      	movlt	r4, r9
 8006abc:	4699      	movlt	r9, r3
 8006abe:	6927      	ldr	r7, [r4, #16]
 8006ac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ac4:	68a3      	ldr	r3, [r4, #8]
 8006ac6:	6861      	ldr	r1, [r4, #4]
 8006ac8:	eb07 060a 	add.w	r6, r7, sl
 8006acc:	42b3      	cmp	r3, r6
 8006ace:	b085      	sub	sp, #20
 8006ad0:	bfb8      	it	lt
 8006ad2:	3101      	addlt	r1, #1
 8006ad4:	f7ff fed8 	bl	8006888 <_Balloc>
 8006ad8:	b930      	cbnz	r0, 8006ae8 <__multiply+0x44>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4b44      	ldr	r3, [pc, #272]	; (8006bf0 <__multiply+0x14c>)
 8006ade:	4845      	ldr	r0, [pc, #276]	; (8006bf4 <__multiply+0x150>)
 8006ae0:	f240 115d 	movw	r1, #349	; 0x15d
 8006ae4:	f000 fcb4 	bl	8007450 <__assert_func>
 8006ae8:	f100 0514 	add.w	r5, r0, #20
 8006aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006af0:	462b      	mov	r3, r5
 8006af2:	2200      	movs	r2, #0
 8006af4:	4543      	cmp	r3, r8
 8006af6:	d321      	bcc.n	8006b3c <__multiply+0x98>
 8006af8:	f104 0314 	add.w	r3, r4, #20
 8006afc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b00:	f109 0314 	add.w	r3, r9, #20
 8006b04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b08:	9202      	str	r2, [sp, #8]
 8006b0a:	1b3a      	subs	r2, r7, r4
 8006b0c:	3a15      	subs	r2, #21
 8006b0e:	f022 0203 	bic.w	r2, r2, #3
 8006b12:	3204      	adds	r2, #4
 8006b14:	f104 0115 	add.w	r1, r4, #21
 8006b18:	428f      	cmp	r7, r1
 8006b1a:	bf38      	it	cc
 8006b1c:	2204      	movcc	r2, #4
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	9a02      	ldr	r2, [sp, #8]
 8006b22:	9303      	str	r3, [sp, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d80c      	bhi.n	8006b42 <__multiply+0x9e>
 8006b28:	2e00      	cmp	r6, #0
 8006b2a:	dd03      	ble.n	8006b34 <__multiply+0x90>
 8006b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05a      	beq.n	8006bea <__multiply+0x146>
 8006b34:	6106      	str	r6, [r0, #16]
 8006b36:	b005      	add	sp, #20
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	f843 2b04 	str.w	r2, [r3], #4
 8006b40:	e7d8      	b.n	8006af4 <__multiply+0x50>
 8006b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b46:	f1ba 0f00 	cmp.w	sl, #0
 8006b4a:	d024      	beq.n	8006b96 <__multiply+0xf2>
 8006b4c:	f104 0e14 	add.w	lr, r4, #20
 8006b50:	46a9      	mov	r9, r5
 8006b52:	f04f 0c00 	mov.w	ip, #0
 8006b56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8006b5e:	fa1f fb82 	uxth.w	fp, r2
 8006b62:	b289      	uxth	r1, r1
 8006b64:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b70:	4461      	add	r1, ip
 8006b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b76:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b7e:	b289      	uxth	r1, r1
 8006b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b84:	4577      	cmp	r7, lr
 8006b86:	f849 1b04 	str.w	r1, [r9], #4
 8006b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b8e:	d8e2      	bhi.n	8006b56 <__multiply+0xb2>
 8006b90:	9a01      	ldr	r2, [sp, #4]
 8006b92:	f845 c002 	str.w	ip, [r5, r2]
 8006b96:	9a03      	ldr	r2, [sp, #12]
 8006b98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ba2:	d020      	beq.n	8006be6 <__multiply+0x142>
 8006ba4:	6829      	ldr	r1, [r5, #0]
 8006ba6:	f104 0c14 	add.w	ip, r4, #20
 8006baa:	46ae      	mov	lr, r5
 8006bac:	f04f 0a00 	mov.w	sl, #0
 8006bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8006bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8006bbc:	4492      	add	sl, r2
 8006bbe:	b289      	uxth	r1, r1
 8006bc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8006bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8006bd0:	0c12      	lsrs	r2, r2, #16
 8006bd2:	fb09 1102 	mla	r1, r9, r2, r1
 8006bd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006bda:	4567      	cmp	r7, ip
 8006bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006be0:	d8e6      	bhi.n	8006bb0 <__multiply+0x10c>
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	50a9      	str	r1, [r5, r2]
 8006be6:	3504      	adds	r5, #4
 8006be8:	e79a      	b.n	8006b20 <__multiply+0x7c>
 8006bea:	3e01      	subs	r6, #1
 8006bec:	e79c      	b.n	8006b28 <__multiply+0x84>
 8006bee:	bf00      	nop
 8006bf0:	08009bbb 	.word	0x08009bbb
 8006bf4:	08009bcc 	.word	0x08009bcc

08006bf8 <__pow5mult>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	f012 0203 	ands.w	r2, r2, #3
 8006c02:	4606      	mov	r6, r0
 8006c04:	460f      	mov	r7, r1
 8006c06:	d007      	beq.n	8006c18 <__pow5mult+0x20>
 8006c08:	4c25      	ldr	r4, [pc, #148]	; (8006ca0 <__pow5mult+0xa8>)
 8006c0a:	3a01      	subs	r2, #1
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c12:	f7ff fe9b 	bl	800694c <__multadd>
 8006c16:	4607      	mov	r7, r0
 8006c18:	10ad      	asrs	r5, r5, #2
 8006c1a:	d03d      	beq.n	8006c98 <__pow5mult+0xa0>
 8006c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c1e:	b97c      	cbnz	r4, 8006c40 <__pow5mult+0x48>
 8006c20:	2010      	movs	r0, #16
 8006c22:	f7ff fe1b 	bl	800685c <malloc>
 8006c26:	4602      	mov	r2, r0
 8006c28:	6270      	str	r0, [r6, #36]	; 0x24
 8006c2a:	b928      	cbnz	r0, 8006c38 <__pow5mult+0x40>
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <__pow5mult+0xac>)
 8006c2e:	481e      	ldr	r0, [pc, #120]	; (8006ca8 <__pow5mult+0xb0>)
 8006c30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c34:	f000 fc0c 	bl	8007450 <__assert_func>
 8006c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c3c:	6004      	str	r4, [r0, #0]
 8006c3e:	60c4      	str	r4, [r0, #12]
 8006c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c48:	b94c      	cbnz	r4, 8006c5e <__pow5mult+0x66>
 8006c4a:	f240 2171 	movw	r1, #625	; 0x271
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ff12 	bl	8006a78 <__i2b>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	f04f 0900 	mov.w	r9, #0
 8006c62:	07eb      	lsls	r3, r5, #31
 8006c64:	d50a      	bpl.n	8006c7c <__pow5mult+0x84>
 8006c66:	4639      	mov	r1, r7
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff ff1a 	bl	8006aa4 <__multiply>
 8006c70:	4639      	mov	r1, r7
 8006c72:	4680      	mov	r8, r0
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff fe47 	bl	8006908 <_Bfree>
 8006c7a:	4647      	mov	r7, r8
 8006c7c:	106d      	asrs	r5, r5, #1
 8006c7e:	d00b      	beq.n	8006c98 <__pow5mult+0xa0>
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	b938      	cbnz	r0, 8006c94 <__pow5mult+0x9c>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4621      	mov	r1, r4
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff ff0b 	bl	8006aa4 <__multiply>
 8006c8e:	6020      	str	r0, [r4, #0]
 8006c90:	f8c0 9000 	str.w	r9, [r0]
 8006c94:	4604      	mov	r4, r0
 8006c96:	e7e4      	b.n	8006c62 <__pow5mult+0x6a>
 8006c98:	4638      	mov	r0, r7
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08009d18 	.word	0x08009d18
 8006ca4:	08009b49 	.word	0x08009b49
 8006ca8:	08009bcc 	.word	0x08009bcc

08006cac <__lshift>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	6849      	ldr	r1, [r1, #4]
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	4691      	mov	r9, r2
 8006cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cc4:	f108 0601 	add.w	r6, r8, #1
 8006cc8:	42b3      	cmp	r3, r6
 8006cca:	db0b      	blt.n	8006ce4 <__lshift+0x38>
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff fddb 	bl	8006888 <_Balloc>
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	b948      	cbnz	r0, 8006cea <__lshift+0x3e>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <__lshift+0xd8>)
 8006cda:	482b      	ldr	r0, [pc, #172]	; (8006d88 <__lshift+0xdc>)
 8006cdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ce0:	f000 fbb6 	bl	8007450 <__assert_func>
 8006ce4:	3101      	adds	r1, #1
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__lshift+0x1c>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f100 0114 	add.w	r1, r0, #20
 8006cf0:	f100 0210 	add.w	r2, r0, #16
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	4553      	cmp	r3, sl
 8006cf8:	db37      	blt.n	8006d6a <__lshift+0xbe>
 8006cfa:	6920      	ldr	r0, [r4, #16]
 8006cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d00:	f104 0314 	add.w	r3, r4, #20
 8006d04:	f019 091f 	ands.w	r9, r9, #31
 8006d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d10:	d02f      	beq.n	8006d72 <__lshift+0xc6>
 8006d12:	f1c9 0e20 	rsb	lr, r9, #32
 8006d16:	468a      	mov	sl, r1
 8006d18:	f04f 0c00 	mov.w	ip, #0
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	fa02 f209 	lsl.w	r2, r2, r9
 8006d22:	ea42 020c 	orr.w	r2, r2, ip
 8006d26:	f84a 2b04 	str.w	r2, [sl], #4
 8006d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2e:	4298      	cmp	r0, r3
 8006d30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d34:	d8f2      	bhi.n	8006d1c <__lshift+0x70>
 8006d36:	1b03      	subs	r3, r0, r4
 8006d38:	3b15      	subs	r3, #21
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	3304      	adds	r3, #4
 8006d40:	f104 0215 	add.w	r2, r4, #21
 8006d44:	4290      	cmp	r0, r2
 8006d46:	bf38      	it	cc
 8006d48:	2304      	movcc	r3, #4
 8006d4a:	f841 c003 	str.w	ip, [r1, r3]
 8006d4e:	f1bc 0f00 	cmp.w	ip, #0
 8006d52:	d001      	beq.n	8006d58 <__lshift+0xac>
 8006d54:	f108 0602 	add.w	r6, r8, #2
 8006d58:	3e01      	subs	r6, #1
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	612e      	str	r6, [r5, #16]
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f7ff fdd2 	bl	8006908 <_Bfree>
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d6e:	3301      	adds	r3, #1
 8006d70:	e7c1      	b.n	8006cf6 <__lshift+0x4a>
 8006d72:	3904      	subs	r1, #4
 8006d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d7c:	4298      	cmp	r0, r3
 8006d7e:	d8f9      	bhi.n	8006d74 <__lshift+0xc8>
 8006d80:	e7ea      	b.n	8006d58 <__lshift+0xac>
 8006d82:	bf00      	nop
 8006d84:	08009bbb 	.word	0x08009bbb
 8006d88:	08009bcc 	.word	0x08009bcc

08006d8c <__mcmp>:
 8006d8c:	b530      	push	{r4, r5, lr}
 8006d8e:	6902      	ldr	r2, [r0, #16]
 8006d90:	690c      	ldr	r4, [r1, #16]
 8006d92:	1b12      	subs	r2, r2, r4
 8006d94:	d10e      	bne.n	8006db4 <__mcmp+0x28>
 8006d96:	f100 0314 	add.w	r3, r0, #20
 8006d9a:	3114      	adds	r1, #20
 8006d9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006da0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006da4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006da8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006dac:	42a5      	cmp	r5, r4
 8006dae:	d003      	beq.n	8006db8 <__mcmp+0x2c>
 8006db0:	d305      	bcc.n	8006dbe <__mcmp+0x32>
 8006db2:	2201      	movs	r2, #1
 8006db4:	4610      	mov	r0, r2
 8006db6:	bd30      	pop	{r4, r5, pc}
 8006db8:	4283      	cmp	r3, r0
 8006dba:	d3f3      	bcc.n	8006da4 <__mcmp+0x18>
 8006dbc:	e7fa      	b.n	8006db4 <__mcmp+0x28>
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc2:	e7f7      	b.n	8006db4 <__mcmp+0x28>

08006dc4 <__mdiff>:
 8006dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	4606      	mov	r6, r0
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4690      	mov	r8, r2
 8006dd2:	f7ff ffdb 	bl	8006d8c <__mcmp>
 8006dd6:	1e05      	subs	r5, r0, #0
 8006dd8:	d110      	bne.n	8006dfc <__mdiff+0x38>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff fd53 	bl	8006888 <_Balloc>
 8006de2:	b930      	cbnz	r0, 8006df2 <__mdiff+0x2e>
 8006de4:	4b3a      	ldr	r3, [pc, #232]	; (8006ed0 <__mdiff+0x10c>)
 8006de6:	4602      	mov	r2, r0
 8006de8:	f240 2132 	movw	r1, #562	; 0x232
 8006dec:	4839      	ldr	r0, [pc, #228]	; (8006ed4 <__mdiff+0x110>)
 8006dee:	f000 fb2f 	bl	8007450 <__assert_func>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfc:	bfa4      	itt	ge
 8006dfe:	4643      	movge	r3, r8
 8006e00:	46a0      	movge	r8, r4
 8006e02:	4630      	mov	r0, r6
 8006e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e08:	bfa6      	itte	ge
 8006e0a:	461c      	movge	r4, r3
 8006e0c:	2500      	movge	r5, #0
 8006e0e:	2501      	movlt	r5, #1
 8006e10:	f7ff fd3a 	bl	8006888 <_Balloc>
 8006e14:	b920      	cbnz	r0, 8006e20 <__mdiff+0x5c>
 8006e16:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <__mdiff+0x10c>)
 8006e18:	4602      	mov	r2, r0
 8006e1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e1e:	e7e5      	b.n	8006dec <__mdiff+0x28>
 8006e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e24:	6926      	ldr	r6, [r4, #16]
 8006e26:	60c5      	str	r5, [r0, #12]
 8006e28:	f104 0914 	add.w	r9, r4, #20
 8006e2c:	f108 0514 	add.w	r5, r8, #20
 8006e30:	f100 0e14 	add.w	lr, r0, #20
 8006e34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e3c:	f108 0210 	add.w	r2, r8, #16
 8006e40:	46f2      	mov	sl, lr
 8006e42:	2100      	movs	r1, #0
 8006e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e4c:	fa1f f883 	uxth.w	r8, r3
 8006e50:	fa11 f18b 	uxtah	r1, r1, fp
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	eba1 0808 	sub.w	r8, r1, r8
 8006e5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e62:	fa1f f888 	uxth.w	r8, r8
 8006e66:	1419      	asrs	r1, r3, #16
 8006e68:	454e      	cmp	r6, r9
 8006e6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e6e:	f84a 3b04 	str.w	r3, [sl], #4
 8006e72:	d8e7      	bhi.n	8006e44 <__mdiff+0x80>
 8006e74:	1b33      	subs	r3, r6, r4
 8006e76:	3b15      	subs	r3, #21
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	3415      	adds	r4, #21
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	bf38      	it	cc
 8006e84:	2304      	movcc	r3, #4
 8006e86:	441d      	add	r5, r3
 8006e88:	4473      	add	r3, lr
 8006e8a:	469e      	mov	lr, r3
 8006e8c:	462e      	mov	r6, r5
 8006e8e:	4566      	cmp	r6, ip
 8006e90:	d30e      	bcc.n	8006eb0 <__mdiff+0xec>
 8006e92:	f10c 0203 	add.w	r2, ip, #3
 8006e96:	1b52      	subs	r2, r2, r5
 8006e98:	f022 0203 	bic.w	r2, r2, #3
 8006e9c:	3d03      	subs	r5, #3
 8006e9e:	45ac      	cmp	ip, r5
 8006ea0:	bf38      	it	cc
 8006ea2:	2200      	movcc	r2, #0
 8006ea4:	441a      	add	r2, r3
 8006ea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006eaa:	b17b      	cbz	r3, 8006ecc <__mdiff+0x108>
 8006eac:	6107      	str	r7, [r0, #16]
 8006eae:	e7a3      	b.n	8006df8 <__mdiff+0x34>
 8006eb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006eb4:	fa11 f288 	uxtah	r2, r1, r8
 8006eb8:	1414      	asrs	r4, r2, #16
 8006eba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ebe:	b292      	uxth	r2, r2
 8006ec0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ec4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ec8:	1421      	asrs	r1, r4, #16
 8006eca:	e7e0      	b.n	8006e8e <__mdiff+0xca>
 8006ecc:	3f01      	subs	r7, #1
 8006ece:	e7ea      	b.n	8006ea6 <__mdiff+0xe2>
 8006ed0:	08009bbb 	.word	0x08009bbb
 8006ed4:	08009bcc 	.word	0x08009bcc

08006ed8 <__d2b>:
 8006ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	2101      	movs	r1, #1
 8006ede:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8006ee2:	4690      	mov	r8, r2
 8006ee4:	4699      	mov	r9, r3
 8006ee6:	f7ff fccf 	bl	8006888 <_Balloc>
 8006eea:	4604      	mov	r4, r0
 8006eec:	b930      	cbnz	r0, 8006efc <__d2b+0x24>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <__d2b+0xac>)
 8006ef2:	4825      	ldr	r0, [pc, #148]	; (8006f88 <__d2b+0xb0>)
 8006ef4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ef8:	f000 faaa 	bl	8007450 <__assert_func>
 8006efc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f04:	bb2d      	cbnz	r5, 8006f52 <__d2b+0x7a>
 8006f06:	f1b8 0200 	subs.w	r2, r8, #0
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	d026      	beq.n	8006f5c <__d2b+0x84>
 8006f0e:	4668      	mov	r0, sp
 8006f10:	9200      	str	r2, [sp, #0]
 8006f12:	f7ff fd81 	bl	8006a18 <__lo0bits>
 8006f16:	9900      	ldr	r1, [sp, #0]
 8006f18:	b1f0      	cbz	r0, 8006f58 <__d2b+0x80>
 8006f1a:	9a01      	ldr	r2, [sp, #4]
 8006f1c:	f1c0 0320 	rsb	r3, r0, #32
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	430b      	orrs	r3, r1
 8006f26:	40c2      	lsrs	r2, r0
 8006f28:	6163      	str	r3, [r4, #20]
 8006f2a:	9201      	str	r2, [sp, #4]
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	61a3      	str	r3, [r4, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2202      	movne	r2, #2
 8006f36:	2201      	moveq	r2, #1
 8006f38:	6122      	str	r2, [r4, #16]
 8006f3a:	b1c5      	cbz	r5, 8006f6e <__d2b+0x96>
 8006f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f40:	4405      	add	r5, r0
 8006f42:	603d      	str	r5, [r7, #0]
 8006f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	b003      	add	sp, #12
 8006f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f56:	e7d6      	b.n	8006f06 <__d2b+0x2e>
 8006f58:	6161      	str	r1, [r4, #20]
 8006f5a:	e7e7      	b.n	8006f2c <__d2b+0x54>
 8006f5c:	a801      	add	r0, sp, #4
 8006f5e:	f7ff fd5b 	bl	8006a18 <__lo0bits>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	6163      	str	r3, [r4, #20]
 8006f66:	2201      	movs	r2, #1
 8006f68:	6122      	str	r2, [r4, #16]
 8006f6a:	3020      	adds	r0, #32
 8006f6c:	e7e5      	b.n	8006f3a <__d2b+0x62>
 8006f6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f76:	6038      	str	r0, [r7, #0]
 8006f78:	6918      	ldr	r0, [r3, #16]
 8006f7a:	f7ff fd2d 	bl	80069d8 <__hi0bits>
 8006f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f82:	e7e1      	b.n	8006f48 <__d2b+0x70>
 8006f84:	08009bbb 	.word	0x08009bbb
 8006f88:	08009bcc 	.word	0x08009bcc

08006f8c <_calloc_r>:
 8006f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f8e:	fba1 2402 	umull	r2, r4, r1, r2
 8006f92:	b94c      	cbnz	r4, 8006fa8 <_calloc_r+0x1c>
 8006f94:	4611      	mov	r1, r2
 8006f96:	9201      	str	r2, [sp, #4]
 8006f98:	f000 f87a 	bl	8007090 <_malloc_r>
 8006f9c:	9a01      	ldr	r2, [sp, #4]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b930      	cbnz	r0, 8006fb0 <_calloc_r+0x24>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bd30      	pop	{r4, r5, pc}
 8006fa8:	220c      	movs	r2, #12
 8006faa:	6002      	str	r2, [r0, #0]
 8006fac:	2500      	movs	r5, #0
 8006fae:	e7f8      	b.n	8006fa2 <_calloc_r+0x16>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f7fe f93f 	bl	8005234 <memset>
 8006fb6:	e7f4      	b.n	8006fa2 <_calloc_r+0x16>

08006fb8 <_free_r>:
 8006fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	d044      	beq.n	8007048 <_free_r+0x90>
 8006fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc2:	9001      	str	r0, [sp, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8006fca:	bfb8      	it	lt
 8006fcc:	18e4      	addlt	r4, r4, r3
 8006fce:	f000 fa9b 	bl	8007508 <__malloc_lock>
 8006fd2:	4a1e      	ldr	r2, [pc, #120]	; (800704c <_free_r+0x94>)
 8006fd4:	9801      	ldr	r0, [sp, #4]
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	b933      	cbnz	r3, 8006fe8 <_free_r+0x30>
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	6014      	str	r4, [r2, #0]
 8006fde:	b003      	add	sp, #12
 8006fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe4:	f000 ba96 	b.w	8007514 <__malloc_unlock>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d908      	bls.n	8006ffe <_free_r+0x46>
 8006fec:	6825      	ldr	r5, [r4, #0]
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf01      	itttt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	1949      	addeq	r1, r1, r5
 8006ffa:	6021      	streq	r1, [r4, #0]
 8006ffc:	e7ed      	b.n	8006fda <_free_r+0x22>
 8006ffe:	461a      	mov	r2, r3
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b10b      	cbz	r3, 8007008 <_free_r+0x50>
 8007004:	42a3      	cmp	r3, r4
 8007006:	d9fa      	bls.n	8006ffe <_free_r+0x46>
 8007008:	6811      	ldr	r1, [r2, #0]
 800700a:	1855      	adds	r5, r2, r1
 800700c:	42a5      	cmp	r5, r4
 800700e:	d10b      	bne.n	8007028 <_free_r+0x70>
 8007010:	6824      	ldr	r4, [r4, #0]
 8007012:	4421      	add	r1, r4
 8007014:	1854      	adds	r4, r2, r1
 8007016:	42a3      	cmp	r3, r4
 8007018:	6011      	str	r1, [r2, #0]
 800701a:	d1e0      	bne.n	8006fde <_free_r+0x26>
 800701c:	681c      	ldr	r4, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	6053      	str	r3, [r2, #4]
 8007022:	4421      	add	r1, r4
 8007024:	6011      	str	r1, [r2, #0]
 8007026:	e7da      	b.n	8006fde <_free_r+0x26>
 8007028:	d902      	bls.n	8007030 <_free_r+0x78>
 800702a:	230c      	movs	r3, #12
 800702c:	6003      	str	r3, [r0, #0]
 800702e:	e7d6      	b.n	8006fde <_free_r+0x26>
 8007030:	6825      	ldr	r5, [r4, #0]
 8007032:	1961      	adds	r1, r4, r5
 8007034:	428b      	cmp	r3, r1
 8007036:	bf04      	itt	eq
 8007038:	6819      	ldreq	r1, [r3, #0]
 800703a:	685b      	ldreq	r3, [r3, #4]
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	bf04      	itt	eq
 8007040:	1949      	addeq	r1, r1, r5
 8007042:	6021      	streq	r1, [r4, #0]
 8007044:	6054      	str	r4, [r2, #4]
 8007046:	e7ca      	b.n	8006fde <_free_r+0x26>
 8007048:	b003      	add	sp, #12
 800704a:	bd30      	pop	{r4, r5, pc}
 800704c:	200002ac 	.word	0x200002ac

08007050 <sbrk_aligned>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4e0e      	ldr	r6, [pc, #56]	; (800708c <sbrk_aligned+0x3c>)
 8007054:	460c      	mov	r4, r1
 8007056:	6831      	ldr	r1, [r6, #0]
 8007058:	4605      	mov	r5, r0
 800705a:	b911      	cbnz	r1, 8007062 <sbrk_aligned+0x12>
 800705c:	f000 f9e8 	bl	8007430 <_sbrk_r>
 8007060:	6030      	str	r0, [r6, #0]
 8007062:	4621      	mov	r1, r4
 8007064:	4628      	mov	r0, r5
 8007066:	f000 f9e3 	bl	8007430 <_sbrk_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	d00a      	beq.n	8007084 <sbrk_aligned+0x34>
 800706e:	1cc4      	adds	r4, r0, #3
 8007070:	f024 0403 	bic.w	r4, r4, #3
 8007074:	42a0      	cmp	r0, r4
 8007076:	d007      	beq.n	8007088 <sbrk_aligned+0x38>
 8007078:	1a21      	subs	r1, r4, r0
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f9d8 	bl	8007430 <_sbrk_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d101      	bne.n	8007088 <sbrk_aligned+0x38>
 8007084:	f04f 34ff 	mov.w	r4, #4294967295
 8007088:	4620      	mov	r0, r4
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	200002b0 	.word	0x200002b0

08007090 <_malloc_r>:
 8007090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007094:	1ccd      	adds	r5, r1, #3
 8007096:	f025 0503 	bic.w	r5, r5, #3
 800709a:	3508      	adds	r5, #8
 800709c:	2d0c      	cmp	r5, #12
 800709e:	bf38      	it	cc
 80070a0:	250c      	movcc	r5, #12
 80070a2:	2d00      	cmp	r5, #0
 80070a4:	4607      	mov	r7, r0
 80070a6:	db01      	blt.n	80070ac <_malloc_r+0x1c>
 80070a8:	42a9      	cmp	r1, r5
 80070aa:	d905      	bls.n	80070b8 <_malloc_r+0x28>
 80070ac:	230c      	movs	r3, #12
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	2600      	movs	r6, #0
 80070b2:	4630      	mov	r0, r6
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	4e2e      	ldr	r6, [pc, #184]	; (8007174 <_malloc_r+0xe4>)
 80070ba:	f000 fa25 	bl	8007508 <__malloc_lock>
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	461c      	mov	r4, r3
 80070c2:	bb34      	cbnz	r4, 8007112 <_malloc_r+0x82>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ffc2 	bl	8007050 <sbrk_aligned>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	4604      	mov	r4, r0
 80070d0:	d14d      	bne.n	800716e <_malloc_r+0xde>
 80070d2:	6834      	ldr	r4, [r6, #0]
 80070d4:	4626      	mov	r6, r4
 80070d6:	2e00      	cmp	r6, #0
 80070d8:	d140      	bne.n	800715c <_malloc_r+0xcc>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	4631      	mov	r1, r6
 80070de:	4638      	mov	r0, r7
 80070e0:	eb04 0803 	add.w	r8, r4, r3
 80070e4:	f000 f9a4 	bl	8007430 <_sbrk_r>
 80070e8:	4580      	cmp	r8, r0
 80070ea:	d13a      	bne.n	8007162 <_malloc_r+0xd2>
 80070ec:	6821      	ldr	r1, [r4, #0]
 80070ee:	3503      	adds	r5, #3
 80070f0:	1a6d      	subs	r5, r5, r1
 80070f2:	f025 0503 	bic.w	r5, r5, #3
 80070f6:	3508      	adds	r5, #8
 80070f8:	2d0c      	cmp	r5, #12
 80070fa:	bf38      	it	cc
 80070fc:	250c      	movcc	r5, #12
 80070fe:	4629      	mov	r1, r5
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ffa5 	bl	8007050 <sbrk_aligned>
 8007106:	3001      	adds	r0, #1
 8007108:	d02b      	beq.n	8007162 <_malloc_r+0xd2>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	442b      	add	r3, r5
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	e00e      	b.n	8007130 <_malloc_r+0xa0>
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	1b52      	subs	r2, r2, r5
 8007116:	d41e      	bmi.n	8007156 <_malloc_r+0xc6>
 8007118:	2a0b      	cmp	r2, #11
 800711a:	d916      	bls.n	800714a <_malloc_r+0xba>
 800711c:	1961      	adds	r1, r4, r5
 800711e:	42a3      	cmp	r3, r4
 8007120:	6025      	str	r5, [r4, #0]
 8007122:	bf18      	it	ne
 8007124:	6059      	strne	r1, [r3, #4]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	bf08      	it	eq
 800712a:	6031      	streq	r1, [r6, #0]
 800712c:	5162      	str	r2, [r4, r5]
 800712e:	604b      	str	r3, [r1, #4]
 8007130:	4638      	mov	r0, r7
 8007132:	f104 060b 	add.w	r6, r4, #11
 8007136:	f000 f9ed 	bl	8007514 <__malloc_unlock>
 800713a:	f026 0607 	bic.w	r6, r6, #7
 800713e:	1d23      	adds	r3, r4, #4
 8007140:	1af2      	subs	r2, r6, r3
 8007142:	d0b6      	beq.n	80070b2 <_malloc_r+0x22>
 8007144:	1b9b      	subs	r3, r3, r6
 8007146:	50a3      	str	r3, [r4, r2]
 8007148:	e7b3      	b.n	80070b2 <_malloc_r+0x22>
 800714a:	6862      	ldr	r2, [r4, #4]
 800714c:	42a3      	cmp	r3, r4
 800714e:	bf0c      	ite	eq
 8007150:	6032      	streq	r2, [r6, #0]
 8007152:	605a      	strne	r2, [r3, #4]
 8007154:	e7ec      	b.n	8007130 <_malloc_r+0xa0>
 8007156:	4623      	mov	r3, r4
 8007158:	6864      	ldr	r4, [r4, #4]
 800715a:	e7b2      	b.n	80070c2 <_malloc_r+0x32>
 800715c:	4634      	mov	r4, r6
 800715e:	6876      	ldr	r6, [r6, #4]
 8007160:	e7b9      	b.n	80070d6 <_malloc_r+0x46>
 8007162:	230c      	movs	r3, #12
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	4638      	mov	r0, r7
 8007168:	f000 f9d4 	bl	8007514 <__malloc_unlock>
 800716c:	e7a1      	b.n	80070b2 <_malloc_r+0x22>
 800716e:	6025      	str	r5, [r4, #0]
 8007170:	e7de      	b.n	8007130 <_malloc_r+0xa0>
 8007172:	bf00      	nop
 8007174:	200002ac 	.word	0x200002ac

08007178 <__ssputs_r>:
 8007178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	688e      	ldr	r6, [r1, #8]
 800717e:	429e      	cmp	r6, r3
 8007180:	4682      	mov	sl, r0
 8007182:	460c      	mov	r4, r1
 8007184:	4690      	mov	r8, r2
 8007186:	461f      	mov	r7, r3
 8007188:	d838      	bhi.n	80071fc <__ssputs_r+0x84>
 800718a:	898a      	ldrh	r2, [r1, #12]
 800718c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007190:	d032      	beq.n	80071f8 <__ssputs_r+0x80>
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	6909      	ldr	r1, [r1, #16]
 8007196:	eba5 0901 	sub.w	r9, r5, r1
 800719a:	6965      	ldr	r5, [r4, #20]
 800719c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071a4:	3301      	adds	r3, #1
 80071a6:	444b      	add	r3, r9
 80071a8:	106d      	asrs	r5, r5, #1
 80071aa:	429d      	cmp	r5, r3
 80071ac:	bf38      	it	cc
 80071ae:	461d      	movcc	r5, r3
 80071b0:	0553      	lsls	r3, r2, #21
 80071b2:	d531      	bpl.n	8007218 <__ssputs_r+0xa0>
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7ff ff6b 	bl	8007090 <_malloc_r>
 80071ba:	4606      	mov	r6, r0
 80071bc:	b950      	cbnz	r0, 80071d4 <__ssputs_r+0x5c>
 80071be:	230c      	movs	r3, #12
 80071c0:	f8ca 3000 	str.w	r3, [sl]
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d4:	6921      	ldr	r1, [r4, #16]
 80071d6:	464a      	mov	r2, r9
 80071d8:	f7ff fb48 	bl	800686c <memcpy>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	6126      	str	r6, [r4, #16]
 80071ea:	6165      	str	r5, [r4, #20]
 80071ec:	444e      	add	r6, r9
 80071ee:	eba5 0509 	sub.w	r5, r5, r9
 80071f2:	6026      	str	r6, [r4, #0]
 80071f4:	60a5      	str	r5, [r4, #8]
 80071f6:	463e      	mov	r6, r7
 80071f8:	42be      	cmp	r6, r7
 80071fa:	d900      	bls.n	80071fe <__ssputs_r+0x86>
 80071fc:	463e      	mov	r6, r7
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	4632      	mov	r2, r6
 8007202:	4641      	mov	r1, r8
 8007204:	f000 f966 	bl	80074d4 <memmove>
 8007208:	68a3      	ldr	r3, [r4, #8]
 800720a:	1b9b      	subs	r3, r3, r6
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	4433      	add	r3, r6
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	e7db      	b.n	80071d0 <__ssputs_r+0x58>
 8007218:	462a      	mov	r2, r5
 800721a:	f000 f981 	bl	8007520 <_realloc_r>
 800721e:	4606      	mov	r6, r0
 8007220:	2800      	cmp	r0, #0
 8007222:	d1e1      	bne.n	80071e8 <__ssputs_r+0x70>
 8007224:	6921      	ldr	r1, [r4, #16]
 8007226:	4650      	mov	r0, sl
 8007228:	f7ff fec6 	bl	8006fb8 <_free_r>
 800722c:	e7c7      	b.n	80071be <__ssputs_r+0x46>
	...

08007230 <_svfiprintf_r>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	4698      	mov	r8, r3
 8007236:	898b      	ldrh	r3, [r1, #12]
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	b09d      	sub	sp, #116	; 0x74
 800723c:	4607      	mov	r7, r0
 800723e:	460d      	mov	r5, r1
 8007240:	4614      	mov	r4, r2
 8007242:	d50e      	bpl.n	8007262 <_svfiprintf_r+0x32>
 8007244:	690b      	ldr	r3, [r1, #16]
 8007246:	b963      	cbnz	r3, 8007262 <_svfiprintf_r+0x32>
 8007248:	2140      	movs	r1, #64	; 0x40
 800724a:	f7ff ff21 	bl	8007090 <_malloc_r>
 800724e:	6028      	str	r0, [r5, #0]
 8007250:	6128      	str	r0, [r5, #16]
 8007252:	b920      	cbnz	r0, 800725e <_svfiprintf_r+0x2e>
 8007254:	230c      	movs	r3, #12
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e0d1      	b.n	8007402 <_svfiprintf_r+0x1d2>
 800725e:	2340      	movs	r3, #64	; 0x40
 8007260:	616b      	str	r3, [r5, #20]
 8007262:	2300      	movs	r3, #0
 8007264:	9309      	str	r3, [sp, #36]	; 0x24
 8007266:	2320      	movs	r3, #32
 8007268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800726c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007270:	2330      	movs	r3, #48	; 0x30
 8007272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800741c <_svfiprintf_r+0x1ec>
 8007276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800727a:	f04f 0901 	mov.w	r9, #1
 800727e:	4623      	mov	r3, r4
 8007280:	469a      	mov	sl, r3
 8007282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007286:	b10a      	cbz	r2, 800728c <_svfiprintf_r+0x5c>
 8007288:	2a25      	cmp	r2, #37	; 0x25
 800728a:	d1f9      	bne.n	8007280 <_svfiprintf_r+0x50>
 800728c:	ebba 0b04 	subs.w	fp, sl, r4
 8007290:	d00b      	beq.n	80072aa <_svfiprintf_r+0x7a>
 8007292:	465b      	mov	r3, fp
 8007294:	4622      	mov	r2, r4
 8007296:	4629      	mov	r1, r5
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ff6d 	bl	8007178 <__ssputs_r>
 800729e:	3001      	adds	r0, #1
 80072a0:	f000 80aa 	beq.w	80073f8 <_svfiprintf_r+0x1c8>
 80072a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a6:	445a      	add	r2, fp
 80072a8:	9209      	str	r2, [sp, #36]	; 0x24
 80072aa:	f89a 3000 	ldrb.w	r3, [sl]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80a2 	beq.w	80073f8 <_svfiprintf_r+0x1c8>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072be:	f10a 0a01 	add.w	sl, sl, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	9307      	str	r3, [sp, #28]
 80072c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ca:	931a      	str	r3, [sp, #104]	; 0x68
 80072cc:	4654      	mov	r4, sl
 80072ce:	2205      	movs	r2, #5
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	4851      	ldr	r0, [pc, #324]	; (800741c <_svfiprintf_r+0x1ec>)
 80072d6:	f7f8 ff8b 	bl	80001f0 <memchr>
 80072da:	9a04      	ldr	r2, [sp, #16]
 80072dc:	b9d8      	cbnz	r0, 8007316 <_svfiprintf_r+0xe6>
 80072de:	06d0      	lsls	r0, r2, #27
 80072e0:	bf44      	itt	mi
 80072e2:	2320      	movmi	r3, #32
 80072e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e8:	0711      	lsls	r1, r2, #28
 80072ea:	bf44      	itt	mi
 80072ec:	232b      	movmi	r3, #43	; 0x2b
 80072ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f2:	f89a 3000 	ldrb.w	r3, [sl]
 80072f6:	2b2a      	cmp	r3, #42	; 0x2a
 80072f8:	d015      	beq.n	8007326 <_svfiprintf_r+0xf6>
 80072fa:	9a07      	ldr	r2, [sp, #28]
 80072fc:	4654      	mov	r4, sl
 80072fe:	2000      	movs	r0, #0
 8007300:	f04f 0c0a 	mov.w	ip, #10
 8007304:	4621      	mov	r1, r4
 8007306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730a:	3b30      	subs	r3, #48	; 0x30
 800730c:	2b09      	cmp	r3, #9
 800730e:	d94e      	bls.n	80073ae <_svfiprintf_r+0x17e>
 8007310:	b1b0      	cbz	r0, 8007340 <_svfiprintf_r+0x110>
 8007312:	9207      	str	r2, [sp, #28]
 8007314:	e014      	b.n	8007340 <_svfiprintf_r+0x110>
 8007316:	eba0 0308 	sub.w	r3, r0, r8
 800731a:	fa09 f303 	lsl.w	r3, r9, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	46a2      	mov	sl, r4
 8007324:	e7d2      	b.n	80072cc <_svfiprintf_r+0x9c>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d19      	adds	r1, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9103      	str	r1, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfbb      	ittet	lt
 8007332:	425b      	neglt	r3, r3
 8007334:	f042 0202 	orrlt.w	r2, r2, #2
 8007338:	9307      	strge	r3, [sp, #28]
 800733a:	9307      	strlt	r3, [sp, #28]
 800733c:	bfb8      	it	lt
 800733e:	9204      	strlt	r2, [sp, #16]
 8007340:	7823      	ldrb	r3, [r4, #0]
 8007342:	2b2e      	cmp	r3, #46	; 0x2e
 8007344:	d10c      	bne.n	8007360 <_svfiprintf_r+0x130>
 8007346:	7863      	ldrb	r3, [r4, #1]
 8007348:	2b2a      	cmp	r3, #42	; 0x2a
 800734a:	d135      	bne.n	80073b8 <_svfiprintf_r+0x188>
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	9203      	str	r2, [sp, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	bfb8      	it	lt
 8007358:	f04f 33ff 	movlt.w	r3, #4294967295
 800735c:	3402      	adds	r4, #2
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800742c <_svfiprintf_r+0x1fc>
 8007364:	7821      	ldrb	r1, [r4, #0]
 8007366:	2203      	movs	r2, #3
 8007368:	4650      	mov	r0, sl
 800736a:	f7f8 ff41 	bl	80001f0 <memchr>
 800736e:	b140      	cbz	r0, 8007382 <_svfiprintf_r+0x152>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	eba0 000a 	sub.w	r0, r0, sl
 8007376:	fa03 f000 	lsl.w	r0, r3, r0
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	4303      	orrs	r3, r0
 800737e:	3401      	adds	r4, #1
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007386:	4826      	ldr	r0, [pc, #152]	; (8007420 <_svfiprintf_r+0x1f0>)
 8007388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800738c:	2206      	movs	r2, #6
 800738e:	f7f8 ff2f 	bl	80001f0 <memchr>
 8007392:	2800      	cmp	r0, #0
 8007394:	d038      	beq.n	8007408 <_svfiprintf_r+0x1d8>
 8007396:	4b23      	ldr	r3, [pc, #140]	; (8007424 <_svfiprintf_r+0x1f4>)
 8007398:	bb1b      	cbnz	r3, 80073e2 <_svfiprintf_r+0x1b2>
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	3307      	adds	r3, #7
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	3308      	adds	r3, #8
 80073a4:	9303      	str	r3, [sp, #12]
 80073a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a8:	4433      	add	r3, r6
 80073aa:	9309      	str	r3, [sp, #36]	; 0x24
 80073ac:	e767      	b.n	800727e <_svfiprintf_r+0x4e>
 80073ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b2:	460c      	mov	r4, r1
 80073b4:	2001      	movs	r0, #1
 80073b6:	e7a5      	b.n	8007304 <_svfiprintf_r+0xd4>
 80073b8:	2300      	movs	r3, #0
 80073ba:	3401      	adds	r4, #1
 80073bc:	9305      	str	r3, [sp, #20]
 80073be:	4619      	mov	r1, r3
 80073c0:	f04f 0c0a 	mov.w	ip, #10
 80073c4:	4620      	mov	r0, r4
 80073c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ca:	3a30      	subs	r2, #48	; 0x30
 80073cc:	2a09      	cmp	r2, #9
 80073ce:	d903      	bls.n	80073d8 <_svfiprintf_r+0x1a8>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0c5      	beq.n	8007360 <_svfiprintf_r+0x130>
 80073d4:	9105      	str	r1, [sp, #20]
 80073d6:	e7c3      	b.n	8007360 <_svfiprintf_r+0x130>
 80073d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073dc:	4604      	mov	r4, r0
 80073de:	2301      	movs	r3, #1
 80073e0:	e7f0      	b.n	80073c4 <_svfiprintf_r+0x194>
 80073e2:	ab03      	add	r3, sp, #12
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	462a      	mov	r2, r5
 80073e8:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <_svfiprintf_r+0x1f8>)
 80073ea:	a904      	add	r1, sp, #16
 80073ec:	4638      	mov	r0, r7
 80073ee:	f7fd ffc9 	bl	8005384 <_printf_float>
 80073f2:	1c42      	adds	r2, r0, #1
 80073f4:	4606      	mov	r6, r0
 80073f6:	d1d6      	bne.n	80073a6 <_svfiprintf_r+0x176>
 80073f8:	89ab      	ldrh	r3, [r5, #12]
 80073fa:	065b      	lsls	r3, r3, #25
 80073fc:	f53f af2c 	bmi.w	8007258 <_svfiprintf_r+0x28>
 8007400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007402:	b01d      	add	sp, #116	; 0x74
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	ab03      	add	r3, sp, #12
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	462a      	mov	r2, r5
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <_svfiprintf_r+0x1f8>)
 8007410:	a904      	add	r1, sp, #16
 8007412:	4638      	mov	r0, r7
 8007414:	f7fe fa5c 	bl	80058d0 <_printf_i>
 8007418:	e7eb      	b.n	80073f2 <_svfiprintf_r+0x1c2>
 800741a:	bf00      	nop
 800741c:	08009d24 	.word	0x08009d24
 8007420:	08009d2e 	.word	0x08009d2e
 8007424:	08005385 	.word	0x08005385
 8007428:	08007179 	.word	0x08007179
 800742c:	08009d2a 	.word	0x08009d2a

08007430 <_sbrk_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d06      	ldr	r5, [pc, #24]	; (800744c <_sbrk_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	f7fa fc70 	bl	8001d20 <_sbrk>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_sbrk_r+0x1a>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_sbrk_r+0x1a>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	200002b4 	.word	0x200002b4

08007450 <__assert_func>:
 8007450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007452:	4614      	mov	r4, r2
 8007454:	461a      	mov	r2, r3
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <__assert_func+0x2c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4605      	mov	r5, r0
 800745c:	68d8      	ldr	r0, [r3, #12]
 800745e:	b14c      	cbz	r4, 8007474 <__assert_func+0x24>
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <__assert_func+0x30>)
 8007462:	9100      	str	r1, [sp, #0]
 8007464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007468:	4906      	ldr	r1, [pc, #24]	; (8007484 <__assert_func+0x34>)
 800746a:	462b      	mov	r3, r5
 800746c:	f000 f80e 	bl	800748c <fiprintf>
 8007470:	f000 faac 	bl	80079cc <abort>
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <__assert_func+0x38>)
 8007476:	461c      	mov	r4, r3
 8007478:	e7f3      	b.n	8007462 <__assert_func+0x12>
 800747a:	bf00      	nop
 800747c:	20000034 	.word	0x20000034
 8007480:	08009d35 	.word	0x08009d35
 8007484:	08009d42 	.word	0x08009d42
 8007488:	08009d70 	.word	0x08009d70

0800748c <fiprintf>:
 800748c:	b40e      	push	{r1, r2, r3}
 800748e:	b503      	push	{r0, r1, lr}
 8007490:	4601      	mov	r1, r0
 8007492:	ab03      	add	r3, sp, #12
 8007494:	4805      	ldr	r0, [pc, #20]	; (80074ac <fiprintf+0x20>)
 8007496:	f853 2b04 	ldr.w	r2, [r3], #4
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	f000 f897 	bl	80075d0 <_vfiprintf_r>
 80074a2:	b002      	add	sp, #8
 80074a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a8:	b003      	add	sp, #12
 80074aa:	4770      	bx	lr
 80074ac:	20000034 	.word	0x20000034

080074b0 <__ascii_mbtowc>:
 80074b0:	b082      	sub	sp, #8
 80074b2:	b901      	cbnz	r1, 80074b6 <__ascii_mbtowc+0x6>
 80074b4:	a901      	add	r1, sp, #4
 80074b6:	b142      	cbz	r2, 80074ca <__ascii_mbtowc+0x1a>
 80074b8:	b14b      	cbz	r3, 80074ce <__ascii_mbtowc+0x1e>
 80074ba:	7813      	ldrb	r3, [r2, #0]
 80074bc:	600b      	str	r3, [r1, #0]
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	1e10      	subs	r0, r2, #0
 80074c2:	bf18      	it	ne
 80074c4:	2001      	movne	r0, #1
 80074c6:	b002      	add	sp, #8
 80074c8:	4770      	bx	lr
 80074ca:	4610      	mov	r0, r2
 80074cc:	e7fb      	b.n	80074c6 <__ascii_mbtowc+0x16>
 80074ce:	f06f 0001 	mvn.w	r0, #1
 80074d2:	e7f8      	b.n	80074c6 <__ascii_mbtowc+0x16>

080074d4 <memmove>:
 80074d4:	4288      	cmp	r0, r1
 80074d6:	b510      	push	{r4, lr}
 80074d8:	eb01 0402 	add.w	r4, r1, r2
 80074dc:	d902      	bls.n	80074e4 <memmove+0x10>
 80074de:	4284      	cmp	r4, r0
 80074e0:	4623      	mov	r3, r4
 80074e2:	d807      	bhi.n	80074f4 <memmove+0x20>
 80074e4:	1e43      	subs	r3, r0, #1
 80074e6:	42a1      	cmp	r1, r4
 80074e8:	d008      	beq.n	80074fc <memmove+0x28>
 80074ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074f2:	e7f8      	b.n	80074e6 <memmove+0x12>
 80074f4:	4402      	add	r2, r0
 80074f6:	4601      	mov	r1, r0
 80074f8:	428a      	cmp	r2, r1
 80074fa:	d100      	bne.n	80074fe <memmove+0x2a>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007506:	e7f7      	b.n	80074f8 <memmove+0x24>

08007508 <__malloc_lock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_lock+0x8>)
 800750a:	f000 bc1f 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	200002b8 	.word	0x200002b8

08007514 <__malloc_unlock>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__malloc_unlock+0x8>)
 8007516:	f000 bc1a 	b.w	8007d4e <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	200002b8 	.word	0x200002b8

08007520 <_realloc_r>:
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	4680      	mov	r8, r0
 8007526:	4614      	mov	r4, r2
 8007528:	460e      	mov	r6, r1
 800752a:	b921      	cbnz	r1, 8007536 <_realloc_r+0x16>
 800752c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4611      	mov	r1, r2
 8007532:	f7ff bdad 	b.w	8007090 <_malloc_r>
 8007536:	b92a      	cbnz	r2, 8007544 <_realloc_r+0x24>
 8007538:	f7ff fd3e 	bl	8006fb8 <_free_r>
 800753c:	4625      	mov	r5, r4
 800753e:	4628      	mov	r0, r5
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	f000 fc6a 	bl	8007e1c <_malloc_usable_size_r>
 8007548:	4284      	cmp	r4, r0
 800754a:	4607      	mov	r7, r0
 800754c:	d802      	bhi.n	8007554 <_realloc_r+0x34>
 800754e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007552:	d812      	bhi.n	800757a <_realloc_r+0x5a>
 8007554:	4621      	mov	r1, r4
 8007556:	4640      	mov	r0, r8
 8007558:	f7ff fd9a 	bl	8007090 <_malloc_r>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d0ed      	beq.n	800753e <_realloc_r+0x1e>
 8007562:	42bc      	cmp	r4, r7
 8007564:	4622      	mov	r2, r4
 8007566:	4631      	mov	r1, r6
 8007568:	bf28      	it	cs
 800756a:	463a      	movcs	r2, r7
 800756c:	f7ff f97e 	bl	800686c <memcpy>
 8007570:	4631      	mov	r1, r6
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff fd20 	bl	8006fb8 <_free_r>
 8007578:	e7e1      	b.n	800753e <_realloc_r+0x1e>
 800757a:	4635      	mov	r5, r6
 800757c:	e7df      	b.n	800753e <_realloc_r+0x1e>

0800757e <__sfputc_r>:
 800757e:	6893      	ldr	r3, [r2, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	b410      	push	{r4}
 8007586:	6093      	str	r3, [r2, #8]
 8007588:	da08      	bge.n	800759c <__sfputc_r+0x1e>
 800758a:	6994      	ldr	r4, [r2, #24]
 800758c:	42a3      	cmp	r3, r4
 800758e:	db01      	blt.n	8007594 <__sfputc_r+0x16>
 8007590:	290a      	cmp	r1, #10
 8007592:	d103      	bne.n	800759c <__sfputc_r+0x1e>
 8007594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007598:	f000 b94a 	b.w	8007830 <__swbuf_r>
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	1c58      	adds	r0, r3, #1
 80075a0:	6010      	str	r0, [r2, #0]
 80075a2:	7019      	strb	r1, [r3, #0]
 80075a4:	4608      	mov	r0, r1
 80075a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <__sfputs_r>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	4614      	mov	r4, r2
 80075b4:	18d5      	adds	r5, r2, r3
 80075b6:	42ac      	cmp	r4, r5
 80075b8:	d101      	bne.n	80075be <__sfputs_r+0x12>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e007      	b.n	80075ce <__sfputs_r+0x22>
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	463a      	mov	r2, r7
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff ffda 	bl	800757e <__sfputc_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	d1f3      	bne.n	80075b6 <__sfputs_r+0xa>
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075d0 <_vfiprintf_r>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	460d      	mov	r5, r1
 80075d6:	b09d      	sub	sp, #116	; 0x74
 80075d8:	4614      	mov	r4, r2
 80075da:	4698      	mov	r8, r3
 80075dc:	4606      	mov	r6, r0
 80075de:	b118      	cbz	r0, 80075e8 <_vfiprintf_r+0x18>
 80075e0:	6983      	ldr	r3, [r0, #24]
 80075e2:	b90b      	cbnz	r3, 80075e8 <_vfiprintf_r+0x18>
 80075e4:	f000 fb14 	bl	8007c10 <__sinit>
 80075e8:	4b89      	ldr	r3, [pc, #548]	; (8007810 <_vfiprintf_r+0x240>)
 80075ea:	429d      	cmp	r5, r3
 80075ec:	d11b      	bne.n	8007626 <_vfiprintf_r+0x56>
 80075ee:	6875      	ldr	r5, [r6, #4]
 80075f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f2:	07d9      	lsls	r1, r3, #31
 80075f4:	d405      	bmi.n	8007602 <_vfiprintf_r+0x32>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	059a      	lsls	r2, r3, #22
 80075fa:	d402      	bmi.n	8007602 <_vfiprintf_r+0x32>
 80075fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fe:	f000 fba5 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	071b      	lsls	r3, r3, #28
 8007606:	d501      	bpl.n	800760c <_vfiprintf_r+0x3c>
 8007608:	692b      	ldr	r3, [r5, #16]
 800760a:	b9eb      	cbnz	r3, 8007648 <_vfiprintf_r+0x78>
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f000 f96e 	bl	80078f0 <__swsetup_r>
 8007614:	b1c0      	cbz	r0, 8007648 <_vfiprintf_r+0x78>
 8007616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007618:	07dc      	lsls	r4, r3, #31
 800761a:	d50e      	bpl.n	800763a <_vfiprintf_r+0x6a>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	b01d      	add	sp, #116	; 0x74
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <_vfiprintf_r+0x244>)
 8007628:	429d      	cmp	r5, r3
 800762a:	d101      	bne.n	8007630 <_vfiprintf_r+0x60>
 800762c:	68b5      	ldr	r5, [r6, #8]
 800762e:	e7df      	b.n	80075f0 <_vfiprintf_r+0x20>
 8007630:	4b79      	ldr	r3, [pc, #484]	; (8007818 <_vfiprintf_r+0x248>)
 8007632:	429d      	cmp	r5, r3
 8007634:	bf08      	it	eq
 8007636:	68f5      	ldreq	r5, [r6, #12]
 8007638:	e7da      	b.n	80075f0 <_vfiprintf_r+0x20>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	0598      	lsls	r0, r3, #22
 800763e:	d4ed      	bmi.n	800761c <_vfiprintf_r+0x4c>
 8007640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007642:	f000 fb84 	bl	8007d4e <__retarget_lock_release_recursive>
 8007646:	e7e9      	b.n	800761c <_vfiprintf_r+0x4c>
 8007648:	2300      	movs	r3, #0
 800764a:	9309      	str	r3, [sp, #36]	; 0x24
 800764c:	2320      	movs	r3, #32
 800764e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007652:	f8cd 800c 	str.w	r8, [sp, #12]
 8007656:	2330      	movs	r3, #48	; 0x30
 8007658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800781c <_vfiprintf_r+0x24c>
 800765c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007660:	f04f 0901 	mov.w	r9, #1
 8007664:	4623      	mov	r3, r4
 8007666:	469a      	mov	sl, r3
 8007668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800766c:	b10a      	cbz	r2, 8007672 <_vfiprintf_r+0xa2>
 800766e:	2a25      	cmp	r2, #37	; 0x25
 8007670:	d1f9      	bne.n	8007666 <_vfiprintf_r+0x96>
 8007672:	ebba 0b04 	subs.w	fp, sl, r4
 8007676:	d00b      	beq.n	8007690 <_vfiprintf_r+0xc0>
 8007678:	465b      	mov	r3, fp
 800767a:	4622      	mov	r2, r4
 800767c:	4629      	mov	r1, r5
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ff94 	bl	80075ac <__sfputs_r>
 8007684:	3001      	adds	r0, #1
 8007686:	f000 80aa 	beq.w	80077de <_vfiprintf_r+0x20e>
 800768a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800768c:	445a      	add	r2, fp
 800768e:	9209      	str	r2, [sp, #36]	; 0x24
 8007690:	f89a 3000 	ldrb.w	r3, [sl]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80a2 	beq.w	80077de <_vfiprintf_r+0x20e>
 800769a:	2300      	movs	r3, #0
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a4:	f10a 0a01 	add.w	sl, sl, #1
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b0:	931a      	str	r3, [sp, #104]	; 0x68
 80076b2:	4654      	mov	r4, sl
 80076b4:	2205      	movs	r2, #5
 80076b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ba:	4858      	ldr	r0, [pc, #352]	; (800781c <_vfiprintf_r+0x24c>)
 80076bc:	f7f8 fd98 	bl	80001f0 <memchr>
 80076c0:	9a04      	ldr	r2, [sp, #16]
 80076c2:	b9d8      	cbnz	r0, 80076fc <_vfiprintf_r+0x12c>
 80076c4:	06d1      	lsls	r1, r2, #27
 80076c6:	bf44      	itt	mi
 80076c8:	2320      	movmi	r3, #32
 80076ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ce:	0713      	lsls	r3, r2, #28
 80076d0:	bf44      	itt	mi
 80076d2:	232b      	movmi	r3, #43	; 0x2b
 80076d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d8:	f89a 3000 	ldrb.w	r3, [sl]
 80076dc:	2b2a      	cmp	r3, #42	; 0x2a
 80076de:	d015      	beq.n	800770c <_vfiprintf_r+0x13c>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	4654      	mov	r4, sl
 80076e4:	2000      	movs	r0, #0
 80076e6:	f04f 0c0a 	mov.w	ip, #10
 80076ea:	4621      	mov	r1, r4
 80076ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f0:	3b30      	subs	r3, #48	; 0x30
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d94e      	bls.n	8007794 <_vfiprintf_r+0x1c4>
 80076f6:	b1b0      	cbz	r0, 8007726 <_vfiprintf_r+0x156>
 80076f8:	9207      	str	r2, [sp, #28]
 80076fa:	e014      	b.n	8007726 <_vfiprintf_r+0x156>
 80076fc:	eba0 0308 	sub.w	r3, r0, r8
 8007700:	fa09 f303 	lsl.w	r3, r9, r3
 8007704:	4313      	orrs	r3, r2
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	46a2      	mov	sl, r4
 800770a:	e7d2      	b.n	80076b2 <_vfiprintf_r+0xe2>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	1d19      	adds	r1, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	9103      	str	r1, [sp, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	bfbb      	ittet	lt
 8007718:	425b      	neglt	r3, r3
 800771a:	f042 0202 	orrlt.w	r2, r2, #2
 800771e:	9307      	strge	r3, [sp, #28]
 8007720:	9307      	strlt	r3, [sp, #28]
 8007722:	bfb8      	it	lt
 8007724:	9204      	strlt	r2, [sp, #16]
 8007726:	7823      	ldrb	r3, [r4, #0]
 8007728:	2b2e      	cmp	r3, #46	; 0x2e
 800772a:	d10c      	bne.n	8007746 <_vfiprintf_r+0x176>
 800772c:	7863      	ldrb	r3, [r4, #1]
 800772e:	2b2a      	cmp	r3, #42	; 0x2a
 8007730:	d135      	bne.n	800779e <_vfiprintf_r+0x1ce>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	1d1a      	adds	r2, r3, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9203      	str	r2, [sp, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfb8      	it	lt
 800773e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007742:	3402      	adds	r4, #2
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800782c <_vfiprintf_r+0x25c>
 800774a:	7821      	ldrb	r1, [r4, #0]
 800774c:	2203      	movs	r2, #3
 800774e:	4650      	mov	r0, sl
 8007750:	f7f8 fd4e 	bl	80001f0 <memchr>
 8007754:	b140      	cbz	r0, 8007768 <_vfiprintf_r+0x198>
 8007756:	2340      	movs	r3, #64	; 0x40
 8007758:	eba0 000a 	sub.w	r0, r0, sl
 800775c:	fa03 f000 	lsl.w	r0, r3, r0
 8007760:	9b04      	ldr	r3, [sp, #16]
 8007762:	4303      	orrs	r3, r0
 8007764:	3401      	adds	r4, #1
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776c:	482c      	ldr	r0, [pc, #176]	; (8007820 <_vfiprintf_r+0x250>)
 800776e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007772:	2206      	movs	r2, #6
 8007774:	f7f8 fd3c 	bl	80001f0 <memchr>
 8007778:	2800      	cmp	r0, #0
 800777a:	d03f      	beq.n	80077fc <_vfiprintf_r+0x22c>
 800777c:	4b29      	ldr	r3, [pc, #164]	; (8007824 <_vfiprintf_r+0x254>)
 800777e:	bb1b      	cbnz	r3, 80077c8 <_vfiprintf_r+0x1f8>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	3307      	adds	r3, #7
 8007784:	f023 0307 	bic.w	r3, r3, #7
 8007788:	3308      	adds	r3, #8
 800778a:	9303      	str	r3, [sp, #12]
 800778c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778e:	443b      	add	r3, r7
 8007790:	9309      	str	r3, [sp, #36]	; 0x24
 8007792:	e767      	b.n	8007664 <_vfiprintf_r+0x94>
 8007794:	fb0c 3202 	mla	r2, ip, r2, r3
 8007798:	460c      	mov	r4, r1
 800779a:	2001      	movs	r0, #1
 800779c:	e7a5      	b.n	80076ea <_vfiprintf_r+0x11a>
 800779e:	2300      	movs	r3, #0
 80077a0:	3401      	adds	r4, #1
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	4619      	mov	r1, r3
 80077a6:	f04f 0c0a 	mov.w	ip, #10
 80077aa:	4620      	mov	r0, r4
 80077ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b0:	3a30      	subs	r2, #48	; 0x30
 80077b2:	2a09      	cmp	r2, #9
 80077b4:	d903      	bls.n	80077be <_vfiprintf_r+0x1ee>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0c5      	beq.n	8007746 <_vfiprintf_r+0x176>
 80077ba:	9105      	str	r1, [sp, #20]
 80077bc:	e7c3      	b.n	8007746 <_vfiprintf_r+0x176>
 80077be:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c2:	4604      	mov	r4, r0
 80077c4:	2301      	movs	r3, #1
 80077c6:	e7f0      	b.n	80077aa <_vfiprintf_r+0x1da>
 80077c8:	ab03      	add	r3, sp, #12
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	462a      	mov	r2, r5
 80077ce:	4b16      	ldr	r3, [pc, #88]	; (8007828 <_vfiprintf_r+0x258>)
 80077d0:	a904      	add	r1, sp, #16
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7fd fdd6 	bl	8005384 <_printf_float>
 80077d8:	4607      	mov	r7, r0
 80077da:	1c78      	adds	r0, r7, #1
 80077dc:	d1d6      	bne.n	800778c <_vfiprintf_r+0x1bc>
 80077de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e0:	07d9      	lsls	r1, r3, #31
 80077e2:	d405      	bmi.n	80077f0 <_vfiprintf_r+0x220>
 80077e4:	89ab      	ldrh	r3, [r5, #12]
 80077e6:	059a      	lsls	r2, r3, #22
 80077e8:	d402      	bmi.n	80077f0 <_vfiprintf_r+0x220>
 80077ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ec:	f000 faaf 	bl	8007d4e <__retarget_lock_release_recursive>
 80077f0:	89ab      	ldrh	r3, [r5, #12]
 80077f2:	065b      	lsls	r3, r3, #25
 80077f4:	f53f af12 	bmi.w	800761c <_vfiprintf_r+0x4c>
 80077f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fa:	e711      	b.n	8007620 <_vfiprintf_r+0x50>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	462a      	mov	r2, r5
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <_vfiprintf_r+0x258>)
 8007804:	a904      	add	r1, sp, #16
 8007806:	4630      	mov	r0, r6
 8007808:	f7fe f862 	bl	80058d0 <_printf_i>
 800780c:	e7e4      	b.n	80077d8 <_vfiprintf_r+0x208>
 800780e:	bf00      	nop
 8007810:	08009e9c 	.word	0x08009e9c
 8007814:	08009ebc 	.word	0x08009ebc
 8007818:	08009e7c 	.word	0x08009e7c
 800781c:	08009d24 	.word	0x08009d24
 8007820:	08009d2e 	.word	0x08009d2e
 8007824:	08005385 	.word	0x08005385
 8007828:	080075ad 	.word	0x080075ad
 800782c:	08009d2a 	.word	0x08009d2a

08007830 <__swbuf_r>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	460e      	mov	r6, r1
 8007834:	4614      	mov	r4, r2
 8007836:	4605      	mov	r5, r0
 8007838:	b118      	cbz	r0, 8007842 <__swbuf_r+0x12>
 800783a:	6983      	ldr	r3, [r0, #24]
 800783c:	b90b      	cbnz	r3, 8007842 <__swbuf_r+0x12>
 800783e:	f000 f9e7 	bl	8007c10 <__sinit>
 8007842:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <__swbuf_r+0x98>)
 8007844:	429c      	cmp	r4, r3
 8007846:	d12b      	bne.n	80078a0 <__swbuf_r+0x70>
 8007848:	686c      	ldr	r4, [r5, #4]
 800784a:	69a3      	ldr	r3, [r4, #24]
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	071a      	lsls	r2, r3, #28
 8007852:	d52f      	bpl.n	80078b4 <__swbuf_r+0x84>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	b36b      	cbz	r3, 80078b4 <__swbuf_r+0x84>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	1ac0      	subs	r0, r0, r3
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	b2f6      	uxtb	r6, r6
 8007862:	4283      	cmp	r3, r0
 8007864:	4637      	mov	r7, r6
 8007866:	dc04      	bgt.n	8007872 <__swbuf_r+0x42>
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f93c 	bl	8007ae8 <_fflush_r>
 8007870:	bb30      	cbnz	r0, 80078c0 <__swbuf_r+0x90>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	3b01      	subs	r3, #1
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	701e      	strb	r6, [r3, #0]
 8007880:	6963      	ldr	r3, [r4, #20]
 8007882:	3001      	adds	r0, #1
 8007884:	4283      	cmp	r3, r0
 8007886:	d004      	beq.n	8007892 <__swbuf_r+0x62>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d506      	bpl.n	800789c <__swbuf_r+0x6c>
 800788e:	2e0a      	cmp	r6, #10
 8007890:	d104      	bne.n	800789c <__swbuf_r+0x6c>
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	f000 f927 	bl	8007ae8 <_fflush_r>
 800789a:	b988      	cbnz	r0, 80078c0 <__swbuf_r+0x90>
 800789c:	4638      	mov	r0, r7
 800789e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <__swbuf_r+0x9c>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d101      	bne.n	80078aa <__swbuf_r+0x7a>
 80078a6:	68ac      	ldr	r4, [r5, #8]
 80078a8:	e7cf      	b.n	800784a <__swbuf_r+0x1a>
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <__swbuf_r+0xa0>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	bf08      	it	eq
 80078b0:	68ec      	ldreq	r4, [r5, #12]
 80078b2:	e7ca      	b.n	800784a <__swbuf_r+0x1a>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 f81a 	bl	80078f0 <__swsetup_r>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d0cb      	beq.n	8007858 <__swbuf_r+0x28>
 80078c0:	f04f 37ff 	mov.w	r7, #4294967295
 80078c4:	e7ea      	b.n	800789c <__swbuf_r+0x6c>
 80078c6:	bf00      	nop
 80078c8:	08009e9c 	.word	0x08009e9c
 80078cc:	08009ebc 	.word	0x08009ebc
 80078d0:	08009e7c 	.word	0x08009e7c

080078d4 <__ascii_wctomb>:
 80078d4:	b149      	cbz	r1, 80078ea <__ascii_wctomb+0x16>
 80078d6:	2aff      	cmp	r2, #255	; 0xff
 80078d8:	bf85      	ittet	hi
 80078da:	238a      	movhi	r3, #138	; 0x8a
 80078dc:	6003      	strhi	r3, [r0, #0]
 80078de:	700a      	strbls	r2, [r1, #0]
 80078e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80078e4:	bf98      	it	ls
 80078e6:	2001      	movls	r0, #1
 80078e8:	4770      	bx	lr
 80078ea:	4608      	mov	r0, r1
 80078ec:	4770      	bx	lr
	...

080078f0 <__swsetup_r>:
 80078f0:	4b32      	ldr	r3, [pc, #200]	; (80079bc <__swsetup_r+0xcc>)
 80078f2:	b570      	push	{r4, r5, r6, lr}
 80078f4:	681d      	ldr	r5, [r3, #0]
 80078f6:	4606      	mov	r6, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	b125      	cbz	r5, 8007906 <__swsetup_r+0x16>
 80078fc:	69ab      	ldr	r3, [r5, #24]
 80078fe:	b913      	cbnz	r3, 8007906 <__swsetup_r+0x16>
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f985 	bl	8007c10 <__sinit>
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <__swsetup_r+0xd0>)
 8007908:	429c      	cmp	r4, r3
 800790a:	d10f      	bne.n	800792c <__swsetup_r+0x3c>
 800790c:	686c      	ldr	r4, [r5, #4]
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007914:	0719      	lsls	r1, r3, #28
 8007916:	d42c      	bmi.n	8007972 <__swsetup_r+0x82>
 8007918:	06dd      	lsls	r5, r3, #27
 800791a:	d411      	bmi.n	8007940 <__swsetup_r+0x50>
 800791c:	2309      	movs	r3, #9
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
 800792a:	e03e      	b.n	80079aa <__swsetup_r+0xba>
 800792c:	4b25      	ldr	r3, [pc, #148]	; (80079c4 <__swsetup_r+0xd4>)
 800792e:	429c      	cmp	r4, r3
 8007930:	d101      	bne.n	8007936 <__swsetup_r+0x46>
 8007932:	68ac      	ldr	r4, [r5, #8]
 8007934:	e7eb      	b.n	800790e <__swsetup_r+0x1e>
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <__swsetup_r+0xd8>)
 8007938:	429c      	cmp	r4, r3
 800793a:	bf08      	it	eq
 800793c:	68ec      	ldreq	r4, [r5, #12]
 800793e:	e7e6      	b.n	800790e <__swsetup_r+0x1e>
 8007940:	0758      	lsls	r0, r3, #29
 8007942:	d512      	bpl.n	800796a <__swsetup_r+0x7a>
 8007944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007946:	b141      	cbz	r1, 800795a <__swsetup_r+0x6a>
 8007948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800794c:	4299      	cmp	r1, r3
 800794e:	d002      	beq.n	8007956 <__swsetup_r+0x66>
 8007950:	4630      	mov	r0, r6
 8007952:	f7ff fb31 	bl	8006fb8 <_free_r>
 8007956:	2300      	movs	r3, #0
 8007958:	6363      	str	r3, [r4, #52]	; 0x34
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	2300      	movs	r3, #0
 8007964:	6063      	str	r3, [r4, #4]
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f043 0308 	orr.w	r3, r3, #8
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	b94b      	cbnz	r3, 800798a <__swsetup_r+0x9a>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800797c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007980:	d003      	beq.n	800798a <__swsetup_r+0x9a>
 8007982:	4621      	mov	r1, r4
 8007984:	4630      	mov	r0, r6
 8007986:	f000 fa09 	bl	8007d9c <__smakebuf_r>
 800798a:	89a0      	ldrh	r0, [r4, #12]
 800798c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007990:	f010 0301 	ands.w	r3, r0, #1
 8007994:	d00a      	beq.n	80079ac <__swsetup_r+0xbc>
 8007996:	2300      	movs	r3, #0
 8007998:	60a3      	str	r3, [r4, #8]
 800799a:	6963      	ldr	r3, [r4, #20]
 800799c:	425b      	negs	r3, r3
 800799e:	61a3      	str	r3, [r4, #24]
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	b943      	cbnz	r3, 80079b6 <__swsetup_r+0xc6>
 80079a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079a8:	d1ba      	bne.n	8007920 <__swsetup_r+0x30>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	0781      	lsls	r1, r0, #30
 80079ae:	bf58      	it	pl
 80079b0:	6963      	ldrpl	r3, [r4, #20]
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	e7f4      	b.n	80079a0 <__swsetup_r+0xb0>
 80079b6:	2000      	movs	r0, #0
 80079b8:	e7f7      	b.n	80079aa <__swsetup_r+0xba>
 80079ba:	bf00      	nop
 80079bc:	20000034 	.word	0x20000034
 80079c0:	08009e9c 	.word	0x08009e9c
 80079c4:	08009ebc 	.word	0x08009ebc
 80079c8:	08009e7c 	.word	0x08009e7c

080079cc <abort>:
 80079cc:	b508      	push	{r3, lr}
 80079ce:	2006      	movs	r0, #6
 80079d0:	f000 fa54 	bl	8007e7c <raise>
 80079d4:	2001      	movs	r0, #1
 80079d6:	f7fa f92b 	bl	8001c30 <_exit>
	...

080079dc <__sflush_r>:
 80079dc:	898a      	ldrh	r2, [r1, #12]
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	0710      	lsls	r0, r2, #28
 80079e6:	460c      	mov	r4, r1
 80079e8:	d458      	bmi.n	8007a9c <__sflush_r+0xc0>
 80079ea:	684b      	ldr	r3, [r1, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc05      	bgt.n	80079fc <__sflush_r+0x20>
 80079f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc02      	bgt.n	80079fc <__sflush_r+0x20>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d0f9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a08:	682f      	ldr	r7, [r5, #0]
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	d032      	beq.n	8007a74 <__sflush_r+0x98>
 8007a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	075a      	lsls	r2, r3, #29
 8007a14:	d505      	bpl.n	8007a22 <__sflush_r+0x46>
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	1ac0      	subs	r0, r0, r3
 8007a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a1c:	b10b      	cbz	r3, 8007a22 <__sflush_r+0x46>
 8007a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a20:	1ac0      	subs	r0, r0, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	4602      	mov	r2, r0
 8007a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a28:	6a21      	ldr	r1, [r4, #32]
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b0      	blx	r6
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	d106      	bne.n	8007a42 <__sflush_r+0x66>
 8007a34:	6829      	ldr	r1, [r5, #0]
 8007a36:	291d      	cmp	r1, #29
 8007a38:	d82c      	bhi.n	8007a94 <__sflush_r+0xb8>
 8007a3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ae4 <__sflush_r+0x108>)
 8007a3c:	40ca      	lsrs	r2, r1
 8007a3e:	07d6      	lsls	r6, r2, #31
 8007a40:	d528      	bpl.n	8007a94 <__sflush_r+0xb8>
 8007a42:	2200      	movs	r2, #0
 8007a44:	6062      	str	r2, [r4, #4]
 8007a46:	04d9      	lsls	r1, r3, #19
 8007a48:	6922      	ldr	r2, [r4, #16]
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	d504      	bpl.n	8007a58 <__sflush_r+0x7c>
 8007a4e:	1c42      	adds	r2, r0, #1
 8007a50:	d101      	bne.n	8007a56 <__sflush_r+0x7a>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b903      	cbnz	r3, 8007a58 <__sflush_r+0x7c>
 8007a56:	6560      	str	r0, [r4, #84]	; 0x54
 8007a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5a:	602f      	str	r7, [r5, #0]
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d0ca      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a64:	4299      	cmp	r1, r3
 8007a66:	d002      	beq.n	8007a6e <__sflush_r+0x92>
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f7ff faa5 	bl	8006fb8 <_free_r>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	6360      	str	r0, [r4, #52]	; 0x34
 8007a72:	e7c1      	b.n	80079f8 <__sflush_r+0x1c>
 8007a74:	6a21      	ldr	r1, [r4, #32]
 8007a76:	2301      	movs	r3, #1
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b0      	blx	r6
 8007a7c:	1c41      	adds	r1, r0, #1
 8007a7e:	d1c7      	bne.n	8007a10 <__sflush_r+0x34>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0c4      	beq.n	8007a10 <__sflush_r+0x34>
 8007a86:	2b1d      	cmp	r3, #29
 8007a88:	d001      	beq.n	8007a8e <__sflush_r+0xb2>
 8007a8a:	2b16      	cmp	r3, #22
 8007a8c:	d101      	bne.n	8007a92 <__sflush_r+0xb6>
 8007a8e:	602f      	str	r7, [r5, #0]
 8007a90:	e7b1      	b.n	80079f6 <__sflush_r+0x1a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e7ad      	b.n	80079f8 <__sflush_r+0x1c>
 8007a9c:	690f      	ldr	r7, [r1, #16]
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	d0a9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007aa2:	0793      	lsls	r3, r2, #30
 8007aa4:	680e      	ldr	r6, [r1, #0]
 8007aa6:	bf08      	it	eq
 8007aa8:	694b      	ldreq	r3, [r1, #20]
 8007aaa:	600f      	str	r7, [r1, #0]
 8007aac:	bf18      	it	ne
 8007aae:	2300      	movne	r3, #0
 8007ab0:	eba6 0807 	sub.w	r8, r6, r7
 8007ab4:	608b      	str	r3, [r1, #8]
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	dd9c      	ble.n	80079f6 <__sflush_r+0x1a>
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b0      	blx	r6
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	dc06      	bgt.n	8007ada <__sflush_r+0xfe>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e78e      	b.n	80079f8 <__sflush_r+0x1c>
 8007ada:	4407      	add	r7, r0
 8007adc:	eba8 0800 	sub.w	r8, r8, r0
 8007ae0:	e7e9      	b.n	8007ab6 <__sflush_r+0xda>
 8007ae2:	bf00      	nop
 8007ae4:	20400001 	.word	0x20400001

08007ae8 <_fflush_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	690b      	ldr	r3, [r1, #16]
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b913      	cbnz	r3, 8007af8 <_fflush_r+0x10>
 8007af2:	2500      	movs	r5, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	b118      	cbz	r0, 8007b02 <_fflush_r+0x1a>
 8007afa:	6983      	ldr	r3, [r0, #24]
 8007afc:	b90b      	cbnz	r3, 8007b02 <_fflush_r+0x1a>
 8007afe:	f000 f887 	bl	8007c10 <__sinit>
 8007b02:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <_fflush_r+0x6c>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	d11b      	bne.n	8007b40 <_fflush_r+0x58>
 8007b08:	686c      	ldr	r4, [r5, #4]
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0ef      	beq.n	8007af2 <_fflush_r+0xa>
 8007b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b14:	07d0      	lsls	r0, r2, #31
 8007b16:	d404      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b18:	0599      	lsls	r1, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f915 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	4621      	mov	r1, r4
 8007b26:	f7ff ff59 	bl	80079dc <__sflush_r>
 8007b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b2c:	07da      	lsls	r2, r3, #31
 8007b2e:	4605      	mov	r5, r0
 8007b30:	d4e0      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	059b      	lsls	r3, r3, #22
 8007b36:	d4dd      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b3a:	f000 f908 	bl	8007d4e <__retarget_lock_release_recursive>
 8007b3e:	e7d9      	b.n	8007af4 <_fflush_r+0xc>
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <_fflush_r+0x70>)
 8007b42:	429c      	cmp	r4, r3
 8007b44:	d101      	bne.n	8007b4a <_fflush_r+0x62>
 8007b46:	68ac      	ldr	r4, [r5, #8]
 8007b48:	e7df      	b.n	8007b0a <_fflush_r+0x22>
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <_fflush_r+0x74>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	bf08      	it	eq
 8007b50:	68ec      	ldreq	r4, [r5, #12]
 8007b52:	e7da      	b.n	8007b0a <_fflush_r+0x22>
 8007b54:	08009e9c 	.word	0x08009e9c
 8007b58:	08009ebc 	.word	0x08009ebc
 8007b5c:	08009e7c 	.word	0x08009e7c

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	; 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	; 0x5c
 8007b7e:	f7fd fb59 	bl	8005234 <memset>
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x38>)
 8007b84:	6263      	str	r3, [r4, #36]	; 0x24
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x3c>)
 8007b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x40>)
 8007b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <std+0x44>)
 8007b90:	6224      	str	r4, [r4, #32]
 8007b92:	6323      	str	r3, [r4, #48]	; 0x30
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	bf00      	nop
 8007b98:	08007eb5 	.word	0x08007eb5
 8007b9c:	08007ed7 	.word	0x08007ed7
 8007ba0:	08007f0f 	.word	0x08007f0f
 8007ba4:	08007f33 	.word	0x08007f33

08007ba8 <_cleanup_r>:
 8007ba8:	4901      	ldr	r1, [pc, #4]	; (8007bb0 <_cleanup_r+0x8>)
 8007baa:	f000 b8af 	b.w	8007d0c <_fwalk_reent>
 8007bae:	bf00      	nop
 8007bb0:	08007ae9 	.word	0x08007ae9

08007bb4 <__sfmoreglue>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	2268      	movs	r2, #104	; 0x68
 8007bb8:	1e4d      	subs	r5, r1, #1
 8007bba:	4355      	muls	r5, r2
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bc2:	f7ff fa65 	bl	8007090 <_malloc_r>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	b140      	cbz	r0, 8007bdc <__sfmoreglue+0x28>
 8007bca:	2100      	movs	r1, #0
 8007bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8007bd0:	300c      	adds	r0, #12
 8007bd2:	60a0      	str	r0, [r4, #8]
 8007bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd8:	f7fd fb2c 	bl	8005234 <memset>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd70      	pop	{r4, r5, r6, pc}

08007be0 <__sfp_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sfp_lock_acquire+0x8>)
 8007be2:	f000 b8b3 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	200002b9 	.word	0x200002b9

08007bec <__sfp_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sfp_lock_release+0x8>)
 8007bee:	f000 b8ae 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	200002b9 	.word	0x200002b9

08007bf8 <__sinit_lock_acquire>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__sinit_lock_acquire+0x8>)
 8007bfa:	f000 b8a7 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	200002ba 	.word	0x200002ba

08007c04 <__sinit_lock_release>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__sinit_lock_release+0x8>)
 8007c06:	f000 b8a2 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	200002ba 	.word	0x200002ba

08007c10 <__sinit>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	4604      	mov	r4, r0
 8007c14:	f7ff fff0 	bl	8007bf8 <__sinit_lock_acquire>
 8007c18:	69a3      	ldr	r3, [r4, #24]
 8007c1a:	b11b      	cbz	r3, 8007c24 <__sinit+0x14>
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c20:	f7ff bff0 	b.w	8007c04 <__sinit_lock_release>
 8007c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c28:	6523      	str	r3, [r4, #80]	; 0x50
 8007c2a:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <__sinit+0x68>)
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <__sinit+0x6c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	bf04      	itt	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	61a3      	streq	r3, [r4, #24]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 f820 	bl	8007c80 <__sfp>
 8007c40:	6060      	str	r0, [r4, #4]
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 f81c 	bl	8007c80 <__sfp>
 8007c48:	60a0      	str	r0, [r4, #8]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 f818 	bl	8007c80 <__sfp>
 8007c50:	2200      	movs	r2, #0
 8007c52:	60e0      	str	r0, [r4, #12]
 8007c54:	2104      	movs	r1, #4
 8007c56:	6860      	ldr	r0, [r4, #4]
 8007c58:	f7ff ff82 	bl	8007b60 <std>
 8007c5c:	68a0      	ldr	r0, [r4, #8]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2109      	movs	r1, #9
 8007c62:	f7ff ff7d 	bl	8007b60 <std>
 8007c66:	68e0      	ldr	r0, [r4, #12]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	2112      	movs	r1, #18
 8007c6c:	f7ff ff78 	bl	8007b60 <std>
 8007c70:	2301      	movs	r3, #1
 8007c72:	61a3      	str	r3, [r4, #24]
 8007c74:	e7d2      	b.n	8007c1c <__sinit+0xc>
 8007c76:	bf00      	nop
 8007c78:	08009b04 	.word	0x08009b04
 8007c7c:	08007ba9 	.word	0x08007ba9

08007c80 <__sfp>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	4607      	mov	r7, r0
 8007c84:	f7ff ffac 	bl	8007be0 <__sfp_lock_acquire>
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <__sfp+0x84>)
 8007c8a:	681e      	ldr	r6, [r3, #0]
 8007c8c:	69b3      	ldr	r3, [r6, #24]
 8007c8e:	b913      	cbnz	r3, 8007c96 <__sfp+0x16>
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ffbd 	bl	8007c10 <__sinit>
 8007c96:	3648      	adds	r6, #72	; 0x48
 8007c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	d503      	bpl.n	8007ca8 <__sfp+0x28>
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	b30b      	cbz	r3, 8007ce8 <__sfp+0x68>
 8007ca4:	6836      	ldr	r6, [r6, #0]
 8007ca6:	e7f7      	b.n	8007c98 <__sfp+0x18>
 8007ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cac:	b9d5      	cbnz	r5, 8007ce4 <__sfp+0x64>
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <__sfp+0x88>)
 8007cb0:	60e3      	str	r3, [r4, #12]
 8007cb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb8:	f000 f847 	bl	8007d4a <__retarget_lock_init_recursive>
 8007cbc:	f7ff ff96 	bl	8007bec <__sfp_lock_release>
 8007cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc8:	6025      	str	r5, [r4, #0]
 8007cca:	61a5      	str	r5, [r4, #24]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd4:	f7fd faae 	bl	8005234 <memset>
 8007cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce4:	3468      	adds	r4, #104	; 0x68
 8007ce6:	e7d9      	b.n	8007c9c <__sfp+0x1c>
 8007ce8:	2104      	movs	r1, #4
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7ff ff62 	bl	8007bb4 <__sfmoreglue>
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	6030      	str	r0, [r6, #0]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1d5      	bne.n	8007ca4 <__sfp+0x24>
 8007cf8:	f7ff ff78 	bl	8007bec <__sfp_lock_release>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	e7ee      	b.n	8007ce0 <__sfp+0x60>
 8007d02:	bf00      	nop
 8007d04:	08009b04 	.word	0x08009b04
 8007d08:	ffff0001 	.word	0xffff0001

08007d0c <_fwalk_reent>:
 8007d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4606      	mov	r6, r0
 8007d12:	4688      	mov	r8, r1
 8007d14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d18:	2700      	movs	r7, #0
 8007d1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d22:	d505      	bpl.n	8007d30 <_fwalk_reent+0x24>
 8007d24:	6824      	ldr	r4, [r4, #0]
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d1f7      	bne.n	8007d1a <_fwalk_reent+0xe>
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d907      	bls.n	8007d46 <_fwalk_reent+0x3a>
 8007d36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	d003      	beq.n	8007d46 <_fwalk_reent+0x3a>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	47c0      	blx	r8
 8007d44:	4307      	orrs	r7, r0
 8007d46:	3568      	adds	r5, #104	; 0x68
 8007d48:	e7e9      	b.n	8007d1e <_fwalk_reent+0x12>

08007d4a <__retarget_lock_init_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <__retarget_lock_acquire_recursive>:
 8007d4c:	4770      	bx	lr

08007d4e <__retarget_lock_release_recursive>:
 8007d4e:	4770      	bx	lr

08007d50 <__swhatbuf_r>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	b096      	sub	sp, #88	; 0x58
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	461d      	mov	r5, r3
 8007d60:	da08      	bge.n	8007d74 <__swhatbuf_r+0x24>
 8007d62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	061a      	lsls	r2, r3, #24
 8007d6c:	d410      	bmi.n	8007d90 <__swhatbuf_r+0x40>
 8007d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d72:	e00e      	b.n	8007d92 <__swhatbuf_r+0x42>
 8007d74:	466a      	mov	r2, sp
 8007d76:	f000 f903 	bl	8007f80 <_fstat_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	dbf1      	blt.n	8007d62 <__swhatbuf_r+0x12>
 8007d7e:	9a01      	ldr	r2, [sp, #4]
 8007d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d88:	425a      	negs	r2, r3
 8007d8a:	415a      	adcs	r2, r3
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	e7ee      	b.n	8007d6e <__swhatbuf_r+0x1e>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	2000      	movs	r0, #0
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	b016      	add	sp, #88	; 0x58
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d9c <__smakebuf_r>:
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da0:	079d      	lsls	r5, r3, #30
 8007da2:	4606      	mov	r6, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d507      	bpl.n	8007db8 <__smakebuf_r+0x1c>
 8007da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	2301      	movs	r3, #1
 8007db2:	6163      	str	r3, [r4, #20]
 8007db4:	b002      	add	sp, #8
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	ab01      	add	r3, sp, #4
 8007dba:	466a      	mov	r2, sp
 8007dbc:	f7ff ffc8 	bl	8007d50 <__swhatbuf_r>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff f963 	bl	8007090 <_malloc_r>
 8007dca:	b948      	cbnz	r0, 8007de0 <__smakebuf_r+0x44>
 8007dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d4ef      	bmi.n	8007db4 <__smakebuf_r+0x18>
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e7e3      	b.n	8007da8 <__smakebuf_r+0xc>
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <__smakebuf_r+0x7c>)
 8007de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	6020      	str	r0, [r4, #0]
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	6163      	str	r3, [r4, #20]
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	6120      	str	r0, [r4, #16]
 8007df6:	b15b      	cbz	r3, 8007e10 <__smakebuf_r+0x74>
 8007df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 f8d1 	bl	8007fa4 <_isatty_r>
 8007e02:	b128      	cbz	r0, 8007e10 <__smakebuf_r+0x74>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	89a0      	ldrh	r0, [r4, #12]
 8007e12:	4305      	orrs	r5, r0
 8007e14:	81a5      	strh	r5, [r4, #12]
 8007e16:	e7cd      	b.n	8007db4 <__smakebuf_r+0x18>
 8007e18:	08007ba9 	.word	0x08007ba9

08007e1c <_malloc_usable_size_r>:
 8007e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e20:	1f18      	subs	r0, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbc      	itt	lt
 8007e26:	580b      	ldrlt	r3, [r1, r0]
 8007e28:	18c0      	addlt	r0, r0, r3
 8007e2a:	4770      	bx	lr

08007e2c <_raise_r>:
 8007e2c:	291f      	cmp	r1, #31
 8007e2e:	b538      	push	{r3, r4, r5, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	460d      	mov	r5, r1
 8007e34:	d904      	bls.n	8007e40 <_raise_r+0x14>
 8007e36:	2316      	movs	r3, #22
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e42:	b112      	cbz	r2, 8007e4a <_raise_r+0x1e>
 8007e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e48:	b94b      	cbnz	r3, 8007e5e <_raise_r+0x32>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f830 	bl	8007eb0 <_getpid_r>
 8007e50:	462a      	mov	r2, r5
 8007e52:	4601      	mov	r1, r0
 8007e54:	4620      	mov	r0, r4
 8007e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e5a:	f000 b817 	b.w	8007e8c <_kill_r>
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d00a      	beq.n	8007e78 <_raise_r+0x4c>
 8007e62:	1c59      	adds	r1, r3, #1
 8007e64:	d103      	bne.n	8007e6e <_raise_r+0x42>
 8007e66:	2316      	movs	r3, #22
 8007e68:	6003      	str	r3, [r0, #0]
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	e7e7      	b.n	8007e3e <_raise_r+0x12>
 8007e6e:	2400      	movs	r4, #0
 8007e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e74:	4628      	mov	r0, r5
 8007e76:	4798      	blx	r3
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e7e0      	b.n	8007e3e <_raise_r+0x12>

08007e7c <raise>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <raise+0xc>)
 8007e7e:	4601      	mov	r1, r0
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f7ff bfd3 	b.w	8007e2c <_raise_r>
 8007e86:	bf00      	nop
 8007e88:	20000034 	.word	0x20000034

08007e8c <_kill_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_kill_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 feb9 	bl	8001c10 <_kill>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_kill_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_kill_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	200002b4 	.word	0x200002b4

08007eb0 <_getpid_r>:
 8007eb0:	f7f9 bea6 	b.w	8001c00 <_getpid>

08007eb4 <__sread>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	f000 f894 	bl	8007fe8 <_read_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	bfab      	itete	ge
 8007ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec8:	181b      	addge	r3, r3, r0
 8007eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ece:	bfac      	ite	ge
 8007ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ed2:	81a3      	strhlt	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__swrite>:
 8007ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	461f      	mov	r7, r3
 8007edc:	898b      	ldrh	r3, [r1, #12]
 8007ede:	05db      	lsls	r3, r3, #23
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	d505      	bpl.n	8007ef4 <__swrite+0x1e>
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	2302      	movs	r3, #2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f000 f868 	bl	8007fc4 <_lseek_r>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	4628      	mov	r0, r5
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	f000 b817 	b.w	8007f3c <_write_r>

08007f0e <__sseek>:
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 f855 	bl	8007fc4 <_lseek_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	bf15      	itete	ne
 8007f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f2a:	81a3      	strheq	r3, [r4, #12]
 8007f2c:	bf18      	it	ne
 8007f2e:	81a3      	strhne	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__sclose>:
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 b813 	b.w	8007f60 <_close_r>
	...

08007f3c <_write_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	; (8007f5c <_write_r+0x20>)
 8007f40:	4604      	mov	r4, r0
 8007f42:	4608      	mov	r0, r1
 8007f44:	4611      	mov	r1, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	602a      	str	r2, [r5, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7f9 fe97 	bl	8001c7e <_write>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_write_r+0x1e>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_write_r+0x1e>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	200002b4 	.word	0x200002b4

08007f60 <_close_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_close_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f9 fea3 	bl	8001cb6 <_close>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_close_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_close_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	200002b4 	.word	0x200002b4

08007f80 <_fstat_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d07      	ldr	r5, [pc, #28]	; (8007fa0 <_fstat_r+0x20>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	f7f9 fe9e 	bl	8001cce <_fstat>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	d102      	bne.n	8007f9c <_fstat_r+0x1c>
 8007f96:	682b      	ldr	r3, [r5, #0]
 8007f98:	b103      	cbz	r3, 8007f9c <_fstat_r+0x1c>
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200002b4 	.word	0x200002b4

08007fa4 <_isatty_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d06      	ldr	r5, [pc, #24]	; (8007fc0 <_isatty_r+0x1c>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7f9 fe9d 	bl	8001cee <_isatty>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_isatty_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_isatty_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	200002b4 	.word	0x200002b4

08007fc4 <_lseek_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_lseek_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7f9 fe96 	bl	8001d04 <_lseek>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_lseek_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_lseek_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200002b4 	.word	0x200002b4

08007fe8 <_read_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_read_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 fe24 	bl	8001c44 <_read>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_read_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_read_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	200002b4 	.word	0x200002b4
 800800c:	00000000 	.word	0x00000000

08008010 <atan>:
 8008010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	4bbc      	ldr	r3, [pc, #752]	; (8008308 <atan+0x2f8>)
 8008016:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800801a:	429e      	cmp	r6, r3
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	468b      	mov	fp, r1
 8008022:	dd18      	ble.n	8008056 <atan+0x46>
 8008024:	4bb9      	ldr	r3, [pc, #740]	; (800830c <atan+0x2fc>)
 8008026:	429e      	cmp	r6, r3
 8008028:	dc01      	bgt.n	800802e <atan+0x1e>
 800802a:	d109      	bne.n	8008040 <atan+0x30>
 800802c:	b140      	cbz	r0, 8008040 <atan+0x30>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 f931 	bl	800029c <__adddf3>
 800803a:	4604      	mov	r4, r0
 800803c:	460d      	mov	r5, r1
 800803e:	e006      	b.n	800804e <atan+0x3e>
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	f300 8123 	bgt.w	800828e <atan+0x27e>
 8008048:	a593      	add	r5, pc, #588	; (adr r5, 8008298 <atan+0x288>)
 800804a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008056:	4bae      	ldr	r3, [pc, #696]	; (8008310 <atan+0x300>)
 8008058:	429e      	cmp	r6, r3
 800805a:	dc11      	bgt.n	8008080 <atan+0x70>
 800805c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008060:	429e      	cmp	r6, r3
 8008062:	dc0a      	bgt.n	800807a <atan+0x6a>
 8008064:	a38e      	add	r3, pc, #568	; (adr r3, 80082a0 <atan+0x290>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	4ba9      	ldr	r3, [pc, #676]	; (8008314 <atan+0x304>)
 8008070:	2200      	movs	r2, #0
 8008072:	f7f8 fd59 	bl	8000b28 <__aeabi_dcmpgt>
 8008076:	2800      	cmp	r0, #0
 8008078:	d1e9      	bne.n	800804e <atan+0x3e>
 800807a:	f04f 3aff 	mov.w	sl, #4294967295
 800807e:	e027      	b.n	80080d0 <atan+0xc0>
 8008080:	f000 f99c 	bl	80083bc <fabs>
 8008084:	4ba4      	ldr	r3, [pc, #656]	; (8008318 <atan+0x308>)
 8008086:	429e      	cmp	r6, r3
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	f300 80b8 	bgt.w	8008200 <atan+0x1f0>
 8008090:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008094:	429e      	cmp	r6, r3
 8008096:	f300 809c 	bgt.w	80081d2 <atan+0x1c2>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	f7f8 f8fd 	bl	800029c <__adddf3>
 80080a2:	4b9c      	ldr	r3, [pc, #624]	; (8008314 <atan+0x304>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	2200      	movs	r2, #0
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f7f8 f8f0 	bl	800029c <__adddf3>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fbca 	bl	800085c <__aeabi_ddiv>
 80080c8:	f04f 0a00 	mov.w	sl, #0
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
 80080d0:	4622      	mov	r2, r4
 80080d2:	462b      	mov	r3, r5
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 fa96 	bl	8000608 <__aeabi_dmul>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	f7f8 fa90 	bl	8000608 <__aeabi_dmul>
 80080e8:	a36f      	add	r3, pc, #444	; (adr r3, 80082a8 <atan+0x298>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	f7f8 fa89 	bl	8000608 <__aeabi_dmul>
 80080f6:	a36e      	add	r3, pc, #440	; (adr r3, 80082b0 <atan+0x2a0>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 f8ce 	bl	800029c <__adddf3>
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	f7f8 fa80 	bl	8000608 <__aeabi_dmul>
 8008108:	a36b      	add	r3, pc, #428	; (adr r3, 80082b8 <atan+0x2a8>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 f8c5 	bl	800029c <__adddf3>
 8008112:	4632      	mov	r2, r6
 8008114:	463b      	mov	r3, r7
 8008116:	f7f8 fa77 	bl	8000608 <__aeabi_dmul>
 800811a:	a369      	add	r3, pc, #420	; (adr r3, 80082c0 <atan+0x2b0>)
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f7f8 f8bc 	bl	800029c <__adddf3>
 8008124:	4632      	mov	r2, r6
 8008126:	463b      	mov	r3, r7
 8008128:	f7f8 fa6e 	bl	8000608 <__aeabi_dmul>
 800812c:	a366      	add	r3, pc, #408	; (adr r3, 80082c8 <atan+0x2b8>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f8b3 	bl	800029c <__adddf3>
 8008136:	4632      	mov	r2, r6
 8008138:	463b      	mov	r3, r7
 800813a:	f7f8 fa65 	bl	8000608 <__aeabi_dmul>
 800813e:	a364      	add	r3, pc, #400	; (adr r3, 80082d0 <atan+0x2c0>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 f8aa 	bl	800029c <__adddf3>
 8008148:	4642      	mov	r2, r8
 800814a:	464b      	mov	r3, r9
 800814c:	f7f8 fa5c 	bl	8000608 <__aeabi_dmul>
 8008150:	a361      	add	r3, pc, #388	; (adr r3, 80082d8 <atan+0x2c8>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	4680      	mov	r8, r0
 8008158:	4689      	mov	r9, r1
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 fa53 	bl	8000608 <__aeabi_dmul>
 8008162:	a35f      	add	r3, pc, #380	; (adr r3, 80082e0 <atan+0x2d0>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 f896 	bl	8000298 <__aeabi_dsub>
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	a35c      	add	r3, pc, #368	; (adr r3, 80082e8 <atan+0x2d8>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 f88d 	bl	8000298 <__aeabi_dsub>
 800817e:	4632      	mov	r2, r6
 8008180:	463b      	mov	r3, r7
 8008182:	f7f8 fa41 	bl	8000608 <__aeabi_dmul>
 8008186:	a35a      	add	r3, pc, #360	; (adr r3, 80082f0 <atan+0x2e0>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f884 	bl	8000298 <__aeabi_dsub>
 8008190:	4632      	mov	r2, r6
 8008192:	463b      	mov	r3, r7
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	a357      	add	r3, pc, #348	; (adr r3, 80082f8 <atan+0x2e8>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f8 f87b 	bl	8000298 <__aeabi_dsub>
 80081a2:	4632      	mov	r2, r6
 80081a4:	463b      	mov	r3, r7
 80081a6:	f7f8 fa2f 	bl	8000608 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4640      	mov	r0, r8
 80081b0:	4649      	mov	r1, r9
 80081b2:	f7f8 f873 	bl	800029c <__adddf3>
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	f7f8 fa25 	bl	8000608 <__aeabi_dmul>
 80081be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	d144      	bne.n	8008252 <atan+0x242>
 80081c8:	4620      	mov	r0, r4
 80081ca:	4629      	mov	r1, r5
 80081cc:	f7f8 f864 	bl	8000298 <__aeabi_dsub>
 80081d0:	e733      	b.n	800803a <atan+0x2a>
 80081d2:	4b50      	ldr	r3, [pc, #320]	; (8008314 <atan+0x304>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	f7f8 f85f 	bl	8000298 <__aeabi_dsub>
 80081da:	4b4e      	ldr	r3, [pc, #312]	; (8008314 <atan+0x304>)
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	2200      	movs	r2, #0
 80081e2:	4620      	mov	r0, r4
 80081e4:	4629      	mov	r1, r5
 80081e6:	f7f8 f859 	bl	800029c <__adddf3>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 fb33 	bl	800085c <__aeabi_ddiv>
 80081f6:	f04f 0a01 	mov.w	sl, #1
 80081fa:	4604      	mov	r4, r0
 80081fc:	460d      	mov	r5, r1
 80081fe:	e767      	b.n	80080d0 <atan+0xc0>
 8008200:	4b46      	ldr	r3, [pc, #280]	; (800831c <atan+0x30c>)
 8008202:	429e      	cmp	r6, r3
 8008204:	da1a      	bge.n	800823c <atan+0x22c>
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <atan+0x310>)
 8008208:	2200      	movs	r2, #0
 800820a:	f7f8 f845 	bl	8000298 <__aeabi_dsub>
 800820e:	4b44      	ldr	r3, [pc, #272]	; (8008320 <atan+0x310>)
 8008210:	4606      	mov	r6, r0
 8008212:	460f      	mov	r7, r1
 8008214:	2200      	movs	r2, #0
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 f9f5 	bl	8000608 <__aeabi_dmul>
 800821e:	4b3d      	ldr	r3, [pc, #244]	; (8008314 <atan+0x304>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f83b 	bl	800029c <__adddf3>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4630      	mov	r0, r6
 800822c:	4639      	mov	r1, r7
 800822e:	f7f8 fb15 	bl	800085c <__aeabi_ddiv>
 8008232:	f04f 0a02 	mov.w	sl, #2
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	e749      	b.n	80080d0 <atan+0xc0>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	2000      	movs	r0, #0
 8008242:	4938      	ldr	r1, [pc, #224]	; (8008324 <atan+0x314>)
 8008244:	f7f8 fb0a 	bl	800085c <__aeabi_ddiv>
 8008248:	f04f 0a03 	mov.w	sl, #3
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	e73e      	b.n	80080d0 <atan+0xc0>
 8008252:	4b35      	ldr	r3, [pc, #212]	; (8008328 <atan+0x318>)
 8008254:	4e35      	ldr	r6, [pc, #212]	; (800832c <atan+0x31c>)
 8008256:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800825a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800825e:	e9da 2300 	ldrd	r2, r3, [sl]
 8008262:	f7f8 f819 	bl	8000298 <__aeabi_dsub>
 8008266:	4622      	mov	r2, r4
 8008268:	462b      	mov	r3, r5
 800826a:	f7f8 f815 	bl	8000298 <__aeabi_dsub>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008276:	f7f8 f80f 	bl	8000298 <__aeabi_dsub>
 800827a:	f1bb 0f00 	cmp.w	fp, #0
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	f6bf aee4 	bge.w	800804e <atan+0x3e>
 8008286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828a:	461d      	mov	r5, r3
 800828c:	e6df      	b.n	800804e <atan+0x3e>
 800828e:	a51c      	add	r5, pc, #112	; (adr r5, 8008300 <atan+0x2f0>)
 8008290:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008294:	e6db      	b.n	800804e <atan+0x3e>
 8008296:	bf00      	nop
 8008298:	54442d18 	.word	0x54442d18
 800829c:	bff921fb 	.word	0xbff921fb
 80082a0:	8800759c 	.word	0x8800759c
 80082a4:	7e37e43c 	.word	0x7e37e43c
 80082a8:	e322da11 	.word	0xe322da11
 80082ac:	3f90ad3a 	.word	0x3f90ad3a
 80082b0:	24760deb 	.word	0x24760deb
 80082b4:	3fa97b4b 	.word	0x3fa97b4b
 80082b8:	a0d03d51 	.word	0xa0d03d51
 80082bc:	3fb10d66 	.word	0x3fb10d66
 80082c0:	c54c206e 	.word	0xc54c206e
 80082c4:	3fb745cd 	.word	0x3fb745cd
 80082c8:	920083ff 	.word	0x920083ff
 80082cc:	3fc24924 	.word	0x3fc24924
 80082d0:	5555550d 	.word	0x5555550d
 80082d4:	3fd55555 	.word	0x3fd55555
 80082d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80082dc:	bfa2b444 	.word	0xbfa2b444
 80082e0:	52defd9a 	.word	0x52defd9a
 80082e4:	3fadde2d 	.word	0x3fadde2d
 80082e8:	af749a6d 	.word	0xaf749a6d
 80082ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80082f0:	fe231671 	.word	0xfe231671
 80082f4:	3fbc71c6 	.word	0x3fbc71c6
 80082f8:	9998ebc4 	.word	0x9998ebc4
 80082fc:	3fc99999 	.word	0x3fc99999
 8008300:	54442d18 	.word	0x54442d18
 8008304:	3ff921fb 	.word	0x3ff921fb
 8008308:	440fffff 	.word	0x440fffff
 800830c:	7ff00000 	.word	0x7ff00000
 8008310:	3fdbffff 	.word	0x3fdbffff
 8008314:	3ff00000 	.word	0x3ff00000
 8008318:	3ff2ffff 	.word	0x3ff2ffff
 800831c:	40038000 	.word	0x40038000
 8008320:	3ff80000 	.word	0x3ff80000
 8008324:	bff00000 	.word	0xbff00000
 8008328:	08009f00 	.word	0x08009f00
 800832c:	08009ee0 	.word	0x08009ee0

08008330 <cos>:
 8008330:	b530      	push	{r4, r5, lr}
 8008332:	4d20      	ldr	r5, [pc, #128]	; (80083b4 <cos+0x84>)
 8008334:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008338:	42ac      	cmp	r4, r5
 800833a:	b087      	sub	sp, #28
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	dc06      	bgt.n	8008350 <cos+0x20>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	b007      	add	sp, #28
 8008348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834c:	f000 bac4 	b.w	80088d8 <__kernel_cos>
 8008350:	4d19      	ldr	r5, [pc, #100]	; (80083b8 <cos+0x88>)
 8008352:	42ac      	cmp	r4, r5
 8008354:	dd03      	ble.n	800835e <cos+0x2e>
 8008356:	f7f7 ff9f 	bl	8000298 <__aeabi_dsub>
 800835a:	b007      	add	sp, #28
 800835c:	bd30      	pop	{r4, r5, pc}
 800835e:	aa02      	add	r2, sp, #8
 8008360:	f000 f8ba 	bl	80084d8 <__ieee754_rem_pio2>
 8008364:	f000 0003 	and.w	r0, r0, #3
 8008368:	2801      	cmp	r0, #1
 800836a:	d009      	beq.n	8008380 <cos+0x50>
 800836c:	2802      	cmp	r0, #2
 800836e:	d011      	beq.n	8008394 <cos+0x64>
 8008370:	b9b8      	cbnz	r0, 80083a2 <cos+0x72>
 8008372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837a:	f000 faad 	bl	80088d8 <__kernel_cos>
 800837e:	e7ec      	b.n	800835a <cos+0x2a>
 8008380:	9000      	str	r0, [sp, #0]
 8008382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838a:	f000 fea9 	bl	80090e0 <__kernel_sin>
 800838e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008392:	e7e2      	b.n	800835a <cos+0x2a>
 8008394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800839c:	f000 fa9c 	bl	80088d8 <__kernel_cos>
 80083a0:	e7f5      	b.n	800838e <cos+0x5e>
 80083a2:	2301      	movs	r3, #1
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ae:	f000 fe97 	bl	80090e0 <__kernel_sin>
 80083b2:	e7d2      	b.n	800835a <cos+0x2a>
 80083b4:	3fe921fb 	.word	0x3fe921fb
 80083b8:	7fefffff 	.word	0x7fefffff

080083bc <fabs>:
 80083bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083c0:	4770      	bx	lr

080083c2 <lround>:
 80083c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c4:	1e0b      	subs	r3, r1, #0
 80083c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80083ca:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80083ce:	bfb4      	ite	lt
 80083d0:	f04f 36ff 	movlt.w	r6, #4294967295
 80083d4:	2601      	movge	r6, #1
 80083d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083da:	2f13      	cmp	r7, #19
 80083dc:	4604      	mov	r4, r0
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e2:	dc10      	bgt.n	8008406 <lround+0x44>
 80083e4:	2f00      	cmp	r7, #0
 80083e6:	da04      	bge.n	80083f2 <lround+0x30>
 80083e8:	3701      	adds	r7, #1
 80083ea:	bf18      	it	ne
 80083ec:	2600      	movne	r6, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80083f6:	413a      	asrs	r2, r7
 80083f8:	441a      	add	r2, r3
 80083fa:	f1c7 0314 	rsb	r3, r7, #20
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	435e      	muls	r6, r3
 8008404:	e7f3      	b.n	80083ee <lround+0x2c>
 8008406:	2f1e      	cmp	r7, #30
 8008408:	d819      	bhi.n	800843e <lround+0x7c>
 800840a:	2f33      	cmp	r7, #51	; 0x33
 800840c:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8008410:	dd05      	ble.n	800841e <lround+0x5c>
 8008412:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 8008416:	4094      	lsls	r4, r2
 8008418:	408b      	lsls	r3, r1
 800841a:	4323      	orrs	r3, r4
 800841c:	e7f1      	b.n	8008402 <lround+0x40>
 800841e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008422:	40ca      	lsrs	r2, r1
 8008424:	1812      	adds	r2, r2, r0
 8008426:	bf28      	it	cs
 8008428:	3301      	addcs	r3, #1
 800842a:	f1c7 0434 	rsb	r4, r7, #52	; 0x34
 800842e:	2f14      	cmp	r7, #20
 8008430:	fa03 f301 	lsl.w	r3, r3, r1
 8008434:	bf14      	ite	ne
 8008436:	40e2      	lsrne	r2, r4
 8008438:	2200      	moveq	r2, #0
 800843a:	4313      	orrs	r3, r2
 800843c:	e7e1      	b.n	8008402 <lround+0x40>
 800843e:	f7f8 fb93 	bl	8000b68 <__aeabi_d2iz>
 8008442:	4606      	mov	r6, r0
 8008444:	e7d3      	b.n	80083ee <lround+0x2c>
	...

08008448 <sin>:
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	4d20      	ldr	r5, [pc, #128]	; (80084cc <sin+0x84>)
 800844c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008450:	42ac      	cmp	r4, r5
 8008452:	b087      	sub	sp, #28
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	dc06      	bgt.n	8008468 <sin+0x20>
 800845a:	2300      	movs	r3, #0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	2300      	movs	r3, #0
 8008462:	f000 fe3d 	bl	80090e0 <__kernel_sin>
 8008466:	e004      	b.n	8008472 <sin+0x2a>
 8008468:	4d19      	ldr	r5, [pc, #100]	; (80084d0 <sin+0x88>)
 800846a:	42ac      	cmp	r4, r5
 800846c:	dd03      	ble.n	8008476 <sin+0x2e>
 800846e:	f7f7 ff13 	bl	8000298 <__aeabi_dsub>
 8008472:	b007      	add	sp, #28
 8008474:	bd30      	pop	{r4, r5, pc}
 8008476:	aa02      	add	r2, sp, #8
 8008478:	f000 f82e 	bl	80084d8 <__ieee754_rem_pio2>
 800847c:	f000 0003 	and.w	r0, r0, #3
 8008480:	2801      	cmp	r0, #1
 8008482:	d009      	beq.n	8008498 <sin+0x50>
 8008484:	2802      	cmp	r0, #2
 8008486:	d00e      	beq.n	80084a6 <sin+0x5e>
 8008488:	b9c0      	cbnz	r0, 80084bc <sin+0x74>
 800848a:	2301      	movs	r3, #1
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	e7e4      	b.n	8008462 <sin+0x1a>
 8008498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800849c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a0:	f000 fa1a 	bl	80088d8 <__kernel_cos>
 80084a4:	e7e5      	b.n	8008472 <sin+0x2a>
 80084a6:	2301      	movs	r3, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b2:	f000 fe15 	bl	80090e0 <__kernel_sin>
 80084b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80084ba:	e7da      	b.n	8008472 <sin+0x2a>
 80084bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c4:	f000 fa08 	bl	80088d8 <__kernel_cos>
 80084c8:	e7f5      	b.n	80084b6 <sin+0x6e>
 80084ca:	bf00      	nop
 80084cc:	3fe921fb 	.word	0x3fe921fb
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	00000000 	.word	0x00000000

080084d8 <__ieee754_rem_pio2>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	ed2d 8b02 	vpush	{d8}
 80084e0:	4bc7      	ldr	r3, [pc, #796]	; (8008800 <__ieee754_rem_pio2+0x328>)
 80084e2:	b08b      	sub	sp, #44	; 0x2c
 80084e4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80084e8:	4598      	cmp	r8, r3
 80084ea:	4604      	mov	r4, r0
 80084ec:	460d      	mov	r5, r1
 80084ee:	4692      	mov	sl, r2
 80084f0:	9102      	str	r1, [sp, #8]
 80084f2:	dc08      	bgt.n	8008506 <__ieee754_rem_pio2+0x2e>
 80084f4:	e9c2 4500 	strd	r4, r5, [r2]
 80084f8:	2300      	movs	r3, #0
 80084fa:	2200      	movs	r2, #0
 80084fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008500:	f04f 0b00 	mov.w	fp, #0
 8008504:	e025      	b.n	8008552 <__ieee754_rem_pio2+0x7a>
 8008506:	4bbf      	ldr	r3, [pc, #764]	; (8008804 <__ieee754_rem_pio2+0x32c>)
 8008508:	4598      	cmp	r8, r3
 800850a:	dc75      	bgt.n	80085f8 <__ieee754_rem_pio2+0x120>
 800850c:	9b02      	ldr	r3, [sp, #8]
 800850e:	4ebe      	ldr	r6, [pc, #760]	; (8008808 <__ieee754_rem_pio2+0x330>)
 8008510:	2b00      	cmp	r3, #0
 8008512:	a3ad      	add	r3, pc, #692	; (adr r3, 80087c8 <__ieee754_rem_pio2+0x2f0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	dd39      	ble.n	800858e <__ieee754_rem_pio2+0xb6>
 800851a:	f7f7 febd 	bl	8000298 <__aeabi_dsub>
 800851e:	45b0      	cmp	r8, r6
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	d01b      	beq.n	800855e <__ieee754_rem_pio2+0x86>
 8008526:	a3aa      	add	r3, pc, #680	; (adr r3, 80087d0 <__ieee754_rem_pio2+0x2f8>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f7f7 feb4 	bl	8000298 <__aeabi_dsub>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	e9ca 2300 	strd	r2, r3, [sl]
 8008538:	4620      	mov	r0, r4
 800853a:	4629      	mov	r1, r5
 800853c:	f7f7 feac 	bl	8000298 <__aeabi_dsub>
 8008540:	a3a3      	add	r3, pc, #652	; (adr r3, 80087d0 <__ieee754_rem_pio2+0x2f8>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f7f7 fea7 	bl	8000298 <__aeabi_dsub>
 800854a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800854e:	f04f 0b01 	mov.w	fp, #1
 8008552:	4658      	mov	r0, fp
 8008554:	b00b      	add	sp, #44	; 0x2c
 8008556:	ecbd 8b02 	vpop	{d8}
 800855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855e:	a39e      	add	r3, pc, #632	; (adr r3, 80087d8 <__ieee754_rem_pio2+0x300>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 fe98 	bl	8000298 <__aeabi_dsub>
 8008568:	a39d      	add	r3, pc, #628	; (adr r3, 80087e0 <__ieee754_rem_pio2+0x308>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	f7f7 fe91 	bl	8000298 <__aeabi_dsub>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9ca 2300 	strd	r2, r3, [sl]
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f7 fe89 	bl	8000298 <__aeabi_dsub>
 8008586:	a396      	add	r3, pc, #600	; (adr r3, 80087e0 <__ieee754_rem_pio2+0x308>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	e7db      	b.n	8008546 <__ieee754_rem_pio2+0x6e>
 800858e:	f7f7 fe85 	bl	800029c <__adddf3>
 8008592:	45b0      	cmp	r8, r6
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	d016      	beq.n	80085c8 <__ieee754_rem_pio2+0xf0>
 800859a:	a38d      	add	r3, pc, #564	; (adr r3, 80087d0 <__ieee754_rem_pio2+0x2f8>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f7 fe7c 	bl	800029c <__adddf3>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9ca 2300 	strd	r2, r3, [sl]
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f7 fe72 	bl	8000298 <__aeabi_dsub>
 80085b4:	a386      	add	r3, pc, #536	; (adr r3, 80087d0 <__ieee754_rem_pio2+0x2f8>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fe6f 	bl	800029c <__adddf3>
 80085be:	f04f 3bff 	mov.w	fp, #4294967295
 80085c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085c6:	e7c4      	b.n	8008552 <__ieee754_rem_pio2+0x7a>
 80085c8:	a383      	add	r3, pc, #524	; (adr r3, 80087d8 <__ieee754_rem_pio2+0x300>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f7 fe65 	bl	800029c <__adddf3>
 80085d2:	a383      	add	r3, pc, #524	; (adr r3, 80087e0 <__ieee754_rem_pio2+0x308>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	4604      	mov	r4, r0
 80085da:	460d      	mov	r5, r1
 80085dc:	f7f7 fe5e 	bl	800029c <__adddf3>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	e9ca 2300 	strd	r2, r3, [sl]
 80085e8:	4620      	mov	r0, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f7 fe54 	bl	8000298 <__aeabi_dsub>
 80085f0:	a37b      	add	r3, pc, #492	; (adr r3, 80087e0 <__ieee754_rem_pio2+0x308>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	e7e0      	b.n	80085ba <__ieee754_rem_pio2+0xe2>
 80085f8:	4b84      	ldr	r3, [pc, #528]	; (800880c <__ieee754_rem_pio2+0x334>)
 80085fa:	4598      	cmp	r8, r3
 80085fc:	f300 80d6 	bgt.w	80087ac <__ieee754_rem_pio2+0x2d4>
 8008600:	f7ff fedc 	bl	80083bc <fabs>
 8008604:	a378      	add	r3, pc, #480	; (adr r3, 80087e8 <__ieee754_rem_pio2+0x310>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	4604      	mov	r4, r0
 800860c:	460d      	mov	r5, r1
 800860e:	f7f7 fffb 	bl	8000608 <__aeabi_dmul>
 8008612:	4b7f      	ldr	r3, [pc, #508]	; (8008810 <__ieee754_rem_pio2+0x338>)
 8008614:	2200      	movs	r2, #0
 8008616:	f7f7 fe41 	bl	800029c <__adddf3>
 800861a:	f7f8 faa5 	bl	8000b68 <__aeabi_d2iz>
 800861e:	4683      	mov	fp, r0
 8008620:	f7f7 ff88 	bl	8000534 <__aeabi_i2d>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	ec43 2b18 	vmov	d8, r2, r3
 800862c:	a366      	add	r3, pc, #408	; (adr r3, 80087c8 <__ieee754_rem_pio2+0x2f0>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 ffe9 	bl	8000608 <__aeabi_dmul>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4620      	mov	r0, r4
 800863c:	4629      	mov	r1, r5
 800863e:	f7f7 fe2b 	bl	8000298 <__aeabi_dsub>
 8008642:	a363      	add	r3, pc, #396	; (adr r3, 80087d0 <__ieee754_rem_pio2+0x2f8>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	4606      	mov	r6, r0
 800864a:	460f      	mov	r7, r1
 800864c:	ec51 0b18 	vmov	r0, r1, d8
 8008650:	f7f7 ffda 	bl	8000608 <__aeabi_dmul>
 8008654:	f1bb 0f1f 	cmp.w	fp, #31
 8008658:	4604      	mov	r4, r0
 800865a:	460d      	mov	r5, r1
 800865c:	dc0d      	bgt.n	800867a <__ieee754_rem_pio2+0x1a2>
 800865e:	4b6d      	ldr	r3, [pc, #436]	; (8008814 <__ieee754_rem_pio2+0x33c>)
 8008660:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	4543      	cmp	r3, r8
 800866a:	d006      	beq.n	800867a <__ieee754_rem_pio2+0x1a2>
 800866c:	4622      	mov	r2, r4
 800866e:	462b      	mov	r3, r5
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 fe10 	bl	8000298 <__aeabi_dsub>
 8008678:	e00f      	b.n	800869a <__ieee754_rem_pio2+0x1c2>
 800867a:	462b      	mov	r3, r5
 800867c:	4622      	mov	r2, r4
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f7 fe09 	bl	8000298 <__aeabi_dsub>
 8008686:	ea4f 5328 	mov.w	r3, r8, asr #20
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008690:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008694:	f1b8 0f10 	cmp.w	r8, #16
 8008698:	dc02      	bgt.n	80086a0 <__ieee754_rem_pio2+0x1c8>
 800869a:	e9ca 0100 	strd	r0, r1, [sl]
 800869e:	e039      	b.n	8008714 <__ieee754_rem_pio2+0x23c>
 80086a0:	a34d      	add	r3, pc, #308	; (adr r3, 80087d8 <__ieee754_rem_pio2+0x300>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	ec51 0b18 	vmov	r0, r1, d8
 80086aa:	f7f7 ffad 	bl	8000608 <__aeabi_dmul>
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4630      	mov	r0, r6
 80086b8:	4639      	mov	r1, r7
 80086ba:	f7f7 fded 	bl	8000298 <__aeabi_dsub>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f7 fde5 	bl	8000298 <__aeabi_dsub>
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	f7f7 fde1 	bl	8000298 <__aeabi_dsub>
 80086d6:	a342      	add	r3, pc, #264	; (adr r3, 80087e0 <__ieee754_rem_pio2+0x308>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	4604      	mov	r4, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	ec51 0b18 	vmov	r0, r1, d8
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	f7f7 fdd4 	bl	8000298 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4604      	mov	r4, r0
 80086f6:	460d      	mov	r5, r1
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f7 fdcc 	bl	8000298 <__aeabi_dsub>
 8008700:	9a03      	ldr	r2, [sp, #12]
 8008702:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b31      	cmp	r3, #49	; 0x31
 800870a:	dc24      	bgt.n	8008756 <__ieee754_rem_pio2+0x27e>
 800870c:	e9ca 0100 	strd	r0, r1, [sl]
 8008710:	4646      	mov	r6, r8
 8008712:	464f      	mov	r7, r9
 8008714:	e9da 8900 	ldrd	r8, r9, [sl]
 8008718:	4630      	mov	r0, r6
 800871a:	4642      	mov	r2, r8
 800871c:	464b      	mov	r3, r9
 800871e:	4639      	mov	r1, r7
 8008720:	f7f7 fdba 	bl	8000298 <__aeabi_dsub>
 8008724:	462b      	mov	r3, r5
 8008726:	4622      	mov	r2, r4
 8008728:	f7f7 fdb6 	bl	8000298 <__aeabi_dsub>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008734:	f6bf af0d 	bge.w	8008552 <__ieee754_rem_pio2+0x7a>
 8008738:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800873c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008744:	f8ca 8000 	str.w	r8, [sl]
 8008748:	f8ca 0008 	str.w	r0, [sl, #8]
 800874c:	f8ca 300c 	str.w	r3, [sl, #12]
 8008750:	f1cb 0b00 	rsb	fp, fp, #0
 8008754:	e6fd      	b.n	8008552 <__ieee754_rem_pio2+0x7a>
 8008756:	a326      	add	r3, pc, #152	; (adr r3, 80087f0 <__ieee754_rem_pio2+0x318>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	ec51 0b18 	vmov	r0, r1, d8
 8008760:	f7f7 ff52 	bl	8000608 <__aeabi_dmul>
 8008764:	4604      	mov	r4, r0
 8008766:	460d      	mov	r5, r1
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4640      	mov	r0, r8
 800876e:	4649      	mov	r1, r9
 8008770:	f7f7 fd92 	bl	8000298 <__aeabi_dsub>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4606      	mov	r6, r0
 800877a:	460f      	mov	r7, r1
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f7 fd8a 	bl	8000298 <__aeabi_dsub>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 fd86 	bl	8000298 <__aeabi_dsub>
 800878c:	a31a      	add	r3, pc, #104	; (adr r3, 80087f8 <__ieee754_rem_pio2+0x320>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	4604      	mov	r4, r0
 8008794:	460d      	mov	r5, r1
 8008796:	ec51 0b18 	vmov	r0, r1, d8
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	4622      	mov	r2, r4
 80087a0:	462b      	mov	r3, r5
 80087a2:	f7f7 fd79 	bl	8000298 <__aeabi_dsub>
 80087a6:	4604      	mov	r4, r0
 80087a8:	460d      	mov	r5, r1
 80087aa:	e75f      	b.n	800866c <__ieee754_rem_pio2+0x194>
 80087ac:	4b1a      	ldr	r3, [pc, #104]	; (8008818 <__ieee754_rem_pio2+0x340>)
 80087ae:	4598      	cmp	r8, r3
 80087b0:	dd34      	ble.n	800881c <__ieee754_rem_pio2+0x344>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	f7f7 fd6f 	bl	8000298 <__aeabi_dsub>
 80087ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087be:	e9ca 0100 	strd	r0, r1, [sl]
 80087c2:	e69d      	b.n	8008500 <__ieee754_rem_pio2+0x28>
 80087c4:	f3af 8000 	nop.w
 80087c8:	54400000 	.word	0x54400000
 80087cc:	3ff921fb 	.word	0x3ff921fb
 80087d0:	1a626331 	.word	0x1a626331
 80087d4:	3dd0b461 	.word	0x3dd0b461
 80087d8:	1a600000 	.word	0x1a600000
 80087dc:	3dd0b461 	.word	0x3dd0b461
 80087e0:	2e037073 	.word	0x2e037073
 80087e4:	3ba3198a 	.word	0x3ba3198a
 80087e8:	6dc9c883 	.word	0x6dc9c883
 80087ec:	3fe45f30 	.word	0x3fe45f30
 80087f0:	2e000000 	.word	0x2e000000
 80087f4:	3ba3198a 	.word	0x3ba3198a
 80087f8:	252049c1 	.word	0x252049c1
 80087fc:	397b839a 	.word	0x397b839a
 8008800:	3fe921fb 	.word	0x3fe921fb
 8008804:	4002d97b 	.word	0x4002d97b
 8008808:	3ff921fb 	.word	0x3ff921fb
 800880c:	413921fb 	.word	0x413921fb
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	08009f20 	.word	0x08009f20
 8008818:	7fefffff 	.word	0x7fefffff
 800881c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008820:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008824:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008828:	460f      	mov	r7, r1
 800882a:	4606      	mov	r6, r0
 800882c:	f7f8 f99c 	bl	8000b68 <__aeabi_d2iz>
 8008830:	f7f7 fe80 	bl	8000534 <__aeabi_i2d>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008840:	f7f7 fd2a 	bl	8000298 <__aeabi_dsub>
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <__ieee754_rem_pio2+0x3f8>)
 8008846:	2200      	movs	r2, #0
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	460f      	mov	r7, r1
 800884e:	4606      	mov	r6, r0
 8008850:	f7f8 f98a 	bl	8000b68 <__aeabi_d2iz>
 8008854:	f7f7 fe6e 	bl	8000534 <__aeabi_i2d>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008864:	f7f7 fd18 	bl	8000298 <__aeabi_dsub>
 8008868:	4b19      	ldr	r3, [pc, #100]	; (80088d0 <__ieee754_rem_pio2+0x3f8>)
 800886a:	2200      	movs	r2, #0
 800886c:	f7f7 fecc 	bl	8000608 <__aeabi_dmul>
 8008870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008874:	ad04      	add	r5, sp, #16
 8008876:	f04f 0803 	mov.w	r8, #3
 800887a:	46a9      	mov	r9, r5
 800887c:	2600      	movs	r6, #0
 800887e:	2700      	movs	r7, #0
 8008880:	4632      	mov	r2, r6
 8008882:	463b      	mov	r3, r7
 8008884:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008888:	46c3      	mov	fp, r8
 800888a:	3d08      	subs	r5, #8
 800888c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008890:	f7f8 f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8008894:	2800      	cmp	r0, #0
 8008896:	d1f3      	bne.n	8008880 <__ieee754_rem_pio2+0x3a8>
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <__ieee754_rem_pio2+0x3fc>)
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	2302      	movs	r3, #2
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4622      	mov	r2, r4
 80088a2:	465b      	mov	r3, fp
 80088a4:	4651      	mov	r1, sl
 80088a6:	4648      	mov	r0, r9
 80088a8:	f000 f8d6 	bl	8008a58 <__kernel_rem_pio2>
 80088ac:	9b02      	ldr	r3, [sp, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	4683      	mov	fp, r0
 80088b2:	f6bf ae4e 	bge.w	8008552 <__ieee754_rem_pio2+0x7a>
 80088b6:	e9da 2100 	ldrd	r2, r1, [sl]
 80088ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088be:	e9ca 2300 	strd	r2, r3, [sl]
 80088c2:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80088c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088ca:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80088ce:	e73f      	b.n	8008750 <__ieee754_rem_pio2+0x278>
 80088d0:	41700000 	.word	0x41700000
 80088d4:	08009fa0 	.word	0x08009fa0

080088d8 <__kernel_cos>:
 80088d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80088e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80088e4:	ed2d 8b02 	vpush	{d8}
 80088e8:	4680      	mov	r8, r0
 80088ea:	ec43 2b18 	vmov	d8, r2, r3
 80088ee:	4689      	mov	r9, r1
 80088f0:	da04      	bge.n	80088fc <__kernel_cos+0x24>
 80088f2:	f7f8 f939 	bl	8000b68 <__aeabi_d2iz>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f000 8087 	beq.w	8008a0a <__kernel_cos+0x132>
 80088fc:	4642      	mov	r2, r8
 80088fe:	464b      	mov	r3, r9
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f7 fe80 	bl	8000608 <__aeabi_dmul>
 8008908:	4b4d      	ldr	r3, [pc, #308]	; (8008a40 <__kernel_cos+0x168>)
 800890a:	2200      	movs	r2, #0
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	f7f7 fe7a 	bl	8000608 <__aeabi_dmul>
 8008914:	a33e      	add	r3, pc, #248	; (adr r3, 8008a10 <__kernel_cos+0x138>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	4682      	mov	sl, r0
 800891c:	468b      	mov	fp, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fe71 	bl	8000608 <__aeabi_dmul>
 8008926:	a33c      	add	r3, pc, #240	; (adr r3, 8008a18 <__kernel_cos+0x140>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fcb6 	bl	800029c <__adddf3>
 8008930:	4622      	mov	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	f7f7 fe68 	bl	8000608 <__aeabi_dmul>
 8008938:	a339      	add	r3, pc, #228	; (adr r3, 8008a20 <__kernel_cos+0x148>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fcab 	bl	8000298 <__aeabi_dsub>
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	f7f7 fe5f 	bl	8000608 <__aeabi_dmul>
 800894a:	a337      	add	r3, pc, #220	; (adr r3, 8008a28 <__kernel_cos+0x150>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fca4 	bl	800029c <__adddf3>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fe56 	bl	8000608 <__aeabi_dmul>
 800895c:	a334      	add	r3, pc, #208	; (adr r3, 8008a30 <__kernel_cos+0x158>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fc99 	bl	8000298 <__aeabi_dsub>
 8008966:	4622      	mov	r2, r4
 8008968:	462b      	mov	r3, r5
 800896a:	f7f7 fe4d 	bl	8000608 <__aeabi_dmul>
 800896e:	a332      	add	r3, pc, #200	; (adr r3, 8008a38 <__kernel_cos+0x160>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fc92 	bl	800029c <__adddf3>
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	ec53 2b18 	vmov	r2, r3, d8
 800898c:	4604      	mov	r4, r0
 800898e:	460d      	mov	r5, r1
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f7 fe38 	bl	8000608 <__aeabi_dmul>
 8008998:	460b      	mov	r3, r1
 800899a:	4602      	mov	r2, r0
 800899c:	4629      	mov	r1, r5
 800899e:	4620      	mov	r0, r4
 80089a0:	f7f7 fc7a 	bl	8000298 <__aeabi_dsub>
 80089a4:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <__kernel_cos+0x16c>)
 80089a6:	429e      	cmp	r6, r3
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	dc0f      	bgt.n	80089ce <__kernel_cos+0xf6>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4650      	mov	r0, sl
 80089b4:	4659      	mov	r1, fp
 80089b6:	f7f7 fc6f 	bl	8000298 <__aeabi_dsub>
 80089ba:	460b      	mov	r3, r1
 80089bc:	4922      	ldr	r1, [pc, #136]	; (8008a48 <__kernel_cos+0x170>)
 80089be:	4602      	mov	r2, r0
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7f7 fc69 	bl	8000298 <__aeabi_dsub>
 80089c6:	ecbd 8b02 	vpop	{d8}
 80089ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <__kernel_cos+0x174>)
 80089d0:	491d      	ldr	r1, [pc, #116]	; (8008a48 <__kernel_cos+0x170>)
 80089d2:	429e      	cmp	r6, r3
 80089d4:	bfcc      	ite	gt
 80089d6:	4d1e      	ldrgt	r5, [pc, #120]	; (8008a50 <__kernel_cos+0x178>)
 80089d8:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80089dc:	2400      	movs	r4, #0
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7f7 fc58 	bl	8000298 <__aeabi_dsub>
 80089e8:	4622      	mov	r2, r4
 80089ea:	4606      	mov	r6, r0
 80089ec:	460f      	mov	r7, r1
 80089ee:	462b      	mov	r3, r5
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	f7f7 fc50 	bl	8000298 <__aeabi_dsub>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	f7f7 fc4c 	bl	8000298 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	e7db      	b.n	80089c2 <__kernel_cos+0xea>
 8008a0a:	490f      	ldr	r1, [pc, #60]	; (8008a48 <__kernel_cos+0x170>)
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7da      	b.n	80089c6 <__kernel_cos+0xee>
 8008a10:	be8838d4 	.word	0xbe8838d4
 8008a14:	bda8fae9 	.word	0xbda8fae9
 8008a18:	bdb4b1c4 	.word	0xbdb4b1c4
 8008a1c:	3e21ee9e 	.word	0x3e21ee9e
 8008a20:	809c52ad 	.word	0x809c52ad
 8008a24:	3e927e4f 	.word	0x3e927e4f
 8008a28:	19cb1590 	.word	0x19cb1590
 8008a2c:	3efa01a0 	.word	0x3efa01a0
 8008a30:	16c15177 	.word	0x16c15177
 8008a34:	3f56c16c 	.word	0x3f56c16c
 8008a38:	5555554c 	.word	0x5555554c
 8008a3c:	3fa55555 	.word	0x3fa55555
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	3fd33332 	.word	0x3fd33332
 8008a48:	3ff00000 	.word	0x3ff00000
 8008a4c:	3fe90000 	.word	0x3fe90000
 8008a50:	3fd20000 	.word	0x3fd20000
 8008a54:	00000000 	.word	0x00000000

08008a58 <__kernel_rem_pio2>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	ed2d 8b02 	vpush	{d8}
 8008a60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008a64:	f112 0f14 	cmn.w	r2, #20
 8008a68:	9308      	str	r3, [sp, #32]
 8008a6a:	9101      	str	r1, [sp, #4]
 8008a6c:	4bc4      	ldr	r3, [pc, #784]	; (8008d80 <__kernel_rem_pio2+0x328>)
 8008a6e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008a70:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a7e:	bfa8      	it	ge
 8008a80:	1ed4      	subge	r4, r2, #3
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	bfb2      	itee	lt
 8008a86:	2400      	movlt	r4, #0
 8008a88:	2318      	movge	r3, #24
 8008a8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008a8e:	f06f 0317 	mvn.w	r3, #23
 8008a92:	fb04 3303 	mla	r3, r4, r3, r3
 8008a96:	eb03 0a02 	add.w	sl, r3, r2
 8008a9a:	9b02      	ldr	r3, [sp, #8]
 8008a9c:	9a06      	ldr	r2, [sp, #24]
 8008a9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008d78 <__kernel_rem_pio2+0x320>
 8008aa2:	eb03 0802 	add.w	r8, r3, r2
 8008aa6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008aa8:	1aa7      	subs	r7, r4, r2
 8008aaa:	ae22      	add	r6, sp, #136	; 0x88
 8008aac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ab0:	2500      	movs	r5, #0
 8008ab2:	4545      	cmp	r5, r8
 8008ab4:	dd13      	ble.n	8008ade <__kernel_rem_pio2+0x86>
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8008d78 <__kernel_rem_pio2+0x320>
 8008abc:	aa22      	add	r2, sp, #136	; 0x88
 8008abe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ac2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ac6:	f04f 0800 	mov.w	r8, #0
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	4598      	cmp	r8, r3
 8008ace:	dc2f      	bgt.n	8008b30 <__kernel_rem_pio2+0xd8>
 8008ad0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008ad4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008ad8:	462f      	mov	r7, r5
 8008ada:	2600      	movs	r6, #0
 8008adc:	e01b      	b.n	8008b16 <__kernel_rem_pio2+0xbe>
 8008ade:	42ef      	cmn	r7, r5
 8008ae0:	d407      	bmi.n	8008af2 <__kernel_rem_pio2+0x9a>
 8008ae2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008ae6:	f7f7 fd25 	bl	8000534 <__aeabi_i2d>
 8008aea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008aee:	3501      	adds	r5, #1
 8008af0:	e7df      	b.n	8008ab2 <__kernel_rem_pio2+0x5a>
 8008af2:	ec51 0b18 	vmov	r0, r1, d8
 8008af6:	e7f8      	b.n	8008aea <__kernel_rem_pio2+0x92>
 8008af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008b00:	f7f7 fd82 	bl	8000608 <__aeabi_dmul>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0c:	f7f7 fbc6 	bl	800029c <__adddf3>
 8008b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b14:	3601      	adds	r6, #1
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	429e      	cmp	r6, r3
 8008b1a:	f1a7 0708 	sub.w	r7, r7, #8
 8008b1e:	ddeb      	ble.n	8008af8 <__kernel_rem_pio2+0xa0>
 8008b20:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b24:	f108 0801 	add.w	r8, r8, #1
 8008b28:	ecab 7b02 	vstmia	fp!, {d7}
 8008b2c:	3508      	adds	r5, #8
 8008b2e:	e7cc      	b.n	8008aca <__kernel_rem_pio2+0x72>
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	aa0e      	add	r2, sp, #56	; 0x38
 8008b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b38:	930d      	str	r3, [sp, #52]	; 0x34
 8008b3a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008b3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b40:	9c02      	ldr	r4, [sp, #8]
 8008b42:	930c      	str	r3, [sp, #48]	; 0x30
 8008b44:	00e3      	lsls	r3, r4, #3
 8008b46:	930a      	str	r3, [sp, #40]	; 0x28
 8008b48:	ab9a      	add	r3, sp, #616	; 0x268
 8008b4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008b52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008b56:	ab72      	add	r3, sp, #456	; 0x1c8
 8008b58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008b5c:	46c3      	mov	fp, r8
 8008b5e:	46a1      	mov	r9, r4
 8008b60:	f1b9 0f00 	cmp.w	r9, #0
 8008b64:	f1a5 0508 	sub.w	r5, r5, #8
 8008b68:	dc70      	bgt.n	8008c4c <__kernel_rem_pio2+0x1f4>
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f000 fbee 	bl	8009350 <scalbn>
 8008b74:	2200      	movs	r2, #0
 8008b76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	f7f7 fd43 	bl	8000608 <__aeabi_dmul>
 8008b82:	f000 fb65 	bl	8009250 <floor>
 8008b86:	4b7f      	ldr	r3, [pc, #508]	; (8008d84 <__kernel_rem_pio2+0x32c>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd3d 	bl	8000608 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 fb7f 	bl	8000298 <__aeabi_dsub>
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	f7f7 ffe3 	bl	8000b68 <__aeabi_d2iz>
 8008ba2:	9004      	str	r0, [sp, #16]
 8008ba4:	f7f7 fcc6 	bl	8000534 <__aeabi_i2d>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 fb72 	bl	8000298 <__aeabi_dsub>
 8008bb4:	f1ba 0f00 	cmp.w	sl, #0
 8008bb8:	4606      	mov	r6, r0
 8008bba:	460f      	mov	r7, r1
 8008bbc:	dd6d      	ble.n	8008c9a <__kernel_rem_pio2+0x242>
 8008bbe:	1e62      	subs	r2, r4, #1
 8008bc0:	ab0e      	add	r3, sp, #56	; 0x38
 8008bc2:	9d04      	ldr	r5, [sp, #16]
 8008bc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008bc8:	f1ca 0118 	rsb	r1, sl, #24
 8008bcc:	fa40 f301 	asr.w	r3, r0, r1
 8008bd0:	441d      	add	r5, r3
 8008bd2:	408b      	lsls	r3, r1
 8008bd4:	1ac0      	subs	r0, r0, r3
 8008bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8008bd8:	9504      	str	r5, [sp, #16]
 8008bda:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008bde:	f1ca 0317 	rsb	r3, sl, #23
 8008be2:	fa40 fb03 	asr.w	fp, r0, r3
 8008be6:	f1bb 0f00 	cmp.w	fp, #0
 8008bea:	dd65      	ble.n	8008cb8 <__kernel_rem_pio2+0x260>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008bfa:	4294      	cmp	r4, r2
 8008bfc:	f300 809c 	bgt.w	8008d38 <__kernel_rem_pio2+0x2e0>
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	dd07      	ble.n	8008c16 <__kernel_rem_pio2+0x1be>
 8008c06:	f1ba 0f01 	cmp.w	sl, #1
 8008c0a:	f000 80a8 	beq.w	8008d5e <__kernel_rem_pio2+0x306>
 8008c0e:	f1ba 0f02 	cmp.w	sl, #2
 8008c12:	f000 80c3 	beq.w	8008d9c <__kernel_rem_pio2+0x344>
 8008c16:	f1bb 0f02 	cmp.w	fp, #2
 8008c1a:	d14d      	bne.n	8008cb8 <__kernel_rem_pio2+0x260>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	4959      	ldr	r1, [pc, #356]	; (8008d88 <__kernel_rem_pio2+0x330>)
 8008c22:	2000      	movs	r0, #0
 8008c24:	f7f7 fb38 	bl	8000298 <__aeabi_dsub>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	d043      	beq.n	8008cb8 <__kernel_rem_pio2+0x260>
 8008c30:	4652      	mov	r2, sl
 8008c32:	4955      	ldr	r1, [pc, #340]	; (8008d88 <__kernel_rem_pio2+0x330>)
 8008c34:	2000      	movs	r0, #0
 8008c36:	f000 fb8b 	bl	8009350 <scalbn>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 fb29 	bl	8000298 <__aeabi_dsub>
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	e035      	b.n	8008cb8 <__kernel_rem_pio2+0x260>
 8008c4c:	4b4f      	ldr	r3, [pc, #316]	; (8008d8c <__kernel_rem_pio2+0x334>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4630      	mov	r0, r6
 8008c52:	4639      	mov	r1, r7
 8008c54:	f7f7 fcd8 	bl	8000608 <__aeabi_dmul>
 8008c58:	f7f7 ff86 	bl	8000b68 <__aeabi_d2iz>
 8008c5c:	f7f7 fc6a 	bl	8000534 <__aeabi_i2d>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	ec43 2b18 	vmov	d8, r2, r3
 8008c68:	4b49      	ldr	r3, [pc, #292]	; (8008d90 <__kernel_rem_pio2+0x338>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f7f7 fccc 	bl	8000608 <__aeabi_dmul>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4630      	mov	r0, r6
 8008c76:	4639      	mov	r1, r7
 8008c78:	f7f7 fb0e 	bl	8000298 <__aeabi_dsub>
 8008c7c:	f7f7 ff74 	bl	8000b68 <__aeabi_d2iz>
 8008c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c84:	f84b 0b04 	str.w	r0, [fp], #4
 8008c88:	ec51 0b18 	vmov	r0, r1, d8
 8008c8c:	f7f7 fb06 	bl	800029c <__adddf3>
 8008c90:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	e762      	b.n	8008b60 <__kernel_rem_pio2+0x108>
 8008c9a:	d106      	bne.n	8008caa <__kernel_rem_pio2+0x252>
 8008c9c:	1e63      	subs	r3, r4, #1
 8008c9e:	aa0e      	add	r2, sp, #56	; 0x38
 8008ca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008ca4:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008ca8:	e79d      	b.n	8008be6 <__kernel_rem_pio2+0x18e>
 8008caa:	4b3a      	ldr	r3, [pc, #232]	; (8008d94 <__kernel_rem_pio2+0x33c>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	f7f7 ff31 	bl	8000b14 <__aeabi_dcmpge>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d13d      	bne.n	8008d32 <__kernel_rem_pio2+0x2da>
 8008cb6:	4683      	mov	fp, r0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f000 80bd 	beq.w	8008e44 <__kernel_rem_pio2+0x3ec>
 8008cca:	1e65      	subs	r5, r4, #1
 8008ccc:	462b      	mov	r3, r5
 8008cce:	2200      	movs	r2, #0
 8008cd0:	9902      	ldr	r1, [sp, #8]
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	da69      	bge.n	8008daa <__kernel_rem_pio2+0x352>
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	f000 8086 	beq.w	8008de8 <__kernel_rem_pio2+0x390>
 8008cdc:	ab0e      	add	r3, sp, #56	; 0x38
 8008cde:	f1aa 0a18 	sub.w	sl, sl, #24
 8008ce2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80aa 	beq.w	8008e40 <__kernel_rem_pio2+0x3e8>
 8008cec:	4652      	mov	r2, sl
 8008cee:	4926      	ldr	r1, [pc, #152]	; (8008d88 <__kernel_rem_pio2+0x330>)
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f000 fb2d 	bl	8009350 <scalbn>
 8008cf6:	ab9a      	add	r3, sp, #616	; 0x268
 8008cf8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460f      	mov	r7, r1
 8008d00:	00ec      	lsls	r4, r5, #3
 8008d02:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008d06:	46aa      	mov	sl, r5
 8008d08:	f1ba 0f00 	cmp.w	sl, #0
 8008d0c:	f280 80d0 	bge.w	8008eb0 <__kernel_rem_pio2+0x458>
 8008d10:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008d78 <__kernel_rem_pio2+0x320>
 8008d14:	462e      	mov	r6, r5
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	f2c0 80fe 	blt.w	8008f18 <__kernel_rem_pio2+0x4c0>
 8008d1c:	ab72      	add	r3, sp, #456	; 0x1c8
 8008d1e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008d22:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008d98 <__kernel_rem_pio2+0x340>
 8008d26:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	1baf      	subs	r7, r5, r6
 8008d30:	e0e4      	b.n	8008efc <__kernel_rem_pio2+0x4a4>
 8008d32:	f04f 0b02 	mov.w	fp, #2
 8008d36:	e759      	b.n	8008bec <__kernel_rem_pio2+0x194>
 8008d38:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3c:	b955      	cbnz	r5, 8008d54 <__kernel_rem_pio2+0x2fc>
 8008d3e:	b123      	cbz	r3, 8008d4a <__kernel_rem_pio2+0x2f2>
 8008d40:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d44:	f8c8 3000 	str.w	r3, [r8]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	3201      	adds	r2, #1
 8008d4c:	f108 0804 	add.w	r8, r8, #4
 8008d50:	461d      	mov	r5, r3
 8008d52:	e752      	b.n	8008bfa <__kernel_rem_pio2+0x1a2>
 8008d54:	1acb      	subs	r3, r1, r3
 8008d56:	f8c8 3000 	str.w	r3, [r8]
 8008d5a:	462b      	mov	r3, r5
 8008d5c:	e7f5      	b.n	8008d4a <__kernel_rem_pio2+0x2f2>
 8008d5e:	1e62      	subs	r2, r4, #1
 8008d60:	ab0e      	add	r3, sp, #56	; 0x38
 8008d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d6a:	a90e      	add	r1, sp, #56	; 0x38
 8008d6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d70:	e751      	b.n	8008c16 <__kernel_rem_pio2+0x1be>
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
	...
 8008d80:	0800a0e8 	.word	0x0800a0e8
 8008d84:	40200000 	.word	0x40200000
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	3e700000 	.word	0x3e700000
 8008d90:	41700000 	.word	0x41700000
 8008d94:	3fe00000 	.word	0x3fe00000
 8008d98:	0800a0a8 	.word	0x0800a0a8
 8008d9c:	1e62      	subs	r2, r4, #1
 8008d9e:	ab0e      	add	r3, sp, #56	; 0x38
 8008da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008da8:	e7df      	b.n	8008d6a <__kernel_rem_pio2+0x312>
 8008daa:	a90e      	add	r1, sp, #56	; 0x38
 8008dac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	430a      	orrs	r2, r1
 8008db4:	e78c      	b.n	8008cd0 <__kernel_rem_pio2+0x278>
 8008db6:	3301      	adds	r3, #1
 8008db8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d0fa      	beq.n	8008db6 <__kernel_rem_pio2+0x35e>
 8008dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc2:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008dc6:	446a      	add	r2, sp
 8008dc8:	3a98      	subs	r2, #152	; 0x98
 8008dca:	920a      	str	r2, [sp, #40]	; 0x28
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	18e3      	adds	r3, r4, r3
 8008dd0:	18a5      	adds	r5, r4, r2
 8008dd2:	aa22      	add	r2, sp, #136	; 0x88
 8008dd4:	f104 0801 	add.w	r8, r4, #1
 8008dd8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	4543      	cmp	r3, r8
 8008de2:	da04      	bge.n	8008dee <__kernel_rem_pio2+0x396>
 8008de4:	461c      	mov	r4, r3
 8008de6:	e6ad      	b.n	8008b44 <__kernel_rem_pio2+0xec>
 8008de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dea:	2301      	movs	r3, #1
 8008dec:	e7e4      	b.n	8008db8 <__kernel_rem_pio2+0x360>
 8008dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008df4:	f7f7 fb9e 	bl	8000534 <__aeabi_i2d>
 8008df8:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfe:	46ab      	mov	fp, r5
 8008e00:	461c      	mov	r4, r3
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	2600      	movs	r6, #0
 8008e08:	2700      	movs	r7, #0
 8008e0a:	9b06      	ldr	r3, [sp, #24]
 8008e0c:	4599      	cmp	r9, r3
 8008e0e:	dd06      	ble.n	8008e1e <__kernel_rem_pio2+0x3c6>
 8008e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e12:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008e16:	f108 0801 	add.w	r8, r8, #1
 8008e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e1c:	e7df      	b.n	8008dde <__kernel_rem_pio2+0x386>
 8008e1e:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008e22:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008e26:	f7f7 fbef 	bl	8000608 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa33 	bl	800029c <__adddf3>
 8008e36:	f109 0901 	add.w	r9, r9, #1
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	e7e4      	b.n	8008e0a <__kernel_rem_pio2+0x3b2>
 8008e40:	3d01      	subs	r5, #1
 8008e42:	e74b      	b.n	8008cdc <__kernel_rem_pio2+0x284>
 8008e44:	f1ca 0200 	rsb	r2, sl, #0
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f000 fa80 	bl	8009350 <scalbn>
 8008e50:	4ba0      	ldr	r3, [pc, #640]	; (80090d4 <__kernel_rem_pio2+0x67c>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	4606      	mov	r6, r0
 8008e56:	460f      	mov	r7, r1
 8008e58:	f7f7 fe5c 	bl	8000b14 <__aeabi_dcmpge>
 8008e5c:	b1f8      	cbz	r0, 8008e9e <__kernel_rem_pio2+0x446>
 8008e5e:	4b9e      	ldr	r3, [pc, #632]	; (80090d8 <__kernel_rem_pio2+0x680>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	f7f7 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8008e6e:	4680      	mov	r8, r0
 8008e70:	f7f7 fb60 	bl	8000534 <__aeabi_i2d>
 8008e74:	4b97      	ldr	r3, [pc, #604]	; (80090d4 <__kernel_rem_pio2+0x67c>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4639      	mov	r1, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7f7 fa08 	bl	8000298 <__aeabi_dsub>
 8008e88:	f7f7 fe6e 	bl	8000b68 <__aeabi_d2iz>
 8008e8c:	1c65      	adds	r5, r4, #1
 8008e8e:	ab0e      	add	r3, sp, #56	; 0x38
 8008e90:	f10a 0a18 	add.w	sl, sl, #24
 8008e94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e98:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008e9c:	e726      	b.n	8008cec <__kernel_rem_pio2+0x294>
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	f7f7 fe61 	bl	8000b68 <__aeabi_d2iz>
 8008ea6:	ab0e      	add	r3, sp, #56	; 0x38
 8008ea8:	4625      	mov	r5, r4
 8008eaa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008eae:	e71d      	b.n	8008cec <__kernel_rem_pio2+0x294>
 8008eb0:	ab0e      	add	r3, sp, #56	; 0x38
 8008eb2:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008eb6:	f7f7 fb3d 	bl	8000534 <__aeabi_i2d>
 8008eba:	4632      	mov	r2, r6
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	f7f7 fba3 	bl	8000608 <__aeabi_dmul>
 8008ec2:	4b85      	ldr	r3, [pc, #532]	; (80090d8 <__kernel_rem_pio2+0x680>)
 8008ec4:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 fb9b 	bl	8000608 <__aeabi_dmul>
 8008ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	e715      	b.n	8008d08 <__kernel_rem_pio2+0x2b0>
 8008edc:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008ee0:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ef0:	f7f7 f9d4 	bl	800029c <__adddf3>
 8008ef4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ef8:	f108 0801 	add.w	r8, r8, #1
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	4598      	cmp	r8, r3
 8008f00:	dc01      	bgt.n	8008f06 <__kernel_rem_pio2+0x4ae>
 8008f02:	45b8      	cmp	r8, r7
 8008f04:	ddea      	ble.n	8008edc <__kernel_rem_pio2+0x484>
 8008f06:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008f0a:	ab4a      	add	r3, sp, #296	; 0x128
 8008f0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f10:	ed87 7b00 	vstr	d7, [r7]
 8008f14:	3e01      	subs	r6, #1
 8008f16:	e6fe      	b.n	8008d16 <__kernel_rem_pio2+0x2be>
 8008f18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	dc0b      	bgt.n	8008f36 <__kernel_rem_pio2+0x4de>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc35      	bgt.n	8008f8e <__kernel_rem_pio2+0x536>
 8008f22:	d059      	beq.n	8008fd8 <__kernel_rem_pio2+0x580>
 8008f24:	9b04      	ldr	r3, [sp, #16]
 8008f26:	f003 0007 	and.w	r0, r3, #7
 8008f2a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008f2e:	ecbd 8b02 	vpop	{d8}
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d1f3      	bne.n	8008f24 <__kernel_rem_pio2+0x4cc>
 8008f3c:	ab4a      	add	r3, sp, #296	; 0x128
 8008f3e:	4423      	add	r3, r4
 8008f40:	9306      	str	r3, [sp, #24]
 8008f42:	461c      	mov	r4, r3
 8008f44:	469a      	mov	sl, r3
 8008f46:	9502      	str	r5, [sp, #8]
 8008f48:	9b02      	ldr	r3, [sp, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f1aa 0a08 	sub.w	sl, sl, #8
 8008f50:	dc6b      	bgt.n	800902a <__kernel_rem_pio2+0x5d2>
 8008f52:	46aa      	mov	sl, r5
 8008f54:	f1ba 0f01 	cmp.w	sl, #1
 8008f58:	f1a4 0408 	sub.w	r4, r4, #8
 8008f5c:	f300 8085 	bgt.w	800906a <__kernel_rem_pio2+0x612>
 8008f60:	9c06      	ldr	r4, [sp, #24]
 8008f62:	2000      	movs	r0, #0
 8008f64:	3408      	adds	r4, #8
 8008f66:	2100      	movs	r1, #0
 8008f68:	2d01      	cmp	r5, #1
 8008f6a:	f300 809d 	bgt.w	80090a8 <__kernel_rem_pio2+0x650>
 8008f6e:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008f72:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008f76:	f1bb 0f00 	cmp.w	fp, #0
 8008f7a:	f040 809b 	bne.w	80090b4 <__kernel_rem_pio2+0x65c>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	e9c3 5600 	strd	r5, r6, [r3]
 8008f84:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008f88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008f8c:	e7ca      	b.n	8008f24 <__kernel_rem_pio2+0x4cc>
 8008f8e:	3408      	adds	r4, #8
 8008f90:	ab4a      	add	r3, sp, #296	; 0x128
 8008f92:	441c      	add	r4, r3
 8008f94:	462e      	mov	r6, r5
 8008f96:	2000      	movs	r0, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	da36      	bge.n	800900c <__kernel_rem_pio2+0x5b4>
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	d039      	beq.n	8009018 <__kernel_rem_pio2+0x5c0>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008faa:	9c01      	ldr	r4, [sp, #4]
 8008fac:	e9c4 2300 	strd	r2, r3, [r4]
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008fb8:	f7f7 f96e 	bl	8000298 <__aeabi_dsub>
 8008fbc:	ae4c      	add	r6, sp, #304	; 0x130
 8008fbe:	2401      	movs	r4, #1
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	da2c      	bge.n	800901e <__kernel_rem_pio2+0x5c6>
 8008fc4:	f1bb 0f00 	cmp.w	fp, #0
 8008fc8:	d002      	beq.n	8008fd0 <__kernel_rem_pio2+0x578>
 8008fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fce:	4619      	mov	r1, r3
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008fd6:	e7a5      	b.n	8008f24 <__kernel_rem_pio2+0x4cc>
 8008fd8:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008fdc:	eb0d 0403 	add.w	r4, sp, r3
 8008fe0:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	2d00      	cmp	r5, #0
 8008fea:	da09      	bge.n	8009000 <__kernel_rem_pio2+0x5a8>
 8008fec:	f1bb 0f00 	cmp.w	fp, #0
 8008ff0:	d002      	beq.n	8008ff8 <__kernel_rem_pio2+0x5a0>
 8008ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	e9c3 0100 	strd	r0, r1, [r3]
 8008ffe:	e791      	b.n	8008f24 <__kernel_rem_pio2+0x4cc>
 8009000:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009004:	f7f7 f94a 	bl	800029c <__adddf3>
 8009008:	3d01      	subs	r5, #1
 800900a:	e7ed      	b.n	8008fe8 <__kernel_rem_pio2+0x590>
 800900c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009010:	f7f7 f944 	bl	800029c <__adddf3>
 8009014:	3e01      	subs	r6, #1
 8009016:	e7c0      	b.n	8008f9a <__kernel_rem_pio2+0x542>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	e7c5      	b.n	8008faa <__kernel_rem_pio2+0x552>
 800901e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009022:	f7f7 f93b 	bl	800029c <__adddf3>
 8009026:	3401      	adds	r4, #1
 8009028:	e7ca      	b.n	8008fc0 <__kernel_rem_pio2+0x568>
 800902a:	e9da 8900 	ldrd	r8, r9, [sl]
 800902e:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009032:	9b02      	ldr	r3, [sp, #8]
 8009034:	3b01      	subs	r3, #1
 8009036:	9302      	str	r3, [sp, #8]
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 f92c 	bl	800029c <__adddf3>
 8009044:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f7f7 f922 	bl	8000298 <__aeabi_dsub>
 8009054:	4632      	mov	r2, r6
 8009056:	463b      	mov	r3, r7
 8009058:	f7f7 f920 	bl	800029c <__adddf3>
 800905c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009060:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009064:	ed8a 7b00 	vstr	d7, [sl]
 8009068:	e76e      	b.n	8008f48 <__kernel_rem_pio2+0x4f0>
 800906a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800906e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009072:	4640      	mov	r0, r8
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	4649      	mov	r1, r9
 800907a:	f7f7 f90f 	bl	800029c <__adddf3>
 800907e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4640      	mov	r0, r8
 8009088:	4649      	mov	r1, r9
 800908a:	f7f7 f905 	bl	8000298 <__aeabi_dsub>
 800908e:	4632      	mov	r2, r6
 8009090:	463b      	mov	r3, r7
 8009092:	f7f7 f903 	bl	800029c <__adddf3>
 8009096:	ed9d 7b02 	vldr	d7, [sp, #8]
 800909a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800909e:	ed84 7b00 	vstr	d7, [r4]
 80090a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090a6:	e755      	b.n	8008f54 <__kernel_rem_pio2+0x4fc>
 80090a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090ac:	f7f7 f8f6 	bl	800029c <__adddf3>
 80090b0:	3d01      	subs	r5, #1
 80090b2:	e759      	b.n	8008f68 <__kernel_rem_pio2+0x510>
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	9a01      	ldr	r2, [sp, #4]
 80090b8:	601d      	str	r5, [r3, #0]
 80090ba:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80090be:	605c      	str	r4, [r3, #4]
 80090c0:	609f      	str	r7, [r3, #8]
 80090c2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80090c6:	60d3      	str	r3, [r2, #12]
 80090c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090cc:	6110      	str	r0, [r2, #16]
 80090ce:	6153      	str	r3, [r2, #20]
 80090d0:	e728      	b.n	8008f24 <__kernel_rem_pio2+0x4cc>
 80090d2:	bf00      	nop
 80090d4:	41700000 	.word	0x41700000
 80090d8:	3e700000 	.word	0x3e700000
 80090dc:	00000000 	.word	0x00000000

080090e0 <__kernel_sin>:
 80090e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	461f      	mov	r7, r3
 80090e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80090ee:	ed2d 8b04 	vpush	{d8-d9}
 80090f2:	4604      	mov	r4, r0
 80090f4:	460d      	mov	r5, r1
 80090f6:	4616      	mov	r6, r2
 80090f8:	da03      	bge.n	8009102 <__kernel_sin+0x22>
 80090fa:	f7f7 fd35 	bl	8000b68 <__aeabi_d2iz>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d051      	beq.n	80091a6 <__kernel_sin+0xc6>
 8009102:	4622      	mov	r2, r4
 8009104:	462b      	mov	r3, r5
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fa7d 	bl	8000608 <__aeabi_dmul>
 800910e:	4682      	mov	sl, r0
 8009110:	468b      	mov	fp, r1
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fa75 	bl	8000608 <__aeabi_dmul>
 800911e:	a341      	add	r3, pc, #260	; (adr r3, 8009224 <__kernel_sin+0x144>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	4650      	mov	r0, sl
 800912a:	4659      	mov	r1, fp
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	a33e      	add	r3, pc, #248	; (adr r3, 800922c <__kernel_sin+0x14c>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 f8af 	bl	8000298 <__aeabi_dsub>
 800913a:	4652      	mov	r2, sl
 800913c:	465b      	mov	r3, fp
 800913e:	f7f7 fa63 	bl	8000608 <__aeabi_dmul>
 8009142:	a33c      	add	r3, pc, #240	; (adr r3, 8009234 <__kernel_sin+0x154>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 f8a8 	bl	800029c <__adddf3>
 800914c:	4652      	mov	r2, sl
 800914e:	465b      	mov	r3, fp
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	a339      	add	r3, pc, #228	; (adr r3, 800923c <__kernel_sin+0x15c>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f89d 	bl	8000298 <__aeabi_dsub>
 800915e:	4652      	mov	r2, sl
 8009160:	465b      	mov	r3, fp
 8009162:	f7f7 fa51 	bl	8000608 <__aeabi_dmul>
 8009166:	a337      	add	r3, pc, #220	; (adr r3, 8009244 <__kernel_sin+0x164>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 f896 	bl	800029c <__adddf3>
 8009170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009172:	ec41 0b18 	vmov	d8, r0, r1
 8009176:	b9e3      	cbnz	r3, 80091b2 <__kernel_sin+0xd2>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4650      	mov	r0, sl
 800917e:	4659      	mov	r1, fp
 8009180:	f7f7 fa42 	bl	8000608 <__aeabi_dmul>
 8009184:	a324      	add	r3, pc, #144	; (adr r3, 8009218 <__kernel_sin+0x138>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f885 	bl	8000298 <__aeabi_dsub>
 800918e:	4642      	mov	r2, r8
 8009190:	464b      	mov	r3, r9
 8009192:	f7f7 fa39 	bl	8000608 <__aeabi_dmul>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4620      	mov	r0, r4
 800919c:	4629      	mov	r1, r5
 800919e:	f7f7 f87d 	bl	800029c <__adddf3>
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	ecbd 8b04 	vpop	{d8-d9}
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <__kernel_sin+0x140>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 fa25 	bl	8000608 <__aeabi_dmul>
 80091be:	ec53 2b18 	vmov	r2, r3, d8
 80091c2:	ec41 0b19 	vmov	d9, r0, r1
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 fa1d 	bl	8000608 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	ec51 0b19 	vmov	r0, r1, d9
 80091d6:	f7f7 f85f 	bl	8000298 <__aeabi_dsub>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	f7f7 fa13 	bl	8000608 <__aeabi_dmul>
 80091e2:	4632      	mov	r2, r6
 80091e4:	463b      	mov	r3, r7
 80091e6:	f7f7 f857 	bl	8000298 <__aeabi_dsub>
 80091ea:	a30b      	add	r3, pc, #44	; (adr r3, 8009218 <__kernel_sin+0x138>)
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	4606      	mov	r6, r0
 80091f2:	460f      	mov	r7, r1
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	f7f7 fa06 	bl	8000608 <__aeabi_dmul>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 f84a 	bl	800029c <__adddf3>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f842 	bl	8000298 <__aeabi_dsub>
 8009214:	e7c5      	b.n	80091a2 <__kernel_sin+0xc2>
 8009216:	bf00      	nop
 8009218:	55555549 	.word	0x55555549
 800921c:	3fc55555 	.word	0x3fc55555
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	5acfd57c 	.word	0x5acfd57c
 8009228:	3de5d93a 	.word	0x3de5d93a
 800922c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009230:	3e5ae5e6 	.word	0x3e5ae5e6
 8009234:	57b1fe7d 	.word	0x57b1fe7d
 8009238:	3ec71de3 	.word	0x3ec71de3
 800923c:	19c161d5 	.word	0x19c161d5
 8009240:	3f2a01a0 	.word	0x3f2a01a0
 8009244:	1110f8a6 	.word	0x1110f8a6
 8009248:	3f811111 	.word	0x3f811111
 800924c:	00000000 	.word	0x00000000

08009250 <floor>:
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009258:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800925c:	2e13      	cmp	r6, #19
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	460c      	mov	r4, r1
 8009264:	4605      	mov	r5, r0
 8009266:	4680      	mov	r8, r0
 8009268:	dc33      	bgt.n	80092d2 <floor+0x82>
 800926a:	2e00      	cmp	r6, #0
 800926c:	da14      	bge.n	8009298 <floor+0x48>
 800926e:	a334      	add	r3, pc, #208	; (adr r3, 8009340 <floor+0xf0>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 f812 	bl	800029c <__adddf3>
 8009278:	2200      	movs	r2, #0
 800927a:	2300      	movs	r3, #0
 800927c:	f7f7 fc54 	bl	8000b28 <__aeabi_dcmpgt>
 8009280:	b138      	cbz	r0, 8009292 <floor+0x42>
 8009282:	2c00      	cmp	r4, #0
 8009284:	da57      	bge.n	8009336 <floor+0xe6>
 8009286:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800928a:	431d      	orrs	r5, r3
 800928c:	d001      	beq.n	8009292 <floor+0x42>
 800928e:	4c2e      	ldr	r4, [pc, #184]	; (8009348 <floor+0xf8>)
 8009290:	2500      	movs	r5, #0
 8009292:	4623      	mov	r3, r4
 8009294:	462a      	mov	r2, r5
 8009296:	e025      	b.n	80092e4 <floor+0x94>
 8009298:	4f2c      	ldr	r7, [pc, #176]	; (800934c <floor+0xfc>)
 800929a:	4137      	asrs	r7, r6
 800929c:	ea01 0c07 	and.w	ip, r1, r7
 80092a0:	ea5c 0c00 	orrs.w	ip, ip, r0
 80092a4:	d01e      	beq.n	80092e4 <floor+0x94>
 80092a6:	a326      	add	r3, pc, #152	; (adr r3, 8009340 <floor+0xf0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 fff6 	bl	800029c <__adddf3>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	f7f7 fc38 	bl	8000b28 <__aeabi_dcmpgt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0ea      	beq.n	8009292 <floor+0x42>
 80092bc:	2c00      	cmp	r4, #0
 80092be:	bfbe      	ittt	lt
 80092c0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092c4:	fa43 f606 	asrlt.w	r6, r3, r6
 80092c8:	19a4      	addlt	r4, r4, r6
 80092ca:	ea24 0407 	bic.w	r4, r4, r7
 80092ce:	2500      	movs	r5, #0
 80092d0:	e7df      	b.n	8009292 <floor+0x42>
 80092d2:	2e33      	cmp	r6, #51	; 0x33
 80092d4:	dd0a      	ble.n	80092ec <floor+0x9c>
 80092d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80092da:	d103      	bne.n	80092e4 <floor+0x94>
 80092dc:	f7f6 ffde 	bl	800029c <__adddf3>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4610      	mov	r0, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ec:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80092f0:	f04f 3cff 	mov.w	ip, #4294967295
 80092f4:	fa2c f707 	lsr.w	r7, ip, r7
 80092f8:	4207      	tst	r7, r0
 80092fa:	d0f3      	beq.n	80092e4 <floor+0x94>
 80092fc:	a310      	add	r3, pc, #64	; (adr r3, 8009340 <floor+0xf0>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ffcb 	bl	800029c <__adddf3>
 8009306:	2200      	movs	r2, #0
 8009308:	2300      	movs	r3, #0
 800930a:	f7f7 fc0d 	bl	8000b28 <__aeabi_dcmpgt>
 800930e:	2800      	cmp	r0, #0
 8009310:	d0bf      	beq.n	8009292 <floor+0x42>
 8009312:	2c00      	cmp	r4, #0
 8009314:	da02      	bge.n	800931c <floor+0xcc>
 8009316:	2e14      	cmp	r6, #20
 8009318:	d103      	bne.n	8009322 <floor+0xd2>
 800931a:	3401      	adds	r4, #1
 800931c:	ea25 0507 	bic.w	r5, r5, r7
 8009320:	e7b7      	b.n	8009292 <floor+0x42>
 8009322:	2301      	movs	r3, #1
 8009324:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009328:	fa03 f606 	lsl.w	r6, r3, r6
 800932c:	4435      	add	r5, r6
 800932e:	4545      	cmp	r5, r8
 8009330:	bf38      	it	cc
 8009332:	18e4      	addcc	r4, r4, r3
 8009334:	e7f2      	b.n	800931c <floor+0xcc>
 8009336:	2500      	movs	r5, #0
 8009338:	462c      	mov	r4, r5
 800933a:	e7aa      	b.n	8009292 <floor+0x42>
 800933c:	f3af 8000 	nop.w
 8009340:	8800759c 	.word	0x8800759c
 8009344:	7e37e43c 	.word	0x7e37e43c
 8009348:	bff00000 	.word	0xbff00000
 800934c:	000fffff 	.word	0x000fffff

08009350 <scalbn>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009356:	4604      	mov	r4, r0
 8009358:	460d      	mov	r5, r1
 800935a:	4617      	mov	r7, r2
 800935c:	460b      	mov	r3, r1
 800935e:	b986      	cbnz	r6, 8009382 <scalbn+0x32>
 8009360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009364:	4303      	orrs	r3, r0
 8009366:	d031      	beq.n	80093cc <scalbn+0x7c>
 8009368:	4b37      	ldr	r3, [pc, #220]	; (8009448 <scalbn+0xf8>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f94c 	bl	8000608 <__aeabi_dmul>
 8009370:	4b36      	ldr	r3, [pc, #216]	; (800944c <scalbn+0xfc>)
 8009372:	429f      	cmp	r7, r3
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	da0d      	bge.n	8009396 <scalbn+0x46>
 800937a:	a32b      	add	r3, pc, #172	; (adr r3, 8009428 <scalbn+0xd8>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	e038      	b.n	80093f4 <scalbn+0xa4>
 8009382:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009386:	4296      	cmp	r6, r2
 8009388:	d10a      	bne.n	80093a0 <scalbn+0x50>
 800938a:	4602      	mov	r2, r0
 800938c:	f7f6 ff86 	bl	800029c <__adddf3>
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	e01a      	b.n	80093cc <scalbn+0x7c>
 8009396:	460b      	mov	r3, r1
 8009398:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800939c:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80093a0:	19b9      	adds	r1, r7, r6
 80093a2:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80093a6:	4291      	cmp	r1, r2
 80093a8:	dd08      	ble.n	80093bc <scalbn+0x6c>
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	a120      	add	r1, pc, #128	; (adr r1, 8009430 <scalbn+0xe0>)
 80093ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b2:	da1c      	bge.n	80093ee <scalbn+0x9e>
 80093b4:	a120      	add	r1, pc, #128	; (adr r1, 8009438 <scalbn+0xe8>)
 80093b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ba:	e018      	b.n	80093ee <scalbn+0x9e>
 80093bc:	2900      	cmp	r1, #0
 80093be:	dd08      	ble.n	80093d2 <scalbn+0x82>
 80093c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80093d6:	da19      	bge.n	800940c <scalbn+0xbc>
 80093d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80093dc:	429f      	cmp	r7, r3
 80093de:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80093e2:	dd0a      	ble.n	80093fa <scalbn+0xaa>
 80093e4:	a112      	add	r1, pc, #72	; (adr r1, 8009430 <scalbn+0xe0>)
 80093e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e2      	bne.n	80093b4 <scalbn+0x64>
 80093ee:	a310      	add	r3, pc, #64	; (adr r3, 8009430 <scalbn+0xe0>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f7 f908 	bl	8000608 <__aeabi_dmul>
 80093f8:	e7ca      	b.n	8009390 <scalbn+0x40>
 80093fa:	a10b      	add	r1, pc, #44	; (adr r1, 8009428 <scalbn+0xd8>)
 80093fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ba      	beq.n	800937a <scalbn+0x2a>
 8009404:	a10e      	add	r1, pc, #56	; (adr r1, 8009440 <scalbn+0xf0>)
 8009406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800940a:	e7b6      	b.n	800937a <scalbn+0x2a>
 800940c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009410:	3136      	adds	r1, #54	; 0x36
 8009412:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009416:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800941a:	4620      	mov	r0, r4
 800941c:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <scalbn+0x100>)
 800941e:	4629      	mov	r1, r5
 8009420:	2200      	movs	r2, #0
 8009422:	e7e7      	b.n	80093f4 <scalbn+0xa4>
 8009424:	f3af 8000 	nop.w
 8009428:	c2f8f359 	.word	0xc2f8f359
 800942c:	01a56e1f 	.word	0x01a56e1f
 8009430:	8800759c 	.word	0x8800759c
 8009434:	7e37e43c 	.word	0x7e37e43c
 8009438:	8800759c 	.word	0x8800759c
 800943c:	fe37e43c 	.word	0xfe37e43c
 8009440:	c2f8f359 	.word	0xc2f8f359
 8009444:	81a56e1f 	.word	0x81a56e1f
 8009448:	43500000 	.word	0x43500000
 800944c:	ffff3cb0 	.word	0xffff3cb0
 8009450:	3c900000 	.word	0x3c900000

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
