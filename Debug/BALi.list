
BALi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  08009058  08009058  00019058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c88  08009c88  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009c88  08009c88  00019c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c90  08009c90  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c94  08009c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000204  08009e9c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08009e9c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083d4  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  00028606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0002a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b23  00000000  00000000  0002b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086d6  00000000  00000000  0003cbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000582f1  00000000  00000000  000452b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009d5a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  0009d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800903c 	.word	0x0800903c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800903c 	.word	0x0800903c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <convDecByteToHex>:

	// LIDAR
	bool enableLIDAR = false;

uint8_t *convDecByteToHex(uint8_t byte)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d803      	bhi.n	8000f7c <convDecByteToHex+0x20>
    {
        temp += '0';
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e002      	b.n	8000f82 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3337      	adds	r3, #55	; 0x37
 8000f80:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8000f82:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d803      	bhi.n	8000f9c <convDecByteToHex+0x40>
    {
        temp += '0';
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e002      	b.n	8000fa2 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3337      	adds	r3, #55	; 0x37
 8000fa0:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	7013      	strb	r3, [r2, #0]

    return hex;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <convDecByteToHex+0x5c>)
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000224 	.word	0x20000224

08000fbc <i2cLIS3DH_presCheck>:

int8_t i2cLIS3DH_presCheck(I2C_TypeDef *i2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, DummyReg, &ret);
 8000fc4:	f107 030f 	add.w	r3, r7, #15
 8000fc8:	220f      	movs	r2, #15
 8000fca:	2118      	movs	r1, #24
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f003 f826 	bl	800401e <i2cReadByteFromSlaveReg>
	//spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (DummyReg|spiRead), ret, 2);
	if (dummyVal == ret)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b33      	cmp	r3, #51	; 0x33
 8000fd6:	d101      	bne.n	8000fdc <i2cLIS3DH_presCheck+0x20>
	{return 1;}
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <i2cLIS3DH_presCheck+0x22>
	else
	{return 0;}
 8000fdc:	2300      	movs	r3, #0

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <i2cLIS3DH_init>:


int8_t i2cLIS3DH_init(I2C_TypeDef *i2c, int8_t restart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	#define stepStart -7
	static int8_t step = stepStart ;

	if ((restart != 0) && (step == stepStart))  {step = stepStart+1;}
 8000ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <i2cLIS3DH_init+0x26>
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 8000ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8001002:	f113 0f07 	cmn.w	r3, #7
 8001006:	d102      	bne.n	800100e <i2cLIS3DH_init+0x26>
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 800100a:	22fa      	movs	r2, #250	; 0xfa
 800100c:	701a      	strb	r2, [r3, #0]
	switch (step)
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	3307      	adds	r3, #7
 8001016:	2b06      	cmp	r3, #6
 8001018:	d858      	bhi.n	80010cc <i2cLIS3DH_init+0xe4>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <i2cLIS3DH_init+0x38>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	0800103d 	.word	0x0800103d
 8001024:	0800104d 	.word	0x0800104d
 8001028:	08001065 	.word	0x08001065
 800102c:	08001079 	.word	0x08001079
 8001030:	0800108d 	.word	0x0800108d
 8001034:	080010a1 	.word	0x080010a1
 8001038:	080010b9 	.word	0x080010b9
		case -7:
		{
			//i2cResetDevice(i2c);
			//i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_400);

			i2cSetClkSpd(i2c,  I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 800103c:	2104      	movs	r1, #4
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f002 fe74 	bl	8003d2c <i2cSetClkSpd>
			//i2cEnableDevice(i2c);
			step = -6;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 8001046:	22fa      	movs	r2, #250	; 0xfa
 8001048:	701a      	strb	r2, [r3, #0]
			break;
 800104a:	e042      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		case -6:
		{
			if (1 == i2cLIS3DH_presCheck(i2c))
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffb5 	bl	8000fbc <i2cLIS3DH_presCheck>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d103      	bne.n	8001060 <i2cLIS3DH_init+0x78>
			{
				step = -5;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 800105a:	22fb      	movs	r2, #251	; 0xfb
 800105c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				return 1;		//1 = failure
			}
			break;
 800105e:	e038      	b.n	80010d2 <i2cLIS3DH_init+0xea>
				return 1;		//1 = failure
 8001060:	2301      	movs	r3, #1
 8001062:	e039      	b.n	80010d8 <i2cLIS3DH_init+0xf0>
		}
		case -5:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg5,   0b10000000); // reboot memory content
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	2224      	movs	r2, #36	; 0x24
 8001068:	2118      	movs	r1, #24
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f002 ff2c 	bl	8003ec8 <i2cSendByteToSlaveReg>
			step = -4;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 8001072:	22fc      	movs	r2, #252	; 0xfc
 8001074:	701a      	strb	r2, [r3, #0]
			break;
 8001076:	e02c      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		case -4:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg4,   0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8001078:	238c      	movs	r3, #140	; 0x8c
 800107a:	2223      	movs	r2, #35	; 0x23
 800107c:	2118      	movs	r1, #24
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f002 ff22 	bl	8003ec8 <i2cSendByteToSlaveReg>
			step = -3;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 8001086:	22fd      	movs	r2, #253	; 0xfd
 8001088:	701a      	strb	r2, [r3, #0]
			break;
 800108a:	e022      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		case -3:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg1,  (uint8_t) 0b10010111); //
 800108c:	2397      	movs	r3, #151	; 0x97
 800108e:	2220      	movs	r2, #32
 8001090:	2118      	movs	r1, #24
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 ff18 	bl	8003ec8 <i2cSendByteToSlaveReg>
			step = -2;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 800109a:	22fe      	movs	r2, #254	; 0xfe
 800109c:	701a      	strb	r2, [r3, #0]
			break;
 800109e:	e018      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		case -2:
		{
			uint8_t LIS3DH_Reg4 = 0b10001000;			// BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80010a0:	2388      	movs	r3, #136	; 0x88
 80010a2:	73fb      	strb	r3, [r7, #15]
#ifdef XYZopt
//			LIS3DH_Reg4 |=        0b01000000;			// enable to switch High and Low Byte order. special Hint: High Byte first for a fast read sequence to array of int16
#endif
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg4,  LIS3DH_Reg4); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2223      	movs	r2, #35	; 0x23
 80010a8:	2118      	movs	r1, #24
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 ff0c 	bl	8003ec8 <i2cSendByteToSlaveReg>
			step = -1;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	701a      	strb	r2, [r3, #0]
			break;
 80010b6:	e00c      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		case -1:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, ADCConfReg,(uint8_t) 0b11000000); // ADC Temp 0 0 0 0 0 0
 80010b8:	23c0      	movs	r3, #192	; 0xc0
 80010ba:	221f      	movs	r2, #31
 80010bc:	2118      	movs	r1, #24
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f002 ff02 	bl	8003ec8 <i2cSendByteToSlaveReg>

			step = 0;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
			break;
 80010ca:	e002      	b.n	80010d2 <i2cLIS3DH_init+0xea>
		}
		default:
		{
			step = -7;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 80010ce:	22f9      	movs	r2, #249	; 0xf9
 80010d0:	701a      	strb	r2, [r3, #0]
		}
	}
	return step;
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <i2cLIS3DH_init+0xf8>)
 80010d4:	f993 3000 	ldrsb.w	r3, [r3]

}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000000e 	.word	0x2000000e

080010e4 <i2cLIS3DH_XYZ>:




int16_t i2cLIS3DH_XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
#ifdef XYZopt
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (OUTxyz|I2Crepeat),(uint8_t *) xyz, 6);
 80010ee:	2306      	movs	r3, #6
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	22a8      	movs	r2, #168	; 0xa8
 80010f6:	2118      	movs	r1, #24
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f002 fffc 	bl	80040f6 <i2cBurstRegRead>
	xyz++;
	*xyz = (readBuffer[3]<<8) + readBuffer[2];
	xyz++;
	*xyz = (readBuffer[5]<<8) + readBuffer[4];
#endif
	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <i2cLIS3DH_Temp>:
- read both the ADC output 3 registers (because of BDU enabled): OUT_ADC_3_L(0x0C) and OUT_ADC_3_H(0x0D).
Useful bits: 8, left aligned, hence useful data in OUT_ADC_3_H.
Temperature sensor output change vs temperature: 1digit/degrCelsius
*/
int8_t i2cLIS3DH_Temp(I2C_TypeDef *i2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[2];
	//i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, (ADC3Temp+1), (uint8_t *) &readBuffer[1]);  	// only Hihg byte with data
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (ADC3Temp|I2Crepeat), readBuffer, 2);					// but BDU =1 required for update data to read both, high and low Byte
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2202      	movs	r2, #2
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	228c      	movs	r2, #140	; 0x8c
 800111a:	2118      	movs	r1, #24
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f002 ffea 	bl	80040f6 <i2cBurstRegRead>
	return ((int8_t) readBuffer[1]);					// send a delta Temp Value
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	b25b      	sxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <RFID_LED>:


void RFID_LED(I2C_TypeDef *i2c, bool LEDon)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	if (LEDon == 1)
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <RFID_LED+0x20>
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDon, 3);
 8001142:	2303      	movs	r3, #3
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <RFID_LED+0x34>)
 8001146:	2150      	movs	r1, #80	; 0x50
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f002 ff0b 	bl	8003f64 <i2cBurstWrite>
	}
	else
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
	}
}
 800114e:	e005      	b.n	800115c <RFID_LED+0x2c>
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
 8001150:	2303      	movs	r3, #3
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <RFID_LED+0x38>)
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f002 ff04 	bl	8003f64 <i2cBurstWrite>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000004 	.word	0x20000004

0800116c <RFID_readCard>:

int8_t RFID_readCard(I2C_TypeDef *i2c, char *CardID)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
	uint8_t readBuffer[14];
	uint8_t len, i, j = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	77bb      	strb	r3, [r7, #30]
	int8_t typeCard = -1;
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	777b      	strb	r3, [r7, #29]
	static int8_t RFID_Status;
	char *p_out;

	switch (step)
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <RFID_readCard+0x128>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <RFID_readCard+0x20>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d00a      	beq.n	80011a0 <RFID_readCard+0x34>
 800118a:	e078      	b.n	800127e <RFID_readCard+0x112>
	{
		case 1:
		{
			i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getMifareUID, 2);
 800118c:	2302      	movs	r3, #2
 800118e:	4a42      	ldr	r2, [pc, #264]	; (8001298 <RFID_readCard+0x12c>)
 8001190:	2150      	movs	r1, #80	; 0x50
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f002 fee6 	bl	8003f64 <i2cBurstWrite>
			step = 2;
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <RFID_readCard+0x128>)
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e073      	b.n	8001288 <RFID_readCard+0x11c>
		}
		case 2:
		{
			i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xC);
 80011a0:	f107 0208 	add.w	r2, r7, #8
 80011a4:	230c      	movs	r3, #12
 80011a6:	2150      	movs	r1, #80	; 0x50
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f003 f83c 	bl	8004226 <i2cBurstRead>
			len = readBuffer[0]-2;
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	3b02      	subs	r3, #2
 80011b2:	773b      	strb	r3, [r7, #28]
			step = 1;
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <RFID_readCard+0x128>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
			if (RFID_Status != readBuffer[2])
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <RFID_readCard+0x130>)
 80011bc:	f993 3000 	ldrsb.w	r3, [r3]
 80011c0:	461a      	mov	r2, r3
 80011c2:	7abb      	ldrb	r3, [r7, #10]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d05e      	beq.n	8001286 <RFID_readCard+0x11a>
			{
				typeCard = readBuffer[len];
 80011c8:	7f3b      	ldrb	r3, [r7, #28]
 80011ca:	3320      	adds	r3, #32
 80011cc:	443b      	add	r3, r7
 80011ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011d2:	777b      	strb	r3, [r7, #29]
				j = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77bb      	strb	r3, [r7, #30]
				for (i = 0; i< 8; i++ )
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
 80011dc:	e042      	b.n	8001264 <RFID_readCard+0xf8>
				{
					if (i < len)
 80011de:	7ffa      	ldrb	r2, [r7, #31]
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d22b      	bcs.n	800123e <RFID_readCard+0xd2>
					{
						if (i == len-1) { CardID[j++]='-'; }					// add the Type number after this  -
 80011e6:	7ffa      	ldrb	r2, [r7, #31]
 80011e8:	7f3b      	ldrb	r3, [r7, #28]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d107      	bne.n	8001200 <RFID_readCard+0x94>
 80011f0:	7fbb      	ldrb	r3, [r7, #30]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	77ba      	strb	r2, [r7, #30]
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	222d      	movs	r2, #45	; 0x2d
 80011fe:	701a      	strb	r2, [r3, #0]
						p_out =	(char *) convDecByteToHex(readBuffer[i+3]);
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	3303      	adds	r3, #3
 8001204:	3320      	adds	r3, #32
 8001206:	443b      	add	r3, r7
 8001208:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fea5 	bl	8000f5c <convDecByteToHex>
 8001212:	61b8      	str	r0, [r7, #24]
						CardID[j++]  = (char)*(p_out++);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	61ba      	str	r2, [r7, #24]
 800121a:	7fba      	ldrb	r2, [r7, #30]
 800121c:	1c51      	adds	r1, r2, #1
 800121e:	77b9      	strb	r1, [r7, #30]
 8001220:	4611      	mov	r1, r2
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	440a      	add	r2, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	7013      	strb	r3, [r2, #0]
						CardID[j++] =(char)*p_out;
 800122a:	7fbb      	ldrb	r3, [r7, #30]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	77ba      	strb	r2, [r7, #30]
 8001230:	461a      	mov	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e00f      	b.n	800125e <RFID_readCard+0xf2>
					}
					else
					{CardID[j++]='.'; CardID[j++]='.';}
 800123e:	7fbb      	ldrb	r3, [r7, #30]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	77ba      	strb	r2, [r7, #30]
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	222e      	movs	r2, #46	; 0x2e
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	77ba      	strb	r2, [r7, #30]
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	222e      	movs	r2, #46	; 0x2e
 800125c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i< 8; i++ )
 800125e:	7ffb      	ldrb	r3, [r7, #31]
 8001260:	3301      	adds	r3, #1
 8001262:	77fb      	strb	r3, [r7, #31]
 8001264:	7ffb      	ldrb	r3, [r7, #31]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d9b9      	bls.n	80011de <RFID_readCard+0x72>

				}
				CardID[j]='.';
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	222e      	movs	r2, #46	; 0x2e
 8001272:	701a      	strb	r2, [r3, #0]
				RFID_Status = readBuffer[2];
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	b25a      	sxtb	r2, r3
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <RFID_readCard+0x130>)
 800127a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800127c:	e003      	b.n	8001286 <RFID_readCard+0x11a>
		}
		default:
		{
			step = 1;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <RFID_readCard+0x128>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e000      	b.n	8001288 <RFID_readCard+0x11c>
			break;
 8001286:	bf00      	nop
		}
	}
	return typeCard;
 8001288:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000000f 	.word	0x2000000f
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20000226 	.word	0x20000226

080012a0 <RFID_readFWVersion>:

int8_t RFID_readFWVersion(I2C_TypeDef *i2c, char *strFirmware)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
		uint8_t readBuffer[16];
		uint8_t i, len;
		int8_t status = -1;
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	77bb      	strb	r3, [r7, #30]

		switch (step)
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <RFID_readFWVersion+0xbc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d848      	bhi.n	800134a <RFID_readFWVersion+0xaa>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <RFID_readFWVersion+0x20>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012e1 	.word	0x080012e1
 80012c8:	080012f5 	.word	0x080012f5
 80012cc:	0800133b 	.word	0x0800133b
		{
			case 1:
			{
				RFID_LED(i2c,0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff2c 	bl	8001130 <RFID_LED>
				step = 2;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <RFID_readFWVersion+0xbc>)
 80012da:	2202      	movs	r2, #2
 80012dc:	701a      	strb	r2, [r3, #0]
				break;
 80012de:	e037      	b.n	8001350 <RFID_readFWVersion+0xb0>
			}
			case 2:
			{
				i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getFirmwareVersion, 2);
 80012e0:	2302      	movs	r3, #2
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <RFID_readFWVersion+0xc0>)
 80012e4:	2150      	movs	r1, #80	; 0x50
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f002 fe3c 	bl	8003f64 <i2cBurstWrite>
				step = 3;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <RFID_readFWVersion+0xbc>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	701a      	strb	r2, [r3, #0]
				break;
 80012f2:	e02d      	b.n	8001350 <RFID_readFWVersion+0xb0>
			}
			case 3:
			{
				i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xF);
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	230f      	movs	r3, #15
 80012fa:	2150      	movs	r1, #80	; 0x50
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f002 ff92 	bl	8004226 <i2cBurstRead>
				len = readBuffer[0];
 8001302:	7b3b      	ldrb	r3, [r7, #12]
 8001304:	777b      	strb	r3, [r7, #29]
				status = readBuffer[2];
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	77bb      	strb	r3, [r7, #30]
				step = 4;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <RFID_readFWVersion+0xbc>)
 800130c:	2204      	movs	r2, #4
 800130e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
 8001314:	e00c      	b.n	8001330 <RFID_readFWVersion+0x90>
				{
				 strFirmware[i] = readBuffer[i+3];
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	1cda      	adds	r2, r3, #3
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	440b      	add	r3, r1
 8001320:	3220      	adds	r2, #32
 8001322:	443a      	add	r2, r7
 8001324:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001328:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	3301      	adds	r3, #1
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	7ffa      	ldrb	r2, [r7, #31]
 8001332:	7f7b      	ldrb	r3, [r7, #29]
 8001334:	429a      	cmp	r2, r3
 8001336:	d9ee      	bls.n	8001316 <RFID_readFWVersion+0x76>
				}

				break;
 8001338:	e00a      	b.n	8001350 <RFID_readFWVersion+0xb0>
			}
			case 4:
			{
				RFID_LED(i2c,0);
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fef7 	bl	8001130 <RFID_LED>
				step = 1;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <RFID_readFWVersion+0xbc>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
				break;
 8001348:	e002      	b.n	8001350 <RFID_readFWVersion+0xb0>
			}

			default:
			{
				step = 1;
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <RFID_readFWVersion+0xbc>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
			}
		}
		return status;
 8001350:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000010 	.word	0x20000010
 8001360:	20000008 	.word	0x20000008

08001364 <main>:
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr);



int main(void)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b0a2      	sub	sp, #136	; 0x88
 8001368:	af00      	add	r7, sp, #0
/*  I2C Variables  */

	uint8_t        scanAddr = 0x7F;  //7Bit Adresse
 800136a:	237f      	movs	r3, #127	; 0x7f
 800136c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	I2C_TypeDef   *i2c  = I2C1;
 8001370:	4bc1      	ldr	r3, [pc, #772]	; (8001678 <main+0x314>)
 8001372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	I2C_TypeDef   *i2c2  = I2C2;
 8001376:	4bc1      	ldr	r3, [pc, #772]	; (800167c <main+0x318>)
 8001378:	677b      	str	r3, [r7, #116]	; 0x74

	uint32_t   i2cTaskTime = 50UL;
 800137a:	2332      	movs	r3, #50	; 0x32
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c

/*  End I2C Variables  */

	char strCardID[]   = ".  .  .  .  .  .  .\0";
 800137e:	4bc0      	ldr	r3, [pc, #768]	; (8001680 <main+0x31c>)
 8001380:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001384:	461d      	mov	r5, r3
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800138e:	6020      	str	r0, [r4, #0]
 8001390:	3404      	adds	r4, #4
 8001392:	7021      	strb	r1, [r4, #0]
	char strFirmware[] = ". . .          \0";  // dummyString with NULL
 8001394:	4bbb      	ldr	r3, [pc, #748]	; (8001684 <main+0x320>)
 8001396:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800139a:	461d      	mov	r5, r3
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	7023      	strb	r3, [r4, #0]
	//int testmode = 1;
   	//unsigned int r = 0;

       // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &I2C_Timer /*, weitere Timer */ };
 80013a4:	4bb8      	ldr	r3, [pc, #736]	; (8001688 <main+0x324>)
 80013a6:	607b      	str	r3, [r7, #4]
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 80013a8:	2301      	movs	r3, #1
 80013aa:	673b      	str	r3, [r7, #112]	; 0x70


    BalaHWsetup();
 80013ac:	f000 ffbe 	bl	800232c <BalaHWsetup>

    /* initialize the rotary push button module */
    initRotaryPushButton();
 80013b0:	f000 ffe2 	bl	8002378 <initRotaryPushButton>


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 80013b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b8:	f003 fbce 	bl	8004b58 <systickInit>

    systickSetMillis(&I2C_Timer, i2cTaskTime);
 80013bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80013be:	48b2      	ldr	r0, [pc, #712]	; (8001688 <main+0x324>)
 80013c0:	f003 fbbc 	bl	8004b3c <systickSetMillis>
    //lcd7735_initR(0);
    LED_red_on;
 80013c4:	210f      	movs	r1, #15
 80013c6:	48b1      	ldr	r0, [pc, #708]	; (800168c <main+0x328>)
 80013c8:	f002 faa8 	bl	800391c <gpioResetPin>

    //lcd7735_setup();

    tftSetup();
 80013cc:	f001 f8b6 	bl	800253c <tftSetup>
    //  tftInitR(INITR_REDTAB);

    tftSetRotation(LANDSCAPE);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f001 fe41 	bl	8003058 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 80013d6:	48ae      	ldr	r0, [pc, #696]	; (8001690 <main+0x32c>)
 80013d8:	f001 fb34 	bl	8002a44 <tftSetFont>
    tftFillScreen(tft_BLACK);
 80013dc:	2000      	movs	r0, #0
 80013de:	f001 fe21 	bl	8003024 <tftFillScreen>

    LED_red_off;
 80013e2:	210f      	movs	r1, #15
 80013e4:	48a9      	ldr	r0, [pc, #676]	; (800168c <main+0x328>)
 80013e6:	f002 fa6e 	bl	80038c6 <gpioSetPin>

    tftPrint((char *)"I2C Scanner running \0",0,0,0);
 80013ea:	2300      	movs	r3, #0
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	48a8      	ldr	r0, [pc, #672]	; (8001694 <main+0x330>)
 80013f2:	f001 fd7d 	bl	8002ef0 <tftPrint>
    tftPrint((char *)"Select I2C Connector \0",0,14,0);
 80013f6:	2300      	movs	r3, #0
 80013f8:	220e      	movs	r2, #14
 80013fa:	2100      	movs	r1, #0
 80013fc:	48a6      	ldr	r0, [pc, #664]	; (8001698 <main+0x334>)
 80013fe:	f001 fd77 	bl	8002ef0 <tftPrint>



    while (1)
    {
	   if (true == timerTrigger)
 8001402:	4ba6      	ldr	r3, [pc, #664]	; (800169c <main+0x338>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <main+0xb4>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 800140a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140c:	b2da      	uxtb	r2, r3
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fbf8 	bl	8004c08 <systickUpdateTimerList>
	   }

	   if (isSystickExpired(I2C_Timer))
 8001418:	4b9b      	ldr	r3, [pc, #620]	; (8001688 <main+0x324>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 fbbd 	bl	8004b9c <isSystickExpired>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 821e 	beq.w	8001866 <main+0x502>
	   {
		   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800142a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800142c:	4896      	ldr	r0, [pc, #600]	; (8001688 <main+0x324>)
 800142e:	f003 fba7 	bl	8004b80 <systickSetTicktime>
		   LED_green_off;
 8001432:	210e      	movs	r1, #14
 8001434:	4895      	ldr	r0, [pc, #596]	; (800168c <main+0x328>)
 8001436:	f002 fa46 	bl	80038c6 <gpioSetPin>


		   switch (testmode)
 800143a:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <main+0x33c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b06      	cmp	r3, #6
 8001440:	f200 820d 	bhi.w	800185e <main+0x4fa>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <main+0xe8>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	08001469 	.word	0x08001469
 8001450:	08001481 	.word	0x08001481
 8001454:	080015af 	.word	0x080015af
 8001458:	080015f3 	.word	0x080015f3
 800145c:	08001619 	.word	0x08001619
 8001460:	080016d9 	.word	0x080016d9
 8001464:	08001803 	.word	0x08001803
		   {
		   	   case 0:  //I2C Scan
		   	   {
		   		   //lcd7735_setForeground(ST7735_YELLOW);
		   		   i2cSetClkSpd(i2c,  I2C_CLOCK_100);
 8001468:	2101      	movs	r1, #1
 800146a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800146e:	f002 fc5d 	bl	8003d2c <i2cSetClkSpd>
		   		   i2cSetClkSpd(i2c2,  I2C_CLOCK_400);
 8001472:	2103      	movs	r1, #3
 8001474:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001476:	f002 fc59 	bl	8003d2c <i2cSetClkSpd>
		   		   //tftPrint((char *)".  .  .  .  . \0",66,14,0);
		   		   testmode  = 1;
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <main+0x33c>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
		   	   }
		   	   case 1:  //I2C Scan
		   	   {
		   		   LED_red_on;
 8001480:	210f      	movs	r1, #15
 8001482:	4882      	ldr	r0, [pc, #520]	; (800168c <main+0x328>)
 8001484:	f002 fa4a 	bl	800391c <gpioResetPin>
		   		   if ( I2C_SCAN(i2c, scanAddr) != 0)
 8001488:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800148c:	4619      	mov	r1, r3
 800148e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001492:	f000 fa01 	bl	8001898 <I2C_SCAN>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d047      	beq.n	800152c <main+0x1c8>
				   {
					   LED_red_off;
 800149c:	210f      	movs	r1, #15
 800149e:	487b      	ldr	r0, [pc, #492]	; (800168c <main+0x328>)
 80014a0:	f002 fa11 	bl	80038c6 <gpioSetPin>
					   switch (scanAddr)
 80014a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014a8:	2b50      	cmp	r3, #80	; 0x50
 80014aa:	d006      	beq.n	80014ba <main+0x156>
 80014ac:	2b50      	cmp	r3, #80	; 0x50
 80014ae:	dc3e      	bgt.n	800152e <main+0x1ca>
 80014b0:	2b18      	cmp	r3, #24
 80014b2:	d015      	beq.n	80014e0 <main+0x17c>
 80014b4:	2b29      	cmp	r3, #41	; 0x29
 80014b6:	d00f      	beq.n	80014d8 <main+0x174>
 80014b8:	e039      	b.n	800152e <main+0x1ca>
					   {
						   case i2cAddr_RFID:
						   {
							   enableRFID = true;
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <main+0x340>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"RFID connected \0",0,28,0);
 80014c0:	2300      	movs	r3, #0
 80014c2:	221c      	movs	r2, #28
 80014c4:	2100      	movs	r1, #0
 80014c6:	4878      	ldr	r0, [pc, #480]	; (80016a8 <main+0x344>)
 80014c8:	f001 fd12 	bl	8002ef0 <tftPrint>
							   RFID_LED(i2c,true);
 80014cc:	2101      	movs	r1, #1
 80014ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80014d2:	f7ff fe2d 	bl	8001130 <RFID_LED>
							   break;
 80014d6:	e02a      	b.n	800152e <main+0x1ca>
						   }
						   case i2cAddr_LIDAR:
						   {
							   enableLIDAR = true;
 80014d8:	4b74      	ldr	r3, [pc, #464]	; (80016ac <main+0x348>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
							   //lcd7735_print((char *)"TOF/LIADR connected \0",0,28,0);
							   break;
 80014de:	e026      	b.n	800152e <main+0x1ca>
						   }
						   case i2cAddr_LIS3DH:
						   {
							   enableLIS3DH = true;
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <main+0x34c>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"LIS3DH connected \0",0,28,0);
 80014e6:	2300      	movs	r3, #0
 80014e8:	221c      	movs	r2, #28
 80014ea:	2100      	movs	r1, #0
 80014ec:	4871      	ldr	r0, [pc, #452]	; (80016b4 <main+0x350>)
 80014ee:	f001 fcff 	bl	8002ef0 <tftPrint>

							   tftPrint((char *)"Temp:\0",0,40,0);
 80014f2:	2300      	movs	r3, #0
 80014f4:	2228      	movs	r2, #40	; 0x28
 80014f6:	2100      	movs	r1, #0
 80014f8:	486f      	ldr	r0, [pc, #444]	; (80016b8 <main+0x354>)
 80014fa:	f001 fcf9 	bl	8002ef0 <tftPrint>
							   tftPrint((char *)"X:\0",0,50,0);
 80014fe:	2300      	movs	r3, #0
 8001500:	2232      	movs	r2, #50	; 0x32
 8001502:	2100      	movs	r1, #0
 8001504:	486d      	ldr	r0, [pc, #436]	; (80016bc <main+0x358>)
 8001506:	f001 fcf3 	bl	8002ef0 <tftPrint>
							   tftPrint((char *)"Y:\0",0,60,0);
 800150a:	2300      	movs	r3, #0
 800150c:	223c      	movs	r2, #60	; 0x3c
 800150e:	2100      	movs	r1, #0
 8001510:	486b      	ldr	r0, [pc, #428]	; (80016c0 <main+0x35c>)
 8001512:	f001 fced 	bl	8002ef0 <tftPrint>
							   tftPrint((char *)"Z:\0",0,70,0);
 8001516:	2300      	movs	r3, #0
 8001518:	2246      	movs	r2, #70	; 0x46
 800151a:	2100      	movs	r1, #0
 800151c:	4869      	ldr	r0, [pc, #420]	; (80016c4 <main+0x360>)
 800151e:	f001 fce7 	bl	8002ef0 <tftPrint>
							   LED_blue_on;
 8001522:	210d      	movs	r1, #13
 8001524:	4859      	ldr	r0, [pc, #356]	; (800168c <main+0x328>)
 8001526:	f002 f9f9 	bl	800391c <gpioResetPin>
							   break;
 800152a:	e000      	b.n	800152e <main+0x1ca>
						   }
					   }
				   }
 800152c:	bf00      	nop

				   if ((scanAddr == 0) && (enableRFID))
 800152e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10b      	bne.n	800154e <main+0x1ea>
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <main+0x340>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <main+0x1ea>
				   {
					   scanAddr = 0x7F;
 800153e:	237f      	movs	r3, #127	; 0x7f
 8001540:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   i2cTaskTime = 200UL;
 8001544:	23c8      	movs	r3, #200	; 0xc8
 8001546:	67fb      	str	r3, [r7, #124]	; 0x7c
					   		// SL018 only works with 100kHz
					   testmode = 2;
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <main+0x33c>)
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
				   }
				   if ((scanAddr == 0) && (enableLIS3DH))
 800154e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10b      	bne.n	800156e <main+0x20a>
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <main+0x34c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <main+0x20a>
				   {
					   scanAddr = 0x7F;
 800155e:	237f      	movs	r3, #127	; 0x7f
 8001560:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   testmode = 4;
 8001564:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <main+0x33c>)
 8001566:	2204      	movs	r2, #4
 8001568:	701a      	strb	r2, [r3, #0]
					   i2cTaskTime = 200;
 800156a:	23c8      	movs	r3, #200	; 0xc8
 800156c:	67fb      	str	r3, [r7, #124]	; 0x7c

				   }
				   if ((scanAddr == 0))
 800156e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001572:	2b00      	cmp	r3, #0
 8001574:	d115      	bne.n	80015a2 <main+0x23e>
				   {
					   scanAddr = 0x7F;
 8001576:	237f      	movs	r3, #127	; 0x7f
 8001578:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   if (i2c == I2C1)
 800157c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001580:	4a3d      	ldr	r2, [pc, #244]	; (8001678 <main+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <main+0x22a>
					   {
						   i2c = I2C2;
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <main+0x318>)
 8001588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800158c:	e005      	b.n	800159a <main+0x236>
					   }
					   else
					   {
						   i2c = I2C1;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <main+0x314>)
 8001590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						   tftFillScreen(tft_BLACK);
 8001594:	2000      	movs	r0, #0
 8001596:	f001 fd45 	bl	8003024 <tftFillScreen>
					   }
				       testmode = 0;
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <main+0x33c>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
				   }
				   else
				   {
					   scanAddr -=1;
				   }
				   break;
 80015a0:	e16c      	b.n	800187c <main+0x518>
					   scanAddr -=1;
 80015a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				   break;
 80015ac:	e166      	b.n	800187c <main+0x518>
				}
		   	   	case 2:  // read RFID Firmware
				{
					if (RFID_readFWVersion(i2c, (char *)strFirmware) >= 0)
 80015ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015b2:	4619      	mov	r1, r3
 80015b4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015b8:	f7ff fe72 	bl	80012a0 <RFID_readFWVersion>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f2c0 8153 	blt.w	800186a <main+0x506>
					{
						tftPrint((char *)"FW: \0",0,48,0);
 80015c4:	2300      	movs	r3, #0
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	483f      	ldr	r0, [pc, #252]	; (80016c8 <main+0x364>)
 80015cc:	f001 fc90 	bl	8002ef0 <tftPrint>
						tftPrint((char *)strFirmware,24,48,0);
 80015d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015d4:	2300      	movs	r3, #0
 80015d6:	2230      	movs	r2, #48	; 0x30
 80015d8:	2118      	movs	r1, #24
 80015da:	f001 fc89 	bl	8002ef0 <tftPrint>
						testmode = 3;
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <main+0x33c>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	701a      	strb	r2, [r3, #0]
						tftPrint((char *)"ID:\0",0,70,0);
 80015e4:	2300      	movs	r3, #0
 80015e6:	2246      	movs	r2, #70	; 0x46
 80015e8:	2100      	movs	r1, #0
 80015ea:	4838      	ldr	r0, [pc, #224]	; (80016cc <main+0x368>)
 80015ec:	f001 fc80 	bl	8002ef0 <tftPrint>
					else
					{
						;
					}
				}
				break;
 80015f0:	e13b      	b.n	800186a <main+0x506>
		   	   	case 3:  // read RFID ID
		   		{
		   			if (RFID_readCard(i2c, strCardID)> 0)
 80015f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f6:	4619      	mov	r1, r3
 80015f8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015fc:	f7ff fdb6 	bl	800116c <RFID_readCard>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	f340 8133 	ble.w	800186e <main+0x50a>
		   			{
		   				tftPrint((char *)strCardID,24,70,0);
 8001608:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800160c:	2300      	movs	r3, #0
 800160e:	2246      	movs	r2, #70	; 0x46
 8001610:	2118      	movs	r1, #24
 8001612:	f001 fc6d 	bl	8002ef0 <tftPrint>
		   			}
		   		}
		   		break;
 8001616:	e12a      	b.n	800186e <main+0x50a>

// LIS3DH function
		   	 	case 4:  // LIS3DH Init		   			   		{
		   	 	{
		   			LED_red_off;
 8001618:	210f      	movs	r1, #15
 800161a:	481c      	ldr	r0, [pc, #112]	; (800168c <main+0x328>)
 800161c:	f002 f953 	bl	80038c6 <gpioSetPin>
		   	 		int8_t ret = i2cLIS3DH_init(i2c, 0);
 8001620:	2100      	movs	r1, #0
 8001622:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001626:	f7ff fcdf 	bl	8000fe8 <i2cLIS3DH_init>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
					if (ret > 0)										// no LIS3DH Sensor present
 8001630:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <main+0x2ec>
					{
						tftPrint("LIS3DH not Present ",0,0,0);
 8001638:	2300      	movs	r3, #0
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <main+0x36c>)
 8001640:	f001 fc56 	bl	8002ef0 <tftPrint>
						i2cTaskTime = 500;
 8001644:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001648:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 1;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <main+0x33c>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
					}
					if (ret == 0)										// LIS3DH init-procedure finished
 8001650:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 810c 	bne.w	8001872 <main+0x50e>
					{
						tftPrint("(C)23Fl I2C LIS3DH ",0,0,0);
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	481c      	ldr	r0, [pc, #112]	; (80016d4 <main+0x370>)
 8001662:	f001 fc45 	bl	8002ef0 <tftPrint>
						i2cTaskTime = 70;									// Tasktime for display 70ms
 8001666:	2346      	movs	r3, #70	; 0x46
 8001668:	67fb      	str	r3, [r7, #124]	; 0x7c
						testmode = 5;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <main+0x33c>)
 800166c:	2205      	movs	r2, #5
 800166e:	701a      	strb	r2, [r3, #0]
						timeTMode5 = 10;							// count of cycles in Mode5
 8001670:	230a      	movs	r3, #10
 8001672:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
					}
				}
				break;
 8001676:	e0fc      	b.n	8001872 <main+0x50e>
 8001678:	40005400 	.word	0x40005400
 800167c:	40005800 	.word	0x40005800
 8001680:	08009124 	.word	0x08009124
 8001684:	0800913c 	.word	0x0800913c
 8001688:	20000228 	.word	0x20000228
 800168c:	40020400 	.word	0x40020400
 8001690:	08009174 	.word	0x08009174
 8001694:	08009058 	.word	0x08009058
 8001698:	08009070 	.word	0x08009070
 800169c:	20000227 	.word	0x20000227
 80016a0:	20000011 	.word	0x20000011
 80016a4:	20000220 	.word	0x20000220
 80016a8:	08009088 	.word	0x08009088
 80016ac:	20000222 	.word	0x20000222
 80016b0:	20000221 	.word	0x20000221
 80016b4:	0800909c 	.word	0x0800909c
 80016b8:	080090b0 	.word	0x080090b0
 80016bc:	080090b8 	.word	0x080090b8
 80016c0:	080090bc 	.word	0x080090bc
 80016c4:	080090c0 	.word	0x080090c0
 80016c8:	080090c4 	.word	0x080090c4
 80016cc:	080090cc 	.word	0x080090cc
 80016d0:	080090d4 	.word	0x080090d4
 80016d4:	080090e8 	.word	0x080090e8
		   		case 5:  // read LIS3DH Data
		   		{
		   			LED_blue_on;
 80016d8:	210d      	movs	r1, #13
 80016da:	4869      	ldr	r0, [pc, #420]	; (8001880 <main+0x51c>)
 80016dc:	f002 f91e 	bl	800391c <gpioResetPin>

		   			Temp = i2cLIS3DH_Temp(i2c);
 80016e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80016e4:	f7ff fd10 	bl	8001108 <i2cLIS3DH_Temp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		   			sprintf(strT, "%+3i", Temp);
 80016ee:	f997 206f 	ldrsb.w	r2, [r7, #111]	; 0x6f
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4963      	ldr	r1, [pc, #396]	; (8001884 <main+0x520>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 f803 	bl	8005704 <siprintf>
		   			tftPrint((char *)strT,40,40,0);
 80016fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001702:	2300      	movs	r3, #0
 8001704:	2228      	movs	r2, #40	; 0x28
 8001706:	2128      	movs	r1, #40	; 0x28
 8001708:	f001 fbf2 	bl	8002ef0 <tftPrint>

		   			i2cLIS3DH_XYZ(i2c,(int16_t *) XYZraw);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001716:	f7ff fce5 	bl	80010e4 <i2cLIS3DH_XYZ>
  					XYZ[0] = (float) XYZraw[0]/0x3FFF;  //skalierung 1mg/digit at +-2g
 800171a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001888 <main+0x524>
 800172a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172e:	edc7 7a04 	vstr	s15, [r7, #16]
		   			XYZ[1] = (float) XYZraw[1]/0x3FFF;
 8001732:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173e:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001888 <main+0x524>
 8001742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001746:	edc7 7a05 	vstr	s15, [r7, #20]
		   			XYZ[2] = (float) XYZraw[2]/0x3FFF;
 800174a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001888 <main+0x524>
 800175a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175e:	edc7 7a06 	vstr	s15, [r7, #24]
		   			sprintf(strX, "%+6.3f", XYZ[0]);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001772:	4946      	ldr	r1, [pc, #280]	; (800188c <main+0x528>)
 8001774:	f003 ffc6 	bl	8005704 <siprintf>
		   			tftPrint((char *)strX,20,50,0);
 8001778:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800177c:	2300      	movs	r3, #0
 800177e:	2232      	movs	r2, #50	; 0x32
 8001780:	2114      	movs	r1, #20
 8001782:	f001 fbb5 	bl	8002ef0 <tftPrint>
		   			sprintf(strY, "%+6.3f", XYZ[1]);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fee5 	bl	8000558 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001796:	493d      	ldr	r1, [pc, #244]	; (800188c <main+0x528>)
 8001798:	f003 ffb4 	bl	8005704 <siprintf>
		   			tftPrint((char *)strY,20,60,0);
 800179c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80017a0:	2300      	movs	r3, #0
 80017a2:	223c      	movs	r2, #60	; 0x3c
 80017a4:	2114      	movs	r1, #20
 80017a6:	f001 fba3 	bl	8002ef0 <tftPrint>
		   			sprintf(strZ, "%+6.3f", XYZ[2]);
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed3 	bl	8000558 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017ba:	4934      	ldr	r1, [pc, #208]	; (800188c <main+0x528>)
 80017bc:	f003 ffa2 	bl	8005704 <siprintf>
		   			tftPrint((char *)strZ,20,70,0);
 80017c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017c4:	2300      	movs	r3, #0
 80017c6:	2246      	movs	r2, #70	; 0x46
 80017c8:	2114      	movs	r1, #20
 80017ca:	f001 fb91 	bl	8002ef0 <tftPrint>
					if ((timeTMode5--) > 0)
 80017ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	f8a7 207a 	strh.w	r2, [r7, #122]	; 0x7a
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d04c      	beq.n	8001876 <main+0x512>
					{
						testmode = 6;
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <main+0x52c>)
 80017de:	2206      	movs	r2, #6
 80017e0:	701a      	strb	r2, [r3, #0]
						tftFillScreen(tft_BLACK);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f001 fc1e 	bl	8003024 <tftFillScreen>
						tftPrint("T:    LIS3DH (C)23Fl",0,0,0);
 80017e8:	2300      	movs	r3, #0
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	4829      	ldr	r0, [pc, #164]	; (8001894 <main+0x530>)
 80017f0:	f001 fb7e 	bl	8002ef0 <tftPrint>
						i2cTaskTime = 20;
 80017f4:	2314      	movs	r3, #20
 80017f6:	67fb      	str	r3, [r7, #124]	; 0x7c
						LED_blue_off;
 80017f8:	210d      	movs	r1, #13
 80017fa:	4821      	ldr	r0, [pc, #132]	; (8001880 <main+0x51c>)
 80017fc:	f002 f863 	bl	80038c6 <gpioSetPin>

					}
				    break;
 8001800:	e039      	b.n	8001876 <main+0x512>
				}
		   		case 6:  // Scope display the LIS3DH Data
				{
					i2cLIS3DH_XYZ(i2c, XYZraw);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800180c:	f7ff fc6a 	bl	80010e4 <i2cLIS3DH_XYZ>
					XYZ2AlphaBeta(XYZraw, AlphaBeta);
 8001810:	f107 0208 	add.w	r2, r7, #8
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f972 	bl	8001b04 <XYZ2AlphaBeta>
					if (AlBeScreen(AlphaBeta) == 0)
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fa21 	bl	8001c6c <AlBeScreen>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d124      	bne.n	800187a <main+0x516>
					{
						Temp = i2cLIS3DH_Temp(i2c);
 8001830:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001834:	f7ff fc68 	bl	8001108 <i2cLIS3DH_Temp>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						sprintf(strT, "%+3i", Temp);
 800183e:	f997 206f 	ldrsb.w	r2, [r7, #111]	; 0x6f
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	490f      	ldr	r1, [pc, #60]	; (8001884 <main+0x520>)
 8001848:	4618      	mov	r0, r3
 800184a:	f003 ff5b 	bl	8005704 <siprintf>
						tftPrint((char *)strT,12,0,0);
 800184e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	210c      	movs	r1, #12
 8001858:	f001 fb4a 	bl	8002ef0 <tftPrint>
					}
					//testmode = 2;
					break;
 800185c:	e00d      	b.n	800187a <main+0x516>
				}

//end LIS3DH function
		   	   default:
				{
					testmode = 0;
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <main+0x52c>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e5cd      	b.n	8001402 <main+0x9e>
				}
		   }  //end switch (testmode)
	   } // end if systickexp
 8001866:	bf00      	nop
 8001868:	e5cb      	b.n	8001402 <main+0x9e>
				break;
 800186a:	bf00      	nop
 800186c:	e5c9      	b.n	8001402 <main+0x9e>
		   		break;
 800186e:	bf00      	nop
 8001870:	e5c7      	b.n	8001402 <main+0x9e>
				break;
 8001872:	bf00      	nop
 8001874:	e5c5      	b.n	8001402 <main+0x9e>
				    break;
 8001876:	bf00      	nop
 8001878:	e5c3      	b.n	8001402 <main+0x9e>
					break;
 800187a:	bf00      	nop
	   if (true == timerTrigger)
 800187c:	e5c1      	b.n	8001402 <main+0x9e>
 800187e:	bf00      	nop
 8001880:	40020400 	.word	0x40020400
 8001884:	080090fc 	.word	0x080090fc
 8001888:	467ffc00 	.word	0x467ffc00
 800188c:	08009104 	.word	0x08009104
 8001890:	20000011 	.word	0x20000011
 8001894:	0800910c 	.word	0x0800910c

08001898 <I2C_SCAN>:
 */



uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <I2C_SCAN+0xd0>)
 80018a6:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 28
	uint8_t foundAddr = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a2f      	ldr	r2, [pc, #188]	; (800196c <I2C_SCAN+0xd4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <I2C_SCAN+0x22>
    {
	   port = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	e001      	b.n	80018be <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <I2C_SCAN+0xd8>)
 80018c6:	221c      	movs	r2, #28
 80018c8:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <I2C_SCAN+0xd8>)
 80018cc:	221c      	movs	r2, #28
 80018ce:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f002 fd20 	bl	800431a <i2cFindSlaveAddr>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	4a23      	ldr	r2, [pc, #140]	; (8001970 <I2C_SCAN+0xd8>)
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d110      	bne.n	800190c <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <I2C_SCAN+0xdc>)
 80018ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <I2C_SCAN+0xd8>)
 80018f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018fa:	2300      	movs	r3, #0
 80018fc:	6938      	ldr	r0, [r7, #16]
 80018fe:	f001 faf7 	bl	8002ef0 <tftPrint>
		yPos[port] = 66;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <I2C_SCAN+0xd8>)
 8001906:	2142      	movs	r1, #66	; 0x42
 8001908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fb24 	bl	8000f5c <convDecByteToHex>
 8001914:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01f      	beq.n	800195c <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <I2C_SCAN+0xdc>)
 8001920:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <I2C_SCAN+0xd8>)
 8001928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800192c:	2300      	movs	r3, #0
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f001 fade 	bl	8002ef0 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <I2C_SCAN+0xd8>)
 8001938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	320e      	adds	r2, #14
 8001940:	490b      	ldr	r1, [pc, #44]	; (8001970 <I2C_SCAN+0xd8>)
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <I2C_SCAN+0xd8>)
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	dd04      	ble.n	800195c <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <I2C_SCAN+0xd8>)
 8001956:	211c      	movs	r1, #28
 8001958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 800195c:	7bfb      	ldrb	r3, [r7, #15]

}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08009150 	.word	0x08009150
 800196c:	40005400 	.word	0x40005400
 8001970:	20000014 	.word	0x20000014
 8001974:	2000001c 	.word	0x2000001c

08001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001992:	f003 fa19 	bl	8004dc8 <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0x12>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
  }

  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
  }
  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f003 f97e 	bl	8004dc8 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20018000 	.word	0x20018000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	2000022c 	.word	0x2000022c
 8001b00:	200002b8 	.word	0x200002b8

08001b04 <XYZ2AlphaBeta>:
#include "ST7735.h"
#include "xyzScope.h"


void XYZ2AlphaBeta(int16_t *XYZ_raw, float *AlphaBeta)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
		float X = (float) XYZ_raw[0]/160;  //Skalierung 10mg/digit at +-2g
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001c64 <XYZ2AlphaBeta+0x160>
 8001b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b24:	edc7 7a05 	vstr	s15, [r7, #20]
		float Y = (float) XYZ_raw[1]/160;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001c64 <XYZ2AlphaBeta+0x160>
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	edc7 7a04 	vstr	s15, [r7, #16]
		float Z = (float) XYZ_raw[2]/160;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c64 <XYZ2AlphaBeta+0x160>
 8001b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5c:	edc7 7a03 	vstr	s15, [r7, #12]

		AlphaBeta[0] = atan(X/Z);
 8001b60:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b6c:	ee16 0a90 	vmov	r0, s13
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f006 f83c 	bl	8007bf8 <atan>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff f816 	bl	8000bb8 <__aeabi_d2f>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	601a      	str	r2, [r3, #0]
		if (Z<0)
 8001b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	d51b      	bpl.n	8001bd8 <XYZ2AlphaBeta+0xd4>
		{
			if (X<0)  {AlphaBeta[0] -=_pi;}
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	d50a      	bpl.n	8001bc4 <XYZ2AlphaBeta+0xc0>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c68 <XYZ2AlphaBeta+0x164>
 8001bb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
 8001bc2:	e009      	b.n	8001bd8 <XYZ2AlphaBeta+0xd4>
			else {AlphaBeta[0] +=_pi;}
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c68 <XYZ2AlphaBeta+0x164>
 8001bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
		}

		AlphaBeta[1] = atan(Y/Z);
 8001bd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001be4:	ee16 0a90 	vmov	r0, s13
 8001be8:	f7fe fcb6 	bl	8000558 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f006 f800 	bl	8007bf8 <atan>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	1d0c      	adds	r4, r1, #4
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffd8 	bl	8000bb8 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	6023      	str	r3, [r4, #0]
		if (Z<0)
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d400      	bmi.n	8001c1c <XYZ2AlphaBeta+0x118>
		{
			if (Y<0)  {AlphaBeta[1] -=_pi;}
			else {AlphaBeta[1] +=_pi;}
		}
}
 8001c1a:	e01f      	b.n	8001c5c <XYZ2AlphaBeta+0x158>
			if (Y<0)  {AlphaBeta[1] -=_pi;}
 8001c1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d50c      	bpl.n	8001c44 <XYZ2AlphaBeta+0x140>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3304      	adds	r3, #4
 8001c36:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001c68 <XYZ2AlphaBeta+0x164>
 8001c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
}
 8001c42:	e00b      	b.n	8001c5c <XYZ2AlphaBeta+0x158>
			else {AlphaBeta[1] +=_pi;}
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c68 <XYZ2AlphaBeta+0x164>
 8001c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c58:	edc3 7a00 	vstr	s15, [r3]
}
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	43200000 	.word	0x43200000
 8001c68:	40490625 	.word	0x40490625

08001c6c <AlBeScreen>:

uint16_t AlBeScreen(float *AlphaBeta)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
#define bDots 12

	//const float _pi=3.141;
	const int16_t a_midxyl[3] = {30,40,14};			// alpha circle xpos, ypos ,length
	const int16_t b_midxyl[3] = {100,40,38};		// beta circle xpos, ypos ,length
	const uint16_t aColor = tft_YELLOW;
 8001c74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c78:	83fb      	strh	r3, [r7, #30]
	const uint16_t bColor = tft_MAGENTA;
 8001c7a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001c7e:	83bb      	strh	r3, [r7, #28]
	static int16_t j, XYa[2][aDots], XYb[2][bDots];								// aDots Wertepaare für Winkeldarstellung alpha
	float xgrad, ygrad;

	// Variables for Oszi Function
	const int16_t oszi[3] = {92,28,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
	const uint16_t osziColor = tft_GREY;
 8001c80:	f641 1323 	movw	r3, #6435	; 0x1923
 8001c84:	837b      	strh	r3, [r7, #26]

	static int16_t timepos = 0;


	xgrad = cos(AlphaBeta[0])*a_midxyl[2];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc64 	bl	8000558 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f006 f93e 	bl	8007f18 <cos>
 8001c9c:	4604      	mov	r4, r0
 8001c9e:	460d      	mov	r5, r1
 8001ca0:	4b8d      	ldr	r3, [pc, #564]	; (8001ed8 <AlBeScreen+0x26c>)
 8001ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc44 	bl	8000534 <__aeabi_i2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe fca8 	bl	8000608 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff7a 	bl	8000bb8 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[0])*a_midxyl[2];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f006 f9a9 	bl	8008030 <sin>
 8001cde:	4604      	mov	r4, r0
 8001ce0:	460d      	mov	r5, r1
 8001ce2:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <AlBeScreen+0x26c>)
 8001ce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fc23 	bl	8000534 <__aeabi_i2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]
	for (j = 0; j<aDots; j++ )
 8001d0a:	4b74      	ldr	r3, [pc, #464]	; (8001edc <AlBeScreen+0x270>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	e094      	b.n	8001e3c <AlBeScreen+0x1d0>
	{
		tftDrawPixel(XYa[0][j],XYa[1][j],tft_BLACK);
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <AlBeScreen+0x270>)
 8001d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b71      	ldr	r3, [pc, #452]	; (8001ee0 <AlBeScreen+0x274>)
 8001d1c:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001d20:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <AlBeScreen+0x270>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <AlBeScreen+0x274>)
 8001d28:	3306      	adds	r3, #6
 8001d2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	f000 fd69 	bl	8002808 <tftDrawPixel>
		XYa[0][j] = lround(a_midxyl[0] + xgrad*(2*j - (float)aDots+1)/(aDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <AlBeScreen+0x26c>)
 8001d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	4b65      	ldr	r3, [pc, #404]	; (8001edc <AlBeScreen+0x270>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d60:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001d64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001d70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	ee17 0a90 	vmov	r0, s15
 8001d7c:	f7fe fbec 	bl	8000558 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f006 f90f 	bl	8007faa <lround>
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <AlBeScreen+0x270>)
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	461a      	mov	r2, r3
 8001d96:	b209      	sxth	r1, r1
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <AlBeScreen+0x274>)
 8001d9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYa[1][j] = lround(a_midxyl[1] + ygrad*(2*j - (float)aDots+1)/(aDots-1));
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <AlBeScreen+0x26c>)
 8001da0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <AlBeScreen+0x270>)
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dc8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd4:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001dd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	ee17 0a90 	vmov	r0, s15
 8001de4:	f7fe fbb8 	bl	8000558 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f006 f8db 	bl	8007faa <lround>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <AlBeScreen+0x270>)
 8001df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfc:	b211      	sxth	r1, r2
 8001dfe:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <AlBeScreen+0x274>)
 8001e00:	3306      	adds	r3, #6
 8001e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYa[0][j],XYa[1][j],aColor);
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <AlBeScreen+0x270>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <AlBeScreen+0x274>)
 8001e10:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <AlBeScreen+0x270>)
 8001e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <AlBeScreen+0x274>)
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e22:	8bfa      	ldrh	r2, [r7, #30]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f000 fcef 	bl	8002808 <tftDrawPixel>
	for (j = 0; j<aDots; j++ )
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <AlBeScreen+0x270>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <AlBeScreen+0x270>)
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <AlBeScreen+0x270>)
 8001e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	f77f af65 	ble.w	8001d12 <AlBeScreen+0xa6>
	}
	//lcd7735_drawPixel(a_midxyl[0],a_midxyl[1],ST7735_RED);

	xgrad = cos(AlphaBeta[1])*b_midxyl[2];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb82 	bl	8000558 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f006 f85c 	bl	8007f18 <cos>
 8001e60:	4604      	mov	r4, r0
 8001e62:	460d      	mov	r5, r1
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <AlBeScreen+0x278>)
 8001e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb62 	bl	8000534 <__aeabi_i2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fbc6 	bl	8000608 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fe98 	bl	8000bb8 <__aeabi_d2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[1])*b_midxyl[2];
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb60 	bl	8000558 <__aeabi_f2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f006 f8c6 	bl	8008030 <sin>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <AlBeScreen+0x278>)
 8001eaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb40 	bl	8000534 <__aeabi_i2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fba4 	bl	8000608 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fe76 	bl	8000bb8 <__aeabi_d2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	613b      	str	r3, [r7, #16]
	for (j = 0; j<bDots; j++ )
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <AlBeScreen+0x270>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e09c      	b.n	8002012 <AlBeScreen+0x3a6>
 8001ed8:	0800915c 	.word	0x0800915c
 8001edc:	20000230 	.word	0x20000230
 8001ee0:	20000234 	.word	0x20000234
 8001ee4:	08009164 	.word	0x08009164
	{
		tftDrawPixel(XYb[0][j],XYb[1][j],tft_BLACK);
 8001ee8:	4b9f      	ldr	r3, [pc, #636]	; (8002168 <AlBeScreen+0x4fc>)
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b9e      	ldr	r3, [pc, #632]	; (800216c <AlBeScreen+0x500>)
 8001ef2:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001ef6:	4b9c      	ldr	r3, [pc, #624]	; (8002168 <AlBeScreen+0x4fc>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	4a9b      	ldr	r2, [pc, #620]	; (800216c <AlBeScreen+0x500>)
 8001efe:	330c      	adds	r3, #12
 8001f00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	f000 fc7e 	bl	8002808 <tftDrawPixel>
		XYb[0][j] = lround(b_midxyl[0] + xgrad*(2*j - (float)bDots+1)/(bDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8001f0c:	4b98      	ldr	r3, [pc, #608]	; (8002170 <AlBeScreen+0x504>)
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	4b93      	ldr	r3, [pc, #588]	; (8002168 <AlBeScreen+0x4fc>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001f2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f36:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001f3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f42:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8001f46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	ee17 0a90 	vmov	r0, s15
 8001f52:	f7fe fb01 	bl	8000558 <__aeabi_f2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f006 f824 	bl	8007faa <lround>
 8001f62:	4601      	mov	r1, r0
 8001f64:	4b80      	ldr	r3, [pc, #512]	; (8002168 <AlBeScreen+0x4fc>)
 8001f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	b209      	sxth	r1, r1
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <AlBeScreen+0x500>)
 8001f70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYb[1][j] = lround(b_midxyl[1] + ygrad*(2*j - (float)bDots+1)/(bDots-1));
 8001f74:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <AlBeScreen+0x504>)
 8001f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	4b79      	ldr	r3, [pc, #484]	; (8002168 <AlBeScreen+0x4fc>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f92:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001f96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f9e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001faa:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8001fae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	ee17 0a90 	vmov	r0, s15
 8001fba:	f7fe facd 	bl	8000558 <__aeabi_f2d>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f005 fff0 	bl	8007faa <lround>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <AlBeScreen+0x4fc>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	b211      	sxth	r1, r2
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <AlBeScreen+0x500>)
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYb[0][j],XYb[1][j],bColor);
 8001fdc:	4b62      	ldr	r3, [pc, #392]	; (8002168 <AlBeScreen+0x4fc>)
 8001fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b61      	ldr	r3, [pc, #388]	; (800216c <AlBeScreen+0x500>)
 8001fe6:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <AlBeScreen+0x4fc>)
 8001fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff0:	4a5e      	ldr	r2, [pc, #376]	; (800216c <AlBeScreen+0x500>)
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ff8:	8bba      	ldrh	r2, [r7, #28]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f000 fc04 	bl	8002808 <tftDrawPixel>
	for (j = 0; j<bDots; j++ )
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <AlBeScreen+0x4fc>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	b29b      	uxth	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21a      	sxth	r2, r3
 800200e:	4b56      	ldr	r3, [pc, #344]	; (8002168 <AlBeScreen+0x4fc>)
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	4b55      	ldr	r3, [pc, #340]	; (8002168 <AlBeScreen+0x4fc>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	2b0b      	cmp	r3, #11
 800201a:	f77f af65 	ble.w	8001ee8 <AlBeScreen+0x27c>
	}



// kleines Oszi als Zeitmitschrieb
	int16_t Ya = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[0]/_pi);			// - ST7735 y = 0 upper line inverter direct to y Scale
 800201e:	4b55      	ldr	r3, [pc, #340]	; (8002174 <AlBeScreen+0x508>)
 8002020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b53      	ldr	r3, [pc, #332]	; (8002174 <AlBeScreen+0x508>)
 8002028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002178 <AlBeScreen+0x50c>
 8002042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204a:	ee17 3a90 	vmov	r3, s15
 800204e:	b21b      	sxth	r3, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	b29b      	uxth	r3, r3
 8002056:	81fb      	strh	r3, [r7, #14]
	int16_t Yb = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[1]/_pi);
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <AlBeScreen+0x508>)
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b44      	ldr	r3, [pc, #272]	; (8002174 <AlBeScreen+0x508>)
 8002062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002178 <AlBeScreen+0x50c>
 800207e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002086:	ee17 3a90 	vmov	r3, s15
 800208a:	b21b      	sxth	r3, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	81bb      	strh	r3, [r7, #12]
	int16_t osziHight = oszi[1]*2;
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <AlBeScreen+0x508>)
 8002096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800209a:	b29b      	uxth	r3, r3
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	b29b      	uxth	r3, r3
 80020a0:	817b      	strh	r3, [r7, #10]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <AlBeScreen+0x510>)
 80020a4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <AlBeScreen+0x508>)
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <AlBeScreen+0x508>)
 80020b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b219      	sxth	r1, r3
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020c4:	f000 fc5e 	bl	8002984 <tftDrawFastVLine>
	if (Ya == Yb)
 80020c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10a      	bne.n	80020ea <AlBeScreen+0x47e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <AlBeScreen+0x510>)
 80020d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020da:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80020de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fb90 	bl	8002808 <tftDrawPixel>
 80020e8:	e011      	b.n	800210e <AlBeScreen+0x4a2>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <AlBeScreen+0x510>)
 80020ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f0:	8bfa      	ldrh	r2, [r7, #30]
 80020f2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fb86 	bl	8002808 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <AlBeScreen+0x510>)
 80020fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002102:	8bba      	ldrh	r2, [r7, #28]
 8002104:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fb7d 	bl	8002808 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <AlBeScreen+0x510>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	b29b      	uxth	r3, r3
 8002116:	3301      	adds	r3, #1
 8002118:	b29b      	uxth	r3, r3
 800211a:	b21a      	sxth	r2, r3
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <AlBeScreen+0x510>)
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <AlBeScreen+0x510>)
 8002122:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <AlBeScreen+0x508>)
 8002128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dd02      	ble.n	8002136 <AlBeScreen+0x4ca>
	{
		timepos = 0;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <AlBeScreen+0x510>)
 8002132:	2200      	movs	r2, #0
 8002134:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <AlBeScreen+0x510>)
 8002138:	f9b3 0000 	ldrsh.w	r0, [r3]
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <AlBeScreen+0x508>)
 800213e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <AlBeScreen+0x508>)
 8002144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002148:	0fda      	lsrs	r2, r3, #31
 800214a:	4413      	add	r3, r2
 800214c:	105b      	asrs	r3, r3, #1
 800214e:	b21a      	sxth	r2, r3
 8002150:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002154:	f000 fc16 	bl	8002984 <tftDrawFastVLine>
	return timepos;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <AlBeScreen+0x510>)
 800215a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215e:	b29b      	uxth	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bdb0      	pop	{r4, r5, r7, pc}
 8002168:	20000230 	.word	0x20000230
 800216c:	2000024c 	.word	0x2000024c
 8002170:	08009164 	.word	0x08009164
 8002174:	0800916c 	.word	0x0800916c
 8002178:	40490625 	.word	0x40490625
 800217c:	2000027c 	.word	0x2000027c

08002180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002182:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002184:	f002 fd8e 	bl	8004ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ae:	f002 fe11 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7ff f8d7 	bl	8001364 <main>

080021b6 <LoopForever>:

LoopForever:
  b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   r0, =_estack
 80021b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80021c4:	08009c98 	.word	0x08009c98
  ldr r2, =_sbss
 80021c8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80021cc:	200002b8 	.word	0x200002b8

080021d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <i2cActivate>:
// Init hardware



void i2cActivate()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <i2cActivate+0xc8>)
 80021dc:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <i2cActivate+0xcc>)
 80021e0:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <i2cActivate+0xd0>)
 80021e4:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f001 fd6c 	bl	8003cc4 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fa59 	bl	80036a4 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 80021f2:	2202      	movs	r2, #2
 80021f4:	2108      	movs	r1, #8
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f001 fb1a 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 80021fc:	2204      	movs	r2, #4
 80021fe:	2108      	movs	r1, #8
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 fbb7 	bl	8003974 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8002206:	2202      	movs	r2, #2
 8002208:	2109      	movs	r1, #9
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f001 fb10 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8002210:	2204      	movs	r2, #4
 8002212:	2109      	movs	r1, #9
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f001 fbad 	bl	8003974 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 800221a:	2201      	movs	r2, #1
 800221c:	2108      	movs	r1, #8
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f001 fc11 	bl	8003a46 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8002224:	2201      	movs	r2, #1
 8002226:	2109      	movs	r1, #9
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 fc0c 	bl	8003a46 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800222e:	2300      	movs	r3, #0
 8002230:	2211      	movs	r2, #17
 8002232:	2100      	movs	r1, #0
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f001 fdf7 	bl	8003e28 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f002 f85c 	bl	80042f8 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 8002240:	68b8      	ldr	r0, [r7, #8]
 8002242:	f001 fd3f 	bl	8003cc4 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 8002246:	2202      	movs	r2, #2
 8002248:	210a      	movs	r1, #10
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f001 faf0 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 8002250:	2204      	movs	r2, #4
 8002252:	210a      	movs	r1, #10
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f001 fb8d 	bl	8003974 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 800225a:	2202      	movs	r2, #2
 800225c:	2103      	movs	r1, #3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 fae6 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 8002264:	2209      	movs	r2, #9
 8002266:	2103      	movs	r1, #3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f001 fb83 	bl	8003974 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 800226e:	2201      	movs	r2, #1
 8002270:	210a      	movs	r1, #10
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f001 fbe7 	bl	8003a46 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8002278:	2201      	movs	r2, #1
 800227a:	2103      	movs	r1, #3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 fbe2 	bl	8003a46 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8002282:	2300      	movs	r3, #0
 8002284:	2211      	movs	r2, #17
 8002286:	2100      	movs	r1, #0
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f001 fdcd 	bl	8003e28 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	f002 f832 	bl	80042f8 <i2cEnableDevice>
#endif /* BALA2024 */
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40005400 	.word	0x40005400
 80022a0:	40005800 	.word	0x40005800
 80022a4:	40020400 	.word	0x40020400

080022a8 <ledActivate>:




void ledActivate(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 80022ac:	481e      	ldr	r0, [pc, #120]	; (8002328 <ledActivate+0x80>)
 80022ae:	f001 fa5b 	bl	8003768 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 80022b2:	2201      	movs	r2, #1
 80022b4:	210f      	movs	r1, #15
 80022b6:	481c      	ldr	r0, [pc, #112]	; (8002328 <ledActivate+0x80>)
 80022b8:	f001 faba 	bl	8003830 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 80022bc:	2200      	movs	r2, #0
 80022be:	210f      	movs	r1, #15
 80022c0:	4819      	ldr	r0, [pc, #100]	; (8002328 <ledActivate+0x80>)
 80022c2:	f001 fbc0 	bl	8003a46 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 80022c6:	2201      	movs	r2, #1
 80022c8:	210f      	movs	r1, #15
 80022ca:	4817      	ldr	r0, [pc, #92]	; (8002328 <ledActivate+0x80>)
 80022cc:	f001 fc04 	bl	8003ad8 <gpioSelectPushPullMode>
    LED_red_off;
 80022d0:	210f      	movs	r1, #15
 80022d2:	4815      	ldr	r0, [pc, #84]	; (8002328 <ledActivate+0x80>)
 80022d4:	f001 faf7 	bl	80038c6 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 80022d8:	2201      	movs	r2, #1
 80022da:	210e      	movs	r1, #14
 80022dc:	4812      	ldr	r0, [pc, #72]	; (8002328 <ledActivate+0x80>)
 80022de:	f001 faa7 	bl	8003830 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 80022e2:	2200      	movs	r2, #0
 80022e4:	210e      	movs	r1, #14
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <ledActivate+0x80>)
 80022e8:	f001 fbad 	bl	8003a46 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 80022ec:	2201      	movs	r2, #1
 80022ee:	210e      	movs	r1, #14
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <ledActivate+0x80>)
 80022f2:	f001 fbf1 	bl	8003ad8 <gpioSelectPushPullMode>
    LED_green_off;
 80022f6:	210e      	movs	r1, #14
 80022f8:	480b      	ldr	r0, [pc, #44]	; (8002328 <ledActivate+0x80>)
 80022fa:	f001 fae4 	bl	80038c6 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 80022fe:	2201      	movs	r2, #1
 8002300:	210d      	movs	r1, #13
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <ledActivate+0x80>)
 8002304:	f001 fa94 	bl	8003830 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8002308:	2200      	movs	r2, #0
 800230a:	210d      	movs	r1, #13
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <ledActivate+0x80>)
 800230e:	f001 fb9a 	bl	8003a46 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8002312:	2201      	movs	r2, #1
 8002314:	210d      	movs	r1, #13
 8002316:	4804      	ldr	r0, [pc, #16]	; (8002328 <ledActivate+0x80>)
 8002318:	f001 fbde 	bl	8003ad8 <gpioSelectPushPullMode>
    LED_blue_off;
 800231c:	210d      	movs	r1, #13
 800231e:	4802      	ldr	r0, [pc, #8]	; (8002328 <ledActivate+0x80>)
 8002320:	f001 fad1 	bl	80038c6 <gpioSetPin>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020400 	.word	0x40020400

0800232c <BalaHWsetup>:




void BalaHWsetup(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8002330:	f7ff ffba 	bl	80022a8 <ledActivate>
   i2cActivate();
 8002334:	f7ff ff4e 	bl	80021d4 <i2cActivate>

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <initRotaryPushButton+0x9c>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <initRotaryPushButton+0x9c>)
 8002386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <initRotaryPushButton+0xa0>)
 8002392:	f001 fa4d 	bl	8003830 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8002396:	2201      	movs	r2, #1
 8002398:	2100      	movs	r1, #0
 800239a:	481f      	ldr	r0, [pc, #124]	; (8002418 <initRotaryPushButton+0xa0>)
 800239c:	f001 fb9c 	bl	8003ad8 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2101      	movs	r1, #1
 80023a4:	481c      	ldr	r0, [pc, #112]	; (8002418 <initRotaryPushButton+0xa0>)
 80023a6:	f001 fa43 	bl	8003830 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 80023aa:	2201      	movs	r2, #1
 80023ac:	2101      	movs	r1, #1
 80023ae:	481a      	ldr	r0, [pc, #104]	; (8002418 <initRotaryPushButton+0xa0>)
 80023b0:	f001 fb92 	bl	8003ad8 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 80023b4:	2200      	movs	r2, #0
 80023b6:	210a      	movs	r1, #10
 80023b8:	4818      	ldr	r0, [pc, #96]	; (800241c <initRotaryPushButton+0xa4>)
 80023ba:	f001 fa39 	bl	8003830 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 80023be:	2201      	movs	r2, #1
 80023c0:	210a      	movs	r1, #10
 80023c2:	4816      	ldr	r0, [pc, #88]	; (800241c <initRotaryPushButton+0xa4>)
 80023c4:	f001 fb88 	bl	8003ad8 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 80023c8:	f000 ff16 	bl	80031f8 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 80023cc:	2100      	movs	r1, #0
 80023ce:	4812      	ldr	r0, [pc, #72]	; (8002418 <initRotaryPushButton+0xa0>)
 80023d0:	f000 ff2e 	bl	8003230 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 80023d4:	210a      	movs	r1, #10
 80023d6:	4811      	ldr	r0, [pc, #68]	; (800241c <initRotaryPushButton+0xa4>)
 80023d8:	f000 ff2a 	bl	8003230 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 80023dc:	2000      	movs	r0, #0
 80023de:	f000 ffdb 	bl	8003398 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 80023e2:	200a      	movs	r0, #10
 80023e4:	f000 ffd8 	bl	8003398 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 80023e8:	2101      	movs	r1, #1
 80023ea:	2000      	movs	r0, #0
 80023ec:	f000 fff6 	bl	80033dc <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 80023f0:	2100      	movs	r1, #0
 80023f2:	200a      	movs	r0, #10
 80023f4:	f000 fff2 	bl	80033dc <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 80023f8:	2006      	movs	r0, #6
 80023fa:	f7ff ff9f 	bl	800233c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 80023fe:	2028      	movs	r0, #40	; 0x28
 8002400:	f7ff ff9c 	bl	800233c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002404:	b662      	cpsie	i
}
 8002406:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <initRotaryPushButton+0xa8>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40020400 	.word	0x40020400
 800241c:	40020000 	.word	0x40020000
 8002420:	20000285 	.word	0x20000285

08002424 <EXTI0_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for ROT A.
 *               Checks ROT B and updates the position accordingly.
 */
void ROTARY_A_HANDLER(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8002428:	2101      	movs	r1, #1
 800242a:	480f      	ldr	r0, [pc, #60]	; (8002468 <EXTI0_IRQHandler+0x44>)
 800242c:	f001 fbb1 	bl	8003b92 <gpioGetPinState>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <EXTI0_IRQHandler+0x48>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <EXTI0_IRQHandler+0x48>)
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e004      	b.n	800244c <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <EXTI0_IRQHandler+0x48>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	4a08      	ldr	r2, [pc, #32]	; (800246c <EXTI0_IRQHandler+0x48>)
 800244a:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <EXTI0_IRQHandler+0x4c>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <EXTI0_IRQHandler+0x4c>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <EXTI0_IRQHandler+0x4c>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6153      	str	r3, [r2, #20]
	}
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020400 	.word	0x40020400
 800246c:	20000280 	.word	0x20000280
 8002470:	40013c00 	.word	0x40013c00

08002474 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <EXTI15_10_IRQHandler+0x2c>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <EXTI15_10_IRQHandler+0x30>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <EXTI15_10_IRQHandler+0x30>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <EXTI15_10_IRQHandler+0x30>)
 8002490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002494:	6153      	str	r3, [r2, #20]
	}
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	20000284 	.word	0x20000284
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <delayms+0x18>)
 80024b4:	f002 fbd2 	bl	8004c5c <systickDelay>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000288 	.word	0x20000288

080024c4 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <tftSPISenddata+0x20>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	220f      	movs	r2, #15
 80024d6:	4904      	ldr	r1, [pc, #16]	; (80024e8 <tftSPISenddata+0x24>)
 80024d8:	f002 fab1 	bl	8004a3e <spiWriteByte>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000028 	.word	0x20000028
 80024e8:	40020000 	.word	0x40020000

080024ec <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80024f6:	2105      	movs	r1, #5
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <tftSendCmd+0x24>)
 80024fa:	f001 fa0f 	bl	800391c <gpioResetPin>
    tftSPISenddata(cmd);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ffdf 	bl	80024c4 <tftSPISenddata>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40020400 	.word	0x40020400

08002514 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 800251e:	2105      	movs	r1, #5
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <tftSendData+0x24>)
 8002522:	f001 f9d0 	bl	80038c6 <gpioSetPin>
    tftSPISenddata(data);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffcb 	bl	80024c4 <tftSPISenddata>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40020400 	.word	0x40020400

0800253c <tftSetup>:

// Function that initializes the hardware configuration
void tftSetup(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af04      	add	r7, sp, #16
	/* Flaemig SYSTICK muss im Hauptprog declariert und abgefragt werden
	systickInit(SYSTICK_1MS);
	systickSetMillis(&Timer1, 500);
*/
    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8002542:	4827      	ldr	r0, [pc, #156]	; (80025e0 <tftSetup+0xa4>)
 8002544:	f001 f910 	bl	8003768 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8002548:	2201      	movs	r2, #1
 800254a:	2104      	movs	r1, #4
 800254c:	4824      	ldr	r0, [pc, #144]	; (80025e0 <tftSetup+0xa4>)
 800254e:	f001 f96f 	bl	8003830 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8002552:	4823      	ldr	r0, [pc, #140]	; (80025e0 <tftSetup+0xa4>)
 8002554:	f001 f908 	bl	8003768 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002558:	2201      	movs	r2, #1
 800255a:	2105      	movs	r1, #5
 800255c:	4820      	ldr	r0, [pc, #128]	; (80025e0 <tftSetup+0xa4>)
 800255e:	f001 f967 	bl	8003830 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8002562:	4820      	ldr	r0, [pc, #128]	; (80025e4 <tftSetup+0xa8>)
 8002564:	f001 f89e 	bl	80036a4 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002568:	2201      	movs	r2, #1
 800256a:	210f      	movs	r1, #15
 800256c:	481d      	ldr	r0, [pc, #116]	; (80025e4 <tftSetup+0xa8>)
 800256e:	f001 f95f 	bl	8003830 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8002572:	2201      	movs	r2, #1
 8002574:	210f      	movs	r1, #15
 8002576:	481b      	ldr	r0, [pc, #108]	; (80025e4 <tftSetup+0xa8>)
 8002578:	f001 faae 	bl	8003ad8 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 800257c:	4819      	ldr	r0, [pc, #100]	; (80025e4 <tftSetup+0xa8>)
 800257e:	f001 f891 	bl	80036a4 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8002582:	2202      	movs	r2, #2
 8002584:	2105      	movs	r1, #5
 8002586:	4817      	ldr	r0, [pc, #92]	; (80025e4 <tftSetup+0xa8>)
 8002588:	f001 f952 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 800258c:	2205      	movs	r2, #5
 800258e:	2105      	movs	r1, #5
 8002590:	4814      	ldr	r0, [pc, #80]	; (80025e4 <tftSetup+0xa8>)
 8002592:	f001 f9ef 	bl	8003974 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8002596:	2202      	movs	r2, #2
 8002598:	2107      	movs	r1, #7
 800259a:	4812      	ldr	r0, [pc, #72]	; (80025e4 <tftSetup+0xa8>)
 800259c:	f001 f948 	bl	8003830 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 80025a0:	2205      	movs	r2, #5
 80025a2:	2107      	movs	r1, #7
 80025a4:	480f      	ldr	r0, [pc, #60]	; (80025e4 <tftSetup+0xa8>)
 80025a6:	f001 f9e5 	bl	8003974 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <tftSetup+0xac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f9ea 	bl	8004988 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <tftSetup+0xac>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9303      	str	r3, [sp, #12]
 80025bc:	2300      	movs	r3, #0
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	2300      	movs	r3, #0
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2301      	movs	r3, #1
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	2200      	movs	r2, #0
 80025cc:	2103      	movs	r1, #3
 80025ce:	f002 f8ed 	bl	80047ac <spiInitSPI>

    tftInitR(INITR_REDTAB);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f000 f874 	bl	80026c0 <tftInitR>
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020000 	.word	0x40020000
 80025e8:	20000028 	.word	0x20000028

080025ec <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80025fe:	e033      	b.n	8002668 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff6f 	bl	80024ec <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002628:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 800262a:	e006      	b.n	800263a <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff6d 	bl	8002514 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	73ba      	strb	r2, [r7, #14]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f3      	bne.n	800262c <commandList+0x40>
		}

		if(ms) {
 8002644:	89bb      	ldrh	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002654:	89bb      	ldrh	r3, [r7, #12]
 8002656:	2bff      	cmp	r3, #255	; 0xff
 8002658:	d102      	bne.n	8002660 <commandList+0x74>
 800265a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800265e:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8002660:	89bb      	ldrh	r3, [r7, #12]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff20 	bl	80024a8 <delayms>
	while(numCommands--) {                 // For each command...
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	73fa      	strb	r2, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1c6      	bne.n	8002600 <commandList+0x14>
		}
	}
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8002684:	210f      	movs	r1, #15
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <commonInit+0x3c>)
 8002688:	f001 f948 	bl	800391c <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 800268c:	2104      	movs	r1, #4
 800268e:	480b      	ldr	r0, [pc, #44]	; (80026bc <commonInit+0x40>)
 8002690:	f001 f944 	bl	800391c <gpioResetPin>
	delayms(50);  //default value 500
 8002694:	2032      	movs	r0, #50	; 0x32
 8002696:	f7ff ff07 	bl	80024a8 <delayms>
	ST7735_RST1;
 800269a:	2104      	movs	r1, #4
 800269c:	4807      	ldr	r0, [pc, #28]	; (80026bc <commonInit+0x40>)
 800269e:	f001 f912 	bl	80038c6 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <commonInit+0x32>
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff9f 	bl	80025ec <commandList>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400

080026c0 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80026ca:	2032      	movs	r0, #50	; 0x32
 80026cc:	f7ff feec 	bl	80024a8 <delayms>
	commonInit(Rcmd1);
 80026d0:	4811      	ldr	r0, [pc, #68]	; (8002718 <tftInitR+0x58>)
 80026d2:	f7ff ffd3 	bl	800267c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <tftInitR+0x5c>)
 80026de:	f7ff ff85 	bl	80025ec <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <tftInitR+0x60>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <tftInitR+0x64>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e002      	b.n	80026f6 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <tftInitR+0x68>)
 80026f2:	f7ff ff7b 	bl	80025ec <commandList>
	}
	commandList(Rcmd3);
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <tftInitR+0x6c>)
 80026f8:	f7ff ff78 	bl	80025ec <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d105      	bne.n	800270e <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8002702:	2036      	movs	r0, #54	; 0x36
 8002704:	f7ff fef2 	bl	80024ec <tftSendCmd>
		tftSendData(0xC0);
 8002708:	20c0      	movs	r0, #192	; 0xc0
 800270a:	f7ff ff03 	bl	8002514 <tftSendData>
	}

	//  tabcolor = options;
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	080095ec 	.word	0x080095ec
 800271c:	08009628 	.word	0x08009628
 8002720:	2000028c 	.word	0x2000028c
 8002724:	20000290 	.word	0x20000290
 8002728:	08009638 	.word	0x08009638
 800272c:	08009648 	.word	0x08009648

08002730 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4604      	mov	r4, r0
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	71fb      	strb	r3, [r7, #7]
 8002742:	4603      	mov	r3, r0
 8002744:	71bb      	strb	r3, [r7, #6]
 8002746:	460b      	mov	r3, r1
 8002748:	717b      	strb	r3, [r7, #5]
 800274a:	4613      	mov	r3, r2
 800274c:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 800274e:	202a      	movs	r0, #42	; 0x2a
 8002750:	f7ff fecc 	bl	80024ec <tftSendCmd>
	tftSendData(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fedd 	bl	8002514 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <tftSetAddrWindow+0x98>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4413      	add	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fed4 	bl	8002514 <tftSendData>
	tftSendData(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fed1 	bl	8002514 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <tftSetAddrWindow+0x98>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	797b      	ldrb	r3, [r7, #5]
 800277a:	4413      	add	r3, r2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fec8 	bl	8002514 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002784:	202b      	movs	r0, #43	; 0x2b
 8002786:	f7ff feb1 	bl	80024ec <tftSendCmd>
	tftSendData(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fec2 	bl	8002514 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <tftSetAddrWindow+0x9c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	4413      	add	r3, r2
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feb9 	bl	8002514 <tftSendData>
	tftSendData(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff feb6 	bl	8002514 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <tftSetAddrWindow+0x9c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	793b      	ldrb	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fead 	bl	8002514 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 80027ba:	202c      	movs	r0, #44	; 0x2c
 80027bc:	f7ff fe96 	bl	80024ec <tftSendCmd>
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	2000028c 	.word	0x2000028c
 80027cc:	20000290 	.word	0x20000290

080027d0 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 80027da:	2105      	movs	r1, #5
 80027dc:	4809      	ldr	r0, [pc, #36]	; (8002804 <tftPushColor+0x34>)
 80027de:	f001 f872 	bl	80038c6 <gpioSetPin>
	putpix(color);
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe6a 	bl	80024c4 <tftSPISenddata>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fe65 	bl	80024c4 <tftSPISenddata>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40020400 	.word	0x40020400

08002808 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
 8002812:	460b      	mov	r3, r1
 8002814:	80bb      	strh	r3, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 800281a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db22      	blt.n	8002868 <tftDrawPixel+0x60>
 8002822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <tftDrawPixel+0x68>)
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	4293      	cmp	r3, r2
 800282c:	da1c      	bge.n	8002868 <tftDrawPixel+0x60>
 800282e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db18      	blt.n	8002868 <tftDrawPixel+0x60>
 8002836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <tftDrawPixel+0x6c>)
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	4293      	cmp	r3, r2
 8002840:	da12      	bge.n	8002868 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	b2d8      	uxtb	r0, r3
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	b2d9      	uxtb	r1, r3
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f7ff ff69 	bl	8002730 <tftSetAddrWindow>
	tftPushColor(color);
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ffb5 	bl	80027d0 <tftPushColor>
 8002866:	e000      	b.n	800286a <tftDrawPixel+0x62>
		return;
 8002868:	bf00      	nop
}
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000024 	.word	0x20000024
 8002874:	20000026 	.word	0x20000026

08002878 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	4603      	mov	r3, r0
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	807b      	strh	r3, [r7, #2]
 8002892:	4613      	mov	r3, r2
 8002894:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8002896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <tftFillRect+0x100>)
 800289c:	8812      	ldrh	r2, [r2, #0]
 800289e:	4293      	cmp	r3, r2
 80028a0:	da65      	bge.n	800296e <tftFillRect+0xf6>
 80028a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <tftFillRect+0x104>)
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	da5f      	bge.n	800296e <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 80028ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <tftFillRect+0x100>)
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	4293      	cmp	r3, r2
 80028be:	dd05      	ble.n	80028cc <tftFillRect+0x54>
		{
		w = width  - x;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <tftFillRect+0x100>)
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 80028cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80028d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <tftFillRect+0x104>)
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	4293      	cmp	r3, r2
 80028dc:	dd05      	ble.n	80028ea <tftFillRect+0x72>
		{
		h = height - y;
 80028de:	4b27      	ldr	r3, [pc, #156]	; (800297c <tftFillRect+0x104>)
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	88bb      	ldrh	r3, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	b2d8      	uxtb	r0, r3
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	b2d9      	uxtb	r1, r3
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b2dc      	uxtb	r4, r3
 8002902:	88bb      	ldrh	r3, [r7, #4]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	883b      	ldrh	r3, [r7, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4622      	mov	r2, r4
 8002914:	f7ff ff0c 	bl	8002730 <tftSetAddrWindow>

	ST7735_DC1;
 8002918:	2105      	movs	r1, #5
 800291a:	4819      	ldr	r0, [pc, #100]	; (8002980 <tftFillRect+0x108>)
 800291c:	f000 ffd3 	bl	80038c6 <gpioSetPin>
	for(y=h; y>0; y--)
 8002920:	883b      	ldrh	r3, [r7, #0]
 8002922:	80bb      	strh	r3, [r7, #4]
 8002924:	e01e      	b.n	8002964 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	80fb      	strh	r3, [r7, #6]
 800292a:	e011      	b.n	8002950 <tftFillRect+0xd8>
		{
			putpix(color);
 800292c:	8b3b      	ldrh	r3, [r7, #24]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	b29b      	uxth	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fdc5 	bl	80024c4 <tftSPISenddata>
 800293a:	8b3b      	ldrh	r3, [r7, #24]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fdc0 	bl	80024c4 <tftSPISenddata>
		for(x=w; x>0; x--)
 8002944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	80fb      	strh	r3, [r7, #6]
 8002950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002954:	2b00      	cmp	r3, #0
 8002956:	dce9      	bgt.n	800292c <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8002958:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	80bb      	strh	r3, [r7, #4]
 8002964:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	dcdc      	bgt.n	8002926 <tftFillRect+0xae>
 800296c:	e000      	b.n	8002970 <tftFillRect+0xf8>
		return;
 800296e:	bf00      	nop
		}
	}
}
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000024 	.word	0x20000024
 800297c:	20000026 	.word	0x20000026
 8002980:	40020400 	.word	0x40020400

08002984 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4604      	mov	r4, r0
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4623      	mov	r3, r4
 8002994:	80fb      	strh	r3, [r7, #6]
 8002996:	4603      	mov	r3, r0
 8002998:	80bb      	strh	r3, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	807b      	strh	r3, [r7, #2]
 800299e:	4613      	mov	r3, r2
 80029a0:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 80029a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <tftDrawFastVLine+0xb4>)
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	da3f      	bge.n	8002a2e <tftDrawFastVLine+0xaa>
 80029ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029b2:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <tftDrawFastVLine+0xb8>)
 80029b4:	8812      	ldrh	r2, [r2, #0]
 80029b6:	4293      	cmp	r3, r2
 80029b8:	da39      	bge.n	8002a2e <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 80029ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029c2:	4413      	add	r3, r2
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <tftDrawFastVLine+0xb8>)
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	dd05      	ble.n	80029d8 <tftDrawFastVLine+0x54>
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <tftDrawFastVLine+0xb8>)
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	88bb      	ldrh	r3, [r7, #4]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	b2d8      	uxtb	r0, r3
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	b2d9      	uxtb	r1, r3
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	b2dc      	uxtb	r4, r3
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4622      	mov	r2, r4
 80029f6:	f7ff fe9b 	bl	8002730 <tftSetAddrWindow>

	ST7735_DC1;
 80029fa:	2105      	movs	r1, #5
 80029fc:	4810      	ldr	r0, [pc, #64]	; (8002a40 <tftDrawFastVLine+0xbc>)
 80029fe:	f000 ff62 	bl	80038c6 <gpioSetPin>
	while (h--) {
 8002a02:	e00b      	b.n	8002a1c <tftDrawFastVLine+0x98>
		putpix(color);
 8002a04:	883b      	ldrh	r3, [r7, #0]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fd59 	bl	80024c4 <tftSPISenddata>
 8002a12:	883b      	ldrh	r3, [r7, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd54 	bl	80024c4 <tftSPISenddata>
	while (h--) {
 8002a1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	3a01      	subs	r2, #1
 8002a24:	b292      	uxth	r2, r2
 8002a26:	807a      	strh	r2, [r7, #2]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1eb      	bne.n	8002a04 <tftDrawFastVLine+0x80>
 8002a2c:	e000      	b.n	8002a30 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8002a2e:	bf00      	nop
	}
}
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000024 	.word	0x20000024
 8002a3c:	20000026 	.word	0x20000026
 8002a40:	40020400 	.word	0x40020400

08002a44 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <tftSetFont+0x40>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <tftSetFont+0x40>)
 8002a58:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	785a      	ldrb	r2, [r3, #1]
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <tftSetFont+0x40>)
 8002a60:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	789a      	ldrb	r2, [r3, #2]
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <tftSetFont+0x40>)
 8002a68:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <tftSetFont+0x40>)
 8002a74:	811a      	strh	r2, [r3, #8]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000298 	.word	0x20000298

08002a88 <tftPrintChar>:
 * charval is ASCII-Value of char to print
 * x is x position of character
 * y is y position of character
*/
void tftPrintChar(uint8_t charval, int x, int y)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002a96:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <tftPrintChar+0x1e0>)
 8002a98:	791b      	ldrb	r3, [r3, #4]
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	d803      	bhi.n	8002aa6 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8002a9e:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <tftPrintChar+0x1e0>)
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	77bb      	strb	r3, [r7, #30]
 8002aa4:	e003      	b.n	8002aae <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <tftPrintChar+0x1e0>)
 8002aa8:	791b      	ldrb	r3, [r3, #4]
 8002aaa:	08db      	lsrs	r3, r3, #3
 8002aac:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8002aae:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <tftPrintChar+0x1e4>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d15e      	bne.n	8002b74 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	b2d8      	uxtb	r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	b2d9      	uxtb	r1, r3
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <tftPrintChar+0x1e0>)
 8002ac0:	791a      	ldrb	r2, [r3, #4]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b2dc      	uxtb	r4, r3
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <tftPrintChar+0x1e0>)
 8002ad0:	795a      	ldrb	r2, [r3, #5]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	4622      	mov	r2, r4
 8002ae0:	f7ff fe26 	bl	8002730 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	4a60      	ldr	r2, [pc, #384]	; (8002c68 <tftPrintChar+0x1e0>)
 8002ae8:	7992      	ldrb	r2, [r2, #6]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	7fbb      	ldrb	r3, [r7, #30]
 8002af0:	b299      	uxth	r1, r3
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <tftPrintChar+0x1e0>)
 8002af4:	795b      	ldrb	r3, [r3, #5]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	fb11 f303 	smulbb	r3, r1, r3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	fb12 f303 	smulbb	r3, r2, r3
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3304      	adds	r3, #4
 8002b06:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	83bb      	strh	r3, [r7, #28]
 8002b0c:	e029      	b.n	8002b62 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <tftPrintChar+0x1e0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	8b7b      	ldrh	r3, [r7, #26]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e017      	b.n	8002b50 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002b20:	7cfa      	ldrb	r2, [r7, #19]
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	f1c3 0307 	rsb	r3, r3, #7
 8002b28:	fa42 f303 	asr.w	r3, r2, r3
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002b34:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <tftPrintChar+0x1e8>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fe49 	bl	80027d0 <tftPushColor>
 8002b3e:	e004      	b.n	8002b4a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <tftPrintChar+0x1ec>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fe43 	bl	80027d0 <tftPushColor>
			for(i=0;i<8;i++)
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	d9e4      	bls.n	8002b20 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002b56:	8b7b      	ldrh	r3, [r7, #26]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8002b5c:	8bbb      	ldrh	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	83bb      	strh	r3, [r7, #28]
 8002b62:	8bba      	ldrh	r2, [r7, #28]
 8002b64:	7fbb      	ldrb	r3, [r7, #30]
 8002b66:	4940      	ldr	r1, [pc, #256]	; (8002c68 <tftPrintChar+0x1e0>)
 8002b68:	7949      	ldrb	r1, [r1, #5]
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbcd      	blt.n	8002b0e <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002b72:	e075      	b.n	8002c60 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <tftPrintChar+0x1e0>)
 8002b78:	7992      	ldrb	r2, [r2, #6]
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	7fbb      	ldrb	r3, [r7, #30]
 8002b80:	b299      	uxth	r1, r3
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <tftPrintChar+0x1e0>)
 8002b84:	795b      	ldrb	r3, [r3, #5]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	fb11 f303 	smulbb	r3, r1, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	fb12 f303 	smulbb	r3, r2, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3304      	adds	r3, #4
 8002b96:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	83bb      	strh	r3, [r7, #28]
 8002b9c:	e05a      	b.n	8002c54 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e04b      	b.n	8002c3c <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <tftPrintChar+0x1e0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8b79      	ldrh	r1, [r7, #26]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	440a      	add	r2, r1
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e03a      	b.n	8002c30 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	8bbb      	ldrh	r3, [r7, #28]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2d9      	uxtb	r1, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2dc      	uxtb	r4, r3
 8002bf6:	8bbb      	ldrh	r3, [r7, #28]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4622      	mov	r2, r4
 8002c08:	f7ff fd92 	bl	8002730 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8002c0c:	7cfa      	ldrb	r2, [r7, #19]
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
 8002c10:	f1c3 0307 	rsb	r3, r3, #7
 8002c14:	fa42 f303 	asr.w	r3, r2, r3
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <tftPrintChar+0x1e8>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fdd3 	bl	80027d0 <tftPushColor>
				for(i=0;i<8;i++)
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	2b07      	cmp	r3, #7
 8002c34:	d9c1      	bls.n	8002bba <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	7fbb      	ldrb	r3, [r7, #30]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbaf      	blt.n	8002ba4 <tftPrintChar+0x11c>
			temp+=(fz);
 8002c44:	7fbb      	ldrb	r3, [r7, #30]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002c4e:	8bbb      	ldrh	r3, [r7, #28]
 8002c50:	3301      	adds	r3, #1
 8002c52:	83bb      	strh	r3, [r7, #28]
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <tftPrintChar+0x1e0>)
 8002c56:	795b      	ldrb	r3, [r3, #5]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	8bba      	ldrh	r2, [r7, #28]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d39e      	bcc.n	8002b9e <tftPrintChar+0x116>
}
 8002c60:	bf00      	nop
 8002c62:	3724      	adds	r7, #36	; 0x24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	20000298 	.word	0x20000298
 8002c6c:	200002a4 	.word	0x200002a4
 8002c70:	2000002c 	.word	0x2000002c
 8002c74:	200002a6 	.word	0x200002a6

08002c78 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c7c:	b08e      	sub	sp, #56	; 0x38
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4603      	mov	r3, r0
 8002c88:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002c8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c8c:	f7fd fc52 	bl	8000534 <__aeabi_i2d>
 8002c90:	a395      	add	r3, pc, #596	; (adr r3, 8002ee8 <tftRotateChar+0x270>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fcb7 	bl	8000608 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002ca2:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <tftRotateChar+0x260>)
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d804      	bhi.n	8002cb4 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002caa:	4b8b      	ldr	r3, [pc, #556]	; (8002ed8 <tftRotateChar+0x260>)
 8002cac:	791b      	ldrb	r3, [r3, #4]
 8002cae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002cb2:	e017      	b.n	8002ce4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002cb4:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <tftRotateChar+0x260>)
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	4a85      	ldr	r2, [pc, #532]	; (8002ed8 <tftRotateChar+0x260>)
 8002cc2:	7992      	ldrb	r2, [r2, #6]
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <tftRotateChar+0x260>)
 8002cd0:	795b      	ldrb	r3, [r3, #5]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	fb11 f303 	smulbb	r3, r1, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	fb12 f303 	smulbb	r3, r2, r3
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002cea:	e0e6      	b.n	8002eba <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	e0d2      	b.n	8002e98 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8002cf2:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <tftRotateChar+0x260>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	440a      	add	r2, r1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d08:	e0be      	b.n	8002e88 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8002d0a:	68b8      	ldr	r0, [r7, #8]
 8002d0c:	f7fd fc12 	bl	8000534 <__aeabi_i2d>
 8002d10:	4604      	mov	r4, r0
 8002d12:	460d      	mov	r5, r1
 8002d14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	4b6e      	ldr	r3, [pc, #440]	; (8002ed8 <tftRotateChar+0x260>)
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	4619      	mov	r1, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc01 	bl	8000534 <__aeabi_i2d>
 8002d32:	4680      	mov	r8, r0
 8002d34:	4689      	mov	r9, r1
 8002d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d3a:	f005 f8ed 	bl	8007f18 <cos>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4640      	mov	r0, r8
 8002d44:	4649      	mov	r1, r9
 8002d46:	f7fd fc5f 	bl	8000608 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4692      	mov	sl, r2
 8002d50:	469b      	mov	fp, r3
 8002d52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbec 	bl	8000534 <__aeabi_i2d>
 8002d5c:	4680      	mov	r8, r0
 8002d5e:	4689      	mov	r9, r1
 8002d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d64:	f005 f964 	bl	8008030 <sin>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4640      	mov	r0, r8
 8002d6e:	4649      	mov	r1, r9
 8002d70:	f7fd fc4a 	bl	8000608 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4650      	mov	r0, sl
 8002d7a:	4659      	mov	r1, fp
 8002d7c:	f7fd fa8c 	bl	8000298 <__aeabi_dsub>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4620      	mov	r0, r4
 8002d86:	4629      	mov	r1, r5
 8002d88:	f7fd fa88 	bl	800029c <__adddf3>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7fd fee8 	bl	8000b68 <__aeabi_d2iz>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd fbc9 	bl	8000534 <__aeabi_i2d>
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbc2 	bl	8000534 <__aeabi_i2d>
 8002db0:	4680      	mov	r8, r0
 8002db2:	4689      	mov	r9, r1
 8002db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002db8:	f005 f8ae 	bl	8007f18 <cos>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	f7fd fc20 	bl	8000608 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	441a      	add	r2, r3
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <tftRotateChar+0x260>)
 8002ddc:	791b      	ldrb	r3, [r3, #4]
 8002dde:	4619      	mov	r1, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fba3 	bl	8000534 <__aeabi_i2d>
 8002dee:	4680      	mov	r8, r0
 8002df0:	4689      	mov	r9, r1
 8002df2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002df6:	f005 f91b 	bl	8008030 <sin>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4640      	mov	r0, r8
 8002e00:	4649      	mov	r1, r9
 8002e02:	f7fd fc01 	bl	8000608 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4650      	mov	r0, sl
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	f7fd fa45 	bl	800029c <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f7fd fa3f 	bl	800029c <__adddf3>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd fe9f 	bl	8000b68 <__aeabi_d2iz>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	b2d8      	uxtb	r0, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	b2d9      	uxtb	r1, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f7ff fc73 	bl	8002730 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8002e4a:	7ffa      	ldrb	r2, [r7, #31]
 8002e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e50:	f1c3 0307 	rsb	r3, r3, #7
 8002e54:	fa42 f303 	asr.w	r3, r2, r3
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <tftRotateChar+0x264>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fcb3 	bl	80027d0 <tftPushColor>
 8002e6a:	e008      	b.n	8002e7e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <tftRotateChar+0x268>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <tftRotateChar+0x26c>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fca9 	bl	80027d0 <tftPushColor>
			for(i=0;i<8;i++)
 8002e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e82:	3301      	adds	r3, #1
 8002e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	f67f af3c 	bls.w	8002d0a <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	3301      	adds	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f6ff af27 	blt.w	8002cf2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8002ea4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002eac:	4413      	add	r3, r2
 8002eae:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8002eb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <tftRotateChar+0x260>)
 8002ebc:	795b      	ldrb	r3, [r3, #5]
 8002ebe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	f4ff af12 	bcc.w	8002cec <tftRotateChar+0x74>
	}
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	20000298 	.word	0x20000298
 8002edc:	2000002c 	.word	0x2000002c
 8002ee0:	200002a4 	.word	0x200002a4
 8002ee4:	200002a6 	.word	0x200002a6
 8002ee8:	1eb851ec 	.word	0x1eb851ec
 8002eec:	3f91eb85 	.word	0x3f91eb85

08002ef0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7fd f968 	bl	80001e0 <strlen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f113 0f02 	cmn.w	r3, #2
 8002f1a:	d10a      	bne.n	8002f32 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <tftPrint+0x128>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	4b3e      	ldr	r3, [pc, #248]	; (800301c <tftPrint+0x12c>)
 8002f24:	791b      	ldrb	r3, [r3, #4]
 8002f26:	4619      	mov	r1, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d10d      	bne.n	8002f56 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <tftPrint+0x130>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <tftPrint+0x12c>)
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	4619      	mov	r1, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	0fda      	lsrs	r2, r3, #31
 8002f50:	4413      	add	r3, r2
 8002f52:	105b      	asrs	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	e053      	b.n	8003004 <tftPrint+0x114>
	{
		lettercount++;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d112      	bne.n	8002f8e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60fa      	str	r2, [r7, #12]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	69f9      	ldr	r1, [r7, #28]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fd87 	bl	8002a88 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <tftPrint+0x12c>)
 8002f7c:	791b      	ldrb	r3, [r3, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e00a      	b.n	8002fa4 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	7818      	ldrb	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	f7ff fe6a 	bl	8002c78 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8002fa4:	f000 f8a8 	bl	80030f8 <tftGetWidth>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <tftPrint+0x12c>)
 8002fae:	791b      	ldrb	r3, [r3, #4]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	db1f      	blt.n	8002ffe <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <tftPrint+0x12c>)
 8002fc8:	795b      	ldrb	r3, [r3, #5]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8002fd2:	f000 f89d 	bl	8003110 <tftGetHeight>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <tftPrint+0x12c>)
 8002fdc:	795b      	ldrb	r3, [r3, #5]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	dd09      	ble.n	8002ffa <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8002fe6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fea:	f7ff fa5d 	bl	80024a8 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f818 	bl	8003024 <tftFillScreen>
				y=0; // start at top left of new Page
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	e001      	b.n	8002ffe <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3301      	adds	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	dba7      	blt.n	8002f5c <tftPrint+0x6c>
			}

		}

	}
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000024 	.word	0x20000024
 800301c:	20000298 	.word	0x20000298
 8003020:	20000026 	.word	0x20000026

08003024 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af02      	add	r7, sp, #8
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <tftFillScreen+0x2c>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b21a      	sxth	r2, r3
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <tftFillScreen+0x30>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b219      	sxth	r1, r3
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	460b      	mov	r3, r1
 8003040:	2100      	movs	r1, #0
 8003042:	2000      	movs	r0, #0
 8003044:	f7ff fc18 	bl	8002878 <tftFillRect>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000024 	.word	0x20000024
 8003054:	20000026 	.word	0x20000026

08003058 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800306a:	2036      	movs	r0, #54	; 0x36
 800306c:	f7ff fa3e 	bl	80024ec <tftSendCmd>

	switch (rotation)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d836      	bhi.n	80030e4 <tftSetRotation+0x8c>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <tftSetRotation+0x24>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	080030a1 	.word	0x080030a1
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030c9 	.word	0x080030c9
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800308c:	20c0      	movs	r0, #192	; 0xc0
 800308e:	f7ff fa41 	bl	8002514 <tftSendData>
		width  = ST7735_TFTWIDTH;
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <tftSetRotation+0x94>)
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <tftSetRotation+0x98>)
 800309a:	22a0      	movs	r2, #160	; 0xa0
 800309c:	801a      	strh	r2, [r3, #0]
		break;
 800309e:	e01d      	b.n	80030dc <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80030a0:	20a0      	movs	r0, #160	; 0xa0
 80030a2:	f7ff fa37 	bl	8002514 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <tftSetRotation+0x94>)
 80030a8:	22a0      	movs	r2, #160	; 0xa0
 80030aa:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <tftSetRotation+0x98>)
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	801a      	strh	r2, [r3, #0]
		   break;
 80030b2:	e013      	b.n	80030dc <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff fa2d 	bl	8002514 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <tftSetRotation+0x94>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <tftSetRotation+0x98>)
 80030c2:	22a0      	movs	r2, #160	; 0xa0
 80030c4:	801a      	strh	r2, [r3, #0]
		   break;
 80030c6:	e009      	b.n	80030dc <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80030c8:	2060      	movs	r0, #96	; 0x60
 80030ca:	f7ff fa23 	bl	8002514 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <tftSetRotation+0x94>)
 80030d0:	22a0      	movs	r2, #160	; 0xa0
 80030d2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <tftSetRotation+0x98>)
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	801a      	strh	r2, [r3, #0]
		   break;
 80030da:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <tftSetRotation+0x9c>)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	7013      	strb	r3, [r2, #0]
 80030e2:	e000      	b.n	80030e6 <tftSetRotation+0x8e>
		   return;
 80030e4:	bf00      	nop
}
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000024 	.word	0x20000024
 80030f0:	20000026 	.word	0x20000026
 80030f4:	20000294 	.word	0x20000294

080030f8 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <tftGetWidth+0x14>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000024 	.word	0x20000024

08003110 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <tftGetHeight+0x14>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000026 	.word	0x20000026

08003128 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03e      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d03b      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d038      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d035      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d032      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d02f      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d02c      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b07      	cmp	r3, #7
 8003160:	d029      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d026      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b09      	cmp	r3, #9
 800316c:	d023      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d020      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b0b      	cmp	r3, #11
 8003178:	d01d      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d01a      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	2b0d      	cmp	r3, #13
 8003184:	d017      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	2b0e      	cmp	r3, #14
 800318a:	d014      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d011      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d00e      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b11      	cmp	r3, #17
 800319c:	d00b      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b12      	cmp	r3, #18
 80031a2:	d008      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b14      	cmp	r3, #20
 80031a8:	d005      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b15      	cmp	r3, #21
 80031ae:	d002      	beq.n	80031b6 <extiVerifyIrqNum+0x8e>
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	2b16      	cmp	r3, #22
 80031b4:	d101      	bne.n	80031ba <extiVerifyIrqNum+0x92>
    {
        return true;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <extiVerifyIrqNum+0x94>
    }
    return false;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <extiVerifyTrigger+0x1c>
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d002      	beq.n	80031e4 <extiVerifyTrigger+0x1c>
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d101      	bne.n	80031e8 <extiVerifyTrigger+0x20>
    {
        return true;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <extiVerifyTrigger+0x22>
    }
    return false;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 80031fe:	2300      	movs	r3, #0
 8003200:	71fb      	strb	r3, [r7, #7]
 8003202:	e008      	b.n	8003216 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <extiInit+0x34>)
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	3302      	adds	r3, #2
 800320a:	2100      	movs	r1, #0
 800320c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	3301      	adds	r3, #1
 8003214:	71fb      	strb	r3, [r7, #7]
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d9f3      	bls.n	8003204 <extiInit+0xc>
    }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40013800 	.word	0x40013800

08003230 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f937 	bl	80034bc <gpioVerifyPort>
 800324e:	4603      	mov	r3, r0
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 800325a:	23ff      	movs	r3, #255	; 0xff
 800325c:	e08a      	b.n	8003374 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f95d 	bl	8003520 <gpioVerifyPin>
 8003266:	4603      	mov	r3, r0
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8003272:	23fe      	movs	r3, #254	; 0xfe
 8003274:	e07e      	b.n	8003374 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	2b0f      	cmp	r3, #15
 800327a:	d841      	bhi.n	8003300 <extiConfigIrq+0xd0>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <extiConfigIrq+0x54>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032c5 	.word	0x080032c5
 800328c:	080032c5 	.word	0x080032c5
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080032d1 	.word	0x080032d1
 8003298:	080032d1 	.word	0x080032d1
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080032d1 	.word	0x080032d1
 80032a4:	080032e1 	.word	0x080032e1
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080032e1 	.word	0x080032e1
 80032b4:	080032f1 	.word	0x080032f1
 80032b8:	080032f1 	.word	0x080032f1
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080032f1 	.word	0x080032f1
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
            break;
 80032ce:	e017      	b.n	8003300 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	3b04      	subs	r3, #4
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	73bb      	strb	r3, [r7, #14]
            index = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
            break;
 80032de:	e00f      	b.n	8003300 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	3b08      	subs	r3, #8
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	73bb      	strb	r3, [r7, #14]
            index = 2;
 80032ea:	2302      	movs	r3, #2
 80032ec:	73fb      	strb	r3, [r7, #15]
            break;
 80032ee:	e007      	b.n	8003300 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	3b0c      	subs	r3, #12
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	73bb      	strb	r3, [r7, #14]
            index = 3;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
            break;
 80032fe:	bf00      	nop
    }

    if (GPIOA == port)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <extiConfigIrq+0x14c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d102      	bne.n	800330e <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8003308:	2300      	movs	r3, #0
 800330a:	737b      	strb	r3, [r7, #13]
 800330c:	e021      	b.n	8003352 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <extiConfigIrq+0x150>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d102      	bne.n	800331c <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8003316:	2301      	movs	r3, #1
 8003318:	737b      	strb	r3, [r7, #13]
 800331a:	e01a      	b.n	8003352 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a19      	ldr	r2, [pc, #100]	; (8003384 <extiConfigIrq+0x154>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d102      	bne.n	800332a <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8003324:	2302      	movs	r3, #2
 8003326:	737b      	strb	r3, [r7, #13]
 8003328:	e013      	b.n	8003352 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a16      	ldr	r2, [pc, #88]	; (8003388 <extiConfigIrq+0x158>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d102      	bne.n	8003338 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8003332:	2303      	movs	r3, #3
 8003334:	737b      	strb	r3, [r7, #13]
 8003336:	e00c      	b.n	8003352 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <extiConfigIrq+0x15c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d102      	bne.n	8003346 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8003340:	2304      	movs	r3, #4
 8003342:	737b      	strb	r3, [r7, #13]
 8003344:	e005      	b.n	8003352 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <extiConfigIrq+0x160>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 800334e:	2307      	movs	r3, #7
 8003350:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <extiConfigIrq+0x164>)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3302      	adds	r3, #2
 8003358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800335c:	7b79      	ldrb	r1, [r7, #13]
 800335e:	7bbb      	ldrb	r3, [r7, #14]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	4618      	mov	r0, r3
 8003366:	490b      	ldr	r1, [pc, #44]	; (8003394 <extiConfigIrq+0x164>)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	4302      	orrs	r2, r0
 800336c:	3302      	adds	r3, #2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021c00 	.word	0x40021c00
 8003394:	40013800 	.word	0x40013800

08003398 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff febf 	bl	8003128 <extiVerifyIrqNum>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f083 0301 	eor.w	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 80033b6:	23d8      	movs	r3, #216	; 0xd8
 80033b8:	e00a      	b.n	80033d0 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <extiEnableIrq+0x40>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4611      	mov	r1, r2
 80033c8:	4a03      	ldr	r2, [pc, #12]	; (80033d8 <extiEnableIrq+0x40>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40013c00 	.word	0x40013c00

080033dc <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	460a      	mov	r2, r1
 80033e6:	71fb      	strb	r3, [r7, #7]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fe9a 	bl	8003128 <extiVerifyIrqNum>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8003400:	23d8      	movs	r3, #216	; 0xd8
 8003402:	e055      	b.n	80034b0 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8003404:	79bb      	ldrb	r3, [r7, #6]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fede 	bl	80031c8 <extiVerifyTrigger>
 800340c:	4603      	mov	r3, r0
 800340e:	f083 0301 	eor.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8003418:	23d7      	movs	r3, #215	; 0xd7
 800341a:	e049      	b.n	80034b0 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	4611      	mov	r1, r2
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	79fa      	ldrb	r2, [r7, #7]
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	43d2      	mvns	r2, r2
 8003444:	4611      	mov	r1, r2
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003448:	400b      	ands	r3, r1
 800344a:	60d3      	str	r3, [r2, #12]
 800344c:	e02f      	b.n	80034ae <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 800344e:	79bb      	ldrb	r3, [r7, #6]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d115      	bne.n	8003480 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	79fa      	ldrb	r2, [r7, #7]
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f202 	lsl.w	r2, r1, r2
 8003460:	4611      	mov	r1, r2
 8003462:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003464:	430b      	orrs	r3, r1
 8003466:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	79fa      	ldrb	r2, [r7, #7]
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f202 	lsl.w	r2, r1, r2
 8003474:	43d2      	mvns	r2, r2
 8003476:	4611      	mov	r1, r2
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 800347a:	400b      	ands	r3, r1
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e016      	b.n	80034ae <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8003480:	79bb      	ldrb	r3, [r7, #6]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d113      	bne.n	80034ae <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 8003496:	430b      	orrs	r3, r1
 8003498:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	79fa      	ldrb	r2, [r7, #7]
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	4611      	mov	r1, r2
 80034a8:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <extiSetTriggerEdge+0xdc>)
 80034aa:	430b      	orrs	r3, r1
 80034ac:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40013c00 	.word	0x40013c00

080034bc <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <gpioVerifyPort+0x4c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <gpioVerifyPort+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0f      	ldr	r2, [pc, #60]	; (800350c <gpioVerifyPort+0x50>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <gpioVerifyPort+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <gpioVerifyPort+0x54>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <gpioVerifyPort+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <gpioVerifyPort+0x58>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <gpioVerifyPort+0x5c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <gpioVerifyPort+0x38>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <gpioVerifyPort+0x60>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <gpioVerifyPort+0x3c>
    {
        return true;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <gpioVerifyPort+0x3e>
    }
    return false;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021c00 	.word	0x40021c00

08003520 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02c      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d029      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d026      	beq.n	800358a <gpioVerifyPin+0x6a>
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d023      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d020      	beq.n	800358a <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d01d      	beq.n	800358a <gpioVerifyPin+0x6a>
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d01a      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b07      	cmp	r3, #7
 8003558:	d017      	beq.n	800358a <gpioVerifyPin+0x6a>
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d014      	beq.n	800358a <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	2b09      	cmp	r3, #9
 8003564:	d011      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b0a      	cmp	r3, #10
 800356a:	d00e      	beq.n	800358a <gpioVerifyPin+0x6a>
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b0b      	cmp	r3, #11
 8003570:	d00b      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d008      	beq.n	800358a <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b0d      	cmp	r3, #13
 800357c:	d005      	beq.n	800358a <gpioVerifyPin+0x6a>
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b0e      	cmp	r3, #14
 8003582:	d002      	beq.n	800358a <gpioVerifyPin+0x6a>
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d101      	bne.n	800358e <gpioVerifyPin+0x6e>
    {
        return true;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <gpioVerifyPin+0x70>
    }
    return false;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02c      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d029      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d026      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d023      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d020      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d01d      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d01a      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	2b07      	cmp	r3, #7
 80035d4:	d017      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d014      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	2b09      	cmp	r3, #9
 80035e0:	d011      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	2b0a      	cmp	r3, #10
 80035e6:	d00e      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b0b      	cmp	r3, #11
 80035ec:	d00b      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d008      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b0d      	cmp	r3, #13
 80035f8:	d005      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b0e      	cmp	r3, #14
 80035fe:	d002      	beq.n	8003606 <gpioVerifyAltFunc+0x6a>
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	d101      	bne.n	800360a <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <gpioVerifyAltFunc+0x70>
    }

    return false;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <gpioVerifyPinMode+0x22>
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d005      	beq.n	800363a <gpioVerifyPinMode+0x22>
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d002      	beq.n	800363a <gpioVerifyPinMode+0x22>
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d101      	bne.n	800363e <gpioVerifyPinMode+0x26>
    {
        return true;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <gpioVerifyPinMode+0x28>
    }

    return false;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <gpioVerifyOutputType+0x16>
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <gpioVerifyPushPullMode+0x1c>
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d002      	beq.n	8003690 <gpioVerifyPushPullMode+0x1c>
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d101      	bne.n	8003694 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff05 	bl	80034bc <gpioVerifyPort>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d042      	beq.n	800373e <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <gpioInitPort+0xa8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d106      	bne.n	80036ce <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <gpioInitPort+0xac>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <gpioInitPort+0xac>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6313      	str	r3, [r2, #48]	; 0x30
 80036cc:	e035      	b.n	800373a <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <gpioInitPort+0xb0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d106      	bne.n	80036e4 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <gpioInitPort+0xac>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <gpioInitPort+0xac>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	e02a      	b.n	800373a <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <gpioInitPort+0xb4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d106      	bne.n	80036fa <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <gpioInitPort+0xac>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <gpioInitPort+0xac>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6313      	str	r3, [r2, #48]	; 0x30
 80036f8:	e01f      	b.n	800373a <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <gpioInitPort+0xb8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d106      	bne.n	8003710 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <gpioInitPort+0xac>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <gpioInitPort+0xac>)
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	e014      	b.n	800373a <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <gpioInitPort+0xbc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d106      	bne.n	8003726 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <gpioInitPort+0xac>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <gpioInitPort+0xac>)
 800371e:	f043 0310 	orr.w	r3, r3, #16
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	e009      	b.n	800373a <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <gpioInitPort+0xc0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d105      	bne.n	800373a <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <gpioInitPort+0xac>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <gpioInitPort+0xac>)
 8003734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e001      	b.n	8003742 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40020000 	.word	0x40020000
 8003750:	40023800 	.word	0x40023800
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021c00 	.word	0x40021c00

08003768 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fea3 	bl	80034bc <gpioVerifyPort>
 8003776:	4603      	mov	r3, r0
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	e041      	b.n	800380c <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <gpioSelectPort+0xac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d106      	bne.n	800379e <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <gpioSelectPort+0xb0>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <gpioSelectPort+0xb0>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6313      	str	r3, [r2, #48]	; 0x30
 800379c:	e035      	b.n	800380a <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1e      	ldr	r2, [pc, #120]	; (800381c <gpioSelectPort+0xb4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d106      	bne.n	80037b4 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <gpioSelectPort+0xb0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <gpioSelectPort+0xb0>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	e02a      	b.n	800380a <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <gpioSelectPort+0xb8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d106      	bne.n	80037ca <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80037bc:	4b16      	ldr	r3, [pc, #88]	; (8003818 <gpioSelectPort+0xb0>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <gpioSelectPort+0xb0>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	e01f      	b.n	800380a <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <gpioSelectPort+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d106      	bne.n	80037e0 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <gpioSelectPort+0xb0>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <gpioSelectPort+0xb0>)
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	e014      	b.n	800380a <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a11      	ldr	r2, [pc, #68]	; (8003828 <gpioSelectPort+0xc0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d106      	bne.n	80037f6 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <gpioSelectPort+0xb0>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <gpioSelectPort+0xb0>)
 80037ee:	f043 0310 	orr.w	r3, r3, #16
 80037f2:	6313      	str	r3, [r2, #48]	; 0x30
 80037f4:	e009      	b.n	800380a <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	; (800382c <gpioSelectPort+0xc4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d105      	bne.n	800380a <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <gpioSelectPort+0xb0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <gpioSelectPort+0xb0>)
 8003804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40020000 	.word	0x40020000
 8003818:	40023800 	.word	0x40023800
 800381c:	40020400 	.word	0x40020400
 8003820:	40020800 	.word	0x40020800
 8003824:	40020c00 	.word	0x40020c00
 8003828:	40021000 	.word	0x40021000
 800382c:	40021c00 	.word	0x40021c00

08003830 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	4613      	mov	r3, r2
 800383e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fe3b 	bl	80034bc <gpioVerifyPort>
 8003846:	4603      	mov	r3, r0
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e032      	b.n	80038be <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fe60 	bl	8003520 <gpioVerifyPin>
 8003860:	4603      	mov	r3, r0
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 800386c:	f06f 0301 	mvn.w	r3, #1
 8003870:	e025      	b.n	80038be <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8003872:	78bb      	ldrb	r3, [r7, #2]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fecf 	bl	8003618 <gpioVerifyPinMode>
 800387a:	4603      	mov	r3, r0
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8003886:	f06f 0305 	mvn.w	r3, #5
 800388a:	e018      	b.n	80038be <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	0052      	lsls	r2, r2, #1
 8003894:	2103      	movs	r1, #3
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	43d2      	mvns	r2, r2
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80038a2:	78bb      	ldrb	r3, [r7, #2]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	78b9      	ldrb	r1, [r7, #2]
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	0052      	lsls	r2, r2, #1
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fdf2 	bl	80034bc <gpioVerifyPort>
 80038d8:	4603      	mov	r3, r0
 80038da:	f083 0301 	eor.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	e014      	b.n	8003914 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fe17 	bl	8003520 <gpioVerifyPin>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f083 0301 	eor.w	r3, r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80038fe:	f06f 0301 	mvn.w	r3, #1
 8003902:	e007      	b.n	8003914 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fdc7 	bl	80034bc <gpioVerifyPort>
 800392e:	4603      	mov	r3, r0
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	e015      	b.n	800396c <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fdec 	bl	8003520 <gpioVerifyPin>
 8003948:	4603      	mov	r3, r0
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003954:	f06f 0301 	mvn.w	r3, #1
 8003958:	e008      	b.n	800396c <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	3310      	adds	r3, #16
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
 8003980:	4613      	mov	r3, r2
 8003982:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fd99 	bl	80034bc <gpioVerifyPort>
 800398a:	4603      	mov	r3, r0
 800398c:	f083 0301 	eor.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e050      	b.n	8003a3e <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fdbe 	bl	8003520 <gpioVerifyPin>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 80039b0:	f06f 0301 	mvn.w	r3, #1
 80039b4:	e043      	b.n	8003a3e <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fdef 	bl	800359c <gpioVerifyAltFunc>
 80039be:	4603      	mov	r3, r0
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 80039ca:	f06f 0302 	mvn.w	r3, #2
 80039ce:	e036      	b.n	8003a3e <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2202      	movs	r2, #2
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ff2a 	bl	8003830 <gpioSelectPinMode>

	if (pin <= PIN7)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b07      	cmp	r3, #7
 80039e0:	d815      	bhi.n	8003a0e <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	210f      	movs	r1, #15
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	43d2      	mvns	r2, r2
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	78b9      	ldrb	r1, [r7, #2]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]
 8003a0c:	e016      	b.n	8003a3c <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	3a08      	subs	r2, #8
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	210f      	movs	r1, #15
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	43d2      	mvns	r2, r2
 8003a20:	401a      	ands	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	78b9      	ldrb	r1, [r7, #2]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	3a08      	subs	r2, #8
 8003a30:	0092      	lsls	r2, r2, #2
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
 8003a52:	4613      	mov	r3, r2
 8003a54:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fd30 	bl	80034bc <gpioVerifyPort>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f083 0301 	eor.w	r3, r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	e030      	b.n	8003ad0 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd55 	bl	8003520 <gpioVerifyPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8003a82:	f06f 0301 	mvn.w	r3, #1
 8003a86:	e023      	b.n	8003ad0 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fdde 	bl	800364c <gpioVerifyOutputType>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8003a9c:	f06f 0303 	mvn.w	r3, #3
 8003aa0:	e016      	b.n	8003ad0 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	43d2      	mvns	r2, r2
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8003ab6:	78bb      	ldrb	r3, [r7, #2]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d108      	bne.n	8003ace <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fce7 	bl	80034bc <gpioVerifyPort>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f083 0301 	eor.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e044      	b.n	8003b8a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fd0c 	bl	8003520 <gpioVerifyPin>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003b14:	f06f 0301 	mvn.w	r3, #1
 8003b18:	e037      	b.n	8003b8a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8003b1a:	78bb      	ldrb	r3, [r7, #2]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fda9 	bl	8003674 <gpioVerifyPushPullMode>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f083 0301 	eor.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8003b2e:	f06f 0306 	mvn.w	r3, #6
 8003b32:	e02a      	b.n	8003b8a <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	0052      	lsls	r2, r2, #1
 8003b3c:	2103      	movs	r1, #3
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	43d2      	mvns	r2, r2
 8003b44:	401a      	ands	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11a      	bne.n	8003b88 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10a      	bne.n	8003b6e <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	0052      	lsls	r2, r2, #1
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e00c      	b.n	8003b88 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8003b6e:	78bb      	ldrb	r3, [r7, #2]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d109      	bne.n	8003b88 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	0052      	lsls	r2, r2, #1
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	4013      	ands	r3, r2
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003bde:	bf00      	nop
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f9      	beq.n	8003be0 <__i2c_start+0x16>
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8003c0e:	bf00      	nop
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f9      	beq.n	8003c10 <__i2c_stop+0x16>
 }
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8003c32:	bf00      	nop
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ed      	bne.n	8003c34 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8003c6e:	bf00      	nop
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f9      	beq.n	8003c70 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e002      	b.n	8003c88 <__i2c_Chk_TX_empty+0x22>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b13      	cmp	r3, #19
 8003c8c:	d9f9      	bls.n	8003c82 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <i2cVerifyDutyCycle+0x16>
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <i2cSelectI2C+0x58>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce0:	e014      	b.n	8003d0c <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <i2cSelectI2C+0x60>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d106      	bne.n	8003cf8 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	e009      	b.n	8003d0c <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <i2cSelectI2C+0x64>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d105      	bne.n	8003d0c <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <i2cSelectI2C+0x5c>)
 8003d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40005400 	.word	0x40005400
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40005800 	.word	0x40005800
 8003d28:	40005c00 	.word	0x40005c00

08003d2c <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <i2cSetClkSpd+0x2a>
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d008      	beq.n	8003d56 <i2cSetClkSpd+0x2a>
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d005      	beq.n	8003d56 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d002      	beq.n	8003d56 <i2cSetClkSpd+0x2a>
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d160      	bne.n	8003e18 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8003d56:	bf00      	nop
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f9      	bne.n	8003d58 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d836      	bhi.n	8003dfa <i2cSetClkSpd+0xce>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <i2cSetClkSpd+0x68>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003db7 	.word	0x08003db7
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003de1 	.word	0x08003de1
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	61da      	str	r2, [r3, #28]
				break;
 8003db4:	e02e      	b.n	8003e14 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	61da      	str	r2, [r3, #28]
    			break;
 8003dc2:	e027      	b.n	8003e14 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	61da      	str	r2, [r3, #28]
    				break;
 8003dd0:	e020      	b.n	8003e14 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f043 0214 	orr.w	r2, r3, #20
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	61da      	str	r2, [r3, #28]
    			break;
 8003dde:	e019      	b.n	8003e14 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f043 0205 	orr.w	r2, r3, #5
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	61da      	str	r2, [r3, #28]
				break;
 8003df8:	e00c      	b.n	8003e14 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	61da      	str	r2, [r3, #28]
    			break;
 8003e12:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e001      	b.n	8003e1c <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8003e18:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	70fb      	strb	r3, [r7, #3]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70bb      	strb	r3, [r7, #2]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff29 	bl	8003c9c <i2cVerifyDutyCycle>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8003e56:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8003e5a:	e02f      	b.n	8003ebc <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e62:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8003e76:	f000 fbad 	bl	80045d4 <rccGetPclk1Freq>
 8003e7a:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <i2cInitI2C+0x9c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	0c9a      	lsrs	r2, r3, #18
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2211      	movs	r2, #17
 8003e8e:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8003ea4:	787b      	ldrb	r3, [r7, #1]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff3f 	bl	8003d2c <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	431bde83 	.word	0x431bde83

08003ec8 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	70fb      	strb	r3, [r7, #3]
 8003eda:	460b      	mov	r3, r1
 8003edc:	70bb      	strb	r3, [r7, #2]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003ee2:	bf00      	nop
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fe6a 	bl	8003bca <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003ef6:	bf00      	nop
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f9      	beq.n	8003ef8 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003f0e:	bf00      	nop
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f9      	beq.n	8003f10 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fe84 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe9f 	bl	8003c66 <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8003f28:	78ba      	ldrb	r2, [r7, #2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fe99 	bl	8003c66 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fe78 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8003f3a:	787a      	ldrb	r2, [r7, #1]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8003f40:	bf00      	nop
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f9      	beq.n	8003f42 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fe6b 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fe50 	bl	8003bfa <__i2c_stop>


    return I2C_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	460b      	mov	r3, r1
 8003f72:	72fb      	strb	r3, [r7, #11]
 8003f74:	4613      	mov	r3, r2
 8003f76:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 8003f7c:	bf00      	nop
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f9      	bne.n	8003f7e <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fe17 	bl	8003bca <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003f9c:	bf00      	nop
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f9      	beq.n	8003f9e <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003fb4:	bf00      	nop
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f9      	beq.n	8003fb6 <i2cBurstWrite+0x52>

    while (numBytes < len)
 8003fc2:	e016      	b.n	8003ff2 <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fe4e 	bl	8003c66 <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fe2d 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8003fde:	bf00      	nop
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f9      	beq.n	8003fe0 <i2cBurstWrite+0x7c>

        numBytes++;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 8003ff2:	7dfa      	ldrb	r2, [r7, #23]
 8003ff4:	7abb      	ldrb	r3, [r7, #10]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3e4      	bcc.n	8003fc4 <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8003ffa:	bf00      	nop
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f9      	beq.n	8003ffc <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fe0e 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff fdf3 	bl	8003bfa <__i2c_stop>

    return I2C_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	72fb      	strb	r3, [r7, #11]
 800402c:	4613      	mov	r3, r2
 800402e:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8004030:	bf00      	nop
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f9      	bne.n	8004032 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fdc3 	bl	8003bca <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8004044:	bf00      	nop
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f9      	beq.n	8004046 <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	461a      	mov	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800405c:	bf00      	nop
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f9      	beq.n	800405e <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff fddd 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8004070:	7aba      	ldrb	r2, [r7, #10]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff fdf5 	bl	8003c66 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff fdd4 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 800408e:	bf00      	nop
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f9      	beq.n	8004090 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80040aa:	bf00      	nop
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f9      	beq.n	80040ac <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff fdb0 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fd95 	bl	8003bfa <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 80040d0:	bf00      	nop
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f9      	beq.n	80040d2 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6919      	ldr	r1, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	b2ca      	uxtb	r2, r1
 80040ea:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	72fb      	strb	r3, [r7, #11]
 8004104:	4613      	mov	r3, r2
 8004106:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8004108:	bf00      	nop
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff fd57 	bl	8003bca <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800411c:	bf00      	nop
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f9      	beq.n	800411e <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8004134:	bf00      	nop
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f9      	beq.n	8004136 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fd71 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8004148:	7aba      	ldrb	r2, [r7, #10]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fd89 	bl	8003c66 <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8004154:	bf00      	nop
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f9      	beq.n	8004156 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff fd61 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8004174:	bf00      	nop
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f9      	beq.n	8004176 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8004190:	bf00      	nop
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f9      	beq.n	8004192 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80041aa:	e02e      	b.n	800420a <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 80041ac:	7e3b      	ldrb	r3, [r7, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d117      	bne.n	80041e2 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fd33 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80041c4:	bf00      	nop
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f9      	beq.n	80041c6 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6919      	ldr	r1, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	b2ca      	uxtb	r2, r1
 80041de:	701a      	strb	r2, [r3, #0]
            break;
 80041e0:	e016      	b.n	8004210 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff fd21 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80041e8:	bf00      	nop
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f9      	beq.n	80041ea <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6919      	ldr	r1, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	b2ca      	uxtb	r2, r1
 8004202:	701a      	strb	r2, [r3, #0]
            num--;
 8004204:	7e3b      	ldrb	r3, [r7, #24]
 8004206:	3b01      	subs	r3, #1
 8004208:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 800420a:	7e3b      	ldrb	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1cd      	bne.n	80041ac <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff fd0a 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fcef 	bl	8003bfa <__i2c_stop>

    return I2C_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <i2cBurstRead>:

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	461a      	mov	r2, r3
 8004232:	460b      	mov	r3, r1
 8004234:	72fb      	strb	r3, [r7, #11]
 8004236:	4613      	mov	r3, r2
 8004238:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 800423a:	bf00      	nop
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f9      	bne.n	800423c <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff fcb8 	bl	8003bca <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 800425a:	7afb      	ldrb	r3, [r7, #11]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8004268:	bf00      	nop
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f9      	beq.n	800426a <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff fcd7 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8004288:	e02e      	b.n	80042e8 <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 800428a:	7abb      	ldrb	r3, [r7, #10]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d11a      	bne.n	80042c6 <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fcc4 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fca9 	bl	8003bfa <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80042a8:	bf00      	nop
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f9      	beq.n	80042aa <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	b2ca      	uxtb	r2, r1
 80042c2:	701a      	strb	r2, [r3, #0]
            break;
 80042c4:	e013      	b.n	80042ee <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80042c6:	bf00      	nop
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f9      	beq.n	80042c8 <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	b2ca      	uxtb	r2, r1
 80042e0:	701a      	strb	r2, [r3, #0]
            num--;
 80042e2:	7abb      	ldrb	r3, [r7, #10]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 80042e8:	7abb      	ldrb	r3, [r7, #10]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1cd      	bne.n	800428a <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fc4f 	bl	8003bca <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fc77 	bl	8003c2a <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e002      	b.n	8004354 <i2cFindSlaveAddr+0x3a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800435a:	d3f8      	bcc.n	800434e <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	e000      	b.n	800436e <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 800436c:	2300      	movs	r3, #0
    }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b094      	sub	sp, #80	; 0x50
 800437e:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8004380:	2300      	movs	r3, #0
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8004384:	2300      	movs	r3, #0
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8004388:	2300      	movs	r3, #0
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 800438c:	2300      	movs	r3, #0
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8004390:	4b79      	ldr	r3, [pc, #484]	; (8004578 <rccGetSysClock+0x200>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d00d      	beq.n	80043b8 <rccGetSysClock+0x40>
 800439c:	2b08      	cmp	r3, #8
 800439e:	f200 80e1 	bhi.w	8004564 <rccGetSysClock+0x1ec>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <rccGetSysClock+0x34>
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d003      	beq.n	80043b2 <rccGetSysClock+0x3a>
 80043aa:	e0db      	b.n	8004564 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80043ac:	4b73      	ldr	r3, [pc, #460]	; (800457c <rccGetSysClock+0x204>)
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80043b0:	e0db      	b.n	800456a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80043b2:	4b73      	ldr	r3, [pc, #460]	; (8004580 <rccGetSysClock+0x208>)
 80043b4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80043b6:	e0d8      	b.n	800456a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b8:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <rccGetSysClock+0x200>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043c2:	4b6d      	ldr	r3, [pc, #436]	; (8004578 <rccGetSysClock+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d063      	beq.n	8004496 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80043ce:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <rccGetSysClock+0x200>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	2200      	movs	r2, #0
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
 80043e2:	2300      	movs	r3, #0
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
 80043e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043ea:	4622      	mov	r2, r4
 80043ec:	462b      	mov	r3, r5
 80043ee:	f04f 0000 	mov.w	r0, #0
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	0159      	lsls	r1, r3, #5
 80043f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043fc:	0150      	lsls	r0, r2, #5
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4621      	mov	r1, r4
 8004404:	1a51      	subs	r1, r2, r1
 8004406:	6139      	str	r1, [r7, #16]
 8004408:	4629      	mov	r1, r5
 800440a:	eb63 0301 	sbc.w	r3, r3, r1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800441c:	4659      	mov	r1, fp
 800441e:	018b      	lsls	r3, r1, #6
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004426:	4651      	mov	r1, sl
 8004428:	018a      	lsls	r2, r1, #6
 800442a:	4651      	mov	r1, sl
 800442c:	ebb2 0801 	subs.w	r8, r2, r1
 8004430:	4659      	mov	r1, fp
 8004432:	eb63 0901 	sbc.w	r9, r3, r1
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444a:	4690      	mov	r8, r2
 800444c:	4699      	mov	r9, r3
 800444e:	4623      	mov	r3, r4
 8004450:	eb18 0303 	adds.w	r3, r8, r3
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	462b      	mov	r3, r5
 8004458:	eb49 0303 	adc.w	r3, r9, r3
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800446a:	4629      	mov	r1, r5
 800446c:	024b      	lsls	r3, r1, #9
 800446e:	4621      	mov	r1, r4
 8004470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004474:	4621      	mov	r1, r4
 8004476:	024a      	lsls	r2, r1, #9
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	2200      	movs	r2, #0
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004488:	f7fc fbe6 	bl	8000c58 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8004490:	4613      	mov	r3, r2
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	e058      	b.n	8004548 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004496:	4b38      	ldr	r3, [pc, #224]	; (8004578 <rccGetSysClock+0x200>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	2200      	movs	r2, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	4611      	mov	r1, r2
 80044a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	0159      	lsls	r1, r3, #5
 80044be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c2:	0150      	lsls	r0, r2, #5
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4641      	mov	r1, r8
 80044ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ce:	4649      	mov	r1, r9
 80044d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e8:	ebb2 040a 	subs.w	r4, r2, sl
 80044ec:	eb63 050b 	sbc.w	r5, r3, fp
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	00eb      	lsls	r3, r5, #3
 80044fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fe:	00e2      	lsls	r2, r4, #3
 8004500:	4614      	mov	r4, r2
 8004502:	461d      	mov	r5, r3
 8004504:	4643      	mov	r3, r8
 8004506:	18e3      	adds	r3, r4, r3
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	464b      	mov	r3, r9
 800450c:	eb45 0303 	adc.w	r3, r5, r3
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451e:	4629      	mov	r1, r5
 8004520:	028b      	lsls	r3, r1, #10
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004528:	4621      	mov	r1, r4
 800452a:	028a      	lsls	r2, r1, #10
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	61fa      	str	r2, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	f7fc fb8c 	bl	8000c58 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8004544:	4613      	mov	r3, r2
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <rccGetSysClock+0x200>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	3301      	adds	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8004558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8004562:	e002      	b.n	800456a <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <rccGetSysClock+0x204>)
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8004568:	bf00      	nop
    }

    return sysClock;
 800456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800456c:	4618      	mov	r0, r3
 800456e:	3750      	adds	r7, #80	; 0x50
 8004570:	46bd      	mov	sp, r7
 8004572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200

08004584 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 800458a:	f7ff fef5 	bl	8004378 <rccGetSysClock>
 800458e:	4601      	mov	r1, r0
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <rccGetHclkFreq+0x44>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	22f0      	movs	r2, #240	; 0xf0
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	fa92 f2a2 	rbit	r2, r2
 80045a2:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	fab2 f282 	clz	r2, r2
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	40d3      	lsrs	r3, r2
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <rccGetHclkFreq+0x48>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	fa21 f303 	lsr.w	r3, r1, r3
 80045b6:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <rccGetHclkFreq+0x4c>)
 80045b8:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <rccGetHclkFreq+0x4c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08009674 	.word	0x08009674
 80045d0:	20000030 	.word	0x20000030

080045d4 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80045da:	f7ff ffd3 	bl	8004584 <rccGetHclkFreq>
 80045de:	4601      	mov	r1, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <rccGetPclk1Freq+0x3c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80045e8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80045ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	fa92 f2a2 	rbit	r2, r2
 80045f4:	603a      	str	r2, [r7, #0]
  return result;
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	fab2 f282 	clz	r2, r2
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	40d3      	lsrs	r3, r2
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <rccGetPclk1Freq+0x40>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40023800 	.word	0x40023800
 8004614:	08009674 	.word	0x08009674

08004618 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8004620:	bf00      	nop
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f9      	beq.n	8004622 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800462e:	2300      	movs	r3, #0
 8004630:	81fb      	strh	r3, [r7, #14]
 8004632:	e002      	b.n	800463a <__spi_Chk_TX_empty+0x22>
 8004634:	89fb      	ldrh	r3, [r7, #14]
 8004636:	3301      	adds	r3, #1
 8004638:	81fb      	strh	r3, [r7, #14]
 800463a:	89fb      	ldrh	r3, [r7, #14]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d9f9      	bls.n	8004634 <__spi_Chk_TX_empty+0x1c>

}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8004656:	bf00      	nop
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f9      	bne.n	8004658 <__spi_Chk_notBSY+0xa>
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0c      	ldr	r2, [pc, #48]	; (80046b0 <spiVerifySPI+0x3c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <spiVerifySPI+0x28>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <spiVerifySPI+0x40>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <spiVerifySPI+0x28>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <spiVerifySPI+0x44>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <spiVerifySPI+0x28>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <spiVerifySPI+0x48>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <spiVerifySPI+0x2c>
    {
        return true;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <spiVerifySPI+0x2e>
    }
    return false;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40013000 	.word	0x40013000
 80046b4:	40003800 	.word	0x40003800
 80046b8:	40003c00 	.word	0x40003c00
 80046bc:	40013400 	.word	0x40013400

080046c0 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d014      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d011      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d00e      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d00b      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d008      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d005      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d002      	beq.n	80046fa <spiVerifyClkDivider+0x3a>
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	2b07      	cmp	r3, #7
 80046f8:	d101      	bne.n	80046fe <spiVerifyClkDivider+0x3e>
    {
        return true;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <spiVerifyClkDivider+0x40>
    }
    return false;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d002      	beq.n	8004722 <spiVerifySSM+0x16>
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <spiVerifySSM+0x1a>
    {
        return true;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <spiVerifySSM+0x1c>
    }
    return false;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <spiVerifyOpMode+0x16>
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <spiVerifyOpMode+0x1a>
    {
        return true;
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <spiVerifyOpMode+0x1c>
    }
    return false;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <spiVerifyPhase+0x16>
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <spiVerifyPhase+0x1a>
    {
        return true;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <spiVerifyPhase+0x1c>
    }
    return false;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <spiVerifyIdlePolarity+0x16>
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
 80047be:	460b      	mov	r3, r1
 80047c0:	70bb      	strb	r3, [r7, #2]
 80047c2:	4613      	mov	r3, r2
 80047c4:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff77 	bl	80046c0 <spiVerifyClkDivider>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f083 0301 	eor.w	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80047de:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80047e2:	e0cc      	b.n	800497e <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff90 	bl	800470c <spiVerifySSM>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 80047f8:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80047fc:	e0bf      	b.n	800497e <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 80047fe:	7f3b      	ldrb	r3, [r7, #28]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff97 	bl	8004734 <spiVerifyOpMode>
 8004806:	4603      	mov	r3, r0
 8004808:	f083 0301 	eor.w	r3, r3, #1
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8004812:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8004816:	e0b2      	b.n	800497e <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8004818:	f897 3020 	ldrb.w	r3, [r7, #32]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff9d 	bl	800475c <spiVerifyPhase>
 8004822:	4603      	mov	r3, r0
 8004824:	f083 0301 	eor.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 800482e:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8004832:	e0a4      	b.n	800497e <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8004834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ffa3 	bl	8004784 <spiVerifyIdlePolarity>
 800483e:	4603      	mov	r3, r0
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800484a:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800484e:	e096      	b.n	800497e <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b07      	cmp	r3, #7
 8004854:	d83a      	bhi.n	80048cc <spiInitSPI+0x120>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <spiInitSPI+0xb0>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800487d 	.word	0x0800487d
 8004860:	08004887 	.word	0x08004887
 8004864:	08004891 	.word	0x08004891
 8004868:	0800489b 	.word	0x0800489b
 800486c:	080048a5 	.word	0x080048a5
 8004870:	080048af 	.word	0x080048af
 8004874:	080048b9 	.word	0x080048b9
 8004878:	080048c3 	.word	0x080048c3
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004882:	81fb      	strh	r3, [r7, #14]
            break;
 8004884:	e027      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	81fb      	strh	r3, [r7, #14]
            break;
 800488e:	e022      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	f043 0310 	orr.w	r3, r3, #16
 8004896:	81fb      	strh	r3, [r7, #14]
            break;
 8004898:	e01d      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	f043 0318 	orr.w	r3, r3, #24
 80048a0:	81fb      	strh	r3, [r7, #14]
            break;
 80048a2:	e018      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	81fb      	strh	r3, [r7, #14]
            break;
 80048ac:	e013      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80048b4:	81fb      	strh	r3, [r7, #14]
            break;
 80048b6:	e00e      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80048be:	81fb      	strh	r3, [r7, #14]
            break;
 80048c0:	e009      	b.n	80048d6 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80048c8:	81fb      	strh	r3, [r7, #14]
            break;
 80048ca:	e004      	b.n	80048d6 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	f043 0318 	orr.w	r3, r3, #24
 80048d2:	81fb      	strh	r3, [r7, #14]
            break;
 80048d4:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 80048d6:	78bb      	ldrb	r3, [r7, #2]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 80048dc:	89fb      	ldrh	r3, [r7, #14]
 80048de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e2:	81fb      	strh	r3, [r7, #14]
 80048e4:	e003      	b.n	80048ee <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048ec:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80048ee:	787b      	ldrb	r3, [r7, #1]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d110      	bne.n	8004916 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fa:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 80048fc:	7e3b      	ldrb	r3, [r7, #24]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d104      	bne.n	800490c <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	81fb      	strh	r3, [r7, #14]
 800490a:	e008      	b.n	800491e <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004912:	81fb      	strh	r3, [r7, #14]
 8004914:	e003      	b.n	800491e <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8004916:	89fb      	ldrh	r3, [r7, #14]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 800491e:	7f3b      	ldrb	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	81fb      	strh	r3, [r7, #14]
 800492c:	e003      	b.n	8004936 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 800492e:	89fb      	ldrh	r3, [r7, #14]
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8004936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	81fb      	strh	r3, [r7, #14]
 8004946:	e003      	b.n	8004950 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8004950:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	f023 0302 	bic.w	r3, r3, #2
 800495e:	81fb      	strh	r3, [r7, #14]
 8004960:	e003      	b.n	800496a <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 800496a:	89fa      	ldrh	r2, [r7, #14]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f846 	bl	8004a08 <spiEnableSPI>

    return SPI_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop

08004988 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <spiSelectSPI+0x6c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d106      	bne.n	80049a6 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004998:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <spiSelectSPI+0x70>)
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <spiSelectSPI+0x70>)
 800499e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049a2:	6453      	str	r3, [r2, #68]	; 0x44
 80049a4:	e01f      	b.n	80049e6 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <spiSelectSPI+0x74>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d106      	bne.n	80049bc <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <spiSelectSPI+0x70>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <spiSelectSPI+0x70>)
 80049b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	e014      	b.n	80049e6 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <spiSelectSPI+0x78>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d106      	bne.n	80049d2 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <spiSelectSPI+0x70>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <spiSelectSPI+0x70>)
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	e009      	b.n	80049e6 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a0b      	ldr	r2, [pc, #44]	; (8004a04 <spiSelectSPI+0x7c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d105      	bne.n	80049e6 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <spiSelectSPI+0x70>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <spiSelectSPI+0x70>)
 80049e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049e4:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40013000 	.word	0x40013000
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40003800 	.word	0x40003800
 8004a00:	40003c00 	.word	0x40003c00
 8004a04:	40013400 	.word	0x40013400

08004a08 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe2f 	bl	8004674 <spiVerifySPI>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f083 0301 	eor.w	r3, r3, #1
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8004a22:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8004a26:	e006      	b.n	8004a36 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	71fb      	strb	r3, [r7, #7]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fd62 	bl	8003520 <gpioVerifyPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f083 0301 	eor.w	r3, r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8004a68:	f06f 0301 	mvn.w	r3, #1
 8004a6c:	e016      	b.n	8004a9c <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fdd2 	bl	8004618 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4619      	mov	r1, r3
 8004a78:	68b8      	ldr	r0, [r7, #8]
 8004a7a:	f7fe ff4f 	bl	800391c <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8004a7e:	79ba      	ldrb	r2, [r7, #6]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff fdc7 	bl	8004618 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fddf 	bl	800464e <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	4619      	mov	r1, r3
 8004a94:	68b8      	ldr	r0, [r7, #8]
 8004a96:	f7fe ff16 	bl	80038c6 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	; (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d301      	bcc.n	8004b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e00f      	b.n	8004b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <SysTick_Config+0x40>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b16:	210f      	movs	r1, #15
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f7ff ffc2 	bl	8004aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SysTick_Config+0x40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SysTick_Config+0x40>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8004b60:	f000 f8b2 	bl	8004cc8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <systickInit+0x24>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ffc2 	bl	8004af8 <SysTick_Config>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000030 	.word	0x20000030

08004b80 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <isSystickExpired+0x16>
	{
		timerState = true;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <SysTick_Handler+0x14>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000227 	.word	0x20000227

08004bd8 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <systickUpdateTimer+0x1a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	1e5a      	subs	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8004bf2:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <systickUpdateTimer+0x2c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000227 	.word	0x20000227

08004c08 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
 8004c18:	e011      	b.n	8004c3e <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <systickUpdateTimerList+0x30>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d3e9      	bcc.n	8004c1a <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8004c46:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <systickUpdateTimerList+0x50>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	20000227 	.word	0x20000227

08004c5c <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff67 	bl	8004b3c <systickSetMillis>
    while (!isSystickExpired(*timer))
 8004c6e:	e006      	b.n	8004c7e <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <systickDelay+0x44>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ffad 	bl	8004bd8 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff8a 	bl	8004b9c <isSystickExpired>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f083 0301 	eor.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ed      	bne.n	8004c70 <systickDelay+0x14>
        }
    }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000227 	.word	0x20000227

08004ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <SystemInit+0x20>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <SystemInit+0x20>)
 8004cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	2302      	movs	r3, #2
 8004ce0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004ce2:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d011      	beq.n	8004d16 <SystemCoreClockUpdate+0x4e>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d844      	bhi.n	8004d82 <SystemCoreClockUpdate+0xba>
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <SystemCoreClockUpdate+0x3e>
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d004      	beq.n	8004d0e <SystemCoreClockUpdate+0x46>
 8004d04:	e03d      	b.n	8004d82 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004d08:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <SystemCoreClockUpdate+0xf4>)
 8004d0a:	601a      	str	r2, [r3, #0]
      break;
 8004d0c:	e03d      	b.n	8004d8a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <SystemCoreClockUpdate+0xf8>)
 8004d12:	601a      	str	r2, [r3, #0]
      break;
 8004d14:	e039      	b.n	8004d8a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d16:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0d9b      	lsrs	r3, r3, #22
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d32:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <SystemCoreClockUpdate+0xf8>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	0992      	lsrs	r2, r2, #6
 8004d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e00b      	b.n	8004d64 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d4c:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <SystemCoreClockUpdate+0xf4>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d56:	6852      	ldr	r2, [r2, #4]
 8004d58:	0992      	lsrs	r2, r2, #6
 8004d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004d7e:	6013      	str	r3, [r2, #0]
      break;
 8004d80:	e003      	b.n	8004d8a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <SystemCoreClockUpdate+0xf4>)
 8004d86:	601a      	str	r2, [r3, #0]
      break;
 8004d88:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <SystemCoreClockUpdate+0xec>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <SystemCoreClockUpdate+0xfc>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <SystemCoreClockUpdate+0xf0>)
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40023800 	.word	0x40023800
 8004db8:	20000030 	.word	0x20000030
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	08009684 	.word	0x08009684

08004dc8 <__errno>:
 8004dc8:	4b01      	ldr	r3, [pc, #4]	; (8004dd0 <__errno+0x8>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000034 	.word	0x20000034

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	; (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	; (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	; (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	; (8004e18 <__libc_init_array+0x44>)
 8004de8:	f004 f928 	bl	800903c <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08009c90 	.word	0x08009c90
 8004e10:	08009c90 	.word	0x08009c90
 8004e14:	08009c90 	.word	0x08009c90
 8004e18:	08009c94 	.word	0x08009c94

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <__cvt>:
 8004e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	461d      	mov	r5, r3
 8004e36:	4614      	mov	r4, r2
 8004e38:	bfbc      	itt	lt
 8004e3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	4614      	movlt	r4, r2
 8004e40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e42:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004e44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e48:	bfb6      	itet	lt
 8004e4a:	461d      	movlt	r5, r3
 8004e4c:	2300      	movge	r3, #0
 8004e4e:	232d      	movlt	r3, #45	; 0x2d
 8004e50:	7013      	strb	r3, [r2, #0]
 8004e52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e54:	f023 0820 	bic.w	r8, r3, #32
 8004e58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e5c:	d005      	beq.n	8004e6a <__cvt+0x3e>
 8004e5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e62:	d100      	bne.n	8004e66 <__cvt+0x3a>
 8004e64:	3601      	adds	r6, #1
 8004e66:	2302      	movs	r3, #2
 8004e68:	e000      	b.n	8004e6c <__cvt+0x40>
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	aa07      	add	r2, sp, #28
 8004e6e:	9204      	str	r2, [sp, #16]
 8004e70:	aa06      	add	r2, sp, #24
 8004e72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e76:	e9cd 3600 	strd	r3, r6, [sp]
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	f000 fcef 	bl	8005860 <_dtoa_r>
 8004e82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e86:	4607      	mov	r7, r0
 8004e88:	d102      	bne.n	8004e90 <__cvt+0x64>
 8004e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e8c:	07db      	lsls	r3, r3, #31
 8004e8e:	d522      	bpl.n	8004ed6 <__cvt+0xaa>
 8004e90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e94:	eb07 0906 	add.w	r9, r7, r6
 8004e98:	d110      	bne.n	8004ebc <__cvt+0x90>
 8004e9a:	783b      	ldrb	r3, [r7, #0]
 8004e9c:	2b30      	cmp	r3, #48	; 0x30
 8004e9e:	d10a      	bne.n	8004eb6 <__cvt+0x8a>
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eac:	b918      	cbnz	r0, 8004eb6 <__cvt+0x8a>
 8004eae:	f1c6 0601 	rsb	r6, r6, #1
 8004eb2:	f8ca 6000 	str.w	r6, [sl]
 8004eb6:	f8da 3000 	ldr.w	r3, [sl]
 8004eba:	4499      	add	r9, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec8:	b108      	cbz	r0, 8004ece <__cvt+0xa2>
 8004eca:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ece:	2230      	movs	r2, #48	; 0x30
 8004ed0:	9b07      	ldr	r3, [sp, #28]
 8004ed2:	454b      	cmp	r3, r9
 8004ed4:	d307      	bcc.n	8004ee6 <__cvt+0xba>
 8004ed6:	9b07      	ldr	r3, [sp, #28]
 8004ed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004eda:	1bdb      	subs	r3, r3, r7
 8004edc:	4638      	mov	r0, r7
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	b008      	add	sp, #32
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	9107      	str	r1, [sp, #28]
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e7f0      	b.n	8004ed0 <__cvt+0xa4>

08004eee <__exponent>:
 8004eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	bfb8      	it	lt
 8004ef6:	4249      	neglt	r1, r1
 8004ef8:	f803 2b02 	strb.w	r2, [r3], #2
 8004efc:	bfb4      	ite	lt
 8004efe:	222d      	movlt	r2, #45	; 0x2d
 8004f00:	222b      	movge	r2, #43	; 0x2b
 8004f02:	2909      	cmp	r1, #9
 8004f04:	7042      	strb	r2, [r0, #1]
 8004f06:	dd2a      	ble.n	8004f5e <__exponent+0x70>
 8004f08:	f10d 0407 	add.w	r4, sp, #7
 8004f0c:	46a4      	mov	ip, r4
 8004f0e:	270a      	movs	r7, #10
 8004f10:	46a6      	mov	lr, r4
 8004f12:	460a      	mov	r2, r1
 8004f14:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f18:	fb07 1516 	mls	r5, r7, r6, r1
 8004f1c:	3530      	adds	r5, #48	; 0x30
 8004f1e:	2a63      	cmp	r2, #99	; 0x63
 8004f20:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f24:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f28:	4631      	mov	r1, r6
 8004f2a:	dcf1      	bgt.n	8004f10 <__exponent+0x22>
 8004f2c:	3130      	adds	r1, #48	; 0x30
 8004f2e:	f1ae 0502 	sub.w	r5, lr, #2
 8004f32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f36:	1c44      	adds	r4, r0, #1
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4561      	cmp	r1, ip
 8004f3c:	d30a      	bcc.n	8004f54 <__exponent+0x66>
 8004f3e:	f10d 0209 	add.w	r2, sp, #9
 8004f42:	eba2 020e 	sub.w	r2, r2, lr
 8004f46:	4565      	cmp	r5, ip
 8004f48:	bf88      	it	hi
 8004f4a:	2200      	movhi	r2, #0
 8004f4c:	4413      	add	r3, r2
 8004f4e:	1a18      	subs	r0, r3, r0
 8004f50:	b003      	add	sp, #12
 8004f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f5c:	e7ed      	b.n	8004f3a <__exponent+0x4c>
 8004f5e:	2330      	movs	r3, #48	; 0x30
 8004f60:	3130      	adds	r1, #48	; 0x30
 8004f62:	7083      	strb	r3, [r0, #2]
 8004f64:	70c1      	strb	r1, [r0, #3]
 8004f66:	1d03      	adds	r3, r0, #4
 8004f68:	e7f1      	b.n	8004f4e <__exponent+0x60>
	...

08004f6c <_printf_float>:
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	ed2d 8b02 	vpush	{d8}
 8004f74:	b091      	sub	sp, #68	; 0x44
 8004f76:	460c      	mov	r4, r1
 8004f78:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	461f      	mov	r7, r3
 8004f80:	4605      	mov	r5, r0
 8004f82:	f001 fa5b 	bl	800643c <_localeconv_r>
 8004f86:	f8d0 a000 	ldr.w	sl, [r0]
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f7fb f928 	bl	80001e0 <strlen>
 8004f90:	2300      	movs	r3, #0
 8004f92:	930e      	str	r3, [sp, #56]	; 0x38
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	9309      	str	r3, [sp, #36]	; 0x24
 8004f98:	f8d8 3000 	ldr.w	r3, [r8]
 8004f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	f023 0307 	bic.w	r3, r3, #7
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	f8c8 2000 	str.w	r2, [r8]
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004fc4:	ee08 0a10 	vmov	s16, r0
 8004fc8:	4ba0      	ldr	r3, [pc, #640]	; (800524c <_printf_float+0x2e0>)
 8004fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	f7fb fdb3 	bl	8000b3c <__aeabi_dcmpun>
 8004fd6:	bb88      	cbnz	r0, 800503c <_printf_float+0xd0>
 8004fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fdc:	4b9b      	ldr	r3, [pc, #620]	; (800524c <_printf_float+0x2e0>)
 8004fde:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe2:	f7fb fd8d 	bl	8000b00 <__aeabi_dcmple>
 8004fe6:	bb48      	cbnz	r0, 800503c <_printf_float+0xd0>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb fd7c 	bl	8000aec <__aeabi_dcmplt>
 8004ff4:	b110      	cbz	r0, 8004ffc <_printf_float+0x90>
 8004ff6:	232d      	movs	r3, #45	; 0x2d
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	4b94      	ldr	r3, [pc, #592]	; (8005250 <_printf_float+0x2e4>)
 8004ffe:	4895      	ldr	r0, [pc, #596]	; (8005254 <_printf_float+0x2e8>)
 8005000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005004:	bf94      	ite	ls
 8005006:	4698      	movls	r8, r3
 8005008:	4680      	movhi	r8, r0
 800500a:	2303      	movs	r3, #3
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	f04f 0900 	mov.w	r9, #0
 800501a:	9700      	str	r7, [sp, #0]
 800501c:	4633      	mov	r3, r6
 800501e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f000 f9da 	bl	80053dc <_printf_common>
 8005028:	3001      	adds	r0, #1
 800502a:	f040 8092 	bne.w	8005152 <_printf_float+0x1e6>
 800502e:	f04f 30ff 	mov.w	r0, #4294967295
 8005032:	b011      	add	sp, #68	; 0x44
 8005034:	ecbd 8b02 	vpop	{d8}
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb fd7a 	bl	8000b3c <__aeabi_dcmpun>
 8005048:	b140      	cbz	r0, 800505c <_printf_float+0xf0>
 800504a:	464b      	mov	r3, r9
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfbc      	itt	lt
 8005050:	232d      	movlt	r3, #45	; 0x2d
 8005052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005056:	4880      	ldr	r0, [pc, #512]	; (8005258 <_printf_float+0x2ec>)
 8005058:	4b80      	ldr	r3, [pc, #512]	; (800525c <_printf_float+0x2f0>)
 800505a:	e7d1      	b.n	8005000 <_printf_float+0x94>
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8005064:	d143      	bne.n	80050ee <_printf_float+0x182>
 8005066:	2306      	movs	r3, #6
 8005068:	6063      	str	r3, [r4, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506e:	9206      	str	r2, [sp, #24]
 8005070:	aa0e      	add	r2, sp, #56	; 0x38
 8005072:	e9cd b204 	strd	fp, r2, [sp, #16]
 8005076:	aa0d      	add	r2, sp, #52	; 0x34
 8005078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800507c:	9203      	str	r2, [sp, #12]
 800507e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005082:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	4628      	mov	r0, r5
 8005092:	910a      	str	r1, [sp, #40]	; 0x28
 8005094:	f7ff feca 	bl	8004e2c <__cvt>
 8005098:	990a      	ldr	r1, [sp, #40]	; 0x28
 800509a:	2947      	cmp	r1, #71	; 0x47
 800509c:	4680      	mov	r8, r0
 800509e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050a0:	d108      	bne.n	80050b4 <_printf_float+0x148>
 80050a2:	1cc8      	adds	r0, r1, #3
 80050a4:	db02      	blt.n	80050ac <_printf_float+0x140>
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	4299      	cmp	r1, r3
 80050aa:	dd40      	ble.n	800512e <_printf_float+0x1c2>
 80050ac:	f1ab 0b02 	sub.w	fp, fp, #2
 80050b0:	fa5f fb8b 	uxtb.w	fp, fp
 80050b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050b8:	d81f      	bhi.n	80050fa <_printf_float+0x18e>
 80050ba:	3901      	subs	r1, #1
 80050bc:	465a      	mov	r2, fp
 80050be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050c2:	910d      	str	r1, [sp, #52]	; 0x34
 80050c4:	f7ff ff13 	bl	8004eee <__exponent>
 80050c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ca:	1813      	adds	r3, r2, r0
 80050cc:	2a01      	cmp	r2, #1
 80050ce:	4681      	mov	r9, r0
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	dc02      	bgt.n	80050da <_printf_float+0x16e>
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	07d2      	lsls	r2, r2, #31
 80050d8:	d501      	bpl.n	80050de <_printf_float+0x172>
 80050da:	3301      	adds	r3, #1
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d099      	beq.n	800501a <_printf_float+0xae>
 80050e6:	232d      	movs	r3, #45	; 0x2d
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ec:	e795      	b.n	800501a <_printf_float+0xae>
 80050ee:	2947      	cmp	r1, #71	; 0x47
 80050f0:	d1bb      	bne.n	800506a <_printf_float+0xfe>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1b9      	bne.n	800506a <_printf_float+0xfe>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7b6      	b.n	8005068 <_printf_float+0xfc>
 80050fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050fe:	d118      	bne.n	8005132 <_printf_float+0x1c6>
 8005100:	2900      	cmp	r1, #0
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	dd0b      	ble.n	800511e <_printf_float+0x1b2>
 8005106:	6121      	str	r1, [r4, #16]
 8005108:	b913      	cbnz	r3, 8005110 <_printf_float+0x1a4>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	07d0      	lsls	r0, r2, #31
 800510e:	d502      	bpl.n	8005116 <_printf_float+0x1aa>
 8005110:	3301      	adds	r3, #1
 8005112:	440b      	add	r3, r1
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	65a1      	str	r1, [r4, #88]	; 0x58
 8005118:	f04f 0900 	mov.w	r9, #0
 800511c:	e7df      	b.n	80050de <_printf_float+0x172>
 800511e:	b913      	cbnz	r3, 8005126 <_printf_float+0x1ba>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	07d2      	lsls	r2, r2, #31
 8005124:	d501      	bpl.n	800512a <_printf_float+0x1be>
 8005126:	3302      	adds	r3, #2
 8005128:	e7f4      	b.n	8005114 <_printf_float+0x1a8>
 800512a:	2301      	movs	r3, #1
 800512c:	e7f2      	b.n	8005114 <_printf_float+0x1a8>
 800512e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005134:	4299      	cmp	r1, r3
 8005136:	db05      	blt.n	8005144 <_printf_float+0x1d8>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	6121      	str	r1, [r4, #16]
 800513c:	07d8      	lsls	r0, r3, #31
 800513e:	d5ea      	bpl.n	8005116 <_printf_float+0x1aa>
 8005140:	1c4b      	adds	r3, r1, #1
 8005142:	e7e7      	b.n	8005114 <_printf_float+0x1a8>
 8005144:	2900      	cmp	r1, #0
 8005146:	bfd4      	ite	le
 8005148:	f1c1 0202 	rsble	r2, r1, #2
 800514c:	2201      	movgt	r2, #1
 800514e:	4413      	add	r3, r2
 8005150:	e7e0      	b.n	8005114 <_printf_float+0x1a8>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	055a      	lsls	r2, r3, #21
 8005156:	d407      	bmi.n	8005168 <_printf_float+0x1fc>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	4642      	mov	r2, r8
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	d12c      	bne.n	80051c0 <_printf_float+0x254>
 8005166:	e762      	b.n	800502e <_printf_float+0xc2>
 8005168:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800516c:	f240 80e0 	bls.w	8005330 <_printf_float+0x3c4>
 8005170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005174:	2200      	movs	r2, #0
 8005176:	2300      	movs	r3, #0
 8005178:	f7fb fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800517c:	2800      	cmp	r0, #0
 800517e:	d034      	beq.n	80051ea <_printf_float+0x27e>
 8005180:	4a37      	ldr	r2, [pc, #220]	; (8005260 <_printf_float+0x2f4>)
 8005182:	2301      	movs	r3, #1
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f af4f 	beq.w	800502e <_printf_float+0xc2>
 8005190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005194:	429a      	cmp	r2, r3
 8005196:	db02      	blt.n	800519e <_printf_float+0x232>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	07d8      	lsls	r0, r3, #31
 800519c:	d510      	bpl.n	80051c0 <_printf_float+0x254>
 800519e:	ee18 3a10 	vmov	r3, s16
 80051a2:	4652      	mov	r2, sl
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f af3f 	beq.w	800502e <_printf_float+0xc2>
 80051b0:	f04f 0800 	mov.w	r8, #0
 80051b4:	f104 091a 	add.w	r9, r4, #26
 80051b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ba:	3b01      	subs	r3, #1
 80051bc:	4543      	cmp	r3, r8
 80051be:	dc09      	bgt.n	80051d4 <_printf_float+0x268>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	079b      	lsls	r3, r3, #30
 80051c4:	f100 8105 	bmi.w	80053d2 <_printf_float+0x466>
 80051c8:	68e0      	ldr	r0, [r4, #12]
 80051ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051cc:	4298      	cmp	r0, r3
 80051ce:	bfb8      	it	lt
 80051d0:	4618      	movlt	r0, r3
 80051d2:	e72e      	b.n	8005032 <_printf_float+0xc6>
 80051d4:	2301      	movs	r3, #1
 80051d6:	464a      	mov	r2, r9
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f af25 	beq.w	800502e <_printf_float+0xc2>
 80051e4:	f108 0801 	add.w	r8, r8, #1
 80051e8:	e7e6      	b.n	80051b8 <_printf_float+0x24c>
 80051ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dc39      	bgt.n	8005264 <_printf_float+0x2f8>
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <_printf_float+0x2f4>)
 80051f2:	2301      	movs	r3, #1
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f af17 	beq.w	800502e <_printf_float+0xc2>
 8005200:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005204:	4313      	orrs	r3, r2
 8005206:	d102      	bne.n	800520e <_printf_float+0x2a2>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	07d9      	lsls	r1, r3, #31
 800520c:	d5d8      	bpl.n	80051c0 <_printf_float+0x254>
 800520e:	ee18 3a10 	vmov	r3, s16
 8005212:	4652      	mov	r2, sl
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af07 	beq.w	800502e <_printf_float+0xc2>
 8005220:	f04f 0900 	mov.w	r9, #0
 8005224:	f104 0a1a 	add.w	sl, r4, #26
 8005228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800522a:	425b      	negs	r3, r3
 800522c:	454b      	cmp	r3, r9
 800522e:	dc01      	bgt.n	8005234 <_printf_float+0x2c8>
 8005230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005232:	e792      	b.n	800515a <_printf_float+0x1ee>
 8005234:	2301      	movs	r3, #1
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f aef5 	beq.w	800502e <_printf_float+0xc2>
 8005244:	f109 0901 	add.w	r9, r9, #1
 8005248:	e7ee      	b.n	8005228 <_printf_float+0x2bc>
 800524a:	bf00      	nop
 800524c:	7fefffff 	.word	0x7fefffff
 8005250:	08009698 	.word	0x08009698
 8005254:	0800969c 	.word	0x0800969c
 8005258:	080096a4 	.word	0x080096a4
 800525c:	080096a0 	.word	0x080096a0
 8005260:	080096a8 	.word	0x080096a8
 8005264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005268:	429a      	cmp	r2, r3
 800526a:	bfa8      	it	ge
 800526c:	461a      	movge	r2, r3
 800526e:	2a00      	cmp	r2, #0
 8005270:	4691      	mov	r9, r2
 8005272:	dc37      	bgt.n	80052e4 <_printf_float+0x378>
 8005274:	f04f 0b00 	mov.w	fp, #0
 8005278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800527c:	f104 021a 	add.w	r2, r4, #26
 8005280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005282:	9309      	str	r3, [sp, #36]	; 0x24
 8005284:	eba3 0309 	sub.w	r3, r3, r9
 8005288:	455b      	cmp	r3, fp
 800528a:	dc33      	bgt.n	80052f4 <_printf_float+0x388>
 800528c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005290:	429a      	cmp	r2, r3
 8005292:	db3b      	blt.n	800530c <_printf_float+0x3a0>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	07da      	lsls	r2, r3, #31
 8005298:	d438      	bmi.n	800530c <_printf_float+0x3a0>
 800529a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800529c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052a0:	1a9a      	subs	r2, r3, r2
 80052a2:	eba3 0901 	sub.w	r9, r3, r1
 80052a6:	4591      	cmp	r9, r2
 80052a8:	bfa8      	it	ge
 80052aa:	4691      	movge	r9, r2
 80052ac:	f1b9 0f00 	cmp.w	r9, #0
 80052b0:	dc35      	bgt.n	800531e <_printf_float+0x3b2>
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ba:	f104 0a1a 	add.w	sl, r4, #26
 80052be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	eba3 0309 	sub.w	r3, r3, r9
 80052c8:	4543      	cmp	r3, r8
 80052ca:	f77f af79 	ble.w	80051c0 <_printf_float+0x254>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4652      	mov	r2, sl
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f aea8 	beq.w	800502e <_printf_float+0xc2>
 80052de:	f108 0801 	add.w	r8, r8, #1
 80052e2:	e7ec      	b.n	80052be <_printf_float+0x352>
 80052e4:	4613      	mov	r3, r2
 80052e6:	4631      	mov	r1, r6
 80052e8:	4642      	mov	r2, r8
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	d1c0      	bne.n	8005274 <_printf_float+0x308>
 80052f2:	e69c      	b.n	800502e <_printf_float+0xc2>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	9209      	str	r2, [sp, #36]	; 0x24
 80052fc:	47b8      	blx	r7
 80052fe:	3001      	adds	r0, #1
 8005300:	f43f ae95 	beq.w	800502e <_printf_float+0xc2>
 8005304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005306:	f10b 0b01 	add.w	fp, fp, #1
 800530a:	e7b9      	b.n	8005280 <_printf_float+0x314>
 800530c:	ee18 3a10 	vmov	r3, s16
 8005310:	4652      	mov	r2, sl
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	d1be      	bne.n	800529a <_printf_float+0x32e>
 800531c:	e687      	b.n	800502e <_printf_float+0xc2>
 800531e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005320:	464b      	mov	r3, r9
 8005322:	4442      	add	r2, r8
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	d1c1      	bne.n	80052b2 <_printf_float+0x346>
 800532e:	e67e      	b.n	800502e <_printf_float+0xc2>
 8005330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005332:	2a01      	cmp	r2, #1
 8005334:	dc01      	bgt.n	800533a <_printf_float+0x3ce>
 8005336:	07db      	lsls	r3, r3, #31
 8005338:	d538      	bpl.n	80053ac <_printf_float+0x440>
 800533a:	2301      	movs	r3, #1
 800533c:	4642      	mov	r2, r8
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae72 	beq.w	800502e <_printf_float+0xc2>
 800534a:	ee18 3a10 	vmov	r3, s16
 800534e:	4652      	mov	r2, sl
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f ae69 	beq.w	800502e <_printf_float+0xc2>
 800535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005368:	b9d8      	cbnz	r0, 80053a2 <_printf_float+0x436>
 800536a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800536c:	f108 0201 	add.w	r2, r8, #1
 8005370:	3b01      	subs	r3, #1
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	d10e      	bne.n	800539a <_printf_float+0x42e>
 800537c:	e657      	b.n	800502e <_printf_float+0xc2>
 800537e:	2301      	movs	r3, #1
 8005380:	4652      	mov	r2, sl
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	47b8      	blx	r7
 8005388:	3001      	adds	r0, #1
 800538a:	f43f ae50 	beq.w	800502e <_printf_float+0xc2>
 800538e:	f108 0801 	add.w	r8, r8, #1
 8005392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005394:	3b01      	subs	r3, #1
 8005396:	4543      	cmp	r3, r8
 8005398:	dcf1      	bgt.n	800537e <_printf_float+0x412>
 800539a:	464b      	mov	r3, r9
 800539c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053a0:	e6dc      	b.n	800515c <_printf_float+0x1f0>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	f104 0a1a 	add.w	sl, r4, #26
 80053aa:	e7f2      	b.n	8005392 <_printf_float+0x426>
 80053ac:	2301      	movs	r3, #1
 80053ae:	4642      	mov	r2, r8
 80053b0:	e7df      	b.n	8005372 <_printf_float+0x406>
 80053b2:	2301      	movs	r3, #1
 80053b4:	464a      	mov	r2, r9
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f ae36 	beq.w	800502e <_printf_float+0xc2>
 80053c2:	f108 0801 	add.w	r8, r8, #1
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053ca:	1a5b      	subs	r3, r3, r1
 80053cc:	4543      	cmp	r3, r8
 80053ce:	dcf0      	bgt.n	80053b2 <_printf_float+0x446>
 80053d0:	e6fa      	b.n	80051c8 <_printf_float+0x25c>
 80053d2:	f04f 0800 	mov.w	r8, #0
 80053d6:	f104 0919 	add.w	r9, r4, #25
 80053da:	e7f4      	b.n	80053c6 <_printf_float+0x45a>

080053dc <_printf_common>:
 80053dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	4616      	mov	r6, r2
 80053e2:	4699      	mov	r9, r3
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	690b      	ldr	r3, [r1, #16]
 80053e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bfb8      	it	lt
 80053f0:	4613      	movlt	r3, r2
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053f8:	4607      	mov	r7, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	b10a      	cbz	r2, 8005402 <_printf_common+0x26>
 80053fe:	3301      	adds	r3, #1
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	0699      	lsls	r1, r3, #26
 8005406:	bf42      	ittt	mi
 8005408:	6833      	ldrmi	r3, [r6, #0]
 800540a:	3302      	addmi	r3, #2
 800540c:	6033      	strmi	r3, [r6, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	f015 0506 	ands.w	r5, r5, #6
 8005414:	d106      	bne.n	8005424 <_printf_common+0x48>
 8005416:	f104 0a19 	add.w	sl, r4, #25
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	6832      	ldr	r2, [r6, #0]
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	42ab      	cmp	r3, r5
 8005422:	dc26      	bgt.n	8005472 <_printf_common+0x96>
 8005424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005428:	1e13      	subs	r3, r2, #0
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	bf18      	it	ne
 800542e:	2301      	movne	r3, #1
 8005430:	0692      	lsls	r2, r2, #26
 8005432:	d42b      	bmi.n	800548c <_printf_common+0xb0>
 8005434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d01e      	beq.n	8005480 <_printf_common+0xa4>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	68e5      	ldr	r5, [r4, #12]
 8005446:	6832      	ldr	r2, [r6, #0]
 8005448:	f003 0306 	and.w	r3, r3, #6
 800544c:	2b04      	cmp	r3, #4
 800544e:	bf08      	it	eq
 8005450:	1aad      	subeq	r5, r5, r2
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	bf0c      	ite	eq
 8005458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800545c:	2500      	movne	r5, #0
 800545e:	4293      	cmp	r3, r2
 8005460:	bfc4      	itt	gt
 8005462:	1a9b      	subgt	r3, r3, r2
 8005464:	18ed      	addgt	r5, r5, r3
 8005466:	2600      	movs	r6, #0
 8005468:	341a      	adds	r4, #26
 800546a:	42b5      	cmp	r5, r6
 800546c:	d11a      	bne.n	80054a4 <_printf_common+0xc8>
 800546e:	2000      	movs	r0, #0
 8005470:	e008      	b.n	8005484 <_printf_common+0xa8>
 8005472:	2301      	movs	r3, #1
 8005474:	4652      	mov	r2, sl
 8005476:	4649      	mov	r1, r9
 8005478:	4638      	mov	r0, r7
 800547a:	47c0      	blx	r8
 800547c:	3001      	adds	r0, #1
 800547e:	d103      	bne.n	8005488 <_printf_common+0xac>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	3501      	adds	r5, #1
 800548a:	e7c6      	b.n	800541a <_printf_common+0x3e>
 800548c:	18e1      	adds	r1, r4, r3
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	2030      	movs	r0, #48	; 0x30
 8005492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005496:	4422      	add	r2, r4
 8005498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800549c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054a0:	3302      	adds	r3, #2
 80054a2:	e7c7      	b.n	8005434 <_printf_common+0x58>
 80054a4:	2301      	movs	r3, #1
 80054a6:	4622      	mov	r2, r4
 80054a8:	4649      	mov	r1, r9
 80054aa:	4638      	mov	r0, r7
 80054ac:	47c0      	blx	r8
 80054ae:	3001      	adds	r0, #1
 80054b0:	d0e6      	beq.n	8005480 <_printf_common+0xa4>
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7d9      	b.n	800546a <_printf_common+0x8e>
	...

080054b8 <_printf_i>:
 80054b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	7e0f      	ldrb	r7, [r1, #24]
 80054be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054c0:	2f78      	cmp	r7, #120	; 0x78
 80054c2:	4691      	mov	r9, r2
 80054c4:	4680      	mov	r8, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	469a      	mov	sl, r3
 80054ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ce:	d807      	bhi.n	80054e0 <_printf_i+0x28>
 80054d0:	2f62      	cmp	r7, #98	; 0x62
 80054d2:	d80a      	bhi.n	80054ea <_printf_i+0x32>
 80054d4:	2f00      	cmp	r7, #0
 80054d6:	f000 80d8 	beq.w	800568a <_printf_i+0x1d2>
 80054da:	2f58      	cmp	r7, #88	; 0x58
 80054dc:	f000 80a3 	beq.w	8005626 <_printf_i+0x16e>
 80054e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054e8:	e03a      	b.n	8005560 <_printf_i+0xa8>
 80054ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ee:	2b15      	cmp	r3, #21
 80054f0:	d8f6      	bhi.n	80054e0 <_printf_i+0x28>
 80054f2:	a101      	add	r1, pc, #4	; (adr r1, 80054f8 <_printf_i+0x40>)
 80054f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005565 	.word	0x08005565
 8005500:	080054e1 	.word	0x080054e1
 8005504:	080054e1 	.word	0x080054e1
 8005508:	080054e1 	.word	0x080054e1
 800550c:	080054e1 	.word	0x080054e1
 8005510:	08005565 	.word	0x08005565
 8005514:	080054e1 	.word	0x080054e1
 8005518:	080054e1 	.word	0x080054e1
 800551c:	080054e1 	.word	0x080054e1
 8005520:	080054e1 	.word	0x080054e1
 8005524:	08005671 	.word	0x08005671
 8005528:	08005595 	.word	0x08005595
 800552c:	08005653 	.word	0x08005653
 8005530:	080054e1 	.word	0x080054e1
 8005534:	080054e1 	.word	0x080054e1
 8005538:	08005693 	.word	0x08005693
 800553c:	080054e1 	.word	0x080054e1
 8005540:	08005595 	.word	0x08005595
 8005544:	080054e1 	.word	0x080054e1
 8005548:	080054e1 	.word	0x080054e1
 800554c:	0800565b 	.word	0x0800565b
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	602a      	str	r2, [r5, #0]
 8005558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005560:	2301      	movs	r3, #1
 8005562:	e0a3      	b.n	80056ac <_printf_i+0x1f4>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	6829      	ldr	r1, [r5, #0]
 8005568:	0606      	lsls	r6, r0, #24
 800556a:	f101 0304 	add.w	r3, r1, #4
 800556e:	d50a      	bpl.n	8005586 <_printf_i+0xce>
 8005570:	680e      	ldr	r6, [r1, #0]
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	2e00      	cmp	r6, #0
 8005576:	da03      	bge.n	8005580 <_printf_i+0xc8>
 8005578:	232d      	movs	r3, #45	; 0x2d
 800557a:	4276      	negs	r6, r6
 800557c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005580:	485e      	ldr	r0, [pc, #376]	; (80056fc <_printf_i+0x244>)
 8005582:	230a      	movs	r3, #10
 8005584:	e019      	b.n	80055ba <_printf_i+0x102>
 8005586:	680e      	ldr	r6, [r1, #0]
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800558e:	bf18      	it	ne
 8005590:	b236      	sxthne	r6, r6
 8005592:	e7ef      	b.n	8005574 <_printf_i+0xbc>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1d19      	adds	r1, r3, #4
 800559a:	6029      	str	r1, [r5, #0]
 800559c:	0601      	lsls	r1, r0, #24
 800559e:	d501      	bpl.n	80055a4 <_printf_i+0xec>
 80055a0:	681e      	ldr	r6, [r3, #0]
 80055a2:	e002      	b.n	80055aa <_printf_i+0xf2>
 80055a4:	0646      	lsls	r6, r0, #25
 80055a6:	d5fb      	bpl.n	80055a0 <_printf_i+0xe8>
 80055a8:	881e      	ldrh	r6, [r3, #0]
 80055aa:	4854      	ldr	r0, [pc, #336]	; (80056fc <_printf_i+0x244>)
 80055ac:	2f6f      	cmp	r7, #111	; 0x6f
 80055ae:	bf0c      	ite	eq
 80055b0:	2308      	moveq	r3, #8
 80055b2:	230a      	movne	r3, #10
 80055b4:	2100      	movs	r1, #0
 80055b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ba:	6865      	ldr	r5, [r4, #4]
 80055bc:	60a5      	str	r5, [r4, #8]
 80055be:	2d00      	cmp	r5, #0
 80055c0:	bfa2      	ittt	ge
 80055c2:	6821      	ldrge	r1, [r4, #0]
 80055c4:	f021 0104 	bicge.w	r1, r1, #4
 80055c8:	6021      	strge	r1, [r4, #0]
 80055ca:	b90e      	cbnz	r6, 80055d0 <_printf_i+0x118>
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	d04d      	beq.n	800566c <_printf_i+0x1b4>
 80055d0:	4615      	mov	r5, r2
 80055d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055d6:	fb03 6711 	mls	r7, r3, r1, r6
 80055da:	5dc7      	ldrb	r7, [r0, r7]
 80055dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055e0:	4637      	mov	r7, r6
 80055e2:	42bb      	cmp	r3, r7
 80055e4:	460e      	mov	r6, r1
 80055e6:	d9f4      	bls.n	80055d2 <_printf_i+0x11a>
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d10b      	bne.n	8005604 <_printf_i+0x14c>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	07de      	lsls	r6, r3, #31
 80055f0:	d508      	bpl.n	8005604 <_printf_i+0x14c>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	6861      	ldr	r1, [r4, #4]
 80055f6:	4299      	cmp	r1, r3
 80055f8:	bfde      	ittt	le
 80055fa:	2330      	movle	r3, #48	; 0x30
 80055fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005604:	1b52      	subs	r2, r2, r5
 8005606:	6122      	str	r2, [r4, #16]
 8005608:	f8cd a000 	str.w	sl, [sp]
 800560c:	464b      	mov	r3, r9
 800560e:	aa03      	add	r2, sp, #12
 8005610:	4621      	mov	r1, r4
 8005612:	4640      	mov	r0, r8
 8005614:	f7ff fee2 	bl	80053dc <_printf_common>
 8005618:	3001      	adds	r0, #1
 800561a:	d14c      	bne.n	80056b6 <_printf_i+0x1fe>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	b004      	add	sp, #16
 8005622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005626:	4835      	ldr	r0, [pc, #212]	; (80056fc <_printf_i+0x244>)
 8005628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800562c:	6829      	ldr	r1, [r5, #0]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f851 6b04 	ldr.w	r6, [r1], #4
 8005634:	6029      	str	r1, [r5, #0]
 8005636:	061d      	lsls	r5, r3, #24
 8005638:	d514      	bpl.n	8005664 <_printf_i+0x1ac>
 800563a:	07df      	lsls	r7, r3, #31
 800563c:	bf44      	itt	mi
 800563e:	f043 0320 	orrmi.w	r3, r3, #32
 8005642:	6023      	strmi	r3, [r4, #0]
 8005644:	b91e      	cbnz	r6, 800564e <_printf_i+0x196>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f023 0320 	bic.w	r3, r3, #32
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	2310      	movs	r3, #16
 8005650:	e7b0      	b.n	80055b4 <_printf_i+0xfc>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f043 0320 	orr.w	r3, r3, #32
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	2378      	movs	r3, #120	; 0x78
 800565c:	4828      	ldr	r0, [pc, #160]	; (8005700 <_printf_i+0x248>)
 800565e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005662:	e7e3      	b.n	800562c <_printf_i+0x174>
 8005664:	0659      	lsls	r1, r3, #25
 8005666:	bf48      	it	mi
 8005668:	b2b6      	uxthmi	r6, r6
 800566a:	e7e6      	b.n	800563a <_printf_i+0x182>
 800566c:	4615      	mov	r5, r2
 800566e:	e7bb      	b.n	80055e8 <_printf_i+0x130>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	6826      	ldr	r6, [r4, #0]
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	1d18      	adds	r0, r3, #4
 8005678:	6028      	str	r0, [r5, #0]
 800567a:	0635      	lsls	r5, r6, #24
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	d501      	bpl.n	8005684 <_printf_i+0x1cc>
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0x1d2>
 8005684:	0670      	lsls	r0, r6, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0x1c8>
 8005688:	8019      	strh	r1, [r3, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	4615      	mov	r5, r2
 8005690:	e7ba      	b.n	8005608 <_printf_i+0x150>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	602a      	str	r2, [r5, #0]
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	2100      	movs	r1, #0
 800569e:	4628      	mov	r0, r5
 80056a0:	f7fa fda6 	bl	80001f0 <memchr>
 80056a4:	b108      	cbz	r0, 80056aa <_printf_i+0x1f2>
 80056a6:	1b40      	subs	r0, r0, r5
 80056a8:	6060      	str	r0, [r4, #4]
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	2300      	movs	r3, #0
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	e7a8      	b.n	8005608 <_printf_i+0x150>
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	462a      	mov	r2, r5
 80056ba:	4649      	mov	r1, r9
 80056bc:	4640      	mov	r0, r8
 80056be:	47d0      	blx	sl
 80056c0:	3001      	adds	r0, #1
 80056c2:	d0ab      	beq.n	800561c <_printf_i+0x164>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	079b      	lsls	r3, r3, #30
 80056c8:	d413      	bmi.n	80056f2 <_printf_i+0x23a>
 80056ca:	68e0      	ldr	r0, [r4, #12]
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	4298      	cmp	r0, r3
 80056d0:	bfb8      	it	lt
 80056d2:	4618      	movlt	r0, r3
 80056d4:	e7a4      	b.n	8005620 <_printf_i+0x168>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4632      	mov	r2, r6
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d09b      	beq.n	800561c <_printf_i+0x164>
 80056e4:	3501      	adds	r5, #1
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	9903      	ldr	r1, [sp, #12]
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dcf2      	bgt.n	80056d6 <_printf_i+0x21e>
 80056f0:	e7eb      	b.n	80056ca <_printf_i+0x212>
 80056f2:	2500      	movs	r5, #0
 80056f4:	f104 0619 	add.w	r6, r4, #25
 80056f8:	e7f5      	b.n	80056e6 <_printf_i+0x22e>
 80056fa:	bf00      	nop
 80056fc:	080096aa 	.word	0x080096aa
 8005700:	080096bb 	.word	0x080096bb

08005704 <siprintf>:
 8005704:	b40e      	push	{r1, r2, r3}
 8005706:	b500      	push	{lr}
 8005708:	b09c      	sub	sp, #112	; 0x70
 800570a:	ab1d      	add	r3, sp, #116	; 0x74
 800570c:	9002      	str	r0, [sp, #8]
 800570e:	9006      	str	r0, [sp, #24]
 8005710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005714:	4809      	ldr	r0, [pc, #36]	; (800573c <siprintf+0x38>)
 8005716:	9107      	str	r1, [sp, #28]
 8005718:	9104      	str	r1, [sp, #16]
 800571a:	4909      	ldr	r1, [pc, #36]	; (8005740 <siprintf+0x3c>)
 800571c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	a902      	add	r1, sp, #8
 8005728:	f001 fb76 	bl	8006e18 <_svfiprintf_r>
 800572c:	9b02      	ldr	r3, [sp, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	b01c      	add	sp, #112	; 0x70
 8005734:	f85d eb04 	ldr.w	lr, [sp], #4
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr
 800573c:	20000034 	.word	0x20000034
 8005740:	ffff0208 	.word	0xffff0208

08005744 <quorem>:
 8005744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005748:	6903      	ldr	r3, [r0, #16]
 800574a:	690c      	ldr	r4, [r1, #16]
 800574c:	42a3      	cmp	r3, r4
 800574e:	4607      	mov	r7, r0
 8005750:	f2c0 8081 	blt.w	8005856 <quorem+0x112>
 8005754:	3c01      	subs	r4, #1
 8005756:	f101 0814 	add.w	r8, r1, #20
 800575a:	f100 0514 	add.w	r5, r0, #20
 800575e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800576c:	3301      	adds	r3, #1
 800576e:	429a      	cmp	r2, r3
 8005770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005778:	fbb2 f6f3 	udiv	r6, r2, r3
 800577c:	d331      	bcc.n	80057e2 <quorem+0x9e>
 800577e:	f04f 0e00 	mov.w	lr, #0
 8005782:	4640      	mov	r0, r8
 8005784:	46ac      	mov	ip, r5
 8005786:	46f2      	mov	sl, lr
 8005788:	f850 2b04 	ldr.w	r2, [r0], #4
 800578c:	b293      	uxth	r3, r2
 800578e:	fb06 e303 	mla	r3, r6, r3, lr
 8005792:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005796:	b29b      	uxth	r3, r3
 8005798:	ebaa 0303 	sub.w	r3, sl, r3
 800579c:	f8dc a000 	ldr.w	sl, [ip]
 80057a0:	0c12      	lsrs	r2, r2, #16
 80057a2:	fa13 f38a 	uxtah	r3, r3, sl
 80057a6:	fb06 e202 	mla	r2, r6, r2, lr
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	9b00      	ldr	r3, [sp, #0]
 80057ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057b2:	b292      	uxth	r2, r2
 80057b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80057c0:	4581      	cmp	r9, r0
 80057c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057c6:	f84c 3b04 	str.w	r3, [ip], #4
 80057ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057ce:	d2db      	bcs.n	8005788 <quorem+0x44>
 80057d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80057d4:	b92b      	cbnz	r3, 80057e2 <quorem+0x9e>
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	3b04      	subs	r3, #4
 80057da:	429d      	cmp	r5, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	d32e      	bcc.n	800583e <quorem+0xfa>
 80057e0:	613c      	str	r4, [r7, #16]
 80057e2:	4638      	mov	r0, r7
 80057e4:	f001 f8c6 	bl	8006974 <__mcmp>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	db24      	blt.n	8005836 <quorem+0xf2>
 80057ec:	3601      	adds	r6, #1
 80057ee:	4628      	mov	r0, r5
 80057f0:	f04f 0c00 	mov.w	ip, #0
 80057f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80057f8:	f8d0 e000 	ldr.w	lr, [r0]
 80057fc:	b293      	uxth	r3, r2
 80057fe:	ebac 0303 	sub.w	r3, ip, r3
 8005802:	0c12      	lsrs	r2, r2, #16
 8005804:	fa13 f38e 	uxtah	r3, r3, lr
 8005808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800580c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005810:	b29b      	uxth	r3, r3
 8005812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005816:	45c1      	cmp	r9, r8
 8005818:	f840 3b04 	str.w	r3, [r0], #4
 800581c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005820:	d2e8      	bcs.n	80057f4 <quorem+0xb0>
 8005822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582a:	b922      	cbnz	r2, 8005836 <quorem+0xf2>
 800582c:	3b04      	subs	r3, #4
 800582e:	429d      	cmp	r5, r3
 8005830:	461a      	mov	r2, r3
 8005832:	d30a      	bcc.n	800584a <quorem+0x106>
 8005834:	613c      	str	r4, [r7, #16]
 8005836:	4630      	mov	r0, r6
 8005838:	b003      	add	sp, #12
 800583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	3b04      	subs	r3, #4
 8005842:	2a00      	cmp	r2, #0
 8005844:	d1cc      	bne.n	80057e0 <quorem+0x9c>
 8005846:	3c01      	subs	r4, #1
 8005848:	e7c7      	b.n	80057da <quorem+0x96>
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	3b04      	subs	r3, #4
 800584e:	2a00      	cmp	r2, #0
 8005850:	d1f0      	bne.n	8005834 <quorem+0xf0>
 8005852:	3c01      	subs	r4, #1
 8005854:	e7eb      	b.n	800582e <quorem+0xea>
 8005856:	2000      	movs	r0, #0
 8005858:	e7ee      	b.n	8005838 <quorem+0xf4>
 800585a:	0000      	movs	r0, r0
 800585c:	0000      	movs	r0, r0
	...

08005860 <_dtoa_r>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ed2d 8b04 	vpush	{d8-d9}
 8005868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800586a:	b093      	sub	sp, #76	; 0x4c
 800586c:	4604      	mov	r4, r0
 800586e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8005872:	4616      	mov	r6, r2
 8005874:	461f      	mov	r7, r3
 8005876:	4692      	mov	sl, r2
 8005878:	469b      	mov	fp, r3
 800587a:	b975      	cbnz	r5, 800589a <_dtoa_r+0x3a>
 800587c:	2010      	movs	r0, #16
 800587e:	f000 fde1 	bl	8006444 <malloc>
 8005882:	4602      	mov	r2, r0
 8005884:	6260      	str	r0, [r4, #36]	; 0x24
 8005886:	b920      	cbnz	r0, 8005892 <_dtoa_r+0x32>
 8005888:	4ba9      	ldr	r3, [pc, #676]	; (8005b30 <_dtoa_r+0x2d0>)
 800588a:	21ea      	movs	r1, #234	; 0xea
 800588c:	48a9      	ldr	r0, [pc, #676]	; (8005b34 <_dtoa_r+0x2d4>)
 800588e:	f001 fbd3 	bl	8007038 <__assert_func>
 8005892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005896:	6005      	str	r5, [r0, #0]
 8005898:	60c5      	str	r5, [r0, #12]
 800589a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800589c:	6819      	ldr	r1, [r3, #0]
 800589e:	b151      	cbz	r1, 80058b6 <_dtoa_r+0x56>
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	604a      	str	r2, [r1, #4]
 80058a4:	2301      	movs	r3, #1
 80058a6:	4093      	lsls	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fe20 	bl	80064f0 <_Bfree>
 80058b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	1e3b      	subs	r3, r7, #0
 80058b8:	bfaa      	itet	ge
 80058ba:	2300      	movge	r3, #0
 80058bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80058c0:	f8c8 3000 	strge.w	r3, [r8]
 80058c4:	4b9c      	ldr	r3, [pc, #624]	; (8005b38 <_dtoa_r+0x2d8>)
 80058c6:	bfbc      	itt	lt
 80058c8:	2201      	movlt	r2, #1
 80058ca:	f8c8 2000 	strlt.w	r2, [r8]
 80058ce:	ea33 030b 	bics.w	r3, r3, fp
 80058d2:	d11b      	bne.n	800590c <_dtoa_r+0xac>
 80058d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058e0:	4333      	orrs	r3, r6
 80058e2:	f000 8596 	beq.w	8006412 <_dtoa_r+0xbb2>
 80058e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058e8:	b963      	cbnz	r3, 8005904 <_dtoa_r+0xa4>
 80058ea:	4b94      	ldr	r3, [pc, #592]	; (8005b3c <_dtoa_r+0x2dc>)
 80058ec:	e022      	b.n	8005934 <_dtoa_r+0xd4>
 80058ee:	4b94      	ldr	r3, [pc, #592]	; (8005b40 <_dtoa_r+0x2e0>)
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	3308      	adds	r3, #8
 80058f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	9804      	ldr	r0, [sp, #16]
 80058fa:	b013      	add	sp, #76	; 0x4c
 80058fc:	ecbd 8b04 	vpop	{d8-d9}
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005904:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <_dtoa_r+0x2dc>)
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	3303      	adds	r3, #3
 800590a:	e7f3      	b.n	80058f4 <_dtoa_r+0x94>
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	4650      	mov	r0, sl
 8005912:	4659      	mov	r1, fp
 8005914:	f7fb f8e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005918:	ec4b ab19 	vmov	d9, sl, fp
 800591c:	4680      	mov	r8, r0
 800591e:	b158      	cbz	r0, 8005938 <_dtoa_r+0xd8>
 8005920:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005922:	2301      	movs	r3, #1
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 856f 	beq.w	800640c <_dtoa_r+0xbac>
 800592e:	4885      	ldr	r0, [pc, #532]	; (8005b44 <_dtoa_r+0x2e4>)
 8005930:	6018      	str	r0, [r3, #0]
 8005932:	1e43      	subs	r3, r0, #1
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	e7df      	b.n	80058f8 <_dtoa_r+0x98>
 8005938:	ab10      	add	r3, sp, #64	; 0x40
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	ab11      	add	r3, sp, #68	; 0x44
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4652      	mov	r2, sl
 8005942:	465b      	mov	r3, fp
 8005944:	4620      	mov	r0, r4
 8005946:	f001 f8bb 	bl	8006ac0 <__d2b>
 800594a:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800594e:	ee08 0a10 	vmov	s16, r0
 8005952:	2d00      	cmp	r5, #0
 8005954:	f000 8084 	beq.w	8005a60 <_dtoa_r+0x200>
 8005958:	ee19 3a90 	vmov	r3, s19
 800595c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005960:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005964:	4656      	mov	r6, sl
 8005966:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800596a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800596e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005972:	4b75      	ldr	r3, [pc, #468]	; (8005b48 <_dtoa_r+0x2e8>)
 8005974:	2200      	movs	r2, #0
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fa fc8d 	bl	8000298 <__aeabi_dsub>
 800597e:	a366      	add	r3, pc, #408	; (adr r3, 8005b18 <_dtoa_r+0x2b8>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fe40 	bl	8000608 <__aeabi_dmul>
 8005988:	a365      	add	r3, pc, #404	; (adr r3, 8005b20 <_dtoa_r+0x2c0>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fc85 	bl	800029c <__adddf3>
 8005992:	4606      	mov	r6, r0
 8005994:	4628      	mov	r0, r5
 8005996:	460f      	mov	r7, r1
 8005998:	f7fa fdcc 	bl	8000534 <__aeabi_i2d>
 800599c:	a362      	add	r3, pc, #392	; (adr r3, 8005b28 <_dtoa_r+0x2c8>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fe31 	bl	8000608 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fa fc75 	bl	800029c <__adddf3>
 80059b2:	4606      	mov	r6, r0
 80059b4:	460f      	mov	r7, r1
 80059b6:	f7fb f8d7 	bl	8000b68 <__aeabi_d2iz>
 80059ba:	2200      	movs	r2, #0
 80059bc:	9003      	str	r0, [sp, #12]
 80059be:	2300      	movs	r3, #0
 80059c0:	4630      	mov	r0, r6
 80059c2:	4639      	mov	r1, r7
 80059c4:	f7fb f892 	bl	8000aec <__aeabi_dcmplt>
 80059c8:	b150      	cbz	r0, 80059e0 <_dtoa_r+0x180>
 80059ca:	9803      	ldr	r0, [sp, #12]
 80059cc:	f7fa fdb2 	bl	8000534 <__aeabi_i2d>
 80059d0:	4632      	mov	r2, r6
 80059d2:	463b      	mov	r3, r7
 80059d4:	f7fb f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80059d8:	b910      	cbnz	r0, 80059e0 <_dtoa_r+0x180>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	3b01      	subs	r3, #1
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	2b16      	cmp	r3, #22
 80059e4:	d85a      	bhi.n	8005a9c <_dtoa_r+0x23c>
 80059e6:	9a03      	ldr	r2, [sp, #12]
 80059e8:	4b58      	ldr	r3, [pc, #352]	; (8005b4c <_dtoa_r+0x2ec>)
 80059ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	ec51 0b19 	vmov	r0, r1, d9
 80059f6:	f7fb f879 	bl	8000aec <__aeabi_dcmplt>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d050      	beq.n	8005aa0 <_dtoa_r+0x240>
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	2300      	movs	r3, #0
 8005a06:	930c      	str	r3, [sp, #48]	; 0x30
 8005a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a0a:	1b5d      	subs	r5, r3, r5
 8005a0c:	1e6b      	subs	r3, r5, #1
 8005a0e:	9308      	str	r3, [sp, #32]
 8005a10:	bf45      	ittet	mi
 8005a12:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a16:	9307      	strmi	r3, [sp, #28]
 8005a18:	2300      	movpl	r3, #0
 8005a1a:	2300      	movmi	r3, #0
 8005a1c:	bf4c      	ite	mi
 8005a1e:	9308      	strmi	r3, [sp, #32]
 8005a20:	9307      	strpl	r3, [sp, #28]
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	db3d      	blt.n	8005aa4 <_dtoa_r+0x244>
 8005a28:	9b08      	ldr	r3, [sp, #32]
 8005a2a:	9a03      	ldr	r2, [sp, #12]
 8005a2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a2e:	4413      	add	r3, r2
 8005a30:	9308      	str	r3, [sp, #32]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9309      	str	r3, [sp, #36]	; 0x24
 8005a36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	f200 808b 	bhi.w	8005b54 <_dtoa_r+0x2f4>
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	bfc4      	itt	gt
 8005a42:	3b04      	subgt	r3, #4
 8005a44:	9320      	strgt	r3, [sp, #128]	; 0x80
 8005a46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a48:	f1a3 0302 	sub.w	r3, r3, #2
 8005a4c:	bfcc      	ite	gt
 8005a4e:	2500      	movgt	r5, #0
 8005a50:	2501      	movle	r5, #1
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	f200 8089 	bhi.w	8005b6a <_dtoa_r+0x30a>
 8005a58:	e8df f003 	tbb	[pc, r3]
 8005a5c:	59383a2d 	.word	0x59383a2d
 8005a60:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a64:	441d      	add	r5, r3
 8005a66:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	bfc1      	itttt	gt
 8005a6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a72:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a76:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a7a:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a7e:	bfda      	itte	le
 8005a80:	f1c3 0320 	rsble	r3, r3, #32
 8005a84:	fa06 f003 	lslle.w	r0, r6, r3
 8005a88:	4318      	orrgt	r0, r3
 8005a8a:	f7fa fd43 	bl	8000514 <__aeabi_ui2d>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4606      	mov	r6, r0
 8005a92:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a96:	3d01      	subs	r5, #1
 8005a98:	930e      	str	r3, [sp, #56]	; 0x38
 8005a9a:	e76a      	b.n	8005972 <_dtoa_r+0x112>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7b2      	b.n	8005a06 <_dtoa_r+0x1a6>
 8005aa0:	900c      	str	r0, [sp, #48]	; 0x30
 8005aa2:	e7b1      	b.n	8005a08 <_dtoa_r+0x1a8>
 8005aa4:	9b07      	ldr	r3, [sp, #28]
 8005aa6:	9a03      	ldr	r2, [sp, #12]
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	4253      	negs	r3, r2
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab4:	e7bf      	b.n	8005a36 <_dtoa_r+0x1d6>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dc57      	bgt.n	8005b70 <_dtoa_r+0x310>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	9221      	str	r2, [sp, #132]	; 0x84
 8005aca:	e00c      	b.n	8005ae6 <_dtoa_r+0x286>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e7f3      	b.n	8005ab8 <_dtoa_r+0x258>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	9305      	str	r3, [sp, #20]
 8005adc:	3301      	adds	r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	9306      	str	r3, [sp, #24]
 8005ae2:	bfb8      	it	lt
 8005ae4:	2301      	movlt	r3, #1
 8005ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ae8:	2200      	movs	r2, #0
 8005aea:	6042      	str	r2, [r0, #4]
 8005aec:	2204      	movs	r2, #4
 8005aee:	f102 0614 	add.w	r6, r2, #20
 8005af2:	429e      	cmp	r6, r3
 8005af4:	6841      	ldr	r1, [r0, #4]
 8005af6:	d93f      	bls.n	8005b78 <_dtoa_r+0x318>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fcb9 	bl	8006470 <_Balloc>
 8005afe:	9004      	str	r0, [sp, #16]
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d13d      	bne.n	8005b80 <_dtoa_r+0x320>
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <_dtoa_r+0x2f0>)
 8005b06:	4602      	mov	r2, r0
 8005b08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b0c:	e6be      	b.n	800588c <_dtoa_r+0x2c>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e7df      	b.n	8005ad2 <_dtoa_r+0x272>
 8005b12:	bf00      	nop
 8005b14:	f3af 8000 	nop.w
 8005b18:	636f4361 	.word	0x636f4361
 8005b1c:	3fd287a7 	.word	0x3fd287a7
 8005b20:	8b60c8b3 	.word	0x8b60c8b3
 8005b24:	3fc68a28 	.word	0x3fc68a28
 8005b28:	509f79fb 	.word	0x509f79fb
 8005b2c:	3fd34413 	.word	0x3fd34413
 8005b30:	080096d9 	.word	0x080096d9
 8005b34:	080096f0 	.word	0x080096f0
 8005b38:	7ff00000 	.word	0x7ff00000
 8005b3c:	080096d5 	.word	0x080096d5
 8005b40:	080096cc 	.word	0x080096cc
 8005b44:	080096a9 	.word	0x080096a9
 8005b48:	3ff80000 	.word	0x3ff80000
 8005b4c:	080097e0 	.word	0x080097e0
 8005b50:	0800974b 	.word	0x0800974b
 8005b54:	2501      	movs	r5, #1
 8005b56:	2300      	movs	r3, #0
 8005b58:	9320      	str	r3, [sp, #128]	; 0x80
 8005b5a:	950a      	str	r5, [sp, #40]	; 0x28
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2312      	movs	r3, #18
 8005b68:	e7ae      	b.n	8005ac8 <_dtoa_r+0x268>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b6e:	e7f5      	b.n	8005b5c <_dtoa_r+0x2fc>
 8005b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b72:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b76:	e7b6      	b.n	8005ae6 <_dtoa_r+0x286>
 8005b78:	3101      	adds	r1, #1
 8005b7a:	6041      	str	r1, [r0, #4]
 8005b7c:	0052      	lsls	r2, r2, #1
 8005b7e:	e7b6      	b.n	8005aee <_dtoa_r+0x28e>
 8005b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b82:	9a04      	ldr	r2, [sp, #16]
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	2b0e      	cmp	r3, #14
 8005b8a:	f200 809d 	bhi.w	8005cc8 <_dtoa_r+0x468>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	f000 809a 	beq.w	8005cc8 <_dtoa_r+0x468>
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd32      	ble.n	8005c00 <_dtoa_r+0x3a0>
 8005b9a:	4ab7      	ldr	r2, [pc, #732]	; (8005e78 <_dtoa_r+0x618>)
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	05d8      	lsls	r0, r3, #23
 8005bac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bb0:	d516      	bpl.n	8005be0 <_dtoa_r+0x380>
 8005bb2:	4bb2      	ldr	r3, [pc, #712]	; (8005e7c <_dtoa_r+0x61c>)
 8005bb4:	ec51 0b19 	vmov	r0, r1, d9
 8005bb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bbc:	f7fa fe4e 	bl	800085c <__aeabi_ddiv>
 8005bc0:	f007 070f 	and.w	r7, r7, #15
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	468b      	mov	fp, r1
 8005bc8:	2503      	movs	r5, #3
 8005bca:	4eac      	ldr	r6, [pc, #688]	; (8005e7c <_dtoa_r+0x61c>)
 8005bcc:	b957      	cbnz	r7, 8005be4 <_dtoa_r+0x384>
 8005bce:	4642      	mov	r2, r8
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	f7fa fe41 	bl	800085c <__aeabi_ddiv>
 8005bda:	4682      	mov	sl, r0
 8005bdc:	468b      	mov	fp, r1
 8005bde:	e028      	b.n	8005c32 <_dtoa_r+0x3d2>
 8005be0:	2502      	movs	r5, #2
 8005be2:	e7f2      	b.n	8005bca <_dtoa_r+0x36a>
 8005be4:	07f9      	lsls	r1, r7, #31
 8005be6:	d508      	bpl.n	8005bfa <_dtoa_r+0x39a>
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bf0:	f7fa fd0a 	bl	8000608 <__aeabi_dmul>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	107f      	asrs	r7, r7, #1
 8005bfc:	3608      	adds	r6, #8
 8005bfe:	e7e5      	b.n	8005bcc <_dtoa_r+0x36c>
 8005c00:	f000 809b 	beq.w	8005d3a <_dtoa_r+0x4da>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4f9d      	ldr	r7, [pc, #628]	; (8005e7c <_dtoa_r+0x61c>)
 8005c08:	425e      	negs	r6, r3
 8005c0a:	4b9b      	ldr	r3, [pc, #620]	; (8005e78 <_dtoa_r+0x618>)
 8005c0c:	f006 020f 	and.w	r2, r6, #15
 8005c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	ec51 0b19 	vmov	r0, r1, d9
 8005c1c:	f7fa fcf4 	bl	8000608 <__aeabi_dmul>
 8005c20:	1136      	asrs	r6, r6, #4
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	2300      	movs	r3, #0
 8005c28:	2502      	movs	r5, #2
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d17a      	bne.n	8005d24 <_dtoa_r+0x4c4>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d3      	bne.n	8005bda <_dtoa_r+0x37a>
 8005c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8082 	beq.w	8005d3e <_dtoa_r+0x4de>
 8005c3a:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <_dtoa_r+0x620>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4650      	mov	r0, sl
 8005c40:	4659      	mov	r1, fp
 8005c42:	f7fa ff53 	bl	8000aec <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d079      	beq.n	8005d3e <_dtoa_r+0x4de>
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d076      	beq.n	8005d3e <_dtoa_r+0x4de>
 8005c50:	9b05      	ldr	r3, [sp, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dd36      	ble.n	8005cc4 <_dtoa_r+0x464>
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	4650      	mov	r0, sl
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	1e5f      	subs	r7, r3, #1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <_dtoa_r+0x624>)
 8005c62:	f7fa fcd1 	bl	8000608 <__aeabi_dmul>
 8005c66:	9e05      	ldr	r6, [sp, #20]
 8005c68:	4682      	mov	sl, r0
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f7fa fc60 	bl	8000534 <__aeabi_i2d>
 8005c74:	4652      	mov	r2, sl
 8005c76:	465b      	mov	r3, fp
 8005c78:	f7fa fcc6 	bl	8000608 <__aeabi_dmul>
 8005c7c:	4b82      	ldr	r3, [pc, #520]	; (8005e88 <_dtoa_r+0x628>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f7fa fb0c 	bl	800029c <__adddf3>
 8005c84:	46d0      	mov	r8, sl
 8005c86:	46d9      	mov	r9, fp
 8005c88:	4682      	mov	sl, r0
 8005c8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d158      	bne.n	8005d44 <_dtoa_r+0x4e4>
 8005c92:	4b7e      	ldr	r3, [pc, #504]	; (8005e8c <_dtoa_r+0x62c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa fafd 	bl	8000298 <__aeabi_dsub>
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	465b      	mov	r3, fp
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	f7fa ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 8295 	bne.w	80061da <_dtoa_r+0x97a>
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	4649      	mov	r1, r9
 8005cba:	f7fa ff17 	bl	8000aec <__aeabi_dcmplt>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f040 8289 	bne.w	80061d6 <_dtoa_r+0x976>
 8005cc4:	ec5b ab19 	vmov	sl, fp, d9
 8005cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f2c0 8148 	blt.w	8005f60 <_dtoa_r+0x700>
 8005cd0:	9a03      	ldr	r2, [sp, #12]
 8005cd2:	2a0e      	cmp	r2, #14
 8005cd4:	f300 8144 	bgt.w	8005f60 <_dtoa_r+0x700>
 8005cd8:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <_dtoa_r+0x618>)
 8005cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f280 80d5 	bge.w	8005e94 <_dtoa_r+0x634>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f300 80d1 	bgt.w	8005e94 <_dtoa_r+0x634>
 8005cf2:	f040 826f 	bne.w	80061d4 <_dtoa_r+0x974>
 8005cf6:	4b65      	ldr	r3, [pc, #404]	; (8005e8c <_dtoa_r+0x62c>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fc83 	bl	8000608 <__aeabi_dmul>
 8005d02:	4652      	mov	r2, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	f7fa ff05 	bl	8000b14 <__aeabi_dcmpge>
 8005d0a:	9e06      	ldr	r6, [sp, #24]
 8005d0c:	4637      	mov	r7, r6
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f040 8245 	bne.w	800619e <_dtoa_r+0x93e>
 8005d14:	9d04      	ldr	r5, [sp, #16]
 8005d16:	2331      	movs	r3, #49	; 0x31
 8005d18:	f805 3b01 	strb.w	r3, [r5], #1
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	9303      	str	r3, [sp, #12]
 8005d22:	e240      	b.n	80061a6 <_dtoa_r+0x946>
 8005d24:	07f2      	lsls	r2, r6, #31
 8005d26:	d505      	bpl.n	8005d34 <_dtoa_r+0x4d4>
 8005d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d2c:	f7fa fc6c 	bl	8000608 <__aeabi_dmul>
 8005d30:	3501      	adds	r5, #1
 8005d32:	2301      	movs	r3, #1
 8005d34:	1076      	asrs	r6, r6, #1
 8005d36:	3708      	adds	r7, #8
 8005d38:	e777      	b.n	8005c2a <_dtoa_r+0x3ca>
 8005d3a:	2502      	movs	r5, #2
 8005d3c:	e779      	b.n	8005c32 <_dtoa_r+0x3d2>
 8005d3e:	9f03      	ldr	r7, [sp, #12]
 8005d40:	9e06      	ldr	r6, [sp, #24]
 8005d42:	e794      	b.n	8005c6e <_dtoa_r+0x40e>
 8005d44:	9904      	ldr	r1, [sp, #16]
 8005d46:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <_dtoa_r+0x618>)
 8005d48:	4431      	add	r1, r6
 8005d4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d043      	beq.n	8005de2 <_dtoa_r+0x582>
 8005d5a:	494d      	ldr	r1, [pc, #308]	; (8005e90 <_dtoa_r+0x630>)
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fa fd7d 	bl	800085c <__aeabi_ddiv>
 8005d62:	4652      	mov	r2, sl
 8005d64:	465b      	mov	r3, fp
 8005d66:	f7fa fa97 	bl	8000298 <__aeabi_dsub>
 8005d6a:	9d04      	ldr	r5, [sp, #16]
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	468b      	mov	fp, r1
 8005d70:	4649      	mov	r1, r9
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7fa fef8 	bl	8000b68 <__aeabi_d2iz>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	f7fa fbdb 	bl	8000534 <__aeabi_i2d>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fa87 	bl	8000298 <__aeabi_dsub>
 8005d8a:	3630      	adds	r6, #48	; 0x30
 8005d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	4680      	mov	r8, r0
 8005d96:	4689      	mov	r9, r1
 8005d98:	f7fa fea8 	bl	8000aec <__aeabi_dcmplt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d163      	bne.n	8005e68 <_dtoa_r+0x608>
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	4936      	ldr	r1, [pc, #216]	; (8005e80 <_dtoa_r+0x620>)
 8005da6:	2000      	movs	r0, #0
 8005da8:	f7fa fa76 	bl	8000298 <__aeabi_dsub>
 8005dac:	4652      	mov	r2, sl
 8005dae:	465b      	mov	r3, fp
 8005db0:	f7fa fe9c 	bl	8000aec <__aeabi_dcmplt>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f040 80b5 	bne.w	8005f24 <_dtoa_r+0x6c4>
 8005dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	d081      	beq.n	8005cc4 <_dtoa_r+0x464>
 8005dc0:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <_dtoa_r+0x624>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	f7fa fc1e 	bl	8000608 <__aeabi_dmul>
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <_dtoa_r+0x624>)
 8005dce:	4682      	mov	sl, r0
 8005dd0:	468b      	mov	fp, r1
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f7fa fc16 	bl	8000608 <__aeabi_dmul>
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	e7c6      	b.n	8005d70 <_dtoa_r+0x510>
 8005de2:	4650      	mov	r0, sl
 8005de4:	4659      	mov	r1, fp
 8005de6:	f7fa fc0f 	bl	8000608 <__aeabi_dmul>
 8005dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dec:	9d04      	ldr	r5, [sp, #16]
 8005dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	4649      	mov	r1, r9
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7fa feb6 	bl	8000b68 <__aeabi_d2iz>
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	f7fa fb99 	bl	8000534 <__aeabi_i2d>
 8005e02:	3630      	adds	r6, #48	; 0x30
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fa44 	bl	8000298 <__aeabi_dsub>
 8005e10:	f805 6b01 	strb.w	r6, [r5], #1
 8005e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e16:	429d      	cmp	r5, r3
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	d124      	bne.n	8005e6c <_dtoa_r+0x60c>
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <_dtoa_r+0x630>)
 8005e24:	4650      	mov	r0, sl
 8005e26:	4659      	mov	r1, fp
 8005e28:	f7fa fa38 	bl	800029c <__adddf3>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d173      	bne.n	8005f24 <_dtoa_r+0x6c4>
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	4913      	ldr	r1, [pc, #76]	; (8005e90 <_dtoa_r+0x630>)
 8005e42:	2000      	movs	r0, #0
 8005e44:	f7fa fa28 	bl	8000298 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	4649      	mov	r1, r9
 8005e50:	f7fa fe4c 	bl	8000aec <__aeabi_dcmplt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f43f af35 	beq.w	8005cc4 <_dtoa_r+0x464>
 8005e5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e5c:	1e6b      	subs	r3, r5, #1
 8005e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e64:	2b30      	cmp	r3, #48	; 0x30
 8005e66:	d0f8      	beq.n	8005e5a <_dtoa_r+0x5fa>
 8005e68:	9703      	str	r7, [sp, #12]
 8005e6a:	e049      	b.n	8005f00 <_dtoa_r+0x6a0>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <_dtoa_r+0x624>)
 8005e6e:	f7fa fbcb 	bl	8000608 <__aeabi_dmul>
 8005e72:	4680      	mov	r8, r0
 8005e74:	4689      	mov	r9, r1
 8005e76:	e7bd      	b.n	8005df4 <_dtoa_r+0x594>
 8005e78:	080097e0 	.word	0x080097e0
 8005e7c:	080097b8 	.word	0x080097b8
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	40240000 	.word	0x40240000
 8005e88:	401c0000 	.word	0x401c0000
 8005e8c:	40140000 	.word	0x40140000
 8005e90:	3fe00000 	.word	0x3fe00000
 8005e94:	9d04      	ldr	r5, [sp, #16]
 8005e96:	4656      	mov	r6, sl
 8005e98:	465f      	mov	r7, fp
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	f7fa fcdb 	bl	800085c <__aeabi_ddiv>
 8005ea6:	f7fa fe5f 	bl	8000b68 <__aeabi_d2iz>
 8005eaa:	4682      	mov	sl, r0
 8005eac:	f7fa fb42 	bl	8000534 <__aeabi_i2d>
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	f7fa fba8 	bl	8000608 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ec4:	f7fa f9e8 	bl	8000298 <__aeabi_dsub>
 8005ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8005ecc:	9e04      	ldr	r6, [sp, #16]
 8005ece:	9f06      	ldr	r7, [sp, #24]
 8005ed0:	1bae      	subs	r6, r5, r6
 8005ed2:	42b7      	cmp	r7, r6
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	d135      	bne.n	8005f46 <_dtoa_r+0x6e6>
 8005eda:	f7fa f9df 	bl	800029c <__adddf3>
 8005ede:	4642      	mov	r2, r8
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	f7fa fe1f 	bl	8000b28 <__aeabi_dcmpgt>
 8005eea:	b9d0      	cbnz	r0, 8005f22 <_dtoa_r+0x6c2>
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa fdf0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ef8:	b110      	cbz	r0, 8005f00 <_dtoa_r+0x6a0>
 8005efa:	f01a 0f01 	tst.w	sl, #1
 8005efe:	d110      	bne.n	8005f22 <_dtoa_r+0x6c2>
 8005f00:	4620      	mov	r0, r4
 8005f02:	ee18 1a10 	vmov	r1, s16
 8005f06:	f000 faf3 	bl	80064f0 <_Bfree>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9803      	ldr	r0, [sp, #12]
 8005f0e:	702b      	strb	r3, [r5, #0]
 8005f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f12:	3001      	adds	r0, #1
 8005f14:	6018      	str	r0, [r3, #0]
 8005f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f43f aced 	beq.w	80058f8 <_dtoa_r+0x98>
 8005f1e:	601d      	str	r5, [r3, #0]
 8005f20:	e4ea      	b.n	80058f8 <_dtoa_r+0x98>
 8005f22:	9f03      	ldr	r7, [sp, #12]
 8005f24:	462b      	mov	r3, r5
 8005f26:	461d      	mov	r5, r3
 8005f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f2c:	2a39      	cmp	r2, #57	; 0x39
 8005f2e:	d106      	bne.n	8005f3e <_dtoa_r+0x6de>
 8005f30:	9a04      	ldr	r2, [sp, #16]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d1f7      	bne.n	8005f26 <_dtoa_r+0x6c6>
 8005f36:	9904      	ldr	r1, [sp, #16]
 8005f38:	2230      	movs	r2, #48	; 0x30
 8005f3a:	3701      	adds	r7, #1
 8005f3c:	700a      	strb	r2, [r1, #0]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	3201      	adds	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e790      	b.n	8005e68 <_dtoa_r+0x608>
 8005f46:	4ba6      	ldr	r3, [pc, #664]	; (80061e0 <_dtoa_r+0x980>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f7fa fb5d 	bl	8000608 <__aeabi_dmul>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	f7fa fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d09d      	beq.n	8005e9a <_dtoa_r+0x63a>
 8005f5e:	e7cf      	b.n	8005f00 <_dtoa_r+0x6a0>
 8005f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	f000 80d7 	beq.w	8006116 <_dtoa_r+0x8b6>
 8005f68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f6a:	2a01      	cmp	r2, #1
 8005f6c:	f300 80ba 	bgt.w	80060e4 <_dtoa_r+0x884>
 8005f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	f000 80b2 	beq.w	80060dc <_dtoa_r+0x87c>
 8005f78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f7e:	9d07      	ldr	r5, [sp, #28]
 8005f80:	9a07      	ldr	r2, [sp, #28]
 8005f82:	441a      	add	r2, r3
 8005f84:	9207      	str	r2, [sp, #28]
 8005f86:	9a08      	ldr	r2, [sp, #32]
 8005f88:	2101      	movs	r1, #1
 8005f8a:	441a      	add	r2, r3
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	9208      	str	r2, [sp, #32]
 8005f90:	f000 fb66 	bl	8006660 <__i2b>
 8005f94:	4607      	mov	r7, r0
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	dd0c      	ble.n	8005fb4 <_dtoa_r+0x754>
 8005f9a:	9b08      	ldr	r3, [sp, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dd09      	ble.n	8005fb4 <_dtoa_r+0x754>
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	9a07      	ldr	r2, [sp, #28]
 8005fa4:	bfa8      	it	ge
 8005fa6:	462b      	movge	r3, r5
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	9207      	str	r2, [sp, #28]
 8005fac:	9a08      	ldr	r2, [sp, #32]
 8005fae:	1aed      	subs	r5, r5, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	9308      	str	r3, [sp, #32]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	b31b      	cbz	r3, 8006000 <_dtoa_r+0x7a0>
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80af 	beq.w	800611e <_dtoa_r+0x8be>
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	dd13      	ble.n	8005fec <_dtoa_r+0x78c>
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fc09 	bl	80067e0 <__pow5mult>
 8005fce:	ee18 2a10 	vmov	r2, s16
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 fb58 	bl	800668c <__multiply>
 8005fdc:	ee18 1a10 	vmov	r1, s16
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fa84 	bl	80064f0 <_Bfree>
 8005fe8:	ee08 8a10 	vmov	s16, r8
 8005fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fee:	1b9a      	subs	r2, r3, r6
 8005ff0:	d006      	beq.n	8006000 <_dtoa_r+0x7a0>
 8005ff2:	ee18 1a10 	vmov	r1, s16
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fbf2 	bl	80067e0 <__pow5mult>
 8005ffc:	ee08 0a10 	vmov	s16, r0
 8006000:	2101      	movs	r1, #1
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fb2c 	bl	8006660 <__i2b>
 8006008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	4606      	mov	r6, r0
 800600e:	f340 8088 	ble.w	8006122 <_dtoa_r+0x8c2>
 8006012:	461a      	mov	r2, r3
 8006014:	4601      	mov	r1, r0
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fbe2 	bl	80067e0 <__pow5mult>
 800601c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800601e:	2b01      	cmp	r3, #1
 8006020:	4606      	mov	r6, r0
 8006022:	f340 8081 	ble.w	8006128 <_dtoa_r+0x8c8>
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	6933      	ldr	r3, [r6, #16]
 800602c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006030:	6918      	ldr	r0, [r3, #16]
 8006032:	f000 fac5 	bl	80065c0 <__hi0bits>
 8006036:	f1c0 0020 	rsb	r0, r0, #32
 800603a:	9b08      	ldr	r3, [sp, #32]
 800603c:	4418      	add	r0, r3
 800603e:	f010 001f 	ands.w	r0, r0, #31
 8006042:	f000 8092 	beq.w	800616a <_dtoa_r+0x90a>
 8006046:	f1c0 0320 	rsb	r3, r0, #32
 800604a:	2b04      	cmp	r3, #4
 800604c:	f340 808a 	ble.w	8006164 <_dtoa_r+0x904>
 8006050:	f1c0 001c 	rsb	r0, r0, #28
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	4403      	add	r3, r0
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	9b08      	ldr	r3, [sp, #32]
 800605c:	4403      	add	r3, r0
 800605e:	4405      	add	r5, r0
 8006060:	9308      	str	r3, [sp, #32]
 8006062:	9b07      	ldr	r3, [sp, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd07      	ble.n	8006078 <_dtoa_r+0x818>
 8006068:	ee18 1a10 	vmov	r1, s16
 800606c:	461a      	mov	r2, r3
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fc10 	bl	8006894 <__lshift>
 8006074:	ee08 0a10 	vmov	s16, r0
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd05      	ble.n	800608a <_dtoa_r+0x82a>
 800607e:	4631      	mov	r1, r6
 8006080:	461a      	mov	r2, r3
 8006082:	4620      	mov	r0, r4
 8006084:	f000 fc06 	bl	8006894 <__lshift>
 8006088:	4606      	mov	r6, r0
 800608a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800608c:	2b00      	cmp	r3, #0
 800608e:	d06e      	beq.n	800616e <_dtoa_r+0x90e>
 8006090:	ee18 0a10 	vmov	r0, s16
 8006094:	4631      	mov	r1, r6
 8006096:	f000 fc6d 	bl	8006974 <__mcmp>
 800609a:	2800      	cmp	r0, #0
 800609c:	da67      	bge.n	800616e <_dtoa_r+0x90e>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	ee18 1a10 	vmov	r1, s16
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	220a      	movs	r2, #10
 80060aa:	2300      	movs	r3, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fa41 	bl	8006534 <__multadd>
 80060b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b4:	ee08 0a10 	vmov	s16, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 81b1 	beq.w	8006420 <_dtoa_r+0xbc0>
 80060be:	2300      	movs	r3, #0
 80060c0:	4639      	mov	r1, r7
 80060c2:	220a      	movs	r2, #10
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 fa35 	bl	8006534 <__multadd>
 80060ca:	9b05      	ldr	r3, [sp, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	4607      	mov	r7, r0
 80060d0:	f300 808e 	bgt.w	80061f0 <_dtoa_r+0x990>
 80060d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	dc51      	bgt.n	800617e <_dtoa_r+0x91e>
 80060da:	e089      	b.n	80061f0 <_dtoa_r+0x990>
 80060dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060e2:	e74b      	b.n	8005f7c <_dtoa_r+0x71c>
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	1e5e      	subs	r6, r3, #1
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	42b3      	cmp	r3, r6
 80060ec:	bfbf      	itttt	lt
 80060ee:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80060f0:	9609      	strlt	r6, [sp, #36]	; 0x24
 80060f2:	1af2      	sublt	r2, r6, r3
 80060f4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80060f6:	bfb6      	itet	lt
 80060f8:	189b      	addlt	r3, r3, r2
 80060fa:	1b9e      	subge	r6, r3, r6
 80060fc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	bfb8      	it	lt
 8006102:	2600      	movlt	r6, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb7      	itett	lt
 8006108:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
 800610c:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
 8006110:	1a9d      	sublt	r5, r3, r2
 8006112:	2300      	movlt	r3, #0
 8006114:	e734      	b.n	8005f80 <_dtoa_r+0x720>
 8006116:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006118:	9d07      	ldr	r5, [sp, #28]
 800611a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800611c:	e73b      	b.n	8005f96 <_dtoa_r+0x736>
 800611e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006120:	e767      	b.n	8005ff2 <_dtoa_r+0x792>
 8006122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006124:	2b01      	cmp	r3, #1
 8006126:	dc18      	bgt.n	800615a <_dtoa_r+0x8fa>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d115      	bne.n	800615a <_dtoa_r+0x8fa>
 800612e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006132:	b993      	cbnz	r3, 800615a <_dtoa_r+0x8fa>
 8006134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006138:	0d1b      	lsrs	r3, r3, #20
 800613a:	051b      	lsls	r3, r3, #20
 800613c:	b183      	cbz	r3, 8006160 <_dtoa_r+0x900>
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	9307      	str	r3, [sp, #28]
 8006144:	9b08      	ldr	r3, [sp, #32]
 8006146:	3301      	adds	r3, #1
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	f04f 0801 	mov.w	r8, #1
 800614e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	f47f af6a 	bne.w	800602a <_dtoa_r+0x7ca>
 8006156:	2001      	movs	r0, #1
 8006158:	e76f      	b.n	800603a <_dtoa_r+0x7da>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	e7f6      	b.n	800614e <_dtoa_r+0x8ee>
 8006160:	4698      	mov	r8, r3
 8006162:	e7f4      	b.n	800614e <_dtoa_r+0x8ee>
 8006164:	f43f af7d 	beq.w	8006062 <_dtoa_r+0x802>
 8006168:	4618      	mov	r0, r3
 800616a:	301c      	adds	r0, #28
 800616c:	e772      	b.n	8006054 <_dtoa_r+0x7f4>
 800616e:	9b06      	ldr	r3, [sp, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc37      	bgt.n	80061e4 <_dtoa_r+0x984>
 8006174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006176:	2b02      	cmp	r3, #2
 8006178:	dd34      	ble.n	80061e4 <_dtoa_r+0x984>
 800617a:	9b06      	ldr	r3, [sp, #24]
 800617c:	9305      	str	r3, [sp, #20]
 800617e:	9b05      	ldr	r3, [sp, #20]
 8006180:	b96b      	cbnz	r3, 800619e <_dtoa_r+0x93e>
 8006182:	4631      	mov	r1, r6
 8006184:	2205      	movs	r2, #5
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f9d4 	bl	8006534 <__multadd>
 800618c:	4601      	mov	r1, r0
 800618e:	4606      	mov	r6, r0
 8006190:	ee18 0a10 	vmov	r0, s16
 8006194:	f000 fbee 	bl	8006974 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	f73f adbb 	bgt.w	8005d14 <_dtoa_r+0x4b4>
 800619e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a0:	9d04      	ldr	r5, [sp, #16]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	4631      	mov	r1, r6
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 f99f 	bl	80064f0 <_Bfree>
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	f43f aea4 	beq.w	8005f00 <_dtoa_r+0x6a0>
 80061b8:	f1b8 0f00 	cmp.w	r8, #0
 80061bc:	d005      	beq.n	80061ca <_dtoa_r+0x96a>
 80061be:	45b8      	cmp	r8, r7
 80061c0:	d003      	beq.n	80061ca <_dtoa_r+0x96a>
 80061c2:	4641      	mov	r1, r8
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f993 	bl	80064f0 <_Bfree>
 80061ca:	4639      	mov	r1, r7
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 f98f 	bl	80064f0 <_Bfree>
 80061d2:	e695      	b.n	8005f00 <_dtoa_r+0x6a0>
 80061d4:	2600      	movs	r6, #0
 80061d6:	4637      	mov	r7, r6
 80061d8:	e7e1      	b.n	800619e <_dtoa_r+0x93e>
 80061da:	9703      	str	r7, [sp, #12]
 80061dc:	4637      	mov	r7, r6
 80061de:	e599      	b.n	8005d14 <_dtoa_r+0x4b4>
 80061e0:	40240000 	.word	0x40240000
 80061e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80ca 	beq.w	8006380 <_dtoa_r+0xb20>
 80061ec:	9b06      	ldr	r3, [sp, #24]
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	dd05      	ble.n	8006200 <_dtoa_r+0x9a0>
 80061f4:	4639      	mov	r1, r7
 80061f6:	462a      	mov	r2, r5
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fb4b 	bl	8006894 <__lshift>
 80061fe:	4607      	mov	r7, r0
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	d05b      	beq.n	80062be <_dtoa_r+0xa5e>
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4620      	mov	r0, r4
 800620a:	f000 f931 	bl	8006470 <_Balloc>
 800620e:	4605      	mov	r5, r0
 8006210:	b928      	cbnz	r0, 800621e <_dtoa_r+0x9be>
 8006212:	4b87      	ldr	r3, [pc, #540]	; (8006430 <_dtoa_r+0xbd0>)
 8006214:	4602      	mov	r2, r0
 8006216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800621a:	f7ff bb37 	b.w	800588c <_dtoa_r+0x2c>
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	3202      	adds	r2, #2
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	f107 010c 	add.w	r1, r7, #12
 8006228:	300c      	adds	r0, #12
 800622a:	f000 f913 	bl	8006454 <memcpy>
 800622e:	2201      	movs	r2, #1
 8006230:	4629      	mov	r1, r5
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fb2e 	bl	8006894 <__lshift>
 8006238:	9b04      	ldr	r3, [sp, #16]
 800623a:	f103 0901 	add.w	r9, r3, #1
 800623e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006242:	4413      	add	r3, r2
 8006244:	9308      	str	r3, [sp, #32]
 8006246:	f00a 0301 	and.w	r3, sl, #1
 800624a:	46b8      	mov	r8, r7
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	4607      	mov	r7, r0
 8006250:	4631      	mov	r1, r6
 8006252:	ee18 0a10 	vmov	r0, s16
 8006256:	f7ff fa75 	bl	8005744 <quorem>
 800625a:	4641      	mov	r1, r8
 800625c:	9005      	str	r0, [sp, #20]
 800625e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006262:	ee18 0a10 	vmov	r0, s16
 8006266:	f000 fb85 	bl	8006974 <__mcmp>
 800626a:	463a      	mov	r2, r7
 800626c:	9006      	str	r0, [sp, #24]
 800626e:	4631      	mov	r1, r6
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fb9b 	bl	80069ac <__mdiff>
 8006276:	68c2      	ldr	r2, [r0, #12]
 8006278:	f109 3bff 	add.w	fp, r9, #4294967295
 800627c:	4605      	mov	r5, r0
 800627e:	bb02      	cbnz	r2, 80062c2 <_dtoa_r+0xa62>
 8006280:	4601      	mov	r1, r0
 8006282:	ee18 0a10 	vmov	r0, s16
 8006286:	f000 fb75 	bl	8006974 <__mcmp>
 800628a:	4602      	mov	r2, r0
 800628c:	4629      	mov	r1, r5
 800628e:	4620      	mov	r0, r4
 8006290:	9209      	str	r2, [sp, #36]	; 0x24
 8006292:	f000 f92d 	bl	80064f0 <_Bfree>
 8006296:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800629a:	ea43 0102 	orr.w	r1, r3, r2
 800629e:	9b07      	ldr	r3, [sp, #28]
 80062a0:	430b      	orrs	r3, r1
 80062a2:	464d      	mov	r5, r9
 80062a4:	d10f      	bne.n	80062c6 <_dtoa_r+0xa66>
 80062a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062aa:	d02a      	beq.n	8006302 <_dtoa_r+0xaa2>
 80062ac:	9b06      	ldr	r3, [sp, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dd02      	ble.n	80062b8 <_dtoa_r+0xa58>
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80062b8:	f88b a000 	strb.w	sl, [fp]
 80062bc:	e775      	b.n	80061aa <_dtoa_r+0x94a>
 80062be:	4638      	mov	r0, r7
 80062c0:	e7ba      	b.n	8006238 <_dtoa_r+0x9d8>
 80062c2:	2201      	movs	r2, #1
 80062c4:	e7e2      	b.n	800628c <_dtoa_r+0xa2c>
 80062c6:	9b06      	ldr	r3, [sp, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db04      	blt.n	80062d6 <_dtoa_r+0xa76>
 80062cc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80062ce:	430b      	orrs	r3, r1
 80062d0:	9907      	ldr	r1, [sp, #28]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	d122      	bne.n	800631c <_dtoa_r+0xabc>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	ddee      	ble.n	80062b8 <_dtoa_r+0xa58>
 80062da:	ee18 1a10 	vmov	r1, s16
 80062de:	2201      	movs	r2, #1
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fad7 	bl	8006894 <__lshift>
 80062e6:	4631      	mov	r1, r6
 80062e8:	ee08 0a10 	vmov	s16, r0
 80062ec:	f000 fb42 	bl	8006974 <__mcmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dc03      	bgt.n	80062fc <_dtoa_r+0xa9c>
 80062f4:	d1e0      	bne.n	80062b8 <_dtoa_r+0xa58>
 80062f6:	f01a 0f01 	tst.w	sl, #1
 80062fa:	d0dd      	beq.n	80062b8 <_dtoa_r+0xa58>
 80062fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006300:	d1d7      	bne.n	80062b2 <_dtoa_r+0xa52>
 8006302:	2339      	movs	r3, #57	; 0x39
 8006304:	f88b 3000 	strb.w	r3, [fp]
 8006308:	462b      	mov	r3, r5
 800630a:	461d      	mov	r5, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006312:	2a39      	cmp	r2, #57	; 0x39
 8006314:	d071      	beq.n	80063fa <_dtoa_r+0xb9a>
 8006316:	3201      	adds	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e746      	b.n	80061aa <_dtoa_r+0x94a>
 800631c:	2a00      	cmp	r2, #0
 800631e:	dd07      	ble.n	8006330 <_dtoa_r+0xad0>
 8006320:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006324:	d0ed      	beq.n	8006302 <_dtoa_r+0xaa2>
 8006326:	f10a 0301 	add.w	r3, sl, #1
 800632a:	f88b 3000 	strb.w	r3, [fp]
 800632e:	e73c      	b.n	80061aa <_dtoa_r+0x94a>
 8006330:	9b08      	ldr	r3, [sp, #32]
 8006332:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006336:	4599      	cmp	r9, r3
 8006338:	d047      	beq.n	80063ca <_dtoa_r+0xb6a>
 800633a:	ee18 1a10 	vmov	r1, s16
 800633e:	2300      	movs	r3, #0
 8006340:	220a      	movs	r2, #10
 8006342:	4620      	mov	r0, r4
 8006344:	f000 f8f6 	bl	8006534 <__multadd>
 8006348:	45b8      	cmp	r8, r7
 800634a:	ee08 0a10 	vmov	s16, r0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	f04f 020a 	mov.w	r2, #10
 8006356:	4641      	mov	r1, r8
 8006358:	4620      	mov	r0, r4
 800635a:	d106      	bne.n	800636a <_dtoa_r+0xb0a>
 800635c:	f000 f8ea 	bl	8006534 <__multadd>
 8006360:	4680      	mov	r8, r0
 8006362:	4607      	mov	r7, r0
 8006364:	f109 0901 	add.w	r9, r9, #1
 8006368:	e772      	b.n	8006250 <_dtoa_r+0x9f0>
 800636a:	f000 f8e3 	bl	8006534 <__multadd>
 800636e:	4639      	mov	r1, r7
 8006370:	4680      	mov	r8, r0
 8006372:	2300      	movs	r3, #0
 8006374:	220a      	movs	r2, #10
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f8dc 	bl	8006534 <__multadd>
 800637c:	4607      	mov	r7, r0
 800637e:	e7f1      	b.n	8006364 <_dtoa_r+0xb04>
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	9d04      	ldr	r5, [sp, #16]
 8006386:	ee18 0a10 	vmov	r0, s16
 800638a:	4631      	mov	r1, r6
 800638c:	f7ff f9da 	bl	8005744 <quorem>
 8006390:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006394:	9b04      	ldr	r3, [sp, #16]
 8006396:	f805 ab01 	strb.w	sl, [r5], #1
 800639a:	1aea      	subs	r2, r5, r3
 800639c:	9b05      	ldr	r3, [sp, #20]
 800639e:	4293      	cmp	r3, r2
 80063a0:	dd09      	ble.n	80063b6 <_dtoa_r+0xb56>
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	2300      	movs	r3, #0
 80063a8:	220a      	movs	r2, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f8c2 	bl	8006534 <__multadd>
 80063b0:	ee08 0a10 	vmov	s16, r0
 80063b4:	e7e7      	b.n	8006386 <_dtoa_r+0xb26>
 80063b6:	9b05      	ldr	r3, [sp, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfc8      	it	gt
 80063bc:	461d      	movgt	r5, r3
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	bfd8      	it	le
 80063c2:	2501      	movle	r5, #1
 80063c4:	441d      	add	r5, r3
 80063c6:	f04f 0800 	mov.w	r8, #0
 80063ca:	ee18 1a10 	vmov	r1, s16
 80063ce:	2201      	movs	r2, #1
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fa5f 	bl	8006894 <__lshift>
 80063d6:	4631      	mov	r1, r6
 80063d8:	ee08 0a10 	vmov	s16, r0
 80063dc:	f000 faca 	bl	8006974 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc91      	bgt.n	8006308 <_dtoa_r+0xaa8>
 80063e4:	d102      	bne.n	80063ec <_dtoa_r+0xb8c>
 80063e6:	f01a 0f01 	tst.w	sl, #1
 80063ea:	d18d      	bne.n	8006308 <_dtoa_r+0xaa8>
 80063ec:	462b      	mov	r3, r5
 80063ee:	461d      	mov	r5, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a30      	cmp	r2, #48	; 0x30
 80063f6:	d0fa      	beq.n	80063ee <_dtoa_r+0xb8e>
 80063f8:	e6d7      	b.n	80061aa <_dtoa_r+0x94a>
 80063fa:	9a04      	ldr	r2, [sp, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d184      	bne.n	800630a <_dtoa_r+0xaaa>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	2331      	movs	r3, #49	; 0x31
 8006408:	7013      	strb	r3, [r2, #0]
 800640a:	e6ce      	b.n	80061aa <_dtoa_r+0x94a>
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <_dtoa_r+0xbd4>)
 800640e:	f7ff ba91 	b.w	8005934 <_dtoa_r+0xd4>
 8006412:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006414:	2b00      	cmp	r3, #0
 8006416:	f47f aa6a 	bne.w	80058ee <_dtoa_r+0x8e>
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <_dtoa_r+0xbd8>)
 800641c:	f7ff ba8a 	b.w	8005934 <_dtoa_r+0xd4>
 8006420:	9b05      	ldr	r3, [sp, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	dcae      	bgt.n	8006384 <_dtoa_r+0xb24>
 8006426:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006428:	2b02      	cmp	r3, #2
 800642a:	f73f aea8 	bgt.w	800617e <_dtoa_r+0x91e>
 800642e:	e7a9      	b.n	8006384 <_dtoa_r+0xb24>
 8006430:	0800974b 	.word	0x0800974b
 8006434:	080096a8 	.word	0x080096a8
 8006438:	080096cc 	.word	0x080096cc

0800643c <_localeconv_r>:
 800643c:	4800      	ldr	r0, [pc, #0]	; (8006440 <_localeconv_r+0x4>)
 800643e:	4770      	bx	lr
 8006440:	20000188 	.word	0x20000188

08006444 <malloc>:
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <malloc+0xc>)
 8006446:	4601      	mov	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f000 bc15 	b.w	8006c78 <_malloc_r>
 800644e:	bf00      	nop
 8006450:	20000034 	.word	0x20000034

08006454 <memcpy>:
 8006454:	440a      	add	r2, r1
 8006456:	4291      	cmp	r1, r2
 8006458:	f100 33ff 	add.w	r3, r0, #4294967295
 800645c:	d100      	bne.n	8006460 <memcpy+0xc>
 800645e:	4770      	bx	lr
 8006460:	b510      	push	{r4, lr}
 8006462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800646a:	4291      	cmp	r1, r2
 800646c:	d1f9      	bne.n	8006462 <memcpy+0xe>
 800646e:	bd10      	pop	{r4, pc}

08006470 <_Balloc>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006474:	4604      	mov	r4, r0
 8006476:	460d      	mov	r5, r1
 8006478:	b976      	cbnz	r6, 8006498 <_Balloc+0x28>
 800647a:	2010      	movs	r0, #16
 800647c:	f7ff ffe2 	bl	8006444 <malloc>
 8006480:	4602      	mov	r2, r0
 8006482:	6260      	str	r0, [r4, #36]	; 0x24
 8006484:	b920      	cbnz	r0, 8006490 <_Balloc+0x20>
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <_Balloc+0x78>)
 8006488:	4818      	ldr	r0, [pc, #96]	; (80064ec <_Balloc+0x7c>)
 800648a:	2166      	movs	r1, #102	; 0x66
 800648c:	f000 fdd4 	bl	8007038 <__assert_func>
 8006490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006494:	6006      	str	r6, [r0, #0]
 8006496:	60c6      	str	r6, [r0, #12]
 8006498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800649a:	68f3      	ldr	r3, [r6, #12]
 800649c:	b183      	cbz	r3, 80064c0 <_Balloc+0x50>
 800649e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064a6:	b9b8      	cbnz	r0, 80064d8 <_Balloc+0x68>
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f605 	lsl.w	r6, r1, r5
 80064ae:	1d72      	adds	r2, r6, #5
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fb5e 	bl	8006b74 <_calloc_r>
 80064b8:	b160      	cbz	r0, 80064d4 <_Balloc+0x64>
 80064ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064be:	e00e      	b.n	80064de <_Balloc+0x6e>
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	2104      	movs	r1, #4
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fb55 	bl	8006b74 <_calloc_r>
 80064ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064cc:	60f0      	str	r0, [r6, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e4      	bne.n	800649e <_Balloc+0x2e>
 80064d4:	2000      	movs	r0, #0
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	6802      	ldr	r2, [r0, #0]
 80064da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064de:	2300      	movs	r3, #0
 80064e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e4:	e7f7      	b.n	80064d6 <_Balloc+0x66>
 80064e6:	bf00      	nop
 80064e8:	080096d9 	.word	0x080096d9
 80064ec:	0800975c 	.word	0x0800975c

080064f0 <_Bfree>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064f4:	4605      	mov	r5, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b976      	cbnz	r6, 8006518 <_Bfree+0x28>
 80064fa:	2010      	movs	r0, #16
 80064fc:	f7ff ffa2 	bl	8006444 <malloc>
 8006500:	4602      	mov	r2, r0
 8006502:	6268      	str	r0, [r5, #36]	; 0x24
 8006504:	b920      	cbnz	r0, 8006510 <_Bfree+0x20>
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <_Bfree+0x3c>)
 8006508:	4809      	ldr	r0, [pc, #36]	; (8006530 <_Bfree+0x40>)
 800650a:	218a      	movs	r1, #138	; 0x8a
 800650c:	f000 fd94 	bl	8007038 <__assert_func>
 8006510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006514:	6006      	str	r6, [r0, #0]
 8006516:	60c6      	str	r6, [r0, #12]
 8006518:	b13c      	cbz	r4, 800652a <_Bfree+0x3a>
 800651a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006524:	6021      	str	r1, [r4, #0]
 8006526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	080096d9 	.word	0x080096d9
 8006530:	0800975c 	.word	0x0800975c

08006534 <__multadd>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	690d      	ldr	r5, [r1, #16]
 800653a:	4607      	mov	r7, r0
 800653c:	460c      	mov	r4, r1
 800653e:	461e      	mov	r6, r3
 8006540:	f101 0c14 	add.w	ip, r1, #20
 8006544:	2000      	movs	r0, #0
 8006546:	f8dc 3000 	ldr.w	r3, [ip]
 800654a:	b299      	uxth	r1, r3
 800654c:	fb02 6101 	mla	r1, r2, r1, r6
 8006550:	0c1e      	lsrs	r6, r3, #16
 8006552:	0c0b      	lsrs	r3, r1, #16
 8006554:	fb02 3306 	mla	r3, r2, r6, r3
 8006558:	b289      	uxth	r1, r1
 800655a:	3001      	adds	r0, #1
 800655c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006560:	4285      	cmp	r5, r0
 8006562:	f84c 1b04 	str.w	r1, [ip], #4
 8006566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800656a:	dcec      	bgt.n	8006546 <__multadd+0x12>
 800656c:	b30e      	cbz	r6, 80065b2 <__multadd+0x7e>
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	42ab      	cmp	r3, r5
 8006572:	dc19      	bgt.n	80065a8 <__multadd+0x74>
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4638      	mov	r0, r7
 8006578:	3101      	adds	r1, #1
 800657a:	f7ff ff79 	bl	8006470 <_Balloc>
 800657e:	4680      	mov	r8, r0
 8006580:	b928      	cbnz	r0, 800658e <__multadd+0x5a>
 8006582:	4602      	mov	r2, r0
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <__multadd+0x84>)
 8006586:	480d      	ldr	r0, [pc, #52]	; (80065bc <__multadd+0x88>)
 8006588:	21b5      	movs	r1, #181	; 0xb5
 800658a:	f000 fd55 	bl	8007038 <__assert_func>
 800658e:	6922      	ldr	r2, [r4, #16]
 8006590:	3202      	adds	r2, #2
 8006592:	f104 010c 	add.w	r1, r4, #12
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	300c      	adds	r0, #12
 800659a:	f7ff ff5b 	bl	8006454 <memcpy>
 800659e:	4621      	mov	r1, r4
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff ffa5 	bl	80064f0 <_Bfree>
 80065a6:	4644      	mov	r4, r8
 80065a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065ac:	3501      	adds	r5, #1
 80065ae:	615e      	str	r6, [r3, #20]
 80065b0:	6125      	str	r5, [r4, #16]
 80065b2:	4620      	mov	r0, r4
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b8:	0800974b 	.word	0x0800974b
 80065bc:	0800975c 	.word	0x0800975c

080065c0 <__hi0bits>:
 80065c0:	0c03      	lsrs	r3, r0, #16
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	b9d3      	cbnz	r3, 80065fc <__hi0bits+0x3c>
 80065c6:	0400      	lsls	r0, r0, #16
 80065c8:	2310      	movs	r3, #16
 80065ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065ce:	bf04      	itt	eq
 80065d0:	0200      	lsleq	r0, r0, #8
 80065d2:	3308      	addeq	r3, #8
 80065d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065d8:	bf04      	itt	eq
 80065da:	0100      	lsleq	r0, r0, #4
 80065dc:	3304      	addeq	r3, #4
 80065de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065e2:	bf04      	itt	eq
 80065e4:	0080      	lsleq	r0, r0, #2
 80065e6:	3302      	addeq	r3, #2
 80065e8:	2800      	cmp	r0, #0
 80065ea:	db05      	blt.n	80065f8 <__hi0bits+0x38>
 80065ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065f0:	f103 0301 	add.w	r3, r3, #1
 80065f4:	bf08      	it	eq
 80065f6:	2320      	moveq	r3, #32
 80065f8:	4618      	mov	r0, r3
 80065fa:	4770      	bx	lr
 80065fc:	2300      	movs	r3, #0
 80065fe:	e7e4      	b.n	80065ca <__hi0bits+0xa>

08006600 <__lo0bits>:
 8006600:	6803      	ldr	r3, [r0, #0]
 8006602:	f013 0207 	ands.w	r2, r3, #7
 8006606:	4601      	mov	r1, r0
 8006608:	d00b      	beq.n	8006622 <__lo0bits+0x22>
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d423      	bmi.n	8006656 <__lo0bits+0x56>
 800660e:	0798      	lsls	r0, r3, #30
 8006610:	bf49      	itett	mi
 8006612:	085b      	lsrmi	r3, r3, #1
 8006614:	089b      	lsrpl	r3, r3, #2
 8006616:	2001      	movmi	r0, #1
 8006618:	600b      	strmi	r3, [r1, #0]
 800661a:	bf5c      	itt	pl
 800661c:	600b      	strpl	r3, [r1, #0]
 800661e:	2002      	movpl	r0, #2
 8006620:	4770      	bx	lr
 8006622:	b298      	uxth	r0, r3
 8006624:	b9a8      	cbnz	r0, 8006652 <__lo0bits+0x52>
 8006626:	0c1b      	lsrs	r3, r3, #16
 8006628:	2010      	movs	r0, #16
 800662a:	b2da      	uxtb	r2, r3
 800662c:	b90a      	cbnz	r2, 8006632 <__lo0bits+0x32>
 800662e:	3008      	adds	r0, #8
 8006630:	0a1b      	lsrs	r3, r3, #8
 8006632:	071a      	lsls	r2, r3, #28
 8006634:	bf04      	itt	eq
 8006636:	091b      	lsreq	r3, r3, #4
 8006638:	3004      	addeq	r0, #4
 800663a:	079a      	lsls	r2, r3, #30
 800663c:	bf04      	itt	eq
 800663e:	089b      	lsreq	r3, r3, #2
 8006640:	3002      	addeq	r0, #2
 8006642:	07da      	lsls	r2, r3, #31
 8006644:	d403      	bmi.n	800664e <__lo0bits+0x4e>
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	f100 0001 	add.w	r0, r0, #1
 800664c:	d005      	beq.n	800665a <__lo0bits+0x5a>
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	4770      	bx	lr
 8006652:	4610      	mov	r0, r2
 8006654:	e7e9      	b.n	800662a <__lo0bits+0x2a>
 8006656:	2000      	movs	r0, #0
 8006658:	4770      	bx	lr
 800665a:	2020      	movs	r0, #32
 800665c:	4770      	bx	lr
	...

08006660 <__i2b>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	2101      	movs	r1, #1
 8006666:	f7ff ff03 	bl	8006470 <_Balloc>
 800666a:	4602      	mov	r2, r0
 800666c:	b928      	cbnz	r0, 800667a <__i2b+0x1a>
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <__i2b+0x24>)
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <__i2b+0x28>)
 8006672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006676:	f000 fcdf 	bl	8007038 <__assert_func>
 800667a:	2301      	movs	r3, #1
 800667c:	6144      	str	r4, [r0, #20]
 800667e:	6103      	str	r3, [r0, #16]
 8006680:	bd10      	pop	{r4, pc}
 8006682:	bf00      	nop
 8006684:	0800974b 	.word	0x0800974b
 8006688:	0800975c 	.word	0x0800975c

0800668c <__multiply>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	4691      	mov	r9, r2
 8006692:	690a      	ldr	r2, [r1, #16]
 8006694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	bfb8      	it	lt
 800669c:	460b      	movlt	r3, r1
 800669e:	460c      	mov	r4, r1
 80066a0:	bfbc      	itt	lt
 80066a2:	464c      	movlt	r4, r9
 80066a4:	4699      	movlt	r9, r3
 80066a6:	6927      	ldr	r7, [r4, #16]
 80066a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6861      	ldr	r1, [r4, #4]
 80066b0:	eb07 060a 	add.w	r6, r7, sl
 80066b4:	42b3      	cmp	r3, r6
 80066b6:	b085      	sub	sp, #20
 80066b8:	bfb8      	it	lt
 80066ba:	3101      	addlt	r1, #1
 80066bc:	f7ff fed8 	bl	8006470 <_Balloc>
 80066c0:	b930      	cbnz	r0, 80066d0 <__multiply+0x44>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b44      	ldr	r3, [pc, #272]	; (80067d8 <__multiply+0x14c>)
 80066c6:	4845      	ldr	r0, [pc, #276]	; (80067dc <__multiply+0x150>)
 80066c8:	f240 115d 	movw	r1, #349	; 0x15d
 80066cc:	f000 fcb4 	bl	8007038 <__assert_func>
 80066d0:	f100 0514 	add.w	r5, r0, #20
 80066d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066d8:	462b      	mov	r3, r5
 80066da:	2200      	movs	r2, #0
 80066dc:	4543      	cmp	r3, r8
 80066de:	d321      	bcc.n	8006724 <__multiply+0x98>
 80066e0:	f104 0314 	add.w	r3, r4, #20
 80066e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066e8:	f109 0314 	add.w	r3, r9, #20
 80066ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066f0:	9202      	str	r2, [sp, #8]
 80066f2:	1b3a      	subs	r2, r7, r4
 80066f4:	3a15      	subs	r2, #21
 80066f6:	f022 0203 	bic.w	r2, r2, #3
 80066fa:	3204      	adds	r2, #4
 80066fc:	f104 0115 	add.w	r1, r4, #21
 8006700:	428f      	cmp	r7, r1
 8006702:	bf38      	it	cc
 8006704:	2204      	movcc	r2, #4
 8006706:	9201      	str	r2, [sp, #4]
 8006708:	9a02      	ldr	r2, [sp, #8]
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	429a      	cmp	r2, r3
 800670e:	d80c      	bhi.n	800672a <__multiply+0x9e>
 8006710:	2e00      	cmp	r6, #0
 8006712:	dd03      	ble.n	800671c <__multiply+0x90>
 8006714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05a      	beq.n	80067d2 <__multiply+0x146>
 800671c:	6106      	str	r6, [r0, #16]
 800671e:	b005      	add	sp, #20
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	f843 2b04 	str.w	r2, [r3], #4
 8006728:	e7d8      	b.n	80066dc <__multiply+0x50>
 800672a:	f8b3 a000 	ldrh.w	sl, [r3]
 800672e:	f1ba 0f00 	cmp.w	sl, #0
 8006732:	d024      	beq.n	800677e <__multiply+0xf2>
 8006734:	f104 0e14 	add.w	lr, r4, #20
 8006738:	46a9      	mov	r9, r5
 800673a:	f04f 0c00 	mov.w	ip, #0
 800673e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006742:	f8d9 1000 	ldr.w	r1, [r9]
 8006746:	fa1f fb82 	uxth.w	fp, r2
 800674a:	b289      	uxth	r1, r1
 800674c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006754:	f8d9 2000 	ldr.w	r2, [r9]
 8006758:	4461      	add	r1, ip
 800675a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800675e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006766:	b289      	uxth	r1, r1
 8006768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800676c:	4577      	cmp	r7, lr
 800676e:	f849 1b04 	str.w	r1, [r9], #4
 8006772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006776:	d8e2      	bhi.n	800673e <__multiply+0xb2>
 8006778:	9a01      	ldr	r2, [sp, #4]
 800677a:	f845 c002 	str.w	ip, [r5, r2]
 800677e:	9a03      	ldr	r2, [sp, #12]
 8006780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006784:	3304      	adds	r3, #4
 8006786:	f1b9 0f00 	cmp.w	r9, #0
 800678a:	d020      	beq.n	80067ce <__multiply+0x142>
 800678c:	6829      	ldr	r1, [r5, #0]
 800678e:	f104 0c14 	add.w	ip, r4, #20
 8006792:	46ae      	mov	lr, r5
 8006794:	f04f 0a00 	mov.w	sl, #0
 8006798:	f8bc b000 	ldrh.w	fp, [ip]
 800679c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067a0:	fb09 220b 	mla	r2, r9, fp, r2
 80067a4:	4492      	add	sl, r2
 80067a6:	b289      	uxth	r1, r1
 80067a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067ac:	f84e 1b04 	str.w	r1, [lr], #4
 80067b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067b4:	f8be 1000 	ldrh.w	r1, [lr]
 80067b8:	0c12      	lsrs	r2, r2, #16
 80067ba:	fb09 1102 	mla	r1, r9, r2, r1
 80067be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067c2:	4567      	cmp	r7, ip
 80067c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067c8:	d8e6      	bhi.n	8006798 <__multiply+0x10c>
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	50a9      	str	r1, [r5, r2]
 80067ce:	3504      	adds	r5, #4
 80067d0:	e79a      	b.n	8006708 <__multiply+0x7c>
 80067d2:	3e01      	subs	r6, #1
 80067d4:	e79c      	b.n	8006710 <__multiply+0x84>
 80067d6:	bf00      	nop
 80067d8:	0800974b 	.word	0x0800974b
 80067dc:	0800975c 	.word	0x0800975c

080067e0 <__pow5mult>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	4615      	mov	r5, r2
 80067e6:	f012 0203 	ands.w	r2, r2, #3
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	d007      	beq.n	8006800 <__pow5mult+0x20>
 80067f0:	4c25      	ldr	r4, [pc, #148]	; (8006888 <__pow5mult+0xa8>)
 80067f2:	3a01      	subs	r2, #1
 80067f4:	2300      	movs	r3, #0
 80067f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067fa:	f7ff fe9b 	bl	8006534 <__multadd>
 80067fe:	4607      	mov	r7, r0
 8006800:	10ad      	asrs	r5, r5, #2
 8006802:	d03d      	beq.n	8006880 <__pow5mult+0xa0>
 8006804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006806:	b97c      	cbnz	r4, 8006828 <__pow5mult+0x48>
 8006808:	2010      	movs	r0, #16
 800680a:	f7ff fe1b 	bl	8006444 <malloc>
 800680e:	4602      	mov	r2, r0
 8006810:	6270      	str	r0, [r6, #36]	; 0x24
 8006812:	b928      	cbnz	r0, 8006820 <__pow5mult+0x40>
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <__pow5mult+0xac>)
 8006816:	481e      	ldr	r0, [pc, #120]	; (8006890 <__pow5mult+0xb0>)
 8006818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800681c:	f000 fc0c 	bl	8007038 <__assert_func>
 8006820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006824:	6004      	str	r4, [r0, #0]
 8006826:	60c4      	str	r4, [r0, #12]
 8006828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800682c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006830:	b94c      	cbnz	r4, 8006846 <__pow5mult+0x66>
 8006832:	f240 2171 	movw	r1, #625	; 0x271
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ff12 	bl	8006660 <__i2b>
 800683c:	2300      	movs	r3, #0
 800683e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006842:	4604      	mov	r4, r0
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	f04f 0900 	mov.w	r9, #0
 800684a:	07eb      	lsls	r3, r5, #31
 800684c:	d50a      	bpl.n	8006864 <__pow5mult+0x84>
 800684e:	4639      	mov	r1, r7
 8006850:	4622      	mov	r2, r4
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ff1a 	bl	800668c <__multiply>
 8006858:	4639      	mov	r1, r7
 800685a:	4680      	mov	r8, r0
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff fe47 	bl	80064f0 <_Bfree>
 8006862:	4647      	mov	r7, r8
 8006864:	106d      	asrs	r5, r5, #1
 8006866:	d00b      	beq.n	8006880 <__pow5mult+0xa0>
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	b938      	cbnz	r0, 800687c <__pow5mult+0x9c>
 800686c:	4622      	mov	r2, r4
 800686e:	4621      	mov	r1, r4
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ff0b 	bl	800668c <__multiply>
 8006876:	6020      	str	r0, [r4, #0]
 8006878:	f8c0 9000 	str.w	r9, [r0]
 800687c:	4604      	mov	r4, r0
 800687e:	e7e4      	b.n	800684a <__pow5mult+0x6a>
 8006880:	4638      	mov	r0, r7
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	bf00      	nop
 8006888:	080098a8 	.word	0x080098a8
 800688c:	080096d9 	.word	0x080096d9
 8006890:	0800975c 	.word	0x0800975c

08006894 <__lshift>:
 8006894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	6849      	ldr	r1, [r1, #4]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	4607      	mov	r7, r0
 80068a6:	4691      	mov	r9, r2
 80068a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068ac:	f108 0601 	add.w	r6, r8, #1
 80068b0:	42b3      	cmp	r3, r6
 80068b2:	db0b      	blt.n	80068cc <__lshift+0x38>
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff fddb 	bl	8006470 <_Balloc>
 80068ba:	4605      	mov	r5, r0
 80068bc:	b948      	cbnz	r0, 80068d2 <__lshift+0x3e>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b2a      	ldr	r3, [pc, #168]	; (800696c <__lshift+0xd8>)
 80068c2:	482b      	ldr	r0, [pc, #172]	; (8006970 <__lshift+0xdc>)
 80068c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068c8:	f000 fbb6 	bl	8007038 <__assert_func>
 80068cc:	3101      	adds	r1, #1
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	e7ee      	b.n	80068b0 <__lshift+0x1c>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f100 0114 	add.w	r1, r0, #20
 80068d8:	f100 0210 	add.w	r2, r0, #16
 80068dc:	4618      	mov	r0, r3
 80068de:	4553      	cmp	r3, sl
 80068e0:	db37      	blt.n	8006952 <__lshift+0xbe>
 80068e2:	6920      	ldr	r0, [r4, #16]
 80068e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e8:	f104 0314 	add.w	r3, r4, #20
 80068ec:	f019 091f 	ands.w	r9, r9, #31
 80068f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068f8:	d02f      	beq.n	800695a <__lshift+0xc6>
 80068fa:	f1c9 0e20 	rsb	lr, r9, #32
 80068fe:	468a      	mov	sl, r1
 8006900:	f04f 0c00 	mov.w	ip, #0
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	fa02 f209 	lsl.w	r2, r2, r9
 800690a:	ea42 020c 	orr.w	r2, r2, ip
 800690e:	f84a 2b04 	str.w	r2, [sl], #4
 8006912:	f853 2b04 	ldr.w	r2, [r3], #4
 8006916:	4298      	cmp	r0, r3
 8006918:	fa22 fc0e 	lsr.w	ip, r2, lr
 800691c:	d8f2      	bhi.n	8006904 <__lshift+0x70>
 800691e:	1b03      	subs	r3, r0, r4
 8006920:	3b15      	subs	r3, #21
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	3304      	adds	r3, #4
 8006928:	f104 0215 	add.w	r2, r4, #21
 800692c:	4290      	cmp	r0, r2
 800692e:	bf38      	it	cc
 8006930:	2304      	movcc	r3, #4
 8006932:	f841 c003 	str.w	ip, [r1, r3]
 8006936:	f1bc 0f00 	cmp.w	ip, #0
 800693a:	d001      	beq.n	8006940 <__lshift+0xac>
 800693c:	f108 0602 	add.w	r6, r8, #2
 8006940:	3e01      	subs	r6, #1
 8006942:	4638      	mov	r0, r7
 8006944:	612e      	str	r6, [r5, #16]
 8006946:	4621      	mov	r1, r4
 8006948:	f7ff fdd2 	bl	80064f0 <_Bfree>
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	f842 0f04 	str.w	r0, [r2, #4]!
 8006956:	3301      	adds	r3, #1
 8006958:	e7c1      	b.n	80068de <__lshift+0x4a>
 800695a:	3904      	subs	r1, #4
 800695c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006960:	f841 2f04 	str.w	r2, [r1, #4]!
 8006964:	4298      	cmp	r0, r3
 8006966:	d8f9      	bhi.n	800695c <__lshift+0xc8>
 8006968:	e7ea      	b.n	8006940 <__lshift+0xac>
 800696a:	bf00      	nop
 800696c:	0800974b 	.word	0x0800974b
 8006970:	0800975c 	.word	0x0800975c

08006974 <__mcmp>:
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	6902      	ldr	r2, [r0, #16]
 8006978:	690c      	ldr	r4, [r1, #16]
 800697a:	1b12      	subs	r2, r2, r4
 800697c:	d10e      	bne.n	800699c <__mcmp+0x28>
 800697e:	f100 0314 	add.w	r3, r0, #20
 8006982:	3114      	adds	r1, #20
 8006984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800698c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006994:	42a5      	cmp	r5, r4
 8006996:	d003      	beq.n	80069a0 <__mcmp+0x2c>
 8006998:	d305      	bcc.n	80069a6 <__mcmp+0x32>
 800699a:	2201      	movs	r2, #1
 800699c:	4610      	mov	r0, r2
 800699e:	bd30      	pop	{r4, r5, pc}
 80069a0:	4283      	cmp	r3, r0
 80069a2:	d3f3      	bcc.n	800698c <__mcmp+0x18>
 80069a4:	e7fa      	b.n	800699c <__mcmp+0x28>
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	e7f7      	b.n	800699c <__mcmp+0x28>

080069ac <__mdiff>:
 80069ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460c      	mov	r4, r1
 80069b2:	4606      	mov	r6, r0
 80069b4:	4611      	mov	r1, r2
 80069b6:	4620      	mov	r0, r4
 80069b8:	4690      	mov	r8, r2
 80069ba:	f7ff ffdb 	bl	8006974 <__mcmp>
 80069be:	1e05      	subs	r5, r0, #0
 80069c0:	d110      	bne.n	80069e4 <__mdiff+0x38>
 80069c2:	4629      	mov	r1, r5
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff fd53 	bl	8006470 <_Balloc>
 80069ca:	b930      	cbnz	r0, 80069da <__mdiff+0x2e>
 80069cc:	4b3a      	ldr	r3, [pc, #232]	; (8006ab8 <__mdiff+0x10c>)
 80069ce:	4602      	mov	r2, r0
 80069d0:	f240 2132 	movw	r1, #562	; 0x232
 80069d4:	4839      	ldr	r0, [pc, #228]	; (8006abc <__mdiff+0x110>)
 80069d6:	f000 fb2f 	bl	8007038 <__assert_func>
 80069da:	2301      	movs	r3, #1
 80069dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	bfa4      	itt	ge
 80069e6:	4643      	movge	r3, r8
 80069e8:	46a0      	movge	r8, r4
 80069ea:	4630      	mov	r0, r6
 80069ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069f0:	bfa6      	itte	ge
 80069f2:	461c      	movge	r4, r3
 80069f4:	2500      	movge	r5, #0
 80069f6:	2501      	movlt	r5, #1
 80069f8:	f7ff fd3a 	bl	8006470 <_Balloc>
 80069fc:	b920      	cbnz	r0, 8006a08 <__mdiff+0x5c>
 80069fe:	4b2e      	ldr	r3, [pc, #184]	; (8006ab8 <__mdiff+0x10c>)
 8006a00:	4602      	mov	r2, r0
 8006a02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a06:	e7e5      	b.n	80069d4 <__mdiff+0x28>
 8006a08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a0c:	6926      	ldr	r6, [r4, #16]
 8006a0e:	60c5      	str	r5, [r0, #12]
 8006a10:	f104 0914 	add.w	r9, r4, #20
 8006a14:	f108 0514 	add.w	r5, r8, #20
 8006a18:	f100 0e14 	add.w	lr, r0, #20
 8006a1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a24:	f108 0210 	add.w	r2, r8, #16
 8006a28:	46f2      	mov	sl, lr
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a34:	fa1f f883 	uxth.w	r8, r3
 8006a38:	fa11 f18b 	uxtah	r1, r1, fp
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	eba1 0808 	sub.w	r8, r1, r8
 8006a42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a4a:	fa1f f888 	uxth.w	r8, r8
 8006a4e:	1419      	asrs	r1, r3, #16
 8006a50:	454e      	cmp	r6, r9
 8006a52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a56:	f84a 3b04 	str.w	r3, [sl], #4
 8006a5a:	d8e7      	bhi.n	8006a2c <__mdiff+0x80>
 8006a5c:	1b33      	subs	r3, r6, r4
 8006a5e:	3b15      	subs	r3, #21
 8006a60:	f023 0303 	bic.w	r3, r3, #3
 8006a64:	3304      	adds	r3, #4
 8006a66:	3415      	adds	r4, #21
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	bf38      	it	cc
 8006a6c:	2304      	movcc	r3, #4
 8006a6e:	441d      	add	r5, r3
 8006a70:	4473      	add	r3, lr
 8006a72:	469e      	mov	lr, r3
 8006a74:	462e      	mov	r6, r5
 8006a76:	4566      	cmp	r6, ip
 8006a78:	d30e      	bcc.n	8006a98 <__mdiff+0xec>
 8006a7a:	f10c 0203 	add.w	r2, ip, #3
 8006a7e:	1b52      	subs	r2, r2, r5
 8006a80:	f022 0203 	bic.w	r2, r2, #3
 8006a84:	3d03      	subs	r5, #3
 8006a86:	45ac      	cmp	ip, r5
 8006a88:	bf38      	it	cc
 8006a8a:	2200      	movcc	r2, #0
 8006a8c:	441a      	add	r2, r3
 8006a8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a92:	b17b      	cbz	r3, 8006ab4 <__mdiff+0x108>
 8006a94:	6107      	str	r7, [r0, #16]
 8006a96:	e7a3      	b.n	80069e0 <__mdiff+0x34>
 8006a98:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a9c:	fa11 f288 	uxtah	r2, r1, r8
 8006aa0:	1414      	asrs	r4, r2, #16
 8006aa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006aa6:	b292      	uxth	r2, r2
 8006aa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006aac:	f84e 2b04 	str.w	r2, [lr], #4
 8006ab0:	1421      	asrs	r1, r4, #16
 8006ab2:	e7e0      	b.n	8006a76 <__mdiff+0xca>
 8006ab4:	3f01      	subs	r7, #1
 8006ab6:	e7ea      	b.n	8006a8e <__mdiff+0xe2>
 8006ab8:	0800974b 	.word	0x0800974b
 8006abc:	0800975c 	.word	0x0800975c

08006ac0 <__d2b>:
 8006ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8006aca:	4690      	mov	r8, r2
 8006acc:	4699      	mov	r9, r3
 8006ace:	f7ff fccf 	bl	8006470 <_Balloc>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	b930      	cbnz	r0, 8006ae4 <__d2b+0x24>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <__d2b+0xac>)
 8006ada:	4825      	ldr	r0, [pc, #148]	; (8006b70 <__d2b+0xb0>)
 8006adc:	f240 310a 	movw	r1, #778	; 0x30a
 8006ae0:	f000 faaa 	bl	8007038 <__assert_func>
 8006ae4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aec:	bb2d      	cbnz	r5, 8006b3a <__d2b+0x7a>
 8006aee:	f1b8 0200 	subs.w	r2, r8, #0
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	d026      	beq.n	8006b44 <__d2b+0x84>
 8006af6:	4668      	mov	r0, sp
 8006af8:	9200      	str	r2, [sp, #0]
 8006afa:	f7ff fd81 	bl	8006600 <__lo0bits>
 8006afe:	9900      	ldr	r1, [sp, #0]
 8006b00:	b1f0      	cbz	r0, 8006b40 <__d2b+0x80>
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	f1c0 0320 	rsb	r3, r0, #32
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	40c2      	lsrs	r2, r0
 8006b10:	6163      	str	r3, [r4, #20]
 8006b12:	9201      	str	r2, [sp, #4]
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	61a3      	str	r3, [r4, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2202      	movne	r2, #2
 8006b1e:	2201      	moveq	r2, #1
 8006b20:	6122      	str	r2, [r4, #16]
 8006b22:	b1c5      	cbz	r5, 8006b56 <__d2b+0x96>
 8006b24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b28:	4405      	add	r5, r0
 8006b2a:	603d      	str	r5, [r7, #0]
 8006b2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b30:	6030      	str	r0, [r6, #0]
 8006b32:	4620      	mov	r0, r4
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3e:	e7d6      	b.n	8006aee <__d2b+0x2e>
 8006b40:	6161      	str	r1, [r4, #20]
 8006b42:	e7e7      	b.n	8006b14 <__d2b+0x54>
 8006b44:	a801      	add	r0, sp, #4
 8006b46:	f7ff fd5b 	bl	8006600 <__lo0bits>
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	6163      	str	r3, [r4, #20]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	6122      	str	r2, [r4, #16]
 8006b52:	3020      	adds	r0, #32
 8006b54:	e7e5      	b.n	8006b22 <__d2b+0x62>
 8006b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b5e:	6038      	str	r0, [r7, #0]
 8006b60:	6918      	ldr	r0, [r3, #16]
 8006b62:	f7ff fd2d 	bl	80065c0 <__hi0bits>
 8006b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b6a:	e7e1      	b.n	8006b30 <__d2b+0x70>
 8006b6c:	0800974b 	.word	0x0800974b
 8006b70:	0800975c 	.word	0x0800975c

08006b74 <_calloc_r>:
 8006b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b76:	fba1 2402 	umull	r2, r4, r1, r2
 8006b7a:	b94c      	cbnz	r4, 8006b90 <_calloc_r+0x1c>
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	9201      	str	r2, [sp, #4]
 8006b80:	f000 f87a 	bl	8006c78 <_malloc_r>
 8006b84:	9a01      	ldr	r2, [sp, #4]
 8006b86:	4605      	mov	r5, r0
 8006b88:	b930      	cbnz	r0, 8006b98 <_calloc_r+0x24>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	b003      	add	sp, #12
 8006b8e:	bd30      	pop	{r4, r5, pc}
 8006b90:	220c      	movs	r2, #12
 8006b92:	6002      	str	r2, [r0, #0]
 8006b94:	2500      	movs	r5, #0
 8006b96:	e7f8      	b.n	8006b8a <_calloc_r+0x16>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f7fe f93f 	bl	8004e1c <memset>
 8006b9e:	e7f4      	b.n	8006b8a <_calloc_r+0x16>

08006ba0 <_free_r>:
 8006ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba2:	2900      	cmp	r1, #0
 8006ba4:	d044      	beq.n	8006c30 <_free_r+0x90>
 8006ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006baa:	9001      	str	r0, [sp, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f1a1 0404 	sub.w	r4, r1, #4
 8006bb2:	bfb8      	it	lt
 8006bb4:	18e4      	addlt	r4, r4, r3
 8006bb6:	f000 fa9b 	bl	80070f0 <__malloc_lock>
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <_free_r+0x94>)
 8006bbc:	9801      	ldr	r0, [sp, #4]
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	b933      	cbnz	r3, 8006bd0 <_free_r+0x30>
 8006bc2:	6063      	str	r3, [r4, #4]
 8006bc4:	6014      	str	r4, [r2, #0]
 8006bc6:	b003      	add	sp, #12
 8006bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bcc:	f000 ba96 	b.w	80070fc <__malloc_unlock>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d908      	bls.n	8006be6 <_free_r+0x46>
 8006bd4:	6825      	ldr	r5, [r4, #0]
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf01      	itttt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	1949      	addeq	r1, r1, r5
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	e7ed      	b.n	8006bc2 <_free_r+0x22>
 8006be6:	461a      	mov	r2, r3
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b10b      	cbz	r3, 8006bf0 <_free_r+0x50>
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d9fa      	bls.n	8006be6 <_free_r+0x46>
 8006bf0:	6811      	ldr	r1, [r2, #0]
 8006bf2:	1855      	adds	r5, r2, r1
 8006bf4:	42a5      	cmp	r5, r4
 8006bf6:	d10b      	bne.n	8006c10 <_free_r+0x70>
 8006bf8:	6824      	ldr	r4, [r4, #0]
 8006bfa:	4421      	add	r1, r4
 8006bfc:	1854      	adds	r4, r2, r1
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	6011      	str	r1, [r2, #0]
 8006c02:	d1e0      	bne.n	8006bc6 <_free_r+0x26>
 8006c04:	681c      	ldr	r4, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	6053      	str	r3, [r2, #4]
 8006c0a:	4421      	add	r1, r4
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	e7da      	b.n	8006bc6 <_free_r+0x26>
 8006c10:	d902      	bls.n	8006c18 <_free_r+0x78>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	e7d6      	b.n	8006bc6 <_free_r+0x26>
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf04      	itt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	bf04      	itt	eq
 8006c28:	1949      	addeq	r1, r1, r5
 8006c2a:	6021      	streq	r1, [r4, #0]
 8006c2c:	6054      	str	r4, [r2, #4]
 8006c2e:	e7ca      	b.n	8006bc6 <_free_r+0x26>
 8006c30:	b003      	add	sp, #12
 8006c32:	bd30      	pop	{r4, r5, pc}
 8006c34:	200002a8 	.word	0x200002a8

08006c38 <sbrk_aligned>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4e0e      	ldr	r6, [pc, #56]	; (8006c74 <sbrk_aligned+0x3c>)
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	4605      	mov	r5, r0
 8006c42:	b911      	cbnz	r1, 8006c4a <sbrk_aligned+0x12>
 8006c44:	f000 f9e8 	bl	8007018 <_sbrk_r>
 8006c48:	6030      	str	r0, [r6, #0]
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f9e3 	bl	8007018 <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d00a      	beq.n	8006c6c <sbrk_aligned+0x34>
 8006c56:	1cc4      	adds	r4, r0, #3
 8006c58:	f024 0403 	bic.w	r4, r4, #3
 8006c5c:	42a0      	cmp	r0, r4
 8006c5e:	d007      	beq.n	8006c70 <sbrk_aligned+0x38>
 8006c60:	1a21      	subs	r1, r4, r0
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f9d8 	bl	8007018 <_sbrk_r>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d101      	bne.n	8006c70 <sbrk_aligned+0x38>
 8006c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	200002ac 	.word	0x200002ac

08006c78 <_malloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d905      	bls.n	8006ca0 <_malloc_r+0x28>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	2600      	movs	r6, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	4e2e      	ldr	r6, [pc, #184]	; (8006d5c <_malloc_r+0xe4>)
 8006ca2:	f000 fa25 	bl	80070f0 <__malloc_lock>
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb34      	cbnz	r4, 8006cfa <_malloc_r+0x82>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc2 	bl	8006c38 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d14d      	bne.n	8006d56 <_malloc_r+0xde>
 8006cba:	6834      	ldr	r4, [r6, #0]
 8006cbc:	4626      	mov	r6, r4
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d140      	bne.n	8006d44 <_malloc_r+0xcc>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	eb04 0803 	add.w	r8, r4, r3
 8006ccc:	f000 f9a4 	bl	8007018 <_sbrk_r>
 8006cd0:	4580      	cmp	r8, r0
 8006cd2:	d13a      	bne.n	8006d4a <_malloc_r+0xd2>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	3503      	adds	r5, #3
 8006cd8:	1a6d      	subs	r5, r5, r1
 8006cda:	f025 0503 	bic.w	r5, r5, #3
 8006cde:	3508      	adds	r5, #8
 8006ce0:	2d0c      	cmp	r5, #12
 8006ce2:	bf38      	it	cc
 8006ce4:	250c      	movcc	r5, #12
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ffa5 	bl	8006c38 <sbrk_aligned>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d02b      	beq.n	8006d4a <_malloc_r+0xd2>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	442b      	add	r3, r5
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	e00e      	b.n	8006d18 <_malloc_r+0xa0>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	1b52      	subs	r2, r2, r5
 8006cfe:	d41e      	bmi.n	8006d3e <_malloc_r+0xc6>
 8006d00:	2a0b      	cmp	r2, #11
 8006d02:	d916      	bls.n	8006d32 <_malloc_r+0xba>
 8006d04:	1961      	adds	r1, r4, r5
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	bf18      	it	ne
 8006d0c:	6059      	strne	r1, [r3, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	bf08      	it	eq
 8006d12:	6031      	streq	r1, [r6, #0]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f104 060b 	add.w	r6, r4, #11
 8006d1e:	f000 f9ed 	bl	80070fc <__malloc_unlock>
 8006d22:	f026 0607 	bic.w	r6, r6, #7
 8006d26:	1d23      	adds	r3, r4, #4
 8006d28:	1af2      	subs	r2, r6, r3
 8006d2a:	d0b6      	beq.n	8006c9a <_malloc_r+0x22>
 8006d2c:	1b9b      	subs	r3, r3, r6
 8006d2e:	50a3      	str	r3, [r4, r2]
 8006d30:	e7b3      	b.n	8006c9a <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	6032      	streq	r2, [r6, #0]
 8006d3a:	605a      	strne	r2, [r3, #4]
 8006d3c:	e7ec      	b.n	8006d18 <_malloc_r+0xa0>
 8006d3e:	4623      	mov	r3, r4
 8006d40:	6864      	ldr	r4, [r4, #4]
 8006d42:	e7b2      	b.n	8006caa <_malloc_r+0x32>
 8006d44:	4634      	mov	r4, r6
 8006d46:	6876      	ldr	r6, [r6, #4]
 8006d48:	e7b9      	b.n	8006cbe <_malloc_r+0x46>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f000 f9d4 	bl	80070fc <__malloc_unlock>
 8006d54:	e7a1      	b.n	8006c9a <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa0>
 8006d5a:	bf00      	nop
 8006d5c:	200002a8 	.word	0x200002a8

08006d60 <__ssputs_r>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	688e      	ldr	r6, [r1, #8]
 8006d66:	429e      	cmp	r6, r3
 8006d68:	4682      	mov	sl, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4690      	mov	r8, r2
 8006d6e:	461f      	mov	r7, r3
 8006d70:	d838      	bhi.n	8006de4 <__ssputs_r+0x84>
 8006d72:	898a      	ldrh	r2, [r1, #12]
 8006d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d78:	d032      	beq.n	8006de0 <__ssputs_r+0x80>
 8006d7a:	6825      	ldr	r5, [r4, #0]
 8006d7c:	6909      	ldr	r1, [r1, #16]
 8006d7e:	eba5 0901 	sub.w	r9, r5, r1
 8006d82:	6965      	ldr	r5, [r4, #20]
 8006d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	444b      	add	r3, r9
 8006d90:	106d      	asrs	r5, r5, #1
 8006d92:	429d      	cmp	r5, r3
 8006d94:	bf38      	it	cc
 8006d96:	461d      	movcc	r5, r3
 8006d98:	0553      	lsls	r3, r2, #21
 8006d9a:	d531      	bpl.n	8006e00 <__ssputs_r+0xa0>
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7ff ff6b 	bl	8006c78 <_malloc_r>
 8006da2:	4606      	mov	r6, r0
 8006da4:	b950      	cbnz	r0, 8006dbc <__ssputs_r+0x5c>
 8006da6:	230c      	movs	r3, #12
 8006da8:	f8ca 3000 	str.w	r3, [sl]
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	6921      	ldr	r1, [r4, #16]
 8006dbe:	464a      	mov	r2, r9
 8006dc0:	f7ff fb48 	bl	8006454 <memcpy>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	6126      	str	r6, [r4, #16]
 8006dd2:	6165      	str	r5, [r4, #20]
 8006dd4:	444e      	add	r6, r9
 8006dd6:	eba5 0509 	sub.w	r5, r5, r9
 8006dda:	6026      	str	r6, [r4, #0]
 8006ddc:	60a5      	str	r5, [r4, #8]
 8006dde:	463e      	mov	r6, r7
 8006de0:	42be      	cmp	r6, r7
 8006de2:	d900      	bls.n	8006de6 <__ssputs_r+0x86>
 8006de4:	463e      	mov	r6, r7
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	4632      	mov	r2, r6
 8006dea:	4641      	mov	r1, r8
 8006dec:	f000 f966 	bl	80070bc <memmove>
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	1b9b      	subs	r3, r3, r6
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	4433      	add	r3, r6
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7db      	b.n	8006db8 <__ssputs_r+0x58>
 8006e00:	462a      	mov	r2, r5
 8006e02:	f000 f981 	bl	8007108 <_realloc_r>
 8006e06:	4606      	mov	r6, r0
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1e1      	bne.n	8006dd0 <__ssputs_r+0x70>
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	4650      	mov	r0, sl
 8006e10:	f7ff fec6 	bl	8006ba0 <_free_r>
 8006e14:	e7c7      	b.n	8006da6 <__ssputs_r+0x46>
	...

08006e18 <_svfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	898b      	ldrh	r3, [r1, #12]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	b09d      	sub	sp, #116	; 0x74
 8006e24:	4607      	mov	r7, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	d50e      	bpl.n	8006e4a <_svfiprintf_r+0x32>
 8006e2c:	690b      	ldr	r3, [r1, #16]
 8006e2e:	b963      	cbnz	r3, 8006e4a <_svfiprintf_r+0x32>
 8006e30:	2140      	movs	r1, #64	; 0x40
 8006e32:	f7ff ff21 	bl	8006c78 <_malloc_r>
 8006e36:	6028      	str	r0, [r5, #0]
 8006e38:	6128      	str	r0, [r5, #16]
 8006e3a:	b920      	cbnz	r0, 8006e46 <_svfiprintf_r+0x2e>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	e0d1      	b.n	8006fea <_svfiprintf_r+0x1d2>
 8006e46:	2340      	movs	r3, #64	; 0x40
 8006e48:	616b      	str	r3, [r5, #20]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	2320      	movs	r3, #32
 8006e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e58:	2330      	movs	r3, #48	; 0x30
 8006e5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007004 <_svfiprintf_r+0x1ec>
 8006e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	4623      	mov	r3, r4
 8006e68:	469a      	mov	sl, r3
 8006e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6e:	b10a      	cbz	r2, 8006e74 <_svfiprintf_r+0x5c>
 8006e70:	2a25      	cmp	r2, #37	; 0x25
 8006e72:	d1f9      	bne.n	8006e68 <_svfiprintf_r+0x50>
 8006e74:	ebba 0b04 	subs.w	fp, sl, r4
 8006e78:	d00b      	beq.n	8006e92 <_svfiprintf_r+0x7a>
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff ff6d 	bl	8006d60 <__ssputs_r>
 8006e86:	3001      	adds	r0, #1
 8006e88:	f000 80aa 	beq.w	8006fe0 <_svfiprintf_r+0x1c8>
 8006e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e8e:	445a      	add	r2, fp
 8006e90:	9209      	str	r2, [sp, #36]	; 0x24
 8006e92:	f89a 3000 	ldrb.w	r3, [sl]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80a2 	beq.w	8006fe0 <_svfiprintf_r+0x1c8>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea6:	f10a 0a01 	add.w	sl, sl, #1
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9307      	str	r3, [sp, #28]
 8006eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebc:	4851      	ldr	r0, [pc, #324]	; (8007004 <_svfiprintf_r+0x1ec>)
 8006ebe:	f7f9 f997 	bl	80001f0 <memchr>
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	b9d8      	cbnz	r0, 8006efe <_svfiprintf_r+0xe6>
 8006ec6:	06d0      	lsls	r0, r2, #27
 8006ec8:	bf44      	itt	mi
 8006eca:	2320      	movmi	r3, #32
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed0:	0711      	lsls	r1, r2, #28
 8006ed2:	bf44      	itt	mi
 8006ed4:	232b      	movmi	r3, #43	; 0x2b
 8006ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eda:	f89a 3000 	ldrb.w	r3, [sl]
 8006ede:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee0:	d015      	beq.n	8006f0e <_svfiprintf_r+0xf6>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	4654      	mov	r4, sl
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f04f 0c0a 	mov.w	ip, #10
 8006eec:	4621      	mov	r1, r4
 8006eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef2:	3b30      	subs	r3, #48	; 0x30
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	d94e      	bls.n	8006f96 <_svfiprintf_r+0x17e>
 8006ef8:	b1b0      	cbz	r0, 8006f28 <_svfiprintf_r+0x110>
 8006efa:	9207      	str	r2, [sp, #28]
 8006efc:	e014      	b.n	8006f28 <_svfiprintf_r+0x110>
 8006efe:	eba0 0308 	sub.w	r3, r0, r8
 8006f02:	fa09 f303 	lsl.w	r3, r9, r3
 8006f06:	4313      	orrs	r3, r2
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	46a2      	mov	sl, r4
 8006f0c:	e7d2      	b.n	8006eb4 <_svfiprintf_r+0x9c>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	9103      	str	r1, [sp, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfbb      	ittet	lt
 8006f1a:	425b      	neglt	r3, r3
 8006f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f20:	9307      	strge	r3, [sp, #28]
 8006f22:	9307      	strlt	r3, [sp, #28]
 8006f24:	bfb8      	it	lt
 8006f26:	9204      	strlt	r2, [sp, #16]
 8006f28:	7823      	ldrb	r3, [r4, #0]
 8006f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f2c:	d10c      	bne.n	8006f48 <_svfiprintf_r+0x130>
 8006f2e:	7863      	ldrb	r3, [r4, #1]
 8006f30:	2b2a      	cmp	r3, #42	; 0x2a
 8006f32:	d135      	bne.n	8006fa0 <_svfiprintf_r+0x188>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	1d1a      	adds	r2, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9203      	str	r2, [sp, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bfb8      	it	lt
 8006f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f44:	3402      	adds	r4, #2
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007014 <_svfiprintf_r+0x1fc>
 8006f4c:	7821      	ldrb	r1, [r4, #0]
 8006f4e:	2203      	movs	r2, #3
 8006f50:	4650      	mov	r0, sl
 8006f52:	f7f9 f94d 	bl	80001f0 <memchr>
 8006f56:	b140      	cbz	r0, 8006f6a <_svfiprintf_r+0x152>
 8006f58:	2340      	movs	r3, #64	; 0x40
 8006f5a:	eba0 000a 	sub.w	r0, r0, sl
 8006f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	4303      	orrs	r3, r0
 8006f66:	3401      	adds	r4, #1
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6e:	4826      	ldr	r0, [pc, #152]	; (8007008 <_svfiprintf_r+0x1f0>)
 8006f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f74:	2206      	movs	r2, #6
 8006f76:	f7f9 f93b 	bl	80001f0 <memchr>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d038      	beq.n	8006ff0 <_svfiprintf_r+0x1d8>
 8006f7e:	4b23      	ldr	r3, [pc, #140]	; (800700c <_svfiprintf_r+0x1f4>)
 8006f80:	bb1b      	cbnz	r3, 8006fca <_svfiprintf_r+0x1b2>
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	3307      	adds	r3, #7
 8006f86:	f023 0307 	bic.w	r3, r3, #7
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f90:	4433      	add	r3, r6
 8006f92:	9309      	str	r3, [sp, #36]	; 0x24
 8006f94:	e767      	b.n	8006e66 <_svfiprintf_r+0x4e>
 8006f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e7a5      	b.n	8006eec <_svfiprintf_r+0xd4>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f04f 0c0a 	mov.w	ip, #10
 8006fac:	4620      	mov	r0, r4
 8006fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb2:	3a30      	subs	r2, #48	; 0x30
 8006fb4:	2a09      	cmp	r2, #9
 8006fb6:	d903      	bls.n	8006fc0 <_svfiprintf_r+0x1a8>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0c5      	beq.n	8006f48 <_svfiprintf_r+0x130>
 8006fbc:	9105      	str	r1, [sp, #20]
 8006fbe:	e7c3      	b.n	8006f48 <_svfiprintf_r+0x130>
 8006fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e7f0      	b.n	8006fac <_svfiprintf_r+0x194>
 8006fca:	ab03      	add	r3, sp, #12
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <_svfiprintf_r+0x1f8>)
 8006fd2:	a904      	add	r1, sp, #16
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7fd ffc9 	bl	8004f6c <_printf_float>
 8006fda:	1c42      	adds	r2, r0, #1
 8006fdc:	4606      	mov	r6, r0
 8006fde:	d1d6      	bne.n	8006f8e <_svfiprintf_r+0x176>
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	065b      	lsls	r3, r3, #25
 8006fe4:	f53f af2c 	bmi.w	8006e40 <_svfiprintf_r+0x28>
 8006fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fea:	b01d      	add	sp, #116	; 0x74
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <_svfiprintf_r+0x1f8>)
 8006ff8:	a904      	add	r1, sp, #16
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7fe fa5c 	bl	80054b8 <_printf_i>
 8007000:	e7eb      	b.n	8006fda <_svfiprintf_r+0x1c2>
 8007002:	bf00      	nop
 8007004:	080098b4 	.word	0x080098b4
 8007008:	080098be 	.word	0x080098be
 800700c:	08004f6d 	.word	0x08004f6d
 8007010:	08006d61 	.word	0x08006d61
 8007014:	080098ba 	.word	0x080098ba

08007018 <_sbrk_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_sbrk_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7fa fd38 	bl	8001a98 <_sbrk>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_sbrk_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_sbrk_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	200002b0 	.word	0x200002b0

08007038 <__assert_func>:
 8007038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800703a:	4614      	mov	r4, r2
 800703c:	461a      	mov	r2, r3
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <__assert_func+0x2c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4605      	mov	r5, r0
 8007044:	68d8      	ldr	r0, [r3, #12]
 8007046:	b14c      	cbz	r4, 800705c <__assert_func+0x24>
 8007048:	4b07      	ldr	r3, [pc, #28]	; (8007068 <__assert_func+0x30>)
 800704a:	9100      	str	r1, [sp, #0]
 800704c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007050:	4906      	ldr	r1, [pc, #24]	; (800706c <__assert_func+0x34>)
 8007052:	462b      	mov	r3, r5
 8007054:	f000 f80e 	bl	8007074 <fiprintf>
 8007058:	f000 faac 	bl	80075b4 <abort>
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <__assert_func+0x38>)
 800705e:	461c      	mov	r4, r3
 8007060:	e7f3      	b.n	800704a <__assert_func+0x12>
 8007062:	bf00      	nop
 8007064:	20000034 	.word	0x20000034
 8007068:	080098c5 	.word	0x080098c5
 800706c:	080098d2 	.word	0x080098d2
 8007070:	08009900 	.word	0x08009900

08007074 <fiprintf>:
 8007074:	b40e      	push	{r1, r2, r3}
 8007076:	b503      	push	{r0, r1, lr}
 8007078:	4601      	mov	r1, r0
 800707a:	ab03      	add	r3, sp, #12
 800707c:	4805      	ldr	r0, [pc, #20]	; (8007094 <fiprintf+0x20>)
 800707e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007082:	6800      	ldr	r0, [r0, #0]
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	f000 f897 	bl	80071b8 <_vfiprintf_r>
 800708a:	b002      	add	sp, #8
 800708c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007090:	b003      	add	sp, #12
 8007092:	4770      	bx	lr
 8007094:	20000034 	.word	0x20000034

08007098 <__ascii_mbtowc>:
 8007098:	b082      	sub	sp, #8
 800709a:	b901      	cbnz	r1, 800709e <__ascii_mbtowc+0x6>
 800709c:	a901      	add	r1, sp, #4
 800709e:	b142      	cbz	r2, 80070b2 <__ascii_mbtowc+0x1a>
 80070a0:	b14b      	cbz	r3, 80070b6 <__ascii_mbtowc+0x1e>
 80070a2:	7813      	ldrb	r3, [r2, #0]
 80070a4:	600b      	str	r3, [r1, #0]
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	1e10      	subs	r0, r2, #0
 80070aa:	bf18      	it	ne
 80070ac:	2001      	movne	r0, #1
 80070ae:	b002      	add	sp, #8
 80070b0:	4770      	bx	lr
 80070b2:	4610      	mov	r0, r2
 80070b4:	e7fb      	b.n	80070ae <__ascii_mbtowc+0x16>
 80070b6:	f06f 0001 	mvn.w	r0, #1
 80070ba:	e7f8      	b.n	80070ae <__ascii_mbtowc+0x16>

080070bc <memmove>:
 80070bc:	4288      	cmp	r0, r1
 80070be:	b510      	push	{r4, lr}
 80070c0:	eb01 0402 	add.w	r4, r1, r2
 80070c4:	d902      	bls.n	80070cc <memmove+0x10>
 80070c6:	4284      	cmp	r4, r0
 80070c8:	4623      	mov	r3, r4
 80070ca:	d807      	bhi.n	80070dc <memmove+0x20>
 80070cc:	1e43      	subs	r3, r0, #1
 80070ce:	42a1      	cmp	r1, r4
 80070d0:	d008      	beq.n	80070e4 <memmove+0x28>
 80070d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070da:	e7f8      	b.n	80070ce <memmove+0x12>
 80070dc:	4402      	add	r2, r0
 80070de:	4601      	mov	r1, r0
 80070e0:	428a      	cmp	r2, r1
 80070e2:	d100      	bne.n	80070e6 <memmove+0x2a>
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070ee:	e7f7      	b.n	80070e0 <memmove+0x24>

080070f0 <__malloc_lock>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__malloc_lock+0x8>)
 80070f2:	f000 bc1f 	b.w	8007934 <__retarget_lock_acquire_recursive>
 80070f6:	bf00      	nop
 80070f8:	200002b4 	.word	0x200002b4

080070fc <__malloc_unlock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__malloc_unlock+0x8>)
 80070fe:	f000 bc1a 	b.w	8007936 <__retarget_lock_release_recursive>
 8007102:	bf00      	nop
 8007104:	200002b4 	.word	0x200002b4

08007108 <_realloc_r>:
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	4680      	mov	r8, r0
 800710e:	4614      	mov	r4, r2
 8007110:	460e      	mov	r6, r1
 8007112:	b921      	cbnz	r1, 800711e <_realloc_r+0x16>
 8007114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	4611      	mov	r1, r2
 800711a:	f7ff bdad 	b.w	8006c78 <_malloc_r>
 800711e:	b92a      	cbnz	r2, 800712c <_realloc_r+0x24>
 8007120:	f7ff fd3e 	bl	8006ba0 <_free_r>
 8007124:	4625      	mov	r5, r4
 8007126:	4628      	mov	r0, r5
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	f000 fc6a 	bl	8007a04 <_malloc_usable_size_r>
 8007130:	4284      	cmp	r4, r0
 8007132:	4607      	mov	r7, r0
 8007134:	d802      	bhi.n	800713c <_realloc_r+0x34>
 8007136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800713a:	d812      	bhi.n	8007162 <_realloc_r+0x5a>
 800713c:	4621      	mov	r1, r4
 800713e:	4640      	mov	r0, r8
 8007140:	f7ff fd9a 	bl	8006c78 <_malloc_r>
 8007144:	4605      	mov	r5, r0
 8007146:	2800      	cmp	r0, #0
 8007148:	d0ed      	beq.n	8007126 <_realloc_r+0x1e>
 800714a:	42bc      	cmp	r4, r7
 800714c:	4622      	mov	r2, r4
 800714e:	4631      	mov	r1, r6
 8007150:	bf28      	it	cs
 8007152:	463a      	movcs	r2, r7
 8007154:	f7ff f97e 	bl	8006454 <memcpy>
 8007158:	4631      	mov	r1, r6
 800715a:	4640      	mov	r0, r8
 800715c:	f7ff fd20 	bl	8006ba0 <_free_r>
 8007160:	e7e1      	b.n	8007126 <_realloc_r+0x1e>
 8007162:	4635      	mov	r5, r6
 8007164:	e7df      	b.n	8007126 <_realloc_r+0x1e>

08007166 <__sfputc_r>:
 8007166:	6893      	ldr	r3, [r2, #8]
 8007168:	3b01      	subs	r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	b410      	push	{r4}
 800716e:	6093      	str	r3, [r2, #8]
 8007170:	da08      	bge.n	8007184 <__sfputc_r+0x1e>
 8007172:	6994      	ldr	r4, [r2, #24]
 8007174:	42a3      	cmp	r3, r4
 8007176:	db01      	blt.n	800717c <__sfputc_r+0x16>
 8007178:	290a      	cmp	r1, #10
 800717a:	d103      	bne.n	8007184 <__sfputc_r+0x1e>
 800717c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007180:	f000 b94a 	b.w	8007418 <__swbuf_r>
 8007184:	6813      	ldr	r3, [r2, #0]
 8007186:	1c58      	adds	r0, r3, #1
 8007188:	6010      	str	r0, [r2, #0]
 800718a:	7019      	strb	r1, [r3, #0]
 800718c:	4608      	mov	r0, r1
 800718e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007192:	4770      	bx	lr

08007194 <__sfputs_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	4614      	mov	r4, r2
 800719c:	18d5      	adds	r5, r2, r3
 800719e:	42ac      	cmp	r4, r5
 80071a0:	d101      	bne.n	80071a6 <__sfputs_r+0x12>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e007      	b.n	80071b6 <__sfputs_r+0x22>
 80071a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071aa:	463a      	mov	r2, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff ffda 	bl	8007166 <__sfputc_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d1f3      	bne.n	800719e <__sfputs_r+0xa>
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071b8 <_vfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	460d      	mov	r5, r1
 80071be:	b09d      	sub	sp, #116	; 0x74
 80071c0:	4614      	mov	r4, r2
 80071c2:	4698      	mov	r8, r3
 80071c4:	4606      	mov	r6, r0
 80071c6:	b118      	cbz	r0, 80071d0 <_vfiprintf_r+0x18>
 80071c8:	6983      	ldr	r3, [r0, #24]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x18>
 80071cc:	f000 fb14 	bl	80077f8 <__sinit>
 80071d0:	4b89      	ldr	r3, [pc, #548]	; (80073f8 <_vfiprintf_r+0x240>)
 80071d2:	429d      	cmp	r5, r3
 80071d4:	d11b      	bne.n	800720e <_vfiprintf_r+0x56>
 80071d6:	6875      	ldr	r5, [r6, #4]
 80071d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	d405      	bmi.n	80071ea <_vfiprintf_r+0x32>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	059a      	lsls	r2, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_vfiprintf_r+0x32>
 80071e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e6:	f000 fba5 	bl	8007934 <__retarget_lock_acquire_recursive>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	071b      	lsls	r3, r3, #28
 80071ee:	d501      	bpl.n	80071f4 <_vfiprintf_r+0x3c>
 80071f0:	692b      	ldr	r3, [r5, #16]
 80071f2:	b9eb      	cbnz	r3, 8007230 <_vfiprintf_r+0x78>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f000 f96e 	bl	80074d8 <__swsetup_r>
 80071fc:	b1c0      	cbz	r0, 8007230 <_vfiprintf_r+0x78>
 80071fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007200:	07dc      	lsls	r4, r3, #31
 8007202:	d50e      	bpl.n	8007222 <_vfiprintf_r+0x6a>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <_vfiprintf_r+0x244>)
 8007210:	429d      	cmp	r5, r3
 8007212:	d101      	bne.n	8007218 <_vfiprintf_r+0x60>
 8007214:	68b5      	ldr	r5, [r6, #8]
 8007216:	e7df      	b.n	80071d8 <_vfiprintf_r+0x20>
 8007218:	4b79      	ldr	r3, [pc, #484]	; (8007400 <_vfiprintf_r+0x248>)
 800721a:	429d      	cmp	r5, r3
 800721c:	bf08      	it	eq
 800721e:	68f5      	ldreq	r5, [r6, #12]
 8007220:	e7da      	b.n	80071d8 <_vfiprintf_r+0x20>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	0598      	lsls	r0, r3, #22
 8007226:	d4ed      	bmi.n	8007204 <_vfiprintf_r+0x4c>
 8007228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800722a:	f000 fb84 	bl	8007936 <__retarget_lock_release_recursive>
 800722e:	e7e9      	b.n	8007204 <_vfiprintf_r+0x4c>
 8007230:	2300      	movs	r3, #0
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	2320      	movs	r3, #32
 8007236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800723a:	f8cd 800c 	str.w	r8, [sp, #12]
 800723e:	2330      	movs	r3, #48	; 0x30
 8007240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007404 <_vfiprintf_r+0x24c>
 8007244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007248:	f04f 0901 	mov.w	r9, #1
 800724c:	4623      	mov	r3, r4
 800724e:	469a      	mov	sl, r3
 8007250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007254:	b10a      	cbz	r2, 800725a <_vfiprintf_r+0xa2>
 8007256:	2a25      	cmp	r2, #37	; 0x25
 8007258:	d1f9      	bne.n	800724e <_vfiprintf_r+0x96>
 800725a:	ebba 0b04 	subs.w	fp, sl, r4
 800725e:	d00b      	beq.n	8007278 <_vfiprintf_r+0xc0>
 8007260:	465b      	mov	r3, fp
 8007262:	4622      	mov	r2, r4
 8007264:	4629      	mov	r1, r5
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff ff94 	bl	8007194 <__sfputs_r>
 800726c:	3001      	adds	r0, #1
 800726e:	f000 80aa 	beq.w	80073c6 <_vfiprintf_r+0x20e>
 8007272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007274:	445a      	add	r2, fp
 8007276:	9209      	str	r2, [sp, #36]	; 0x24
 8007278:	f89a 3000 	ldrb.w	r3, [sl]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80a2 	beq.w	80073c6 <_vfiprintf_r+0x20e>
 8007282:	2300      	movs	r3, #0
 8007284:	f04f 32ff 	mov.w	r2, #4294967295
 8007288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800728c:	f10a 0a01 	add.w	sl, sl, #1
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007298:	931a      	str	r3, [sp, #104]	; 0x68
 800729a:	4654      	mov	r4, sl
 800729c:	2205      	movs	r2, #5
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4858      	ldr	r0, [pc, #352]	; (8007404 <_vfiprintf_r+0x24c>)
 80072a4:	f7f8 ffa4 	bl	80001f0 <memchr>
 80072a8:	9a04      	ldr	r2, [sp, #16]
 80072aa:	b9d8      	cbnz	r0, 80072e4 <_vfiprintf_r+0x12c>
 80072ac:	06d1      	lsls	r1, r2, #27
 80072ae:	bf44      	itt	mi
 80072b0:	2320      	movmi	r3, #32
 80072b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b6:	0713      	lsls	r3, r2, #28
 80072b8:	bf44      	itt	mi
 80072ba:	232b      	movmi	r3, #43	; 0x2b
 80072bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c0:	f89a 3000 	ldrb.w	r3, [sl]
 80072c4:	2b2a      	cmp	r3, #42	; 0x2a
 80072c6:	d015      	beq.n	80072f4 <_vfiprintf_r+0x13c>
 80072c8:	9a07      	ldr	r2, [sp, #28]
 80072ca:	4654      	mov	r4, sl
 80072cc:	2000      	movs	r0, #0
 80072ce:	f04f 0c0a 	mov.w	ip, #10
 80072d2:	4621      	mov	r1, r4
 80072d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d8:	3b30      	subs	r3, #48	; 0x30
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d94e      	bls.n	800737c <_vfiprintf_r+0x1c4>
 80072de:	b1b0      	cbz	r0, 800730e <_vfiprintf_r+0x156>
 80072e0:	9207      	str	r2, [sp, #28]
 80072e2:	e014      	b.n	800730e <_vfiprintf_r+0x156>
 80072e4:	eba0 0308 	sub.w	r3, r0, r8
 80072e8:	fa09 f303 	lsl.w	r3, r9, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	46a2      	mov	sl, r4
 80072f2:	e7d2      	b.n	800729a <_vfiprintf_r+0xe2>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d19      	adds	r1, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfbb      	ittet	lt
 8007300:	425b      	neglt	r3, r3
 8007302:	f042 0202 	orrlt.w	r2, r2, #2
 8007306:	9307      	strge	r3, [sp, #28]
 8007308:	9307      	strlt	r3, [sp, #28]
 800730a:	bfb8      	it	lt
 800730c:	9204      	strlt	r2, [sp, #16]
 800730e:	7823      	ldrb	r3, [r4, #0]
 8007310:	2b2e      	cmp	r3, #46	; 0x2e
 8007312:	d10c      	bne.n	800732e <_vfiprintf_r+0x176>
 8007314:	7863      	ldrb	r3, [r4, #1]
 8007316:	2b2a      	cmp	r3, #42	; 0x2a
 8007318:	d135      	bne.n	8007386 <_vfiprintf_r+0x1ce>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9203      	str	r2, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfb8      	it	lt
 8007326:	f04f 33ff 	movlt.w	r3, #4294967295
 800732a:	3402      	adds	r4, #2
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007414 <_vfiprintf_r+0x25c>
 8007332:	7821      	ldrb	r1, [r4, #0]
 8007334:	2203      	movs	r2, #3
 8007336:	4650      	mov	r0, sl
 8007338:	f7f8 ff5a 	bl	80001f0 <memchr>
 800733c:	b140      	cbz	r0, 8007350 <_vfiprintf_r+0x198>
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	eba0 000a 	sub.w	r0, r0, sl
 8007344:	fa03 f000 	lsl.w	r0, r3, r0
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	4303      	orrs	r3, r0
 800734c:	3401      	adds	r4, #1
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007354:	482c      	ldr	r0, [pc, #176]	; (8007408 <_vfiprintf_r+0x250>)
 8007356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800735a:	2206      	movs	r2, #6
 800735c:	f7f8 ff48 	bl	80001f0 <memchr>
 8007360:	2800      	cmp	r0, #0
 8007362:	d03f      	beq.n	80073e4 <_vfiprintf_r+0x22c>
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <_vfiprintf_r+0x254>)
 8007366:	bb1b      	cbnz	r3, 80073b0 <_vfiprintf_r+0x1f8>
 8007368:	9b03      	ldr	r3, [sp, #12]
 800736a:	3307      	adds	r3, #7
 800736c:	f023 0307 	bic.w	r3, r3, #7
 8007370:	3308      	adds	r3, #8
 8007372:	9303      	str	r3, [sp, #12]
 8007374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007376:	443b      	add	r3, r7
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	e767      	b.n	800724c <_vfiprintf_r+0x94>
 800737c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007380:	460c      	mov	r4, r1
 8007382:	2001      	movs	r0, #1
 8007384:	e7a5      	b.n	80072d2 <_vfiprintf_r+0x11a>
 8007386:	2300      	movs	r3, #0
 8007388:	3401      	adds	r4, #1
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	4619      	mov	r1, r3
 800738e:	f04f 0c0a 	mov.w	ip, #10
 8007392:	4620      	mov	r0, r4
 8007394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007398:	3a30      	subs	r2, #48	; 0x30
 800739a:	2a09      	cmp	r2, #9
 800739c:	d903      	bls.n	80073a6 <_vfiprintf_r+0x1ee>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0c5      	beq.n	800732e <_vfiprintf_r+0x176>
 80073a2:	9105      	str	r1, [sp, #20]
 80073a4:	e7c3      	b.n	800732e <_vfiprintf_r+0x176>
 80073a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073aa:	4604      	mov	r4, r0
 80073ac:	2301      	movs	r3, #1
 80073ae:	e7f0      	b.n	8007392 <_vfiprintf_r+0x1da>
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <_vfiprintf_r+0x258>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7fd fdd6 	bl	8004f6c <_printf_float>
 80073c0:	4607      	mov	r7, r0
 80073c2:	1c78      	adds	r0, r7, #1
 80073c4:	d1d6      	bne.n	8007374 <_vfiprintf_r+0x1bc>
 80073c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073c8:	07d9      	lsls	r1, r3, #31
 80073ca:	d405      	bmi.n	80073d8 <_vfiprintf_r+0x220>
 80073cc:	89ab      	ldrh	r3, [r5, #12]
 80073ce:	059a      	lsls	r2, r3, #22
 80073d0:	d402      	bmi.n	80073d8 <_vfiprintf_r+0x220>
 80073d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073d4:	f000 faaf 	bl	8007936 <__retarget_lock_release_recursive>
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	065b      	lsls	r3, r3, #25
 80073dc:	f53f af12 	bmi.w	8007204 <_vfiprintf_r+0x4c>
 80073e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e2:	e711      	b.n	8007208 <_vfiprintf_r+0x50>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_vfiprintf_r+0x258>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7fe f862 	bl	80054b8 <_printf_i>
 80073f4:	e7e4      	b.n	80073c0 <_vfiprintf_r+0x208>
 80073f6:	bf00      	nop
 80073f8:	08009a2c 	.word	0x08009a2c
 80073fc:	08009a4c 	.word	0x08009a4c
 8007400:	08009a0c 	.word	0x08009a0c
 8007404:	080098b4 	.word	0x080098b4
 8007408:	080098be 	.word	0x080098be
 800740c:	08004f6d 	.word	0x08004f6d
 8007410:	08007195 	.word	0x08007195
 8007414:	080098ba 	.word	0x080098ba

08007418 <__swbuf_r>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	460e      	mov	r6, r1
 800741c:	4614      	mov	r4, r2
 800741e:	4605      	mov	r5, r0
 8007420:	b118      	cbz	r0, 800742a <__swbuf_r+0x12>
 8007422:	6983      	ldr	r3, [r0, #24]
 8007424:	b90b      	cbnz	r3, 800742a <__swbuf_r+0x12>
 8007426:	f000 f9e7 	bl	80077f8 <__sinit>
 800742a:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <__swbuf_r+0x98>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d12b      	bne.n	8007488 <__swbuf_r+0x70>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	69a3      	ldr	r3, [r4, #24]
 8007434:	60a3      	str	r3, [r4, #8]
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	071a      	lsls	r2, r3, #28
 800743a:	d52f      	bpl.n	800749c <__swbuf_r+0x84>
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	b36b      	cbz	r3, 800749c <__swbuf_r+0x84>
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	6820      	ldr	r0, [r4, #0]
 8007444:	1ac0      	subs	r0, r0, r3
 8007446:	6963      	ldr	r3, [r4, #20]
 8007448:	b2f6      	uxtb	r6, r6
 800744a:	4283      	cmp	r3, r0
 800744c:	4637      	mov	r7, r6
 800744e:	dc04      	bgt.n	800745a <__swbuf_r+0x42>
 8007450:	4621      	mov	r1, r4
 8007452:	4628      	mov	r0, r5
 8007454:	f000 f93c 	bl	80076d0 <_fflush_r>
 8007458:	bb30      	cbnz	r0, 80074a8 <__swbuf_r+0x90>
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	3b01      	subs	r3, #1
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	6022      	str	r2, [r4, #0]
 8007466:	701e      	strb	r6, [r3, #0]
 8007468:	6963      	ldr	r3, [r4, #20]
 800746a:	3001      	adds	r0, #1
 800746c:	4283      	cmp	r3, r0
 800746e:	d004      	beq.n	800747a <__swbuf_r+0x62>
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d506      	bpl.n	8007484 <__swbuf_r+0x6c>
 8007476:	2e0a      	cmp	r6, #10
 8007478:	d104      	bne.n	8007484 <__swbuf_r+0x6c>
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 f927 	bl	80076d0 <_fflush_r>
 8007482:	b988      	cbnz	r0, 80074a8 <__swbuf_r+0x90>
 8007484:	4638      	mov	r0, r7
 8007486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <__swbuf_r+0x9c>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d101      	bne.n	8007492 <__swbuf_r+0x7a>
 800748e:	68ac      	ldr	r4, [r5, #8]
 8007490:	e7cf      	b.n	8007432 <__swbuf_r+0x1a>
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <__swbuf_r+0xa0>)
 8007494:	429c      	cmp	r4, r3
 8007496:	bf08      	it	eq
 8007498:	68ec      	ldreq	r4, [r5, #12]
 800749a:	e7ca      	b.n	8007432 <__swbuf_r+0x1a>
 800749c:	4621      	mov	r1, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f81a 	bl	80074d8 <__swsetup_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d0cb      	beq.n	8007440 <__swbuf_r+0x28>
 80074a8:	f04f 37ff 	mov.w	r7, #4294967295
 80074ac:	e7ea      	b.n	8007484 <__swbuf_r+0x6c>
 80074ae:	bf00      	nop
 80074b0:	08009a2c 	.word	0x08009a2c
 80074b4:	08009a4c 	.word	0x08009a4c
 80074b8:	08009a0c 	.word	0x08009a0c

080074bc <__ascii_wctomb>:
 80074bc:	b149      	cbz	r1, 80074d2 <__ascii_wctomb+0x16>
 80074be:	2aff      	cmp	r2, #255	; 0xff
 80074c0:	bf85      	ittet	hi
 80074c2:	238a      	movhi	r3, #138	; 0x8a
 80074c4:	6003      	strhi	r3, [r0, #0]
 80074c6:	700a      	strbls	r2, [r1, #0]
 80074c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80074cc:	bf98      	it	ls
 80074ce:	2001      	movls	r0, #1
 80074d0:	4770      	bx	lr
 80074d2:	4608      	mov	r0, r1
 80074d4:	4770      	bx	lr
	...

080074d8 <__swsetup_r>:
 80074d8:	4b32      	ldr	r3, [pc, #200]	; (80075a4 <__swsetup_r+0xcc>)
 80074da:	b570      	push	{r4, r5, r6, lr}
 80074dc:	681d      	ldr	r5, [r3, #0]
 80074de:	4606      	mov	r6, r0
 80074e0:	460c      	mov	r4, r1
 80074e2:	b125      	cbz	r5, 80074ee <__swsetup_r+0x16>
 80074e4:	69ab      	ldr	r3, [r5, #24]
 80074e6:	b913      	cbnz	r3, 80074ee <__swsetup_r+0x16>
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 f985 	bl	80077f8 <__sinit>
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <__swsetup_r+0xd0>)
 80074f0:	429c      	cmp	r4, r3
 80074f2:	d10f      	bne.n	8007514 <__swsetup_r+0x3c>
 80074f4:	686c      	ldr	r4, [r5, #4]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074fc:	0719      	lsls	r1, r3, #28
 80074fe:	d42c      	bmi.n	800755a <__swsetup_r+0x82>
 8007500:	06dd      	lsls	r5, r3, #27
 8007502:	d411      	bmi.n	8007528 <__swsetup_r+0x50>
 8007504:	2309      	movs	r3, #9
 8007506:	6033      	str	r3, [r6, #0]
 8007508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	e03e      	b.n	8007592 <__swsetup_r+0xba>
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <__swsetup_r+0xd4>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d101      	bne.n	800751e <__swsetup_r+0x46>
 800751a:	68ac      	ldr	r4, [r5, #8]
 800751c:	e7eb      	b.n	80074f6 <__swsetup_r+0x1e>
 800751e:	4b24      	ldr	r3, [pc, #144]	; (80075b0 <__swsetup_r+0xd8>)
 8007520:	429c      	cmp	r4, r3
 8007522:	bf08      	it	eq
 8007524:	68ec      	ldreq	r4, [r5, #12]
 8007526:	e7e6      	b.n	80074f6 <__swsetup_r+0x1e>
 8007528:	0758      	lsls	r0, r3, #29
 800752a:	d512      	bpl.n	8007552 <__swsetup_r+0x7a>
 800752c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752e:	b141      	cbz	r1, 8007542 <__swsetup_r+0x6a>
 8007530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007534:	4299      	cmp	r1, r3
 8007536:	d002      	beq.n	800753e <__swsetup_r+0x66>
 8007538:	4630      	mov	r0, r6
 800753a:	f7ff fb31 	bl	8006ba0 <_free_r>
 800753e:	2300      	movs	r3, #0
 8007540:	6363      	str	r3, [r4, #52]	; 0x34
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	2300      	movs	r3, #0
 800754c:	6063      	str	r3, [r4, #4]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f043 0308 	orr.w	r3, r3, #8
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	b94b      	cbnz	r3, 8007572 <__swsetup_r+0x9a>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007568:	d003      	beq.n	8007572 <__swsetup_r+0x9a>
 800756a:	4621      	mov	r1, r4
 800756c:	4630      	mov	r0, r6
 800756e:	f000 fa09 	bl	8007984 <__smakebuf_r>
 8007572:	89a0      	ldrh	r0, [r4, #12]
 8007574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007578:	f010 0301 	ands.w	r3, r0, #1
 800757c:	d00a      	beq.n	8007594 <__swsetup_r+0xbc>
 800757e:	2300      	movs	r3, #0
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	6963      	ldr	r3, [r4, #20]
 8007584:	425b      	negs	r3, r3
 8007586:	61a3      	str	r3, [r4, #24]
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	b943      	cbnz	r3, 800759e <__swsetup_r+0xc6>
 800758c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007590:	d1ba      	bne.n	8007508 <__swsetup_r+0x30>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	0781      	lsls	r1, r0, #30
 8007596:	bf58      	it	pl
 8007598:	6963      	ldrpl	r3, [r4, #20]
 800759a:	60a3      	str	r3, [r4, #8]
 800759c:	e7f4      	b.n	8007588 <__swsetup_r+0xb0>
 800759e:	2000      	movs	r0, #0
 80075a0:	e7f7      	b.n	8007592 <__swsetup_r+0xba>
 80075a2:	bf00      	nop
 80075a4:	20000034 	.word	0x20000034
 80075a8:	08009a2c 	.word	0x08009a2c
 80075ac:	08009a4c 	.word	0x08009a4c
 80075b0:	08009a0c 	.word	0x08009a0c

080075b4 <abort>:
 80075b4:	b508      	push	{r3, lr}
 80075b6:	2006      	movs	r0, #6
 80075b8:	f000 fa54 	bl	8007a64 <raise>
 80075bc:	2001      	movs	r0, #1
 80075be:	f7fa f9f3 	bl	80019a8 <_exit>
	...

080075c4 <__sflush_r>:
 80075c4:	898a      	ldrh	r2, [r1, #12]
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	4605      	mov	r5, r0
 80075cc:	0710      	lsls	r0, r2, #28
 80075ce:	460c      	mov	r4, r1
 80075d0:	d458      	bmi.n	8007684 <__sflush_r+0xc0>
 80075d2:	684b      	ldr	r3, [r1, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc05      	bgt.n	80075e4 <__sflush_r+0x20>
 80075d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc02      	bgt.n	80075e4 <__sflush_r+0x20>
 80075de:	2000      	movs	r0, #0
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d0f9      	beq.n	80075de <__sflush_r+0x1a>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	d032      	beq.n	800765c <__sflush_r+0x98>
 80075f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	075a      	lsls	r2, r3, #29
 80075fc:	d505      	bpl.n	800760a <__sflush_r+0x46>
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	1ac0      	subs	r0, r0, r3
 8007602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007604:	b10b      	cbz	r3, 800760a <__sflush_r+0x46>
 8007606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	2300      	movs	r3, #0
 800760c:	4602      	mov	r2, r0
 800760e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007610:	6a21      	ldr	r1, [r4, #32]
 8007612:	4628      	mov	r0, r5
 8007614:	47b0      	blx	r6
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	d106      	bne.n	800762a <__sflush_r+0x66>
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	291d      	cmp	r1, #29
 8007620:	d82c      	bhi.n	800767c <__sflush_r+0xb8>
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <__sflush_r+0x108>)
 8007624:	40ca      	lsrs	r2, r1
 8007626:	07d6      	lsls	r6, r2, #31
 8007628:	d528      	bpl.n	800767c <__sflush_r+0xb8>
 800762a:	2200      	movs	r2, #0
 800762c:	6062      	str	r2, [r4, #4]
 800762e:	04d9      	lsls	r1, r3, #19
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	d504      	bpl.n	8007640 <__sflush_r+0x7c>
 8007636:	1c42      	adds	r2, r0, #1
 8007638:	d101      	bne.n	800763e <__sflush_r+0x7a>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b903      	cbnz	r3, 8007640 <__sflush_r+0x7c>
 800763e:	6560      	str	r0, [r4, #84]	; 0x54
 8007640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	2900      	cmp	r1, #0
 8007646:	d0ca      	beq.n	80075de <__sflush_r+0x1a>
 8007648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800764c:	4299      	cmp	r1, r3
 800764e:	d002      	beq.n	8007656 <__sflush_r+0x92>
 8007650:	4628      	mov	r0, r5
 8007652:	f7ff faa5 	bl	8006ba0 <_free_r>
 8007656:	2000      	movs	r0, #0
 8007658:	6360      	str	r0, [r4, #52]	; 0x34
 800765a:	e7c1      	b.n	80075e0 <__sflush_r+0x1c>
 800765c:	6a21      	ldr	r1, [r4, #32]
 800765e:	2301      	movs	r3, #1
 8007660:	4628      	mov	r0, r5
 8007662:	47b0      	blx	r6
 8007664:	1c41      	adds	r1, r0, #1
 8007666:	d1c7      	bne.n	80075f8 <__sflush_r+0x34>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0c4      	beq.n	80075f8 <__sflush_r+0x34>
 800766e:	2b1d      	cmp	r3, #29
 8007670:	d001      	beq.n	8007676 <__sflush_r+0xb2>
 8007672:	2b16      	cmp	r3, #22
 8007674:	d101      	bne.n	800767a <__sflush_r+0xb6>
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	e7b1      	b.n	80075de <__sflush_r+0x1a>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e7ad      	b.n	80075e0 <__sflush_r+0x1c>
 8007684:	690f      	ldr	r7, [r1, #16]
 8007686:	2f00      	cmp	r7, #0
 8007688:	d0a9      	beq.n	80075de <__sflush_r+0x1a>
 800768a:	0793      	lsls	r3, r2, #30
 800768c:	680e      	ldr	r6, [r1, #0]
 800768e:	bf08      	it	eq
 8007690:	694b      	ldreq	r3, [r1, #20]
 8007692:	600f      	str	r7, [r1, #0]
 8007694:	bf18      	it	ne
 8007696:	2300      	movne	r3, #0
 8007698:	eba6 0807 	sub.w	r8, r6, r7
 800769c:	608b      	str	r3, [r1, #8]
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	dd9c      	ble.n	80075de <__sflush_r+0x1a>
 80076a4:	6a21      	ldr	r1, [r4, #32]
 80076a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a8:	4643      	mov	r3, r8
 80076aa:	463a      	mov	r2, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b0      	blx	r6
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dc06      	bgt.n	80076c2 <__sflush_r+0xfe>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e78e      	b.n	80075e0 <__sflush_r+0x1c>
 80076c2:	4407      	add	r7, r0
 80076c4:	eba8 0800 	sub.w	r8, r8, r0
 80076c8:	e7e9      	b.n	800769e <__sflush_r+0xda>
 80076ca:	bf00      	nop
 80076cc:	20400001 	.word	0x20400001

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6983      	ldr	r3, [r0, #24]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f000 f887 	bl	80077f8 <__sinit>
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <_fflush_r+0x6c>)
 80076ec:	429c      	cmp	r4, r3
 80076ee:	d11b      	bne.n	8007728 <_fflush_r+0x58>
 80076f0:	686c      	ldr	r4, [r5, #4]
 80076f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0ef      	beq.n	80076da <_fflush_r+0xa>
 80076fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076fc:	07d0      	lsls	r0, r2, #31
 80076fe:	d404      	bmi.n	800770a <_fflush_r+0x3a>
 8007700:	0599      	lsls	r1, r3, #22
 8007702:	d402      	bmi.n	800770a <_fflush_r+0x3a>
 8007704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007706:	f000 f915 	bl	8007934 <__retarget_lock_acquire_recursive>
 800770a:	4628      	mov	r0, r5
 800770c:	4621      	mov	r1, r4
 800770e:	f7ff ff59 	bl	80075c4 <__sflush_r>
 8007712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007714:	07da      	lsls	r2, r3, #31
 8007716:	4605      	mov	r5, r0
 8007718:	d4e0      	bmi.n	80076dc <_fflush_r+0xc>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	059b      	lsls	r3, r3, #22
 800771e:	d4dd      	bmi.n	80076dc <_fflush_r+0xc>
 8007720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007722:	f000 f908 	bl	8007936 <__retarget_lock_release_recursive>
 8007726:	e7d9      	b.n	80076dc <_fflush_r+0xc>
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <_fflush_r+0x70>)
 800772a:	429c      	cmp	r4, r3
 800772c:	d101      	bne.n	8007732 <_fflush_r+0x62>
 800772e:	68ac      	ldr	r4, [r5, #8]
 8007730:	e7df      	b.n	80076f2 <_fflush_r+0x22>
 8007732:	4b04      	ldr	r3, [pc, #16]	; (8007744 <_fflush_r+0x74>)
 8007734:	429c      	cmp	r4, r3
 8007736:	bf08      	it	eq
 8007738:	68ec      	ldreq	r4, [r5, #12]
 800773a:	e7da      	b.n	80076f2 <_fflush_r+0x22>
 800773c:	08009a2c 	.word	0x08009a2c
 8007740:	08009a4c 	.word	0x08009a4c
 8007744:	08009a0c 	.word	0x08009a0c

08007748 <std>:
 8007748:	2300      	movs	r3, #0
 800774a:	b510      	push	{r4, lr}
 800774c:	4604      	mov	r4, r0
 800774e:	e9c0 3300 	strd	r3, r3, [r0]
 8007752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007756:	6083      	str	r3, [r0, #8]
 8007758:	8181      	strh	r1, [r0, #12]
 800775a:	6643      	str	r3, [r0, #100]	; 0x64
 800775c:	81c2      	strh	r2, [r0, #14]
 800775e:	6183      	str	r3, [r0, #24]
 8007760:	4619      	mov	r1, r3
 8007762:	2208      	movs	r2, #8
 8007764:	305c      	adds	r0, #92	; 0x5c
 8007766:	f7fd fb59 	bl	8004e1c <memset>
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <std+0x38>)
 800776c:	6263      	str	r3, [r4, #36]	; 0x24
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <std+0x3c>)
 8007770:	62a3      	str	r3, [r4, #40]	; 0x28
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x40>)
 8007774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x44>)
 8007778:	6224      	str	r4, [r4, #32]
 800777a:	6323      	str	r3, [r4, #48]	; 0x30
 800777c:	bd10      	pop	{r4, pc}
 800777e:	bf00      	nop
 8007780:	08007a9d 	.word	0x08007a9d
 8007784:	08007abf 	.word	0x08007abf
 8007788:	08007af7 	.word	0x08007af7
 800778c:	08007b1b 	.word	0x08007b1b

08007790 <_cleanup_r>:
 8007790:	4901      	ldr	r1, [pc, #4]	; (8007798 <_cleanup_r+0x8>)
 8007792:	f000 b8af 	b.w	80078f4 <_fwalk_reent>
 8007796:	bf00      	nop
 8007798:	080076d1 	.word	0x080076d1

0800779c <__sfmoreglue>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	2268      	movs	r2, #104	; 0x68
 80077a0:	1e4d      	subs	r5, r1, #1
 80077a2:	4355      	muls	r5, r2
 80077a4:	460e      	mov	r6, r1
 80077a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077aa:	f7ff fa65 	bl	8006c78 <_malloc_r>
 80077ae:	4604      	mov	r4, r0
 80077b0:	b140      	cbz	r0, 80077c4 <__sfmoreglue+0x28>
 80077b2:	2100      	movs	r1, #0
 80077b4:	e9c0 1600 	strd	r1, r6, [r0]
 80077b8:	300c      	adds	r0, #12
 80077ba:	60a0      	str	r0, [r4, #8]
 80077bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c0:	f7fd fb2c 	bl	8004e1c <memset>
 80077c4:	4620      	mov	r0, r4
 80077c6:	bd70      	pop	{r4, r5, r6, pc}

080077c8 <__sfp_lock_acquire>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sfp_lock_acquire+0x8>)
 80077ca:	f000 b8b3 	b.w	8007934 <__retarget_lock_acquire_recursive>
 80077ce:	bf00      	nop
 80077d0:	200002b5 	.word	0x200002b5

080077d4 <__sfp_lock_release>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sfp_lock_release+0x8>)
 80077d6:	f000 b8ae 	b.w	8007936 <__retarget_lock_release_recursive>
 80077da:	bf00      	nop
 80077dc:	200002b5 	.word	0x200002b5

080077e0 <__sinit_lock_acquire>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sinit_lock_acquire+0x8>)
 80077e2:	f000 b8a7 	b.w	8007934 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	200002b6 	.word	0x200002b6

080077ec <__sinit_lock_release>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__sinit_lock_release+0x8>)
 80077ee:	f000 b8a2 	b.w	8007936 <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	200002b6 	.word	0x200002b6

080077f8 <__sinit>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	f7ff fff0 	bl	80077e0 <__sinit_lock_acquire>
 8007800:	69a3      	ldr	r3, [r4, #24]
 8007802:	b11b      	cbz	r3, 800780c <__sinit+0x14>
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f7ff bff0 	b.w	80077ec <__sinit_lock_release>
 800780c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007810:	6523      	str	r3, [r4, #80]	; 0x50
 8007812:	4b13      	ldr	r3, [pc, #76]	; (8007860 <__sinit+0x68>)
 8007814:	4a13      	ldr	r2, [pc, #76]	; (8007864 <__sinit+0x6c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	62a2      	str	r2, [r4, #40]	; 0x28
 800781a:	42a3      	cmp	r3, r4
 800781c:	bf04      	itt	eq
 800781e:	2301      	moveq	r3, #1
 8007820:	61a3      	streq	r3, [r4, #24]
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f820 	bl	8007868 <__sfp>
 8007828:	6060      	str	r0, [r4, #4]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f81c 	bl	8007868 <__sfp>
 8007830:	60a0      	str	r0, [r4, #8]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f818 	bl	8007868 <__sfp>
 8007838:	2200      	movs	r2, #0
 800783a:	60e0      	str	r0, [r4, #12]
 800783c:	2104      	movs	r1, #4
 800783e:	6860      	ldr	r0, [r4, #4]
 8007840:	f7ff ff82 	bl	8007748 <std>
 8007844:	68a0      	ldr	r0, [r4, #8]
 8007846:	2201      	movs	r2, #1
 8007848:	2109      	movs	r1, #9
 800784a:	f7ff ff7d 	bl	8007748 <std>
 800784e:	68e0      	ldr	r0, [r4, #12]
 8007850:	2202      	movs	r2, #2
 8007852:	2112      	movs	r1, #18
 8007854:	f7ff ff78 	bl	8007748 <std>
 8007858:	2301      	movs	r3, #1
 800785a:	61a3      	str	r3, [r4, #24]
 800785c:	e7d2      	b.n	8007804 <__sinit+0xc>
 800785e:	bf00      	nop
 8007860:	08009694 	.word	0x08009694
 8007864:	08007791 	.word	0x08007791

08007868 <__sfp>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	4607      	mov	r7, r0
 800786c:	f7ff ffac 	bl	80077c8 <__sfp_lock_acquire>
 8007870:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <__sfp+0x84>)
 8007872:	681e      	ldr	r6, [r3, #0]
 8007874:	69b3      	ldr	r3, [r6, #24]
 8007876:	b913      	cbnz	r3, 800787e <__sfp+0x16>
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff ffbd 	bl	80077f8 <__sinit>
 800787e:	3648      	adds	r6, #72	; 0x48
 8007880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007884:	3b01      	subs	r3, #1
 8007886:	d503      	bpl.n	8007890 <__sfp+0x28>
 8007888:	6833      	ldr	r3, [r6, #0]
 800788a:	b30b      	cbz	r3, 80078d0 <__sfp+0x68>
 800788c:	6836      	ldr	r6, [r6, #0]
 800788e:	e7f7      	b.n	8007880 <__sfp+0x18>
 8007890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007894:	b9d5      	cbnz	r5, 80078cc <__sfp+0x64>
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <__sfp+0x88>)
 8007898:	60e3      	str	r3, [r4, #12]
 800789a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800789e:	6665      	str	r5, [r4, #100]	; 0x64
 80078a0:	f000 f847 	bl	8007932 <__retarget_lock_init_recursive>
 80078a4:	f7ff ff96 	bl	80077d4 <__sfp_lock_release>
 80078a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	61a5      	str	r5, [r4, #24]
 80078b4:	2208      	movs	r2, #8
 80078b6:	4629      	mov	r1, r5
 80078b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078bc:	f7fd faae 	bl	8004e1c <memset>
 80078c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078c8:	4620      	mov	r0, r4
 80078ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078cc:	3468      	adds	r4, #104	; 0x68
 80078ce:	e7d9      	b.n	8007884 <__sfp+0x1c>
 80078d0:	2104      	movs	r1, #4
 80078d2:	4638      	mov	r0, r7
 80078d4:	f7ff ff62 	bl	800779c <__sfmoreglue>
 80078d8:	4604      	mov	r4, r0
 80078da:	6030      	str	r0, [r6, #0]
 80078dc:	2800      	cmp	r0, #0
 80078de:	d1d5      	bne.n	800788c <__sfp+0x24>
 80078e0:	f7ff ff78 	bl	80077d4 <__sfp_lock_release>
 80078e4:	230c      	movs	r3, #12
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	e7ee      	b.n	80078c8 <__sfp+0x60>
 80078ea:	bf00      	nop
 80078ec:	08009694 	.word	0x08009694
 80078f0:	ffff0001 	.word	0xffff0001

080078f4 <_fwalk_reent>:
 80078f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f8:	4606      	mov	r6, r0
 80078fa:	4688      	mov	r8, r1
 80078fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007900:	2700      	movs	r7, #0
 8007902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007906:	f1b9 0901 	subs.w	r9, r9, #1
 800790a:	d505      	bpl.n	8007918 <_fwalk_reent+0x24>
 800790c:	6824      	ldr	r4, [r4, #0]
 800790e:	2c00      	cmp	r4, #0
 8007910:	d1f7      	bne.n	8007902 <_fwalk_reent+0xe>
 8007912:	4638      	mov	r0, r7
 8007914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007918:	89ab      	ldrh	r3, [r5, #12]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d907      	bls.n	800792e <_fwalk_reent+0x3a>
 800791e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007922:	3301      	adds	r3, #1
 8007924:	d003      	beq.n	800792e <_fwalk_reent+0x3a>
 8007926:	4629      	mov	r1, r5
 8007928:	4630      	mov	r0, r6
 800792a:	47c0      	blx	r8
 800792c:	4307      	orrs	r7, r0
 800792e:	3568      	adds	r5, #104	; 0x68
 8007930:	e7e9      	b.n	8007906 <_fwalk_reent+0x12>

08007932 <__retarget_lock_init_recursive>:
 8007932:	4770      	bx	lr

08007934 <__retarget_lock_acquire_recursive>:
 8007934:	4770      	bx	lr

08007936 <__retarget_lock_release_recursive>:
 8007936:	4770      	bx	lr

08007938 <__swhatbuf_r>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460e      	mov	r6, r1
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2900      	cmp	r1, #0
 8007942:	b096      	sub	sp, #88	; 0x58
 8007944:	4614      	mov	r4, r2
 8007946:	461d      	mov	r5, r3
 8007948:	da08      	bge.n	800795c <__swhatbuf_r+0x24>
 800794a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	061a      	lsls	r2, r3, #24
 8007954:	d410      	bmi.n	8007978 <__swhatbuf_r+0x40>
 8007956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795a:	e00e      	b.n	800797a <__swhatbuf_r+0x42>
 800795c:	466a      	mov	r2, sp
 800795e:	f000 f903 	bl	8007b68 <_fstat_r>
 8007962:	2800      	cmp	r0, #0
 8007964:	dbf1      	blt.n	800794a <__swhatbuf_r+0x12>
 8007966:	9a01      	ldr	r2, [sp, #4]
 8007968:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800796c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007970:	425a      	negs	r2, r3
 8007972:	415a      	adcs	r2, r3
 8007974:	602a      	str	r2, [r5, #0]
 8007976:	e7ee      	b.n	8007956 <__swhatbuf_r+0x1e>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	2000      	movs	r0, #0
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	b016      	add	sp, #88	; 0x58
 8007980:	bd70      	pop	{r4, r5, r6, pc}
	...

08007984 <__smakebuf_r>:
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007988:	079d      	lsls	r5, r3, #30
 800798a:	4606      	mov	r6, r0
 800798c:	460c      	mov	r4, r1
 800798e:	d507      	bpl.n	80079a0 <__smakebuf_r+0x1c>
 8007990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	2301      	movs	r3, #1
 800799a:	6163      	str	r3, [r4, #20]
 800799c:	b002      	add	sp, #8
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	ab01      	add	r3, sp, #4
 80079a2:	466a      	mov	r2, sp
 80079a4:	f7ff ffc8 	bl	8007938 <__swhatbuf_r>
 80079a8:	9900      	ldr	r1, [sp, #0]
 80079aa:	4605      	mov	r5, r0
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff f963 	bl	8006c78 <_malloc_r>
 80079b2:	b948      	cbnz	r0, 80079c8 <__smakebuf_r+0x44>
 80079b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b8:	059a      	lsls	r2, r3, #22
 80079ba:	d4ef      	bmi.n	800799c <__smakebuf_r+0x18>
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	e7e3      	b.n	8007990 <__smakebuf_r+0xc>
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <__smakebuf_r+0x7c>)
 80079ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	6020      	str	r0, [r4, #0]
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	6163      	str	r3, [r4, #20]
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	6120      	str	r0, [r4, #16]
 80079de:	b15b      	cbz	r3, 80079f8 <__smakebuf_r+0x74>
 80079e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 f8d1 	bl	8007b8c <_isatty_r>
 80079ea:	b128      	cbz	r0, 80079f8 <__smakebuf_r+0x74>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	89a0      	ldrh	r0, [r4, #12]
 80079fa:	4305      	orrs	r5, r0
 80079fc:	81a5      	strh	r5, [r4, #12]
 80079fe:	e7cd      	b.n	800799c <__smakebuf_r+0x18>
 8007a00:	08007791 	.word	0x08007791

08007a04 <_malloc_usable_size_r>:
 8007a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a08:	1f18      	subs	r0, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfbc      	itt	lt
 8007a0e:	580b      	ldrlt	r3, [r1, r0]
 8007a10:	18c0      	addlt	r0, r0, r3
 8007a12:	4770      	bx	lr

08007a14 <_raise_r>:
 8007a14:	291f      	cmp	r1, #31
 8007a16:	b538      	push	{r3, r4, r5, lr}
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	d904      	bls.n	8007a28 <_raise_r+0x14>
 8007a1e:	2316      	movs	r3, #22
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a2a:	b112      	cbz	r2, 8007a32 <_raise_r+0x1e>
 8007a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a30:	b94b      	cbnz	r3, 8007a46 <_raise_r+0x32>
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 f830 	bl	8007a98 <_getpid_r>
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a42:	f000 b817 	b.w	8007a74 <_kill_r>
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d00a      	beq.n	8007a60 <_raise_r+0x4c>
 8007a4a:	1c59      	adds	r1, r3, #1
 8007a4c:	d103      	bne.n	8007a56 <_raise_r+0x42>
 8007a4e:	2316      	movs	r3, #22
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	2001      	movs	r0, #1
 8007a54:	e7e7      	b.n	8007a26 <_raise_r+0x12>
 8007a56:	2400      	movs	r4, #0
 8007a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	4798      	blx	r3
 8007a60:	2000      	movs	r0, #0
 8007a62:	e7e0      	b.n	8007a26 <_raise_r+0x12>

08007a64 <raise>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	; (8007a70 <raise+0xc>)
 8007a66:	4601      	mov	r1, r0
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f7ff bfd3 	b.w	8007a14 <_raise_r>
 8007a6e:	bf00      	nop
 8007a70:	20000034 	.word	0x20000034

08007a74 <_kill_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_kill_r+0x20>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f7f9 ff81 	bl	8001988 <_kill>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d102      	bne.n	8007a90 <_kill_r+0x1c>
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	b103      	cbz	r3, 8007a90 <_kill_r+0x1c>
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	bf00      	nop
 8007a94:	200002b0 	.word	0x200002b0

08007a98 <_getpid_r>:
 8007a98:	f7f9 bf6e 	b.w	8001978 <_getpid>

08007a9c <__sread>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	f000 f894 	bl	8007bd0 <_read_r>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	bfab      	itete	ge
 8007aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aae:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab0:	181b      	addge	r3, r3, r0
 8007ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ab6:	bfac      	ite	ge
 8007ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aba:	81a3      	strhlt	r3, [r4, #12]
 8007abc:	bd10      	pop	{r4, pc}

08007abe <__swrite>:
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	898b      	ldrh	r3, [r1, #12]
 8007ac6:	05db      	lsls	r3, r3, #23
 8007ac8:	4605      	mov	r5, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	4616      	mov	r6, r2
 8007ace:	d505      	bpl.n	8007adc <__swrite+0x1e>
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f000 f868 	bl	8007bac <_lseek_r>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	4632      	mov	r2, r6
 8007aea:	463b      	mov	r3, r7
 8007aec:	4628      	mov	r0, r5
 8007aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	f000 b817 	b.w	8007b24 <_write_r>

08007af6 <__sseek>:
 8007af6:	b510      	push	{r4, lr}
 8007af8:	460c      	mov	r4, r1
 8007afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afe:	f000 f855 	bl	8007bac <_lseek_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	bf15      	itete	ne
 8007b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b12:	81a3      	strheq	r3, [r4, #12]
 8007b14:	bf18      	it	ne
 8007b16:	81a3      	strhne	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__sclose>:
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 b813 	b.w	8007b48 <_close_r>
	...

08007b24 <_write_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_write_r+0x20>)
 8007b28:	4604      	mov	r4, r0
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	602a      	str	r2, [r5, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7f9 ff5f 	bl	80019f6 <_write>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_write_r+0x1e>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_write_r+0x1e>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	200002b0 	.word	0x200002b0

08007b48 <_close_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_close_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f9 ff6b 	bl	8001a2e <_close>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_close_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_close_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200002b0 	.word	0x200002b0

08007b68 <_fstat_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	; (8007b88 <_fstat_r+0x20>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f7f9 ff66 	bl	8001a46 <_fstat>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	d102      	bne.n	8007b84 <_fstat_r+0x1c>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	b103      	cbz	r3, 8007b84 <_fstat_r+0x1c>
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	200002b0 	.word	0x200002b0

08007b8c <_isatty_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	; (8007ba8 <_isatty_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f9 ff65 	bl	8001a66 <_isatty>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_isatty_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_isatty_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	200002b0 	.word	0x200002b0

08007bac <_lseek_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	; (8007bcc <_lseek_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 ff5e 	bl	8001a7c <_lseek>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_lseek_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_lseek_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	200002b0 	.word	0x200002b0

08007bd0 <_read_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_read_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 feec 	bl	80019bc <_read>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_read_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_read_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200002b0 	.word	0x200002b0
 8007bf4:	00000000 	.word	0x00000000

08007bf8 <atan>:
 8007bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4bbc      	ldr	r3, [pc, #752]	; (8007ef0 <atan+0x2f8>)
 8007bfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007c02:	429e      	cmp	r6, r3
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	468b      	mov	fp, r1
 8007c0a:	dd18      	ble.n	8007c3e <atan+0x46>
 8007c0c:	4bb9      	ldr	r3, [pc, #740]	; (8007ef4 <atan+0x2fc>)
 8007c0e:	429e      	cmp	r6, r3
 8007c10:	dc01      	bgt.n	8007c16 <atan+0x1e>
 8007c12:	d109      	bne.n	8007c28 <atan+0x30>
 8007c14:	b140      	cbz	r0, 8007c28 <atan+0x30>
 8007c16:	4622      	mov	r2, r4
 8007c18:	462b      	mov	r3, r5
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f7f8 fb3d 	bl	800029c <__adddf3>
 8007c22:	4604      	mov	r4, r0
 8007c24:	460d      	mov	r5, r1
 8007c26:	e006      	b.n	8007c36 <atan+0x3e>
 8007c28:	f1bb 0f00 	cmp.w	fp, #0
 8007c2c:	f300 8123 	bgt.w	8007e76 <atan+0x27e>
 8007c30:	a593      	add	r5, pc, #588	; (adr r5, 8007e80 <atan+0x288>)
 8007c32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c36:	4620      	mov	r0, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	4bae      	ldr	r3, [pc, #696]	; (8007ef8 <atan+0x300>)
 8007c40:	429e      	cmp	r6, r3
 8007c42:	dc11      	bgt.n	8007c68 <atan+0x70>
 8007c44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007c48:	429e      	cmp	r6, r3
 8007c4a:	dc0a      	bgt.n	8007c62 <atan+0x6a>
 8007c4c:	a38e      	add	r3, pc, #568	; (adr r3, 8007e88 <atan+0x290>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 fb23 	bl	800029c <__adddf3>
 8007c56:	4ba9      	ldr	r3, [pc, #676]	; (8007efc <atan+0x304>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7f8 ff65 	bl	8000b28 <__aeabi_dcmpgt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d1e9      	bne.n	8007c36 <atan+0x3e>
 8007c62:	f04f 3aff 	mov.w	sl, #4294967295
 8007c66:	e027      	b.n	8007cb8 <atan+0xc0>
 8007c68:	f000 f99c 	bl	8007fa4 <fabs>
 8007c6c:	4ba4      	ldr	r3, [pc, #656]	; (8007f00 <atan+0x308>)
 8007c6e:	429e      	cmp	r6, r3
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	f300 80b8 	bgt.w	8007de8 <atan+0x1f0>
 8007c78:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007c7c:	429e      	cmp	r6, r3
 8007c7e:	f300 809c 	bgt.w	8007dba <atan+0x1c2>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	f7f8 fb09 	bl	800029c <__adddf3>
 8007c8a:	4b9c      	ldr	r3, [pc, #624]	; (8007efc <atan+0x304>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f7f8 fb03 	bl	8000298 <__aeabi_dsub>
 8007c92:	2200      	movs	r2, #0
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 fafc 	bl	800029c <__adddf3>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 fdd6 	bl	800085c <__aeabi_ddiv>
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 fca2 	bl	8000608 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4689      	mov	r9, r1
 8007ccc:	f7f8 fc9c 	bl	8000608 <__aeabi_dmul>
 8007cd0:	a36f      	add	r3, pc, #444	; (adr r3, 8007e90 <atan+0x298>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	f7f8 fc95 	bl	8000608 <__aeabi_dmul>
 8007cde:	a36e      	add	r3, pc, #440	; (adr r3, 8007e98 <atan+0x2a0>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fada 	bl	800029c <__adddf3>
 8007ce8:	4632      	mov	r2, r6
 8007cea:	463b      	mov	r3, r7
 8007cec:	f7f8 fc8c 	bl	8000608 <__aeabi_dmul>
 8007cf0:	a36b      	add	r3, pc, #428	; (adr r3, 8007ea0 <atan+0x2a8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fad1 	bl	800029c <__adddf3>
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	f7f8 fc83 	bl	8000608 <__aeabi_dmul>
 8007d02:	a369      	add	r3, pc, #420	; (adr r3, 8007ea8 <atan+0x2b0>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f7f8 fac8 	bl	800029c <__adddf3>
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	463b      	mov	r3, r7
 8007d10:	f7f8 fc7a 	bl	8000608 <__aeabi_dmul>
 8007d14:	a366      	add	r3, pc, #408	; (adr r3, 8007eb0 <atan+0x2b8>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	f7f8 fabf 	bl	800029c <__adddf3>
 8007d1e:	4632      	mov	r2, r6
 8007d20:	463b      	mov	r3, r7
 8007d22:	f7f8 fc71 	bl	8000608 <__aeabi_dmul>
 8007d26:	a364      	add	r3, pc, #400	; (adr r3, 8007eb8 <atan+0x2c0>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fab6 	bl	800029c <__adddf3>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	f7f8 fc68 	bl	8000608 <__aeabi_dmul>
 8007d38:	a361      	add	r3, pc, #388	; (adr r3, 8007ec0 <atan+0x2c8>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	4680      	mov	r8, r0
 8007d40:	4689      	mov	r9, r1
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	f7f8 fc5f 	bl	8000608 <__aeabi_dmul>
 8007d4a:	a35f      	add	r3, pc, #380	; (adr r3, 8007ec8 <atan+0x2d0>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 faa2 	bl	8000298 <__aeabi_dsub>
 8007d54:	4632      	mov	r2, r6
 8007d56:	463b      	mov	r3, r7
 8007d58:	f7f8 fc56 	bl	8000608 <__aeabi_dmul>
 8007d5c:	a35c      	add	r3, pc, #368	; (adr r3, 8007ed0 <atan+0x2d8>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fa99 	bl	8000298 <__aeabi_dsub>
 8007d66:	4632      	mov	r2, r6
 8007d68:	463b      	mov	r3, r7
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	a35a      	add	r3, pc, #360	; (adr r3, 8007ed8 <atan+0x2e0>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f7f8 fa90 	bl	8000298 <__aeabi_dsub>
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	f7f8 fc44 	bl	8000608 <__aeabi_dmul>
 8007d80:	a357      	add	r3, pc, #348	; (adr r3, 8007ee0 <atan+0x2e8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fa87 	bl	8000298 <__aeabi_dsub>
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	f7f8 fc3b 	bl	8000608 <__aeabi_dmul>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fa7f 	bl	800029c <__adddf3>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	f7f8 fc31 	bl	8000608 <__aeabi_dmul>
 8007da6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	d144      	bne.n	8007e3a <atan+0x242>
 8007db0:	4620      	mov	r0, r4
 8007db2:	4629      	mov	r1, r5
 8007db4:	f7f8 fa70 	bl	8000298 <__aeabi_dsub>
 8007db8:	e733      	b.n	8007c22 <atan+0x2a>
 8007dba:	4b50      	ldr	r3, [pc, #320]	; (8007efc <atan+0x304>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f7f8 fa6b 	bl	8000298 <__aeabi_dsub>
 8007dc2:	4b4e      	ldr	r3, [pc, #312]	; (8007efc <atan+0x304>)
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 fa65 	bl	800029c <__adddf3>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fd3f 	bl	800085c <__aeabi_ddiv>
 8007dde:	f04f 0a01 	mov.w	sl, #1
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	e767      	b.n	8007cb8 <atan+0xc0>
 8007de8:	4b46      	ldr	r3, [pc, #280]	; (8007f04 <atan+0x30c>)
 8007dea:	429e      	cmp	r6, r3
 8007dec:	da1a      	bge.n	8007e24 <atan+0x22c>
 8007dee:	4b46      	ldr	r3, [pc, #280]	; (8007f08 <atan+0x310>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	f7f8 fa51 	bl	8000298 <__aeabi_dsub>
 8007df6:	4b44      	ldr	r3, [pc, #272]	; (8007f08 <atan+0x310>)
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fc01 	bl	8000608 <__aeabi_dmul>
 8007e06:	4b3d      	ldr	r3, [pc, #244]	; (8007efc <atan+0x304>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f7f8 fa47 	bl	800029c <__adddf3>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 fd21 	bl	800085c <__aeabi_ddiv>
 8007e1a:	f04f 0a02 	mov.w	sl, #2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	e749      	b.n	8007cb8 <atan+0xc0>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	2000      	movs	r0, #0
 8007e2a:	4938      	ldr	r1, [pc, #224]	; (8007f0c <atan+0x314>)
 8007e2c:	f7f8 fd16 	bl	800085c <__aeabi_ddiv>
 8007e30:	f04f 0a03 	mov.w	sl, #3
 8007e34:	4604      	mov	r4, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	e73e      	b.n	8007cb8 <atan+0xc0>
 8007e3a:	4b35      	ldr	r3, [pc, #212]	; (8007f10 <atan+0x318>)
 8007e3c:	4e35      	ldr	r6, [pc, #212]	; (8007f14 <atan+0x31c>)
 8007e3e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e42:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007e46:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e4a:	f7f8 fa25 	bl	8000298 <__aeabi_dsub>
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	f7f8 fa21 	bl	8000298 <__aeabi_dsub>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e5e:	f7f8 fa1b 	bl	8000298 <__aeabi_dsub>
 8007e62:	f1bb 0f00 	cmp.w	fp, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f6bf aee4 	bge.w	8007c36 <atan+0x3e>
 8007e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e72:	461d      	mov	r5, r3
 8007e74:	e6df      	b.n	8007c36 <atan+0x3e>
 8007e76:	a51c      	add	r5, pc, #112	; (adr r5, 8007ee8 <atan+0x2f0>)
 8007e78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e7c:	e6db      	b.n	8007c36 <atan+0x3e>
 8007e7e:	bf00      	nop
 8007e80:	54442d18 	.word	0x54442d18
 8007e84:	bff921fb 	.word	0xbff921fb
 8007e88:	8800759c 	.word	0x8800759c
 8007e8c:	7e37e43c 	.word	0x7e37e43c
 8007e90:	e322da11 	.word	0xe322da11
 8007e94:	3f90ad3a 	.word	0x3f90ad3a
 8007e98:	24760deb 	.word	0x24760deb
 8007e9c:	3fa97b4b 	.word	0x3fa97b4b
 8007ea0:	a0d03d51 	.word	0xa0d03d51
 8007ea4:	3fb10d66 	.word	0x3fb10d66
 8007ea8:	c54c206e 	.word	0xc54c206e
 8007eac:	3fb745cd 	.word	0x3fb745cd
 8007eb0:	920083ff 	.word	0x920083ff
 8007eb4:	3fc24924 	.word	0x3fc24924
 8007eb8:	5555550d 	.word	0x5555550d
 8007ebc:	3fd55555 	.word	0x3fd55555
 8007ec0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ec4:	bfa2b444 	.word	0xbfa2b444
 8007ec8:	52defd9a 	.word	0x52defd9a
 8007ecc:	3fadde2d 	.word	0x3fadde2d
 8007ed0:	af749a6d 	.word	0xaf749a6d
 8007ed4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ed8:	fe231671 	.word	0xfe231671
 8007edc:	3fbc71c6 	.word	0x3fbc71c6
 8007ee0:	9998ebc4 	.word	0x9998ebc4
 8007ee4:	3fc99999 	.word	0x3fc99999
 8007ee8:	54442d18 	.word	0x54442d18
 8007eec:	3ff921fb 	.word	0x3ff921fb
 8007ef0:	440fffff 	.word	0x440fffff
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	3fdbffff 	.word	0x3fdbffff
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	3ff2ffff 	.word	0x3ff2ffff
 8007f04:	40038000 	.word	0x40038000
 8007f08:	3ff80000 	.word	0x3ff80000
 8007f0c:	bff00000 	.word	0xbff00000
 8007f10:	08009a90 	.word	0x08009a90
 8007f14:	08009a70 	.word	0x08009a70

08007f18 <cos>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	4d20      	ldr	r5, [pc, #128]	; (8007f9c <cos+0x84>)
 8007f1c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007f20:	42ac      	cmp	r4, r5
 8007f22:	b087      	sub	sp, #28
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	dc06      	bgt.n	8007f38 <cos+0x20>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	b007      	add	sp, #28
 8007f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f34:	f000 bac4 	b.w	80084c0 <__kernel_cos>
 8007f38:	4d19      	ldr	r5, [pc, #100]	; (8007fa0 <cos+0x88>)
 8007f3a:	42ac      	cmp	r4, r5
 8007f3c:	dd03      	ble.n	8007f46 <cos+0x2e>
 8007f3e:	f7f8 f9ab 	bl	8000298 <__aeabi_dsub>
 8007f42:	b007      	add	sp, #28
 8007f44:	bd30      	pop	{r4, r5, pc}
 8007f46:	aa02      	add	r2, sp, #8
 8007f48:	f000 f8ba 	bl	80080c0 <__ieee754_rem_pio2>
 8007f4c:	f000 0003 	and.w	r0, r0, #3
 8007f50:	2801      	cmp	r0, #1
 8007f52:	d009      	beq.n	8007f68 <cos+0x50>
 8007f54:	2802      	cmp	r0, #2
 8007f56:	d011      	beq.n	8007f7c <cos+0x64>
 8007f58:	b9b8      	cbnz	r0, 8007f8a <cos+0x72>
 8007f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f62:	f000 faad 	bl	80084c0 <__kernel_cos>
 8007f66:	e7ec      	b.n	8007f42 <cos+0x2a>
 8007f68:	9000      	str	r0, [sp, #0]
 8007f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f72:	f000 fea9 	bl	8008cc8 <__kernel_sin>
 8007f76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007f7a:	e7e2      	b.n	8007f42 <cos+0x2a>
 8007f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f84:	f000 fa9c 	bl	80084c0 <__kernel_cos>
 8007f88:	e7f5      	b.n	8007f76 <cos+0x5e>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	f000 fe97 	bl	8008cc8 <__kernel_sin>
 8007f9a:	e7d2      	b.n	8007f42 <cos+0x2a>
 8007f9c:	3fe921fb 	.word	0x3fe921fb
 8007fa0:	7fefffff 	.word	0x7fefffff

08007fa4 <fabs>:
 8007fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007fa8:	4770      	bx	lr

08007faa <lround>:
 8007faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fac:	1e0b      	subs	r3, r1, #0
 8007fae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007fb2:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007fb6:	bfb4      	ite	lt
 8007fb8:	f04f 36ff 	movlt.w	r6, #4294967295
 8007fbc:	2601      	movge	r6, #1
 8007fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc2:	2f13      	cmp	r7, #19
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fca:	dc10      	bgt.n	8007fee <lround+0x44>
 8007fcc:	2f00      	cmp	r7, #0
 8007fce:	da04      	bge.n	8007fda <lround+0x30>
 8007fd0:	3701      	adds	r7, #1
 8007fd2:	bf18      	it	ne
 8007fd4:	2600      	movne	r6, #0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007fde:	413a      	asrs	r2, r7
 8007fe0:	441a      	add	r2, r3
 8007fe2:	f1c7 0314 	rsb	r3, r7, #20
 8007fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fea:	435e      	muls	r6, r3
 8007fec:	e7f3      	b.n	8007fd6 <lround+0x2c>
 8007fee:	2f1e      	cmp	r7, #30
 8007ff0:	d819      	bhi.n	8008026 <lround+0x7c>
 8007ff2:	2f33      	cmp	r7, #51	; 0x33
 8007ff4:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007ff8:	dd05      	ble.n	8008006 <lround+0x5c>
 8007ffa:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 8007ffe:	4094      	lsls	r4, r2
 8008000:	408b      	lsls	r3, r1
 8008002:	4323      	orrs	r3, r4
 8008004:	e7f1      	b.n	8007fea <lround+0x40>
 8008006:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800800a:	40ca      	lsrs	r2, r1
 800800c:	1812      	adds	r2, r2, r0
 800800e:	bf28      	it	cs
 8008010:	3301      	addcs	r3, #1
 8008012:	f1c7 0434 	rsb	r4, r7, #52	; 0x34
 8008016:	2f14      	cmp	r7, #20
 8008018:	fa03 f301 	lsl.w	r3, r3, r1
 800801c:	bf14      	ite	ne
 800801e:	40e2      	lsrne	r2, r4
 8008020:	2200      	moveq	r2, #0
 8008022:	4313      	orrs	r3, r2
 8008024:	e7e1      	b.n	8007fea <lround+0x40>
 8008026:	f7f8 fd9f 	bl	8000b68 <__aeabi_d2iz>
 800802a:	4606      	mov	r6, r0
 800802c:	e7d3      	b.n	8007fd6 <lround+0x2c>
	...

08008030 <sin>:
 8008030:	b530      	push	{r4, r5, lr}
 8008032:	4d20      	ldr	r5, [pc, #128]	; (80080b4 <sin+0x84>)
 8008034:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008038:	42ac      	cmp	r4, r5
 800803a:	b087      	sub	sp, #28
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	dc06      	bgt.n	8008050 <sin+0x20>
 8008042:	2300      	movs	r3, #0
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	f000 fe3d 	bl	8008cc8 <__kernel_sin>
 800804e:	e004      	b.n	800805a <sin+0x2a>
 8008050:	4d19      	ldr	r5, [pc, #100]	; (80080b8 <sin+0x88>)
 8008052:	42ac      	cmp	r4, r5
 8008054:	dd03      	ble.n	800805e <sin+0x2e>
 8008056:	f7f8 f91f 	bl	8000298 <__aeabi_dsub>
 800805a:	b007      	add	sp, #28
 800805c:	bd30      	pop	{r4, r5, pc}
 800805e:	aa02      	add	r2, sp, #8
 8008060:	f000 f82e 	bl	80080c0 <__ieee754_rem_pio2>
 8008064:	f000 0003 	and.w	r0, r0, #3
 8008068:	2801      	cmp	r0, #1
 800806a:	d009      	beq.n	8008080 <sin+0x50>
 800806c:	2802      	cmp	r0, #2
 800806e:	d00e      	beq.n	800808e <sin+0x5e>
 8008070:	b9c0      	cbnz	r0, 80080a4 <sin+0x74>
 8008072:	2301      	movs	r3, #1
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807e:	e7e4      	b.n	800804a <sin+0x1a>
 8008080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	f000 fa1a 	bl	80084c0 <__kernel_cos>
 800808c:	e7e5      	b.n	800805a <sin+0x2a>
 800808e:	2301      	movs	r3, #1
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809a:	f000 fe15 	bl	8008cc8 <__kernel_sin>
 800809e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80080a2:	e7da      	b.n	800805a <sin+0x2a>
 80080a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ac:	f000 fa08 	bl	80084c0 <__kernel_cos>
 80080b0:	e7f5      	b.n	800809e <sin+0x6e>
 80080b2:	bf00      	nop
 80080b4:	3fe921fb 	.word	0x3fe921fb
 80080b8:	7fefffff 	.word	0x7fefffff
 80080bc:	00000000 	.word	0x00000000

080080c0 <__ieee754_rem_pio2>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b02 	vpush	{d8}
 80080c8:	4bc7      	ldr	r3, [pc, #796]	; (80083e8 <__ieee754_rem_pio2+0x328>)
 80080ca:	b08b      	sub	sp, #44	; 0x2c
 80080cc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80080d0:	4598      	cmp	r8, r3
 80080d2:	4604      	mov	r4, r0
 80080d4:	460d      	mov	r5, r1
 80080d6:	4692      	mov	sl, r2
 80080d8:	9102      	str	r1, [sp, #8]
 80080da:	dc08      	bgt.n	80080ee <__ieee754_rem_pio2+0x2e>
 80080dc:	e9c2 4500 	strd	r4, r5, [r2]
 80080e0:	2300      	movs	r3, #0
 80080e2:	2200      	movs	r2, #0
 80080e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80080e8:	f04f 0b00 	mov.w	fp, #0
 80080ec:	e025      	b.n	800813a <__ieee754_rem_pio2+0x7a>
 80080ee:	4bbf      	ldr	r3, [pc, #764]	; (80083ec <__ieee754_rem_pio2+0x32c>)
 80080f0:	4598      	cmp	r8, r3
 80080f2:	dc75      	bgt.n	80081e0 <__ieee754_rem_pio2+0x120>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	4ebe      	ldr	r6, [pc, #760]	; (80083f0 <__ieee754_rem_pio2+0x330>)
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	a3ad      	add	r3, pc, #692	; (adr r3, 80083b0 <__ieee754_rem_pio2+0x2f0>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	dd39      	ble.n	8008176 <__ieee754_rem_pio2+0xb6>
 8008102:	f7f8 f8c9 	bl	8000298 <__aeabi_dsub>
 8008106:	45b0      	cmp	r8, r6
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	d01b      	beq.n	8008146 <__ieee754_rem_pio2+0x86>
 800810e:	a3aa      	add	r3, pc, #680	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x2f8>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 f8c0 	bl	8000298 <__aeabi_dsub>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	e9ca 2300 	strd	r2, r3, [sl]
 8008120:	4620      	mov	r0, r4
 8008122:	4629      	mov	r1, r5
 8008124:	f7f8 f8b8 	bl	8000298 <__aeabi_dsub>
 8008128:	a3a3      	add	r3, pc, #652	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x2f8>)
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008136:	f04f 0b01 	mov.w	fp, #1
 800813a:	4658      	mov	r0, fp
 800813c:	b00b      	add	sp, #44	; 0x2c
 800813e:	ecbd 8b02 	vpop	{d8}
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	a39e      	add	r3, pc, #632	; (adr r3, 80083c0 <__ieee754_rem_pio2+0x300>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f8a4 	bl	8000298 <__aeabi_dsub>
 8008150:	a39d      	add	r3, pc, #628	; (adr r3, 80083c8 <__ieee754_rem_pio2+0x308>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	4604      	mov	r4, r0
 8008158:	460d      	mov	r5, r1
 800815a:	f7f8 f89d 	bl	8000298 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9ca 2300 	strd	r2, r3, [sl]
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 f895 	bl	8000298 <__aeabi_dsub>
 800816e:	a396      	add	r3, pc, #600	; (adr r3, 80083c8 <__ieee754_rem_pio2+0x308>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	e7db      	b.n	800812e <__ieee754_rem_pio2+0x6e>
 8008176:	f7f8 f891 	bl	800029c <__adddf3>
 800817a:	45b0      	cmp	r8, r6
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	d016      	beq.n	80081b0 <__ieee754_rem_pio2+0xf0>
 8008182:	a38d      	add	r3, pc, #564	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x2f8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f888 	bl	800029c <__adddf3>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	e9ca 2300 	strd	r2, r3, [sl]
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 f87e 	bl	8000298 <__aeabi_dsub>
 800819c:	a386      	add	r3, pc, #536	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x2f8>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 f87b 	bl	800029c <__adddf3>
 80081a6:	f04f 3bff 	mov.w	fp, #4294967295
 80081aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80081ae:	e7c4      	b.n	800813a <__ieee754_rem_pio2+0x7a>
 80081b0:	a383      	add	r3, pc, #524	; (adr r3, 80083c0 <__ieee754_rem_pio2+0x300>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 f871 	bl	800029c <__adddf3>
 80081ba:	a383      	add	r3, pc, #524	; (adr r3, 80083c8 <__ieee754_rem_pio2+0x308>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	f7f8 f86a 	bl	800029c <__adddf3>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	e9ca 2300 	strd	r2, r3, [sl]
 80081d0:	4620      	mov	r0, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	a37b      	add	r3, pc, #492	; (adr r3, 80083c8 <__ieee754_rem_pio2+0x308>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	e7e0      	b.n	80081a2 <__ieee754_rem_pio2+0xe2>
 80081e0:	4b84      	ldr	r3, [pc, #528]	; (80083f4 <__ieee754_rem_pio2+0x334>)
 80081e2:	4598      	cmp	r8, r3
 80081e4:	f300 80d6 	bgt.w	8008394 <__ieee754_rem_pio2+0x2d4>
 80081e8:	f7ff fedc 	bl	8007fa4 <fabs>
 80081ec:	a378      	add	r3, pc, #480	; (adr r3, 80083d0 <__ieee754_rem_pio2+0x310>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	f7f8 fa07 	bl	8000608 <__aeabi_dmul>
 80081fa:	4b7f      	ldr	r3, [pc, #508]	; (80083f8 <__ieee754_rem_pio2+0x338>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7f8 f84d 	bl	800029c <__adddf3>
 8008202:	f7f8 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8008206:	4683      	mov	fp, r0
 8008208:	f7f8 f994 	bl	8000534 <__aeabi_i2d>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	ec43 2b18 	vmov	d8, r2, r3
 8008214:	a366      	add	r3, pc, #408	; (adr r3, 80083b0 <__ieee754_rem_pio2+0x2f0>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f9f5 	bl	8000608 <__aeabi_dmul>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 f837 	bl	8000298 <__aeabi_dsub>
 800822a:	a363      	add	r3, pc, #396	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x2f8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	4606      	mov	r6, r0
 8008232:	460f      	mov	r7, r1
 8008234:	ec51 0b18 	vmov	r0, r1, d8
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	f1bb 0f1f 	cmp.w	fp, #31
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	dc0d      	bgt.n	8008262 <__ieee754_rem_pio2+0x1a2>
 8008246:	4b6d      	ldr	r3, [pc, #436]	; (80083fc <__ieee754_rem_pio2+0x33c>)
 8008248:	f10b 32ff 	add.w	r2, fp, #4294967295
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	4543      	cmp	r3, r8
 8008252:	d006      	beq.n	8008262 <__ieee754_rem_pio2+0x1a2>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f81c 	bl	8000298 <__aeabi_dsub>
 8008260:	e00f      	b.n	8008282 <__ieee754_rem_pio2+0x1c2>
 8008262:	462b      	mov	r3, r5
 8008264:	4622      	mov	r2, r4
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f815 	bl	8000298 <__aeabi_dsub>
 800826e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008278:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800827c:	f1b8 0f10 	cmp.w	r8, #16
 8008280:	dc02      	bgt.n	8008288 <__ieee754_rem_pio2+0x1c8>
 8008282:	e9ca 0100 	strd	r0, r1, [sl]
 8008286:	e039      	b.n	80082fc <__ieee754_rem_pio2+0x23c>
 8008288:	a34d      	add	r3, pc, #308	; (adr r3, 80083c0 <__ieee754_rem_pio2+0x300>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	ec51 0b18 	vmov	r0, r1, d8
 8008292:	f7f8 f9b9 	bl	8000608 <__aeabi_dmul>
 8008296:	4604      	mov	r4, r0
 8008298:	460d      	mov	r5, r1
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f7 fff9 	bl	8000298 <__aeabi_dsub>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f7 fff1 	bl	8000298 <__aeabi_dsub>
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	f7f7 ffed 	bl	8000298 <__aeabi_dsub>
 80082be:	a342      	add	r3, pc, #264	; (adr r3, 80083c8 <__ieee754_rem_pio2+0x308>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	ec51 0b18 	vmov	r0, r1, d8
 80082cc:	f7f8 f99c 	bl	8000608 <__aeabi_dmul>
 80082d0:	4622      	mov	r2, r4
 80082d2:	462b      	mov	r3, r5
 80082d4:	f7f7 ffe0 	bl	8000298 <__aeabi_dsub>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f7 ffd8 	bl	8000298 <__aeabi_dsub>
 80082e8:	9a03      	ldr	r2, [sp, #12]
 80082ea:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b31      	cmp	r3, #49	; 0x31
 80082f2:	dc24      	bgt.n	800833e <__ieee754_rem_pio2+0x27e>
 80082f4:	e9ca 0100 	strd	r0, r1, [sl]
 80082f8:	4646      	mov	r6, r8
 80082fa:	464f      	mov	r7, r9
 80082fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008300:	4630      	mov	r0, r6
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	4639      	mov	r1, r7
 8008308:	f7f7 ffc6 	bl	8000298 <__aeabi_dsub>
 800830c:	462b      	mov	r3, r5
 800830e:	4622      	mov	r2, r4
 8008310:	f7f7 ffc2 	bl	8000298 <__aeabi_dsub>
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800831c:	f6bf af0d 	bge.w	800813a <__ieee754_rem_pio2+0x7a>
 8008320:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008324:	f8ca 3004 	str.w	r3, [sl, #4]
 8008328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800832c:	f8ca 8000 	str.w	r8, [sl]
 8008330:	f8ca 0008 	str.w	r0, [sl, #8]
 8008334:	f8ca 300c 	str.w	r3, [sl, #12]
 8008338:	f1cb 0b00 	rsb	fp, fp, #0
 800833c:	e6fd      	b.n	800813a <__ieee754_rem_pio2+0x7a>
 800833e:	a326      	add	r3, pc, #152	; (adr r3, 80083d8 <__ieee754_rem_pio2+0x318>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	ec51 0b18 	vmov	r0, r1, d8
 8008348:	f7f8 f95e 	bl	8000608 <__aeabi_dmul>
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4640      	mov	r0, r8
 8008356:	4649      	mov	r1, r9
 8008358:	f7f7 ff9e 	bl	8000298 <__aeabi_dsub>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f7 ff96 	bl	8000298 <__aeabi_dsub>
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	f7f7 ff92 	bl	8000298 <__aeabi_dsub>
 8008374:	a31a      	add	r3, pc, #104	; (adr r3, 80083e0 <__ieee754_rem_pio2+0x320>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	4604      	mov	r4, r0
 800837c:	460d      	mov	r5, r1
 800837e:	ec51 0b18 	vmov	r0, r1, d8
 8008382:	f7f8 f941 	bl	8000608 <__aeabi_dmul>
 8008386:	4622      	mov	r2, r4
 8008388:	462b      	mov	r3, r5
 800838a:	f7f7 ff85 	bl	8000298 <__aeabi_dsub>
 800838e:	4604      	mov	r4, r0
 8008390:	460d      	mov	r5, r1
 8008392:	e75f      	b.n	8008254 <__ieee754_rem_pio2+0x194>
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <__ieee754_rem_pio2+0x340>)
 8008396:	4598      	cmp	r8, r3
 8008398:	dd34      	ble.n	8008404 <__ieee754_rem_pio2+0x344>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	f7f7 ff7b 	bl	8000298 <__aeabi_dsub>
 80083a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083a6:	e9ca 0100 	strd	r0, r1, [sl]
 80083aa:	e69d      	b.n	80080e8 <__ieee754_rem_pio2+0x28>
 80083ac:	f3af 8000 	nop.w
 80083b0:	54400000 	.word	0x54400000
 80083b4:	3ff921fb 	.word	0x3ff921fb
 80083b8:	1a626331 	.word	0x1a626331
 80083bc:	3dd0b461 	.word	0x3dd0b461
 80083c0:	1a600000 	.word	0x1a600000
 80083c4:	3dd0b461 	.word	0x3dd0b461
 80083c8:	2e037073 	.word	0x2e037073
 80083cc:	3ba3198a 	.word	0x3ba3198a
 80083d0:	6dc9c883 	.word	0x6dc9c883
 80083d4:	3fe45f30 	.word	0x3fe45f30
 80083d8:	2e000000 	.word	0x2e000000
 80083dc:	3ba3198a 	.word	0x3ba3198a
 80083e0:	252049c1 	.word	0x252049c1
 80083e4:	397b839a 	.word	0x397b839a
 80083e8:	3fe921fb 	.word	0x3fe921fb
 80083ec:	4002d97b 	.word	0x4002d97b
 80083f0:	3ff921fb 	.word	0x3ff921fb
 80083f4:	413921fb 	.word	0x413921fb
 80083f8:	3fe00000 	.word	0x3fe00000
 80083fc:	08009ab0 	.word	0x08009ab0
 8008400:	7fefffff 	.word	0x7fefffff
 8008404:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008408:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800840c:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008410:	460f      	mov	r7, r1
 8008412:	4606      	mov	r6, r0
 8008414:	f7f8 fba8 	bl	8000b68 <__aeabi_d2iz>
 8008418:	f7f8 f88c 	bl	8000534 <__aeabi_i2d>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008428:	f7f7 ff36 	bl	8000298 <__aeabi_dsub>
 800842c:	4b22      	ldr	r3, [pc, #136]	; (80084b8 <__ieee754_rem_pio2+0x3f8>)
 800842e:	2200      	movs	r2, #0
 8008430:	f7f8 f8ea 	bl	8000608 <__aeabi_dmul>
 8008434:	460f      	mov	r7, r1
 8008436:	4606      	mov	r6, r0
 8008438:	f7f8 fb96 	bl	8000b68 <__aeabi_d2iz>
 800843c:	f7f8 f87a 	bl	8000534 <__aeabi_i2d>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800844c:	f7f7 ff24 	bl	8000298 <__aeabi_dsub>
 8008450:	4b19      	ldr	r3, [pc, #100]	; (80084b8 <__ieee754_rem_pio2+0x3f8>)
 8008452:	2200      	movs	r2, #0
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800845c:	ad04      	add	r5, sp, #16
 800845e:	f04f 0803 	mov.w	r8, #3
 8008462:	46a9      	mov	r9, r5
 8008464:	2600      	movs	r6, #0
 8008466:	2700      	movs	r7, #0
 8008468:	4632      	mov	r2, r6
 800846a:	463b      	mov	r3, r7
 800846c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008470:	46c3      	mov	fp, r8
 8008472:	3d08      	subs	r5, #8
 8008474:	f108 38ff 	add.w	r8, r8, #4294967295
 8008478:	f7f8 fb2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800847c:	2800      	cmp	r0, #0
 800847e:	d1f3      	bne.n	8008468 <__ieee754_rem_pio2+0x3a8>
 8008480:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <__ieee754_rem_pio2+0x3fc>)
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	2302      	movs	r3, #2
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4622      	mov	r2, r4
 800848a:	465b      	mov	r3, fp
 800848c:	4651      	mov	r1, sl
 800848e:	4648      	mov	r0, r9
 8008490:	f000 f8d6 	bl	8008640 <__kernel_rem_pio2>
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	4683      	mov	fp, r0
 800849a:	f6bf ae4e 	bge.w	800813a <__ieee754_rem_pio2+0x7a>
 800849e:	e9da 2100 	ldrd	r2, r1, [sl]
 80084a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084a6:	e9ca 2300 	strd	r2, r3, [sl]
 80084aa:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80084ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084b2:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80084b6:	e73f      	b.n	8008338 <__ieee754_rem_pio2+0x278>
 80084b8:	41700000 	.word	0x41700000
 80084bc:	08009b30 	.word	0x08009b30

080084c0 <__kernel_cos>:
 80084c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80084c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80084cc:	ed2d 8b02 	vpush	{d8}
 80084d0:	4680      	mov	r8, r0
 80084d2:	ec43 2b18 	vmov	d8, r2, r3
 80084d6:	4689      	mov	r9, r1
 80084d8:	da04      	bge.n	80084e4 <__kernel_cos+0x24>
 80084da:	f7f8 fb45 	bl	8000b68 <__aeabi_d2iz>
 80084de:	2800      	cmp	r0, #0
 80084e0:	f000 8087 	beq.w	80085f2 <__kernel_cos+0x132>
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 f88c 	bl	8000608 <__aeabi_dmul>
 80084f0:	4b4d      	ldr	r3, [pc, #308]	; (8008628 <__kernel_cos+0x168>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	a33e      	add	r3, pc, #248	; (adr r3, 80085f8 <__kernel_cos+0x138>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	4682      	mov	sl, r0
 8008504:	468b      	mov	fp, r1
 8008506:	4620      	mov	r0, r4
 8008508:	4629      	mov	r1, r5
 800850a:	f7f8 f87d 	bl	8000608 <__aeabi_dmul>
 800850e:	a33c      	add	r3, pc, #240	; (adr r3, 8008600 <__kernel_cos+0x140>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 fec2 	bl	800029c <__adddf3>
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	a339      	add	r3, pc, #228	; (adr r3, 8008608 <__kernel_cos+0x148>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f7 feb7 	bl	8000298 <__aeabi_dsub>
 800852a:	4622      	mov	r2, r4
 800852c:	462b      	mov	r3, r5
 800852e:	f7f8 f86b 	bl	8000608 <__aeabi_dmul>
 8008532:	a337      	add	r3, pc, #220	; (adr r3, 8008610 <__kernel_cos+0x150>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f7 feb0 	bl	800029c <__adddf3>
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	f7f8 f862 	bl	8000608 <__aeabi_dmul>
 8008544:	a334      	add	r3, pc, #208	; (adr r3, 8008618 <__kernel_cos+0x158>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fea5 	bl	8000298 <__aeabi_dsub>
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	f7f8 f859 	bl	8000608 <__aeabi_dmul>
 8008556:	a332      	add	r3, pc, #200	; (adr r3, 8008620 <__kernel_cos+0x160>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe9e 	bl	800029c <__adddf3>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	f7f8 f850 	bl	8000608 <__aeabi_dmul>
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	f7f8 f84c 	bl	8000608 <__aeabi_dmul>
 8008570:	ec53 2b18 	vmov	r2, r3, d8
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	4640      	mov	r0, r8
 800857a:	4649      	mov	r1, r9
 800857c:	f7f8 f844 	bl	8000608 <__aeabi_dmul>
 8008580:	460b      	mov	r3, r1
 8008582:	4602      	mov	r2, r0
 8008584:	4629      	mov	r1, r5
 8008586:	4620      	mov	r0, r4
 8008588:	f7f7 fe86 	bl	8000298 <__aeabi_dsub>
 800858c:	4b27      	ldr	r3, [pc, #156]	; (800862c <__kernel_cos+0x16c>)
 800858e:	429e      	cmp	r6, r3
 8008590:	4680      	mov	r8, r0
 8008592:	4689      	mov	r9, r1
 8008594:	dc0f      	bgt.n	80085b6 <__kernel_cos+0xf6>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4650      	mov	r0, sl
 800859c:	4659      	mov	r1, fp
 800859e:	f7f7 fe7b 	bl	8000298 <__aeabi_dsub>
 80085a2:	460b      	mov	r3, r1
 80085a4:	4922      	ldr	r1, [pc, #136]	; (8008630 <__kernel_cos+0x170>)
 80085a6:	4602      	mov	r2, r0
 80085a8:	2000      	movs	r0, #0
 80085aa:	f7f7 fe75 	bl	8000298 <__aeabi_dsub>
 80085ae:	ecbd 8b02 	vpop	{d8}
 80085b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	4b1f      	ldr	r3, [pc, #124]	; (8008634 <__kernel_cos+0x174>)
 80085b8:	491d      	ldr	r1, [pc, #116]	; (8008630 <__kernel_cos+0x170>)
 80085ba:	429e      	cmp	r6, r3
 80085bc:	bfcc      	ite	gt
 80085be:	4d1e      	ldrgt	r5, [pc, #120]	; (8008638 <__kernel_cos+0x178>)
 80085c0:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80085c4:	2400      	movs	r4, #0
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7f7 fe64 	bl	8000298 <__aeabi_dsub>
 80085d0:	4622      	mov	r2, r4
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	462b      	mov	r3, r5
 80085d8:	4650      	mov	r0, sl
 80085da:	4659      	mov	r1, fp
 80085dc:	f7f7 fe5c 	bl	8000298 <__aeabi_dsub>
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	f7f7 fe58 	bl	8000298 <__aeabi_dsub>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	e7db      	b.n	80085aa <__kernel_cos+0xea>
 80085f2:	490f      	ldr	r1, [pc, #60]	; (8008630 <__kernel_cos+0x170>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	e7da      	b.n	80085ae <__kernel_cos+0xee>
 80085f8:	be8838d4 	.word	0xbe8838d4
 80085fc:	bda8fae9 	.word	0xbda8fae9
 8008600:	bdb4b1c4 	.word	0xbdb4b1c4
 8008604:	3e21ee9e 	.word	0x3e21ee9e
 8008608:	809c52ad 	.word	0x809c52ad
 800860c:	3e927e4f 	.word	0x3e927e4f
 8008610:	19cb1590 	.word	0x19cb1590
 8008614:	3efa01a0 	.word	0x3efa01a0
 8008618:	16c15177 	.word	0x16c15177
 800861c:	3f56c16c 	.word	0x3f56c16c
 8008620:	5555554c 	.word	0x5555554c
 8008624:	3fa55555 	.word	0x3fa55555
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	3fd33332 	.word	0x3fd33332
 8008630:	3ff00000 	.word	0x3ff00000
 8008634:	3fe90000 	.word	0x3fe90000
 8008638:	3fd20000 	.word	0x3fd20000
 800863c:	00000000 	.word	0x00000000

08008640 <__kernel_rem_pio2>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ed2d 8b02 	vpush	{d8}
 8008648:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800864c:	f112 0f14 	cmn.w	r2, #20
 8008650:	9308      	str	r3, [sp, #32]
 8008652:	9101      	str	r1, [sp, #4]
 8008654:	4bc4      	ldr	r3, [pc, #784]	; (8008968 <__kernel_rem_pio2+0x328>)
 8008656:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008658:	900b      	str	r0, [sp, #44]	; 0x2c
 800865a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800865e:	9302      	str	r3, [sp, #8]
 8008660:	9b08      	ldr	r3, [sp, #32]
 8008662:	f103 33ff 	add.w	r3, r3, #4294967295
 8008666:	bfa8      	it	ge
 8008668:	1ed4      	subge	r4, r2, #3
 800866a:	9306      	str	r3, [sp, #24]
 800866c:	bfb2      	itee	lt
 800866e:	2400      	movlt	r4, #0
 8008670:	2318      	movge	r3, #24
 8008672:	fb94 f4f3 	sdivge	r4, r4, r3
 8008676:	f06f 0317 	mvn.w	r3, #23
 800867a:	fb04 3303 	mla	r3, r4, r3, r3
 800867e:	eb03 0a02 	add.w	sl, r3, r2
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	9a06      	ldr	r2, [sp, #24]
 8008686:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008960 <__kernel_rem_pio2+0x320>
 800868a:	eb03 0802 	add.w	r8, r3, r2
 800868e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008690:	1aa7      	subs	r7, r4, r2
 8008692:	ae22      	add	r6, sp, #136	; 0x88
 8008694:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008698:	2500      	movs	r5, #0
 800869a:	4545      	cmp	r5, r8
 800869c:	dd13      	ble.n	80086c6 <__kernel_rem_pio2+0x86>
 800869e:	9b08      	ldr	r3, [sp, #32]
 80086a0:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8008960 <__kernel_rem_pio2+0x320>
 80086a4:	aa22      	add	r2, sp, #136	; 0x88
 80086a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80086aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80086ae:	f04f 0800 	mov.w	r8, #0
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	4598      	cmp	r8, r3
 80086b6:	dc2f      	bgt.n	8008718 <__kernel_rem_pio2+0xd8>
 80086b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80086bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80086c0:	462f      	mov	r7, r5
 80086c2:	2600      	movs	r6, #0
 80086c4:	e01b      	b.n	80086fe <__kernel_rem_pio2+0xbe>
 80086c6:	42ef      	cmn	r7, r5
 80086c8:	d407      	bmi.n	80086da <__kernel_rem_pio2+0x9a>
 80086ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80086ce:	f7f7 ff31 	bl	8000534 <__aeabi_i2d>
 80086d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80086d6:	3501      	adds	r5, #1
 80086d8:	e7df      	b.n	800869a <__kernel_rem_pio2+0x5a>
 80086da:	ec51 0b18 	vmov	r0, r1, d8
 80086de:	e7f8      	b.n	80086d2 <__kernel_rem_pio2+0x92>
 80086e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80086e8:	f7f7 ff8e 	bl	8000608 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086f4:	f7f7 fdd2 	bl	800029c <__adddf3>
 80086f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086fc:	3601      	adds	r6, #1
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	429e      	cmp	r6, r3
 8008702:	f1a7 0708 	sub.w	r7, r7, #8
 8008706:	ddeb      	ble.n	80086e0 <__kernel_rem_pio2+0xa0>
 8008708:	ed9d 7b04 	vldr	d7, [sp, #16]
 800870c:	f108 0801 	add.w	r8, r8, #1
 8008710:	ecab 7b02 	vstmia	fp!, {d7}
 8008714:	3508      	adds	r5, #8
 8008716:	e7cc      	b.n	80086b2 <__kernel_rem_pio2+0x72>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	aa0e      	add	r2, sp, #56	; 0x38
 800871c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008720:	930d      	str	r3, [sp, #52]	; 0x34
 8008722:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008724:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008728:	9c02      	ldr	r4, [sp, #8]
 800872a:	930c      	str	r3, [sp, #48]	; 0x30
 800872c:	00e3      	lsls	r3, r4, #3
 800872e:	930a      	str	r3, [sp, #40]	; 0x28
 8008730:	ab9a      	add	r3, sp, #616	; 0x268
 8008732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008736:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800873a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800873e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008740:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008744:	46c3      	mov	fp, r8
 8008746:	46a1      	mov	r9, r4
 8008748:	f1b9 0f00 	cmp.w	r9, #0
 800874c:	f1a5 0508 	sub.w	r5, r5, #8
 8008750:	dc70      	bgt.n	8008834 <__kernel_rem_pio2+0x1f4>
 8008752:	4652      	mov	r2, sl
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f000 fbee 	bl	8008f38 <scalbn>
 800875c:	2200      	movs	r2, #0
 800875e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	f7f7 ff4f 	bl	8000608 <__aeabi_dmul>
 800876a:	f000 fb65 	bl	8008e38 <floor>
 800876e:	4b7f      	ldr	r3, [pc, #508]	; (800896c <__kernel_rem_pio2+0x32c>)
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 ff49 	bl	8000608 <__aeabi_dmul>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f7 fd8b 	bl	8000298 <__aeabi_dsub>
 8008782:	460f      	mov	r7, r1
 8008784:	4606      	mov	r6, r0
 8008786:	f7f8 f9ef 	bl	8000b68 <__aeabi_d2iz>
 800878a:	9004      	str	r0, [sp, #16]
 800878c:	f7f7 fed2 	bl	8000534 <__aeabi_i2d>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f7 fd7e 	bl	8000298 <__aeabi_dsub>
 800879c:	f1ba 0f00 	cmp.w	sl, #0
 80087a0:	4606      	mov	r6, r0
 80087a2:	460f      	mov	r7, r1
 80087a4:	dd6d      	ble.n	8008882 <__kernel_rem_pio2+0x242>
 80087a6:	1e62      	subs	r2, r4, #1
 80087a8:	ab0e      	add	r3, sp, #56	; 0x38
 80087aa:	9d04      	ldr	r5, [sp, #16]
 80087ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80087b0:	f1ca 0118 	rsb	r1, sl, #24
 80087b4:	fa40 f301 	asr.w	r3, r0, r1
 80087b8:	441d      	add	r5, r3
 80087ba:	408b      	lsls	r3, r1
 80087bc:	1ac0      	subs	r0, r0, r3
 80087be:	ab0e      	add	r3, sp, #56	; 0x38
 80087c0:	9504      	str	r5, [sp, #16]
 80087c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80087c6:	f1ca 0317 	rsb	r3, sl, #23
 80087ca:	fa40 fb03 	asr.w	fp, r0, r3
 80087ce:	f1bb 0f00 	cmp.w	fp, #0
 80087d2:	dd65      	ble.n	80088a0 <__kernel_rem_pio2+0x260>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	2200      	movs	r2, #0
 80087d8:	3301      	adds	r3, #1
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	4615      	mov	r5, r2
 80087de:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80087e2:	4294      	cmp	r4, r2
 80087e4:	f300 809c 	bgt.w	8008920 <__kernel_rem_pio2+0x2e0>
 80087e8:	f1ba 0f00 	cmp.w	sl, #0
 80087ec:	dd07      	ble.n	80087fe <__kernel_rem_pio2+0x1be>
 80087ee:	f1ba 0f01 	cmp.w	sl, #1
 80087f2:	f000 80a8 	beq.w	8008946 <__kernel_rem_pio2+0x306>
 80087f6:	f1ba 0f02 	cmp.w	sl, #2
 80087fa:	f000 80c3 	beq.w	8008984 <__kernel_rem_pio2+0x344>
 80087fe:	f1bb 0f02 	cmp.w	fp, #2
 8008802:	d14d      	bne.n	80088a0 <__kernel_rem_pio2+0x260>
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	4959      	ldr	r1, [pc, #356]	; (8008970 <__kernel_rem_pio2+0x330>)
 800880a:	2000      	movs	r0, #0
 800880c:	f7f7 fd44 	bl	8000298 <__aeabi_dsub>
 8008810:	4606      	mov	r6, r0
 8008812:	460f      	mov	r7, r1
 8008814:	2d00      	cmp	r5, #0
 8008816:	d043      	beq.n	80088a0 <__kernel_rem_pio2+0x260>
 8008818:	4652      	mov	r2, sl
 800881a:	4955      	ldr	r1, [pc, #340]	; (8008970 <__kernel_rem_pio2+0x330>)
 800881c:	2000      	movs	r0, #0
 800881e:	f000 fb8b 	bl	8008f38 <scalbn>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f7f7 fd35 	bl	8000298 <__aeabi_dsub>
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	e035      	b.n	80088a0 <__kernel_rem_pio2+0x260>
 8008834:	4b4f      	ldr	r3, [pc, #316]	; (8008974 <__kernel_rem_pio2+0x334>)
 8008836:	2200      	movs	r2, #0
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fee4 	bl	8000608 <__aeabi_dmul>
 8008840:	f7f8 f992 	bl	8000b68 <__aeabi_d2iz>
 8008844:	f7f7 fe76 	bl	8000534 <__aeabi_i2d>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	ec43 2b18 	vmov	d8, r2, r3
 8008850:	4b49      	ldr	r3, [pc, #292]	; (8008978 <__kernel_rem_pio2+0x338>)
 8008852:	2200      	movs	r2, #0
 8008854:	f7f7 fed8 	bl	8000608 <__aeabi_dmul>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f7 fd1a 	bl	8000298 <__aeabi_dsub>
 8008864:	f7f8 f980 	bl	8000b68 <__aeabi_d2iz>
 8008868:	e9d5 2300 	ldrd	r2, r3, [r5]
 800886c:	f84b 0b04 	str.w	r0, [fp], #4
 8008870:	ec51 0b18 	vmov	r0, r1, d8
 8008874:	f7f7 fd12 	bl	800029c <__adddf3>
 8008878:	f109 39ff 	add.w	r9, r9, #4294967295
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	e762      	b.n	8008748 <__kernel_rem_pio2+0x108>
 8008882:	d106      	bne.n	8008892 <__kernel_rem_pio2+0x252>
 8008884:	1e63      	subs	r3, r4, #1
 8008886:	aa0e      	add	r2, sp, #56	; 0x38
 8008888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800888c:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008890:	e79d      	b.n	80087ce <__kernel_rem_pio2+0x18e>
 8008892:	4b3a      	ldr	r3, [pc, #232]	; (800897c <__kernel_rem_pio2+0x33c>)
 8008894:	2200      	movs	r2, #0
 8008896:	f7f8 f93d 	bl	8000b14 <__aeabi_dcmpge>
 800889a:	2800      	cmp	r0, #0
 800889c:	d13d      	bne.n	800891a <__kernel_rem_pio2+0x2da>
 800889e:	4683      	mov	fp, r0
 80088a0:	2200      	movs	r2, #0
 80088a2:	2300      	movs	r3, #0
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f000 80bd 	beq.w	8008a2c <__kernel_rem_pio2+0x3ec>
 80088b2:	1e65      	subs	r5, r4, #1
 80088b4:	462b      	mov	r3, r5
 80088b6:	2200      	movs	r2, #0
 80088b8:	9902      	ldr	r1, [sp, #8]
 80088ba:	428b      	cmp	r3, r1
 80088bc:	da69      	bge.n	8008992 <__kernel_rem_pio2+0x352>
 80088be:	2a00      	cmp	r2, #0
 80088c0:	f000 8086 	beq.w	80089d0 <__kernel_rem_pio2+0x390>
 80088c4:	ab0e      	add	r3, sp, #56	; 0x38
 80088c6:	f1aa 0a18 	sub.w	sl, sl, #24
 80088ca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80aa 	beq.w	8008a28 <__kernel_rem_pio2+0x3e8>
 80088d4:	4652      	mov	r2, sl
 80088d6:	4926      	ldr	r1, [pc, #152]	; (8008970 <__kernel_rem_pio2+0x330>)
 80088d8:	2000      	movs	r0, #0
 80088da:	f000 fb2d 	bl	8008f38 <scalbn>
 80088de:	ab9a      	add	r3, sp, #616	; 0x268
 80088e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	00ec      	lsls	r4, r5, #3
 80088ea:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80088ee:	46aa      	mov	sl, r5
 80088f0:	f1ba 0f00 	cmp.w	sl, #0
 80088f4:	f280 80d0 	bge.w	8008a98 <__kernel_rem_pio2+0x458>
 80088f8:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008960 <__kernel_rem_pio2+0x320>
 80088fc:	462e      	mov	r6, r5
 80088fe:	2e00      	cmp	r6, #0
 8008900:	f2c0 80fe 	blt.w	8008b00 <__kernel_rem_pio2+0x4c0>
 8008904:	ab72      	add	r3, sp, #456	; 0x1c8
 8008906:	ed8d 8b06 	vstr	d8, [sp, #24]
 800890a:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008980 <__kernel_rem_pio2+0x340>
 800890e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008912:	f04f 0800 	mov.w	r8, #0
 8008916:	1baf      	subs	r7, r5, r6
 8008918:	e0e4      	b.n	8008ae4 <__kernel_rem_pio2+0x4a4>
 800891a:	f04f 0b02 	mov.w	fp, #2
 800891e:	e759      	b.n	80087d4 <__kernel_rem_pio2+0x194>
 8008920:	f8d8 3000 	ldr.w	r3, [r8]
 8008924:	b955      	cbnz	r5, 800893c <__kernel_rem_pio2+0x2fc>
 8008926:	b123      	cbz	r3, 8008932 <__kernel_rem_pio2+0x2f2>
 8008928:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800892c:	f8c8 3000 	str.w	r3, [r8]
 8008930:	2301      	movs	r3, #1
 8008932:	3201      	adds	r2, #1
 8008934:	f108 0804 	add.w	r8, r8, #4
 8008938:	461d      	mov	r5, r3
 800893a:	e752      	b.n	80087e2 <__kernel_rem_pio2+0x1a2>
 800893c:	1acb      	subs	r3, r1, r3
 800893e:	f8c8 3000 	str.w	r3, [r8]
 8008942:	462b      	mov	r3, r5
 8008944:	e7f5      	b.n	8008932 <__kernel_rem_pio2+0x2f2>
 8008946:	1e62      	subs	r2, r4, #1
 8008948:	ab0e      	add	r3, sp, #56	; 0x38
 800894a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008952:	a90e      	add	r1, sp, #56	; 0x38
 8008954:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008958:	e751      	b.n	80087fe <__kernel_rem_pio2+0x1be>
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w
	...
 8008968:	08009c78 	.word	0x08009c78
 800896c:	40200000 	.word	0x40200000
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	3e700000 	.word	0x3e700000
 8008978:	41700000 	.word	0x41700000
 800897c:	3fe00000 	.word	0x3fe00000
 8008980:	08009c38 	.word	0x08009c38
 8008984:	1e62      	subs	r2, r4, #1
 8008986:	ab0e      	add	r3, sp, #56	; 0x38
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008990:	e7df      	b.n	8008952 <__kernel_rem_pio2+0x312>
 8008992:	a90e      	add	r1, sp, #56	; 0x38
 8008994:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008998:	3b01      	subs	r3, #1
 800899a:	430a      	orrs	r2, r1
 800899c:	e78c      	b.n	80088b8 <__kernel_rem_pio2+0x278>
 800899e:	3301      	adds	r3, #1
 80089a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d0fa      	beq.n	800899e <__kernel_rem_pio2+0x35e>
 80089a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089aa:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80089ae:	446a      	add	r2, sp
 80089b0:	3a98      	subs	r2, #152	; 0x98
 80089b2:	920a      	str	r2, [sp, #40]	; 0x28
 80089b4:	9a08      	ldr	r2, [sp, #32]
 80089b6:	18e3      	adds	r3, r4, r3
 80089b8:	18a5      	adds	r5, r4, r2
 80089ba:	aa22      	add	r2, sp, #136	; 0x88
 80089bc:	f104 0801 	add.w	r8, r4, #1
 80089c0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	4543      	cmp	r3, r8
 80089ca:	da04      	bge.n	80089d6 <__kernel_rem_pio2+0x396>
 80089cc:	461c      	mov	r4, r3
 80089ce:	e6ad      	b.n	800872c <__kernel_rem_pio2+0xec>
 80089d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7e4      	b.n	80089a0 <__kernel_rem_pio2+0x360>
 80089d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089dc:	f7f7 fdaa 	bl	8000534 <__aeabi_i2d>
 80089e0:	e8e5 0102 	strd	r0, r1, [r5], #8
 80089e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e6:	46ab      	mov	fp, r5
 80089e8:	461c      	mov	r4, r3
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	2600      	movs	r6, #0
 80089f0:	2700      	movs	r7, #0
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	4599      	cmp	r9, r3
 80089f6:	dd06      	ble.n	8008a06 <__kernel_rem_pio2+0x3c6>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	e8e3 6702 	strd	r6, r7, [r3], #8
 80089fe:	f108 0801 	add.w	r8, r8, #1
 8008a02:	930a      	str	r3, [sp, #40]	; 0x28
 8008a04:	e7df      	b.n	80089c6 <__kernel_rem_pio2+0x386>
 8008a06:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008a0a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f7f7 fc3f 	bl	800029c <__adddf3>
 8008a1e:	f109 0901 	add.w	r9, r9, #1
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	e7e4      	b.n	80089f2 <__kernel_rem_pio2+0x3b2>
 8008a28:	3d01      	subs	r5, #1
 8008a2a:	e74b      	b.n	80088c4 <__kernel_rem_pio2+0x284>
 8008a2c:	f1ca 0200 	rsb	r2, sl, #0
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f000 fa80 	bl	8008f38 <scalbn>
 8008a38:	4ba0      	ldr	r3, [pc, #640]	; (8008cbc <__kernel_rem_pio2+0x67c>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	460f      	mov	r7, r1
 8008a40:	f7f8 f868 	bl	8000b14 <__aeabi_dcmpge>
 8008a44:	b1f8      	cbz	r0, 8008a86 <__kernel_rem_pio2+0x446>
 8008a46:	4b9e      	ldr	r3, [pc, #632]	; (8008cc0 <__kernel_rem_pio2+0x680>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	f7f8 f889 	bl	8000b68 <__aeabi_d2iz>
 8008a56:	4680      	mov	r8, r0
 8008a58:	f7f7 fd6c 	bl	8000534 <__aeabi_i2d>
 8008a5c:	4b97      	ldr	r3, [pc, #604]	; (8008cbc <__kernel_rem_pio2+0x67c>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f7f7 fdd2 	bl	8000608 <__aeabi_dmul>
 8008a64:	460b      	mov	r3, r1
 8008a66:	4602      	mov	r2, r0
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7f7 fc14 	bl	8000298 <__aeabi_dsub>
 8008a70:	f7f8 f87a 	bl	8000b68 <__aeabi_d2iz>
 8008a74:	1c65      	adds	r5, r4, #1
 8008a76:	ab0e      	add	r3, sp, #56	; 0x38
 8008a78:	f10a 0a18 	add.w	sl, sl, #24
 8008a7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a80:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008a84:	e726      	b.n	80088d4 <__kernel_rem_pio2+0x294>
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f8 f86d 	bl	8000b68 <__aeabi_d2iz>
 8008a8e:	ab0e      	add	r3, sp, #56	; 0x38
 8008a90:	4625      	mov	r5, r4
 8008a92:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a96:	e71d      	b.n	80088d4 <__kernel_rem_pio2+0x294>
 8008a98:	ab0e      	add	r3, sp, #56	; 0x38
 8008a9a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008a9e:	f7f7 fd49 	bl	8000534 <__aeabi_i2d>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	f7f7 fdaf 	bl	8000608 <__aeabi_dmul>
 8008aaa:	4b85      	ldr	r3, [pc, #532]	; (8008cc0 <__kernel_rem_pio2+0x680>)
 8008aac:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	f7f7 fda7 	bl	8000608 <__aeabi_dmul>
 8008aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	e715      	b.n	80088f0 <__kernel_rem_pio2+0x2b0>
 8008ac4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008ac8:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008acc:	f7f7 fd9c 	bl	8000608 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ad8:	f7f7 fbe0 	bl	800029c <__adddf3>
 8008adc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ae0:	f108 0801 	add.w	r8, r8, #1
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	4598      	cmp	r8, r3
 8008ae8:	dc01      	bgt.n	8008aee <__kernel_rem_pio2+0x4ae>
 8008aea:	45b8      	cmp	r8, r7
 8008aec:	ddea      	ble.n	8008ac4 <__kernel_rem_pio2+0x484>
 8008aee:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008af2:	ab4a      	add	r3, sp, #296	; 0x128
 8008af4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008af8:	ed87 7b00 	vstr	d7, [r7]
 8008afc:	3e01      	subs	r6, #1
 8008afe:	e6fe      	b.n	80088fe <__kernel_rem_pio2+0x2be>
 8008b00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	dc0b      	bgt.n	8008b1e <__kernel_rem_pio2+0x4de>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc35      	bgt.n	8008b76 <__kernel_rem_pio2+0x536>
 8008b0a:	d059      	beq.n	8008bc0 <__kernel_rem_pio2+0x580>
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	f003 0007 	and.w	r0, r3, #7
 8008b12:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008b16:	ecbd 8b02 	vpop	{d8}
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d1f3      	bne.n	8008b0c <__kernel_rem_pio2+0x4cc>
 8008b24:	ab4a      	add	r3, sp, #296	; 0x128
 8008b26:	4423      	add	r3, r4
 8008b28:	9306      	str	r3, [sp, #24]
 8008b2a:	461c      	mov	r4, r3
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	9502      	str	r5, [sp, #8]
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f1aa 0a08 	sub.w	sl, sl, #8
 8008b38:	dc6b      	bgt.n	8008c12 <__kernel_rem_pio2+0x5d2>
 8008b3a:	46aa      	mov	sl, r5
 8008b3c:	f1ba 0f01 	cmp.w	sl, #1
 8008b40:	f1a4 0408 	sub.w	r4, r4, #8
 8008b44:	f300 8085 	bgt.w	8008c52 <__kernel_rem_pio2+0x612>
 8008b48:	9c06      	ldr	r4, [sp, #24]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	3408      	adds	r4, #8
 8008b4e:	2100      	movs	r1, #0
 8008b50:	2d01      	cmp	r5, #1
 8008b52:	f300 809d 	bgt.w	8008c90 <__kernel_rem_pio2+0x650>
 8008b56:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008b5a:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008b5e:	f1bb 0f00 	cmp.w	fp, #0
 8008b62:	f040 809b 	bne.w	8008c9c <__kernel_rem_pio2+0x65c>
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	e9c3 5600 	strd	r5, r6, [r3]
 8008b6c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008b70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008b74:	e7ca      	b.n	8008b0c <__kernel_rem_pio2+0x4cc>
 8008b76:	3408      	adds	r4, #8
 8008b78:	ab4a      	add	r3, sp, #296	; 0x128
 8008b7a:	441c      	add	r4, r3
 8008b7c:	462e      	mov	r6, r5
 8008b7e:	2000      	movs	r0, #0
 8008b80:	2100      	movs	r1, #0
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	da36      	bge.n	8008bf4 <__kernel_rem_pio2+0x5b4>
 8008b86:	f1bb 0f00 	cmp.w	fp, #0
 8008b8a:	d039      	beq.n	8008c00 <__kernel_rem_pio2+0x5c0>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b92:	9c01      	ldr	r4, [sp, #4]
 8008b94:	e9c4 2300 	strd	r2, r3, [r4]
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008ba0:	f7f7 fb7a 	bl	8000298 <__aeabi_dsub>
 8008ba4:	ae4c      	add	r6, sp, #304	; 0x130
 8008ba6:	2401      	movs	r4, #1
 8008ba8:	42a5      	cmp	r5, r4
 8008baa:	da2c      	bge.n	8008c06 <__kernel_rem_pio2+0x5c6>
 8008bac:	f1bb 0f00 	cmp.w	fp, #0
 8008bb0:	d002      	beq.n	8008bb8 <__kernel_rem_pio2+0x578>
 8008bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008bbe:	e7a5      	b.n	8008b0c <__kernel_rem_pio2+0x4cc>
 8008bc0:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008bc4:	eb0d 0403 	add.w	r4, sp, r3
 8008bc8:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008bcc:	2000      	movs	r0, #0
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	da09      	bge.n	8008be8 <__kernel_rem_pio2+0x5a8>
 8008bd4:	f1bb 0f00 	cmp.w	fp, #0
 8008bd8:	d002      	beq.n	8008be0 <__kernel_rem_pio2+0x5a0>
 8008bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bde:	4619      	mov	r1, r3
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	e9c3 0100 	strd	r0, r1, [r3]
 8008be6:	e791      	b.n	8008b0c <__kernel_rem_pio2+0x4cc>
 8008be8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bec:	f7f7 fb56 	bl	800029c <__adddf3>
 8008bf0:	3d01      	subs	r5, #1
 8008bf2:	e7ed      	b.n	8008bd0 <__kernel_rem_pio2+0x590>
 8008bf4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bf8:	f7f7 fb50 	bl	800029c <__adddf3>
 8008bfc:	3e01      	subs	r6, #1
 8008bfe:	e7c0      	b.n	8008b82 <__kernel_rem_pio2+0x542>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	e7c5      	b.n	8008b92 <__kernel_rem_pio2+0x552>
 8008c06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008c0a:	f7f7 fb47 	bl	800029c <__adddf3>
 8008c0e:	3401      	adds	r4, #1
 8008c10:	e7ca      	b.n	8008ba8 <__kernel_rem_pio2+0x568>
 8008c12:	e9da 8900 	ldrd	r8, r9, [sl]
 8008c16:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008c1a:	9b02      	ldr	r3, [sp, #8]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	4632      	mov	r2, r6
 8008c22:	463b      	mov	r3, r7
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	f7f7 fb38 	bl	800029c <__adddf3>
 8008c2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4640      	mov	r0, r8
 8008c36:	4649      	mov	r1, r9
 8008c38:	f7f7 fb2e 	bl	8000298 <__aeabi_dsub>
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	463b      	mov	r3, r7
 8008c40:	f7f7 fb2c 	bl	800029c <__adddf3>
 8008c44:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008c48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c4c:	ed8a 7b00 	vstr	d7, [sl]
 8008c50:	e76e      	b.n	8008b30 <__kernel_rem_pio2+0x4f0>
 8008c52:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c56:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	463b      	mov	r3, r7
 8008c60:	4649      	mov	r1, r9
 8008c62:	f7f7 fb1b 	bl	800029c <__adddf3>
 8008c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fb11 	bl	8000298 <__aeabi_dsub>
 8008c76:	4632      	mov	r2, r6
 8008c78:	463b      	mov	r3, r7
 8008c7a:	f7f7 fb0f 	bl	800029c <__adddf3>
 8008c7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c86:	ed84 7b00 	vstr	d7, [r4]
 8008c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c8e:	e755      	b.n	8008b3c <__kernel_rem_pio2+0x4fc>
 8008c90:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c94:	f7f7 fb02 	bl	800029c <__adddf3>
 8008c98:	3d01      	subs	r5, #1
 8008c9a:	e759      	b.n	8008b50 <__kernel_rem_pio2+0x510>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	9a01      	ldr	r2, [sp, #4]
 8008ca0:	601d      	str	r5, [r3, #0]
 8008ca2:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008ca6:	605c      	str	r4, [r3, #4]
 8008ca8:	609f      	str	r7, [r3, #8]
 8008caa:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008cae:	60d3      	str	r3, [r2, #12]
 8008cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cb4:	6110      	str	r0, [r2, #16]
 8008cb6:	6153      	str	r3, [r2, #20]
 8008cb8:	e728      	b.n	8008b0c <__kernel_rem_pio2+0x4cc>
 8008cba:	bf00      	nop
 8008cbc:	41700000 	.word	0x41700000
 8008cc0:	3e700000 	.word	0x3e700000
 8008cc4:	00000000 	.word	0x00000000

08008cc8 <__kernel_sin>:
 8008cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	461f      	mov	r7, r3
 8008cce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cd2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008cd6:	ed2d 8b04 	vpush	{d8-d9}
 8008cda:	4604      	mov	r4, r0
 8008cdc:	460d      	mov	r5, r1
 8008cde:	4616      	mov	r6, r2
 8008ce0:	da03      	bge.n	8008cea <__kernel_sin+0x22>
 8008ce2:	f7f7 ff41 	bl	8000b68 <__aeabi_d2iz>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d051      	beq.n	8008d8e <__kernel_sin+0xc6>
 8008cea:	4622      	mov	r2, r4
 8008cec:	462b      	mov	r3, r5
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fc89 	bl	8000608 <__aeabi_dmul>
 8008cf6:	4682      	mov	sl, r0
 8008cf8:	468b      	mov	fp, r1
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fc81 	bl	8000608 <__aeabi_dmul>
 8008d06:	a341      	add	r3, pc, #260	; (adr r3, 8008e0c <__kernel_sin+0x144>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	4689      	mov	r9, r1
 8008d10:	4650      	mov	r0, sl
 8008d12:	4659      	mov	r1, fp
 8008d14:	f7f7 fc78 	bl	8000608 <__aeabi_dmul>
 8008d18:	a33e      	add	r3, pc, #248	; (adr r3, 8008e14 <__kernel_sin+0x14c>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fabb 	bl	8000298 <__aeabi_dsub>
 8008d22:	4652      	mov	r2, sl
 8008d24:	465b      	mov	r3, fp
 8008d26:	f7f7 fc6f 	bl	8000608 <__aeabi_dmul>
 8008d2a:	a33c      	add	r3, pc, #240	; (adr r3, 8008e1c <__kernel_sin+0x154>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fab4 	bl	800029c <__adddf3>
 8008d34:	4652      	mov	r2, sl
 8008d36:	465b      	mov	r3, fp
 8008d38:	f7f7 fc66 	bl	8000608 <__aeabi_dmul>
 8008d3c:	a339      	add	r3, pc, #228	; (adr r3, 8008e24 <__kernel_sin+0x15c>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	f7f7 faa9 	bl	8000298 <__aeabi_dsub>
 8008d46:	4652      	mov	r2, sl
 8008d48:	465b      	mov	r3, fp
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	a337      	add	r3, pc, #220	; (adr r3, 8008e2c <__kernel_sin+0x164>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 faa2 	bl	800029c <__adddf3>
 8008d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5a:	ec41 0b18 	vmov	d8, r0, r1
 8008d5e:	b9e3      	cbnz	r3, 8008d9a <__kernel_sin+0xd2>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4650      	mov	r0, sl
 8008d66:	4659      	mov	r1, fp
 8008d68:	f7f7 fc4e 	bl	8000608 <__aeabi_dmul>
 8008d6c:	a324      	add	r3, pc, #144	; (adr r3, 8008e00 <__kernel_sin+0x138>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fa91 	bl	8000298 <__aeabi_dsub>
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	f7f7 fc45 	bl	8000608 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	f7f7 fa89 	bl	800029c <__adddf3>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	ecbd 8b04 	vpop	{d8-d9}
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <__kernel_sin+0x140>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 fc31 	bl	8000608 <__aeabi_dmul>
 8008da6:	ec53 2b18 	vmov	r2, r3, d8
 8008daa:	ec41 0b19 	vmov	d9, r0, r1
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	ec51 0b19 	vmov	r0, r1, d9
 8008dbe:	f7f7 fa6b 	bl	8000298 <__aeabi_dsub>
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	f7f7 fc1f 	bl	8000608 <__aeabi_dmul>
 8008dca:	4632      	mov	r2, r6
 8008dcc:	463b      	mov	r3, r7
 8008dce:	f7f7 fa63 	bl	8000298 <__aeabi_dsub>
 8008dd2:	a30b      	add	r3, pc, #44	; (adr r3, 8008e00 <__kernel_sin+0x138>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fc12 	bl	8000608 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fa56 	bl	800029c <__adddf3>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fa4e 	bl	8000298 <__aeabi_dsub>
 8008dfc:	e7c5      	b.n	8008d8a <__kernel_sin+0xc2>
 8008dfe:	bf00      	nop
 8008e00:	55555549 	.word	0x55555549
 8008e04:	3fc55555 	.word	0x3fc55555
 8008e08:	3fe00000 	.word	0x3fe00000
 8008e0c:	5acfd57c 	.word	0x5acfd57c
 8008e10:	3de5d93a 	.word	0x3de5d93a
 8008e14:	8a2b9ceb 	.word	0x8a2b9ceb
 8008e18:	3e5ae5e6 	.word	0x3e5ae5e6
 8008e1c:	57b1fe7d 	.word	0x57b1fe7d
 8008e20:	3ec71de3 	.word	0x3ec71de3
 8008e24:	19c161d5 	.word	0x19c161d5
 8008e28:	3f2a01a0 	.word	0x3f2a01a0
 8008e2c:	1110f8a6 	.word	0x1110f8a6
 8008e30:	3f811111 	.word	0x3f811111
 8008e34:	00000000 	.word	0x00000000

08008e38 <floor>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008e40:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008e44:	2e13      	cmp	r6, #19
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	4680      	mov	r8, r0
 8008e50:	dc33      	bgt.n	8008eba <floor+0x82>
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	da14      	bge.n	8008e80 <floor+0x48>
 8008e56:	a334      	add	r3, pc, #208	; (adr r3, 8008f28 <floor+0xf0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fa1e 	bl	800029c <__adddf3>
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	f7f7 fe60 	bl	8000b28 <__aeabi_dcmpgt>
 8008e68:	b138      	cbz	r0, 8008e7a <floor+0x42>
 8008e6a:	2c00      	cmp	r4, #0
 8008e6c:	da57      	bge.n	8008f1e <floor+0xe6>
 8008e6e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008e72:	431d      	orrs	r5, r3
 8008e74:	d001      	beq.n	8008e7a <floor+0x42>
 8008e76:	4c2e      	ldr	r4, [pc, #184]	; (8008f30 <floor+0xf8>)
 8008e78:	2500      	movs	r5, #0
 8008e7a:	4623      	mov	r3, r4
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	e025      	b.n	8008ecc <floor+0x94>
 8008e80:	4f2c      	ldr	r7, [pc, #176]	; (8008f34 <floor+0xfc>)
 8008e82:	4137      	asrs	r7, r6
 8008e84:	ea01 0c07 	and.w	ip, r1, r7
 8008e88:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008e8c:	d01e      	beq.n	8008ecc <floor+0x94>
 8008e8e:	a326      	add	r3, pc, #152	; (adr r3, 8008f28 <floor+0xf0>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fa02 	bl	800029c <__adddf3>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f7f7 fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0ea      	beq.n	8008e7a <floor+0x42>
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	bfbe      	ittt	lt
 8008ea8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008eac:	fa43 f606 	asrlt.w	r6, r3, r6
 8008eb0:	19a4      	addlt	r4, r4, r6
 8008eb2:	ea24 0407 	bic.w	r4, r4, r7
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	e7df      	b.n	8008e7a <floor+0x42>
 8008eba:	2e33      	cmp	r6, #51	; 0x33
 8008ebc:	dd0a      	ble.n	8008ed4 <floor+0x9c>
 8008ebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ec2:	d103      	bne.n	8008ecc <floor+0x94>
 8008ec4:	f7f7 f9ea 	bl	800029c <__adddf3>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4619      	mov	r1, r3
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8008edc:	fa2c f707 	lsr.w	r7, ip, r7
 8008ee0:	4207      	tst	r7, r0
 8008ee2:	d0f3      	beq.n	8008ecc <floor+0x94>
 8008ee4:	a310      	add	r3, pc, #64	; (adr r3, 8008f28 <floor+0xf0>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f9d7 	bl	800029c <__adddf3>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f7f7 fe19 	bl	8000b28 <__aeabi_dcmpgt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0bf      	beq.n	8008e7a <floor+0x42>
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	da02      	bge.n	8008f04 <floor+0xcc>
 8008efe:	2e14      	cmp	r6, #20
 8008f00:	d103      	bne.n	8008f0a <floor+0xd2>
 8008f02:	3401      	adds	r4, #1
 8008f04:	ea25 0507 	bic.w	r5, r5, r7
 8008f08:	e7b7      	b.n	8008e7a <floor+0x42>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008f10:	fa03 f606 	lsl.w	r6, r3, r6
 8008f14:	4435      	add	r5, r6
 8008f16:	4545      	cmp	r5, r8
 8008f18:	bf38      	it	cc
 8008f1a:	18e4      	addcc	r4, r4, r3
 8008f1c:	e7f2      	b.n	8008f04 <floor+0xcc>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	462c      	mov	r4, r5
 8008f22:	e7aa      	b.n	8008e7a <floor+0x42>
 8008f24:	f3af 8000 	nop.w
 8008f28:	8800759c 	.word	0x8800759c
 8008f2c:	7e37e43c 	.word	0x7e37e43c
 8008f30:	bff00000 	.word	0xbff00000
 8008f34:	000fffff 	.word	0x000fffff

08008f38 <scalbn>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008f3e:	4604      	mov	r4, r0
 8008f40:	460d      	mov	r5, r1
 8008f42:	4617      	mov	r7, r2
 8008f44:	460b      	mov	r3, r1
 8008f46:	b986      	cbnz	r6, 8008f6a <scalbn+0x32>
 8008f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f4c:	4303      	orrs	r3, r0
 8008f4e:	d031      	beq.n	8008fb4 <scalbn+0x7c>
 8008f50:	4b37      	ldr	r3, [pc, #220]	; (8009030 <scalbn+0xf8>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	f7f7 fb58 	bl	8000608 <__aeabi_dmul>
 8008f58:	4b36      	ldr	r3, [pc, #216]	; (8009034 <scalbn+0xfc>)
 8008f5a:	429f      	cmp	r7, r3
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	460d      	mov	r5, r1
 8008f60:	da0d      	bge.n	8008f7e <scalbn+0x46>
 8008f62:	a32b      	add	r3, pc, #172	; (adr r3, 8009010 <scalbn+0xd8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	e038      	b.n	8008fdc <scalbn+0xa4>
 8008f6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008f6e:	4296      	cmp	r6, r2
 8008f70:	d10a      	bne.n	8008f88 <scalbn+0x50>
 8008f72:	4602      	mov	r2, r0
 8008f74:	f7f7 f992 	bl	800029c <__adddf3>
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	e01a      	b.n	8008fb4 <scalbn+0x7c>
 8008f7e:	460b      	mov	r3, r1
 8008f80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f84:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008f88:	19b9      	adds	r1, r7, r6
 8008f8a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	dd08      	ble.n	8008fa4 <scalbn+0x6c>
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	a120      	add	r1, pc, #128	; (adr r1, 8009018 <scalbn+0xe0>)
 8008f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f9a:	da1c      	bge.n	8008fd6 <scalbn+0x9e>
 8008f9c:	a120      	add	r1, pc, #128	; (adr r1, 8009020 <scalbn+0xe8>)
 8008f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa2:	e018      	b.n	8008fd6 <scalbn+0x9e>
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	dd08      	ble.n	8008fba <scalbn+0x82>
 8008fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008fbe:	da19      	bge.n	8008ff4 <scalbn+0xbc>
 8008fc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fc4:	429f      	cmp	r7, r3
 8008fc6:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008fca:	dd0a      	ble.n	8008fe2 <scalbn+0xaa>
 8008fcc:	a112      	add	r1, pc, #72	; (adr r1, 8009018 <scalbn+0xe0>)
 8008fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e2      	bne.n	8008f9c <scalbn+0x64>
 8008fd6:	a310      	add	r3, pc, #64	; (adr r3, 8009018 <scalbn+0xe0>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	e7ca      	b.n	8008f78 <scalbn+0x40>
 8008fe2:	a10b      	add	r1, pc, #44	; (adr r1, 8009010 <scalbn+0xd8>)
 8008fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0ba      	beq.n	8008f62 <scalbn+0x2a>
 8008fec:	a10e      	add	r1, pc, #56	; (adr r1, 8009028 <scalbn+0xf0>)
 8008fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff2:	e7b6      	b.n	8008f62 <scalbn+0x2a>
 8008ff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ff8:	3136      	adds	r1, #54	; 0x36
 8008ffa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ffe:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009002:	4620      	mov	r0, r4
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <scalbn+0x100>)
 8009006:	4629      	mov	r1, r5
 8009008:	2200      	movs	r2, #0
 800900a:	e7e7      	b.n	8008fdc <scalbn+0xa4>
 800900c:	f3af 8000 	nop.w
 8009010:	c2f8f359 	.word	0xc2f8f359
 8009014:	01a56e1f 	.word	0x01a56e1f
 8009018:	8800759c 	.word	0x8800759c
 800901c:	7e37e43c 	.word	0x7e37e43c
 8009020:	8800759c 	.word	0x8800759c
 8009024:	fe37e43c 	.word	0xfe37e43c
 8009028:	c2f8f359 	.word	0xc2f8f359
 800902c:	81a56e1f 	.word	0x81a56e1f
 8009030:	43500000 	.word	0x43500000
 8009034:	ffff3cb0 	.word	0xffff3cb0
 8009038:	3c900000 	.word	0x3c900000

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
