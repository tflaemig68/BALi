
BALi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  0800a0a8  0800a0a8  0001a0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad78  0800ad78  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad80  0800ad80  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ad88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000208  0800af90  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800af90  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000944d  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7b  00000000  00000000  00029683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000111c8  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009061  00000000  00000000  0003d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000576cd  00000000  00000000  00046731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009ddfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  0009de50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a15ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a16b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a08c 	.word	0x0800a08c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800a08c 	.word	0x0800a08c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <convDecByteToHex>:

	// LIDAR
	bool enableLIDAR = false;

uint8_t *convDecByteToHex(uint8_t byte)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d803      	bhi.n	8000f7c <convDecByteToHex+0x20>
    {
        temp += '0';
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3330      	adds	r3, #48	; 0x30
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e002      	b.n	8000f82 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3337      	adds	r3, #55	; 0x37
 8000f80:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8000f82:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d803      	bhi.n	8000f9c <convDecByteToHex+0x40>
    {
        temp += '0';
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e002      	b.n	8000fa2 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3337      	adds	r3, #55	; 0x37
 8000fa0:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <convDecByteToHex+0x5c>)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	7013      	strb	r3, [r2, #0]

    return hex;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <convDecByteToHex+0x5c>)
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000228 	.word	0x20000228

08000fbc <RFID_LED>:




void RFID_LED(I2C_TypeDef *i2c, bool LEDon)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	if (LEDon == 1)
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <RFID_LED+0x20>
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDon, 3);
 8000fce:	2303      	movs	r3, #3
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <RFID_LED+0x34>)
 8000fd2:	2150      	movs	r1, #80	; 0x50
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f004 f835 	bl	8005044 <i2cBurstWrite>
	}
	else
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
	}
}
 8000fda:	e005      	b.n	8000fe8 <RFID_LED+0x2c>
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
 8000fdc:	2303      	movs	r3, #3
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <RFID_LED+0x38>)
 8000fe0:	2150      	movs	r1, #80	; 0x50
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f004 f82e 	bl	8005044 <i2cBurstWrite>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <RFID_readCard>:

int8_t RFID_readCard(I2C_TypeDef *i2c, char *CardID)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
	uint8_t readBuffer[14];
	uint8_t len, i, j = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	77bb      	strb	r3, [r7, #30]
	int8_t typeCard = -1;
 8001006:	23ff      	movs	r3, #255	; 0xff
 8001008:	777b      	strb	r3, [r7, #29]
	static int8_t RFID_Status;
	char *p_out;

	switch (step)
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <RFID_readCard+0x128>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d002      	beq.n	8001018 <RFID_readCard+0x20>
 8001012:	2b02      	cmp	r3, #2
 8001014:	d00a      	beq.n	800102c <RFID_readCard+0x34>
 8001016:	e078      	b.n	800110a <RFID_readCard+0x112>
	{
		case 1:
		{
			i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getMifareUID, 2);
 8001018:	2302      	movs	r3, #2
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <RFID_readCard+0x12c>)
 800101c:	2150      	movs	r1, #80	; 0x50
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f004 f810 	bl	8005044 <i2cBurstWrite>
			step = 2;
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <RFID_readCard+0x128>)
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
			break;
 800102a:	e073      	b.n	8001114 <RFID_readCard+0x11c>
		}
		case 2:
		{
			i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xC);
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	230c      	movs	r3, #12
 8001032:	2150      	movs	r1, #80	; 0x50
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f004 f966 	bl	8005306 <i2cBurstRead>
			len = readBuffer[0]-2;
 800103a:	7a3b      	ldrb	r3, [r7, #8]
 800103c:	3b02      	subs	r3, #2
 800103e:	773b      	strb	r3, [r7, #28]
			step = 1;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <RFID_readCard+0x128>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
			if (RFID_Status != readBuffer[2])
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <RFID_readCard+0x130>)
 8001048:	f993 3000 	ldrsb.w	r3, [r3]
 800104c:	461a      	mov	r2, r3
 800104e:	7abb      	ldrb	r3, [r7, #10]
 8001050:	429a      	cmp	r2, r3
 8001052:	d05e      	beq.n	8001112 <RFID_readCard+0x11a>
			{
				typeCard = readBuffer[len];
 8001054:	7f3b      	ldrb	r3, [r7, #28]
 8001056:	3320      	adds	r3, #32
 8001058:	443b      	add	r3, r7
 800105a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800105e:	777b      	strb	r3, [r7, #29]
				j = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	77bb      	strb	r3, [r7, #30]
				for (i = 0; i< 8; i++ )
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
 8001068:	e042      	b.n	80010f0 <RFID_readCard+0xf8>
				{
					if (i < len)
 800106a:	7ffa      	ldrb	r2, [r7, #31]
 800106c:	7f3b      	ldrb	r3, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	d22b      	bcs.n	80010ca <RFID_readCard+0xd2>
					{
						if (i == len-1) { CardID[j++]='-'; }					// add the Type number after this  -
 8001072:	7ffa      	ldrb	r2, [r7, #31]
 8001074:	7f3b      	ldrb	r3, [r7, #28]
 8001076:	3b01      	subs	r3, #1
 8001078:	429a      	cmp	r2, r3
 800107a:	d107      	bne.n	800108c <RFID_readCard+0x94>
 800107c:	7fbb      	ldrb	r3, [r7, #30]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	77ba      	strb	r2, [r7, #30]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	222d      	movs	r2, #45	; 0x2d
 800108a:	701a      	strb	r2, [r3, #0]
						p_out =	(char *) convDecByteToHex(readBuffer[i+3]);
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3303      	adds	r3, #3
 8001090:	3320      	adds	r3, #32
 8001092:	443b      	add	r3, r7
 8001094:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <convDecByteToHex>
 800109e:	61b8      	str	r0, [r7, #24]
						CardID[j++]  = (char)*(p_out++);
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	61ba      	str	r2, [r7, #24]
 80010a6:	7fba      	ldrb	r2, [r7, #30]
 80010a8:	1c51      	adds	r1, r2, #1
 80010aa:	77b9      	strb	r1, [r7, #30]
 80010ac:	4611      	mov	r1, r2
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	440a      	add	r2, r1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	7013      	strb	r3, [r2, #0]
						CardID[j++] =(char)*p_out;
 80010b6:	7fbb      	ldrb	r3, [r7, #30]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	77ba      	strb	r2, [r7, #30]
 80010bc:	461a      	mov	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e00f      	b.n	80010ea <RFID_readCard+0xf2>
					}
					else
					{CardID[j++]='.'; CardID[j++]='.';}
 80010ca:	7fbb      	ldrb	r3, [r7, #30]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	77ba      	strb	r2, [r7, #30]
 80010d0:	461a      	mov	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	222e      	movs	r2, #46	; 0x2e
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	7fbb      	ldrb	r3, [r7, #30]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	77ba      	strb	r2, [r7, #30]
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	222e      	movs	r2, #46	; 0x2e
 80010e8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i< 8; i++ )
 80010ea:	7ffb      	ldrb	r3, [r7, #31]
 80010ec:	3301      	adds	r3, #1
 80010ee:	77fb      	strb	r3, [r7, #31]
 80010f0:	7ffb      	ldrb	r3, [r7, #31]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d9b9      	bls.n	800106a <RFID_readCard+0x72>

				}
				CardID[j]='.';
 80010f6:	7fbb      	ldrb	r3, [r7, #30]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	222e      	movs	r2, #46	; 0x2e
 80010fe:	701a      	strb	r2, [r3, #0]
				RFID_Status = readBuffer[2];
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	b25a      	sxtb	r2, r3
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <RFID_readCard+0x130>)
 8001106:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001108:	e003      	b.n	8001112 <RFID_readCard+0x11a>
		}
		default:
		{
			step = 1;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <RFID_readCard+0x128>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e000      	b.n	8001114 <RFID_readCard+0x11c>
			break;
 8001112:	bf00      	nop
		}
	}
	return typeCard;
 8001114:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000000e 	.word	0x2000000e
 8001124:	2000000c 	.word	0x2000000c
 8001128:	2000022a 	.word	0x2000022a

0800112c <RFID_readFWVersion>:

int8_t RFID_readFWVersion(I2C_TypeDef *i2c, char *strFirmware)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
		uint8_t readBuffer[16];
		uint8_t i, len;
		int8_t status = -1;
 8001136:	23ff      	movs	r3, #255	; 0xff
 8001138:	77bb      	strb	r3, [r7, #30]

		switch (step)
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <RFID_readFWVersion+0xbc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	2b03      	cmp	r3, #3
 8001142:	d848      	bhi.n	80011d6 <RFID_readFWVersion+0xaa>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <RFID_readFWVersion+0x20>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	0800115d 	.word	0x0800115d
 8001150:	0800116d 	.word	0x0800116d
 8001154:	08001181 	.word	0x08001181
 8001158:	080011c7 	.word	0x080011c7
		{
			case 1:
			{
				RFID_LED(i2c,0);
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff2c 	bl	8000fbc <RFID_LED>
				step = 2;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <RFID_readFWVersion+0xbc>)
 8001166:	2202      	movs	r2, #2
 8001168:	701a      	strb	r2, [r3, #0]
				break;
 800116a:	e037      	b.n	80011dc <RFID_readFWVersion+0xb0>
			}
			case 2:
			{
				i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getFirmwareVersion, 2);
 800116c:	2302      	movs	r3, #2
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <RFID_readFWVersion+0xc0>)
 8001170:	2150      	movs	r1, #80	; 0x50
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f003 ff66 	bl	8005044 <i2cBurstWrite>
				step = 3;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <RFID_readFWVersion+0xbc>)
 800117a:	2203      	movs	r2, #3
 800117c:	701a      	strb	r2, [r3, #0]
				break;
 800117e:	e02d      	b.n	80011dc <RFID_readFWVersion+0xb0>
			}
			case 3:
			{
				i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xF);
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	230f      	movs	r3, #15
 8001186:	2150      	movs	r1, #80	; 0x50
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f004 f8bc 	bl	8005306 <i2cBurstRead>
				len = readBuffer[0];
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	777b      	strb	r3, [r7, #29]
				status = readBuffer[2];
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	77bb      	strb	r3, [r7, #30]
				step = 4;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <RFID_readFWVersion+0xbc>)
 8001198:	2204      	movs	r2, #4
 800119a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 800119c:	2300      	movs	r3, #0
 800119e:	77fb      	strb	r3, [r7, #31]
 80011a0:	e00c      	b.n	80011bc <RFID_readFWVersion+0x90>
				{
				 strFirmware[i] = readBuffer[i+3];
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	1cda      	adds	r2, r3, #3
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	3220      	adds	r2, #32
 80011ae:	443a      	add	r2, r7
 80011b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80011b4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	3301      	adds	r3, #1
 80011ba:	77fb      	strb	r3, [r7, #31]
 80011bc:	7ffa      	ldrb	r2, [r7, #31]
 80011be:	7f7b      	ldrb	r3, [r7, #29]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d9ee      	bls.n	80011a2 <RFID_readFWVersion+0x76>
				}

				break;
 80011c4:	e00a      	b.n	80011dc <RFID_readFWVersion+0xb0>
			}
			case 4:
			{
				RFID_LED(i2c,0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fef7 	bl	8000fbc <RFID_LED>
				step = 1;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <RFID_readFWVersion+0xbc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
				break;
 80011d4:	e002      	b.n	80011dc <RFID_readFWVersion+0xb0>
			}

			default:
			{
				step = 1;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <RFID_readFWVersion+0xbc>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
			}
		}
		return status;
 80011dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000000f 	.word	0x2000000f
 80011ec:	20000008 	.word	0x20000008

080011f0 <main>:
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr);



int main(void)
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b0bc      	sub	sp, #240	; 0xf0
 80011f4:	af00      	add	r7, sp, #0
/*  I2C Variables  */

	uint8_t        scanAddr = 0x7F;  //7Bit Adresse
 80011f6:	237f      	movs	r3, #127	; 0x7f
 80011f8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	I2C_TypeDef   *i2c  = I2C1;
 80011fc:	4bc6      	ldr	r3, [pc, #792]	; (8001518 <main+0x328>)
 80011fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	I2C_TypeDef   *i2c2  = I2C2;
 8001202:	4bc6      	ldr	r3, [pc, #792]	; (800151c <main+0x32c>)
 8001204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	int8_t BMA020ret = -1, LIS3DHret=-1, MPU6050ret=-1;
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800120e:	23ff      	movs	r3, #255	; 0xff
 8001210:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	uint32_t   i2cTaskTime = 50UL;
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	bool LIS3DHenable = false;
 8001220:	2300      	movs	r3, #0
 8001222:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	bool BMA020enable = false;
 8001226:	2300      	movs	r3, #0
 8001228:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	bool MPU6050enable = false;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
	bool StepLeftenable = false;
 8001232:	2300      	movs	r3, #0
 8001234:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
	bool StepRightenable = false;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

/*  End I2C Variables  */

	char strCardID[]   = ".  .  .  .  .  .  .\0";
 800123e:	4bb8      	ldr	r3, [pc, #736]	; (8001520 <main+0x330>)
 8001240:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001244:	461d      	mov	r5, r3
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124e:	6020      	str	r0, [r4, #0]
 8001250:	3404      	adds	r4, #4
 8001252:	7021      	strb	r1, [r4, #0]
	char strFirmware[] = ". . .          \0";  // dummyString with NULL
 8001254:	4bb3      	ldr	r3, [pc, #716]	; (8001524 <main+0x334>)
 8001256:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800125a:	461d      	mov	r5, r3
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	7023      	strb	r3, [r4, #0]

	char strX[8],strY[8],strZ[8],strT[8];
	int8_t Temp, XPOS;
	int16_t XYZraw[3],XYZBMA[3],XYZMPU[3],XYZgMPU[3];
	float MPUfilt[3], BMAfilt[3];
	float orgkFilt = 0.02, kFilt;
 8001264:	4bb0      	ldr	r3, [pc, #704]	; (8001528 <main+0x338>)
 8001266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int ButtPos, oldButtPos=0;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	//int testmode = 1;
   	//unsigned int r = 0;

       // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &I2C_Timer, &ST7735_Timer /*, weitere Timer */ };
 8001270:	4aae      	ldr	r2, [pc, #696]	; (800152c <main+0x33c>)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001278:	e883 0003 	stmia.w	r3, {r0, r1}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    BalaHWsetup();
 8001282:	f001 fac9 	bl	8002818 <BalaHWsetup>
    LED_red_on;
 8001286:	210f      	movs	r1, #15
 8001288:	48a9      	ldr	r0, [pc, #676]	; (8001530 <main+0x340>)
 800128a:	f003 fbb7 	bl	80049fc <gpioResetPin>

	//Inits needed for TFT Display
    // Initialisiert den Systick-Timer
	systickInit(SYSTICK_1MS);
 800128e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001292:	f004 fcd1 	bl	8005c38 <systickInit>
	spiInit();
 8001296:	f001 fcdf 	bl	8002c58 <spiInit>
	tftInitR(INITR_REDTAB);
 800129a:	2001      	movs	r0, #1
 800129c:	f001 fd9a 	bl	8002dd4 <tftInitR>

	//display setup
    tftSetRotation(LANDSCAPE_FLIP);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f002 fa81 	bl	80037a8 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 80012a6:	48a3      	ldr	r0, [pc, #652]	; (8001534 <main+0x344>)
 80012a8:	f001 ff56 	bl	8003158 <tftSetFont>
    tftFillScreen(tft_BLACK);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f002 fa61 	bl	8003774 <tftFillScreen>

    /* initialize the rotary push button module */
    initRotaryPushButton();
 80012b2:	f001 fad7 	bl	8002864 <initRotaryPushButton>

    systickSetMillis(&I2C_Timer, i2cTaskTime);
 80012b6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80012ba:	489f      	ldr	r0, [pc, #636]	; (8001538 <main+0x348>)
 80012bc:	f004 fcae 	bl	8005c1c <systickSetMillis>


    LED_red_off;
 80012c0:	210f      	movs	r1, #15
 80012c2:	489b      	ldr	r0, [pc, #620]	; (8001530 <main+0x340>)
 80012c4:	f003 fb6f 	bl	80049a6 <gpioSetPin>

    tftPrint((char *)"I2C Scanner running \0",0,0,0);
 80012c8:	2300      	movs	r3, #0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	489b      	ldr	r0, [pc, #620]	; (800153c <main+0x34c>)
 80012d0:	f002 f9b6 	bl	8003640 <tftPrint>



    while (1)
    {
	   if (true == timerTrigger)
 80012d4:	4b9a      	ldr	r3, [pc, #616]	; (8001540 <main+0x350>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <main+0xfc>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 80012dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fcfe 	bl	8005ce8 <systickUpdateTimerList>
	   }

	   if (isSystickExpired(I2C_Timer))
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <main+0x348>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fcc3 	bl	8005c7c <isSystickExpired>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8607 	beq.w	8001f0c <main+0xd1c>
	   {
		   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80012fe:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001302:	488d      	ldr	r0, [pc, #564]	; (8001538 <main+0x348>)
 8001304:	f004 fcac 	bl	8005c60 <systickSetTicktime>
		   LED_green_off;
 8001308:	210e      	movs	r1, #14
 800130a:	4889      	ldr	r0, [pc, #548]	; (8001530 <main+0x340>)
 800130c:	f003 fb4b 	bl	80049a6 <gpioSetPin>


		   switch (testmode)
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <main+0x354>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b09      	cmp	r3, #9
 8001316:	f200 85f4 	bhi.w	8001f02 <main+0xd12>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <main+0x130>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001349 	.word	0x08001349
 8001324:	08001363 	.word	0x08001363
 8001328:	0800161b 	.word	0x0800161b
 800132c:	08001661 	.word	0x08001661
 8001330:	08001689 	.word	0x08001689
 8001334:	080017ad 	.word	0x080017ad
 8001338:	08001a1f 	.word	0x08001a1f
 800133c:	08001ab1 	.word	0x08001ab1
 8001340:	08001bdf 	.word	0x08001bdf
 8001344:	08001ce7 	.word	0x08001ce7
		   {
		   	   case 0:  //I2C Scan
		   	   {
		   		   //lcd7735_setForeground(ST7735_YELLOW);
		   		   i2cSetClkSpd(i2c,  I2C_CLOCK_100);
 8001348:	2101      	movs	r1, #1
 800134a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800134e:	f003 fd5d 	bl	8004e0c <i2cSetClkSpd>
		   		   i2cSetClkSpd(i2c2,  I2C_CLOCK_400);
 8001352:	2103      	movs	r1, #3
 8001354:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001358:	f003 fd58 	bl	8004e0c <i2cSetClkSpd>
		   		   //tftPrint((char *)".  .  .  .  . \0",66,14,0);
		   		   testmode  = 1;
 800135c:	4b79      	ldr	r3, [pc, #484]	; (8001544 <main+0x354>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
		   	   }
		   	   case 1:  //I2C Scan
		   	   {
		   		   LED_red_on;
 8001362:	210f      	movs	r1, #15
 8001364:	4872      	ldr	r0, [pc, #456]	; (8001530 <main+0x340>)
 8001366:	f003 fb49 	bl	80049fc <gpioResetPin>
		   		   if ( I2C_SCAN(i2c, scanAddr) != 0)
 800136a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800136e:	4619      	mov	r1, r3
 8001370:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001374:	f000 fdee 	bl	8001f54 <I2C_SCAN>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80fc 	beq.w	8001578 <main+0x388>
				   {
					   LED_red_off;
 8001380:	210f      	movs	r1, #15
 8001382:	486b      	ldr	r0, [pc, #428]	; (8001530 <main+0x340>)
 8001384:	f003 fb0f 	bl	80049a6 <gpioSetPin>
					   switch (scanAddr)
 8001388:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800138c:	2b68      	cmp	r3, #104	; 0x68
 800138e:	f300 80f4 	bgt.w	800157a <main+0x38a>
 8001392:	2b50      	cmp	r3, #80	; 0x50
 8001394:	da0a      	bge.n	80013ac <main+0x1bc>
 8001396:	2b38      	cmp	r3, #56	; 0x38
 8001398:	f000 8097 	beq.w	80014ca <main+0x2da>
 800139c:	2b38      	cmp	r3, #56	; 0x38
 800139e:	f300 80ec 	bgt.w	800157a <main+0x38a>
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	d06b      	beq.n	800147e <main+0x28e>
 80013a6:	2b29      	cmp	r3, #41	; 0x29
 80013a8:	d065      	beq.n	8001476 <main+0x286>
 80013aa:	e0e6      	b.n	800157a <main+0x38a>
 80013ac:	3b50      	subs	r3, #80	; 0x50
 80013ae:	2b18      	cmp	r3, #24
 80013b0:	f200 80e3 	bhi.w	800157a <main+0x38a>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <main+0x1cc>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	08001459 	.word	0x08001459
 80013c0:	0800157b 	.word	0x0800157b
 80013c4:	0800157b 	.word	0x0800157b
 80013c8:	0800157b 	.word	0x0800157b
 80013cc:	0800157b 	.word	0x0800157b
 80013d0:	0800157b 	.word	0x0800157b
 80013d4:	0800157b 	.word	0x0800157b
 80013d8:	0800157b 	.word	0x0800157b
 80013dc:	0800157b 	.word	0x0800157b
 80013e0:	0800157b 	.word	0x0800157b
 80013e4:	0800157b 	.word	0x0800157b
 80013e8:	0800157b 	.word	0x0800157b
 80013ec:	0800157b 	.word	0x0800157b
 80013f0:	0800157b 	.word	0x0800157b
 80013f4:	0800157b 	.word	0x0800157b
 80013f8:	0800157b 	.word	0x0800157b
 80013fc:	08001421 	.word	0x08001421
 8001400:	0800143d 	.word	0x0800143d
 8001404:	0800157b 	.word	0x0800157b
 8001408:	0800157b 	.word	0x0800157b
 800140c:	0800157b 	.word	0x0800157b
 8001410:	0800157b 	.word	0x0800157b
 8001414:	0800157b 	.word	0x0800157b
 8001418:	0800157b 	.word	0x0800157b
 800141c:	08001503 	.word	0x08001503
					   {
					   	   case i2cAddr_StepLeft:
						   {
							   StepLeftenable = true;
 8001420:	2301      	movs	r3, #1
 8001422:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							   tftPrint((char *)"<-Left STEP\0",0,14,0);
 8001426:	2300      	movs	r3, #0
 8001428:	220e      	movs	r2, #14
 800142a:	2100      	movs	r1, #0
 800142c:	4846      	ldr	r0, [pc, #280]	; (8001548 <main+0x358>)
 800142e:	f002 f907 	bl	8003640 <tftPrint>
							   stepMotorInit(i2cAddr_StepLeft,1);
 8001432:	2101      	movs	r1, #1
 8001434:	2060      	movs	r0, #96	; 0x60
 8001436:	f002 fec9 	bl	80041cc <stepMotorInit>
						   }
						   break;
 800143a:	e09e      	b.n	800157a <main+0x38a>
					   	   case i2cAddr_StepRight:
						   {
							   StepRightenable = true;
 800143c:	2301      	movs	r3, #1
 800143e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							   tftPrint((char *)"Right->\0",92,14,0);
 8001442:	2300      	movs	r3, #0
 8001444:	220e      	movs	r2, #14
 8001446:	215c      	movs	r1, #92	; 0x5c
 8001448:	4840      	ldr	r0, [pc, #256]	; (800154c <main+0x35c>)
 800144a:	f002 f8f9 	bl	8003640 <tftPrint>
							   stepMotorInit(i2cAddr_StepRight,0);
 800144e:	2100      	movs	r1, #0
 8001450:	2061      	movs	r0, #97	; 0x61
 8001452:	f002 febb 	bl	80041cc <stepMotorInit>
						   }
						   break;
 8001456:	e090      	b.n	800157a <main+0x38a>
					   	   case i2cAddr_RFID:
						   {
							   enableRFID = true;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <main+0x360>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
							   tftPrint((char *)"RFID connected \0",0,56,0);
 800145e:	2300      	movs	r3, #0
 8001460:	2238      	movs	r2, #56	; 0x38
 8001462:	2100      	movs	r1, #0
 8001464:	483b      	ldr	r0, [pc, #236]	; (8001554 <main+0x364>)
 8001466:	f002 f8eb 	bl	8003640 <tftPrint>
							   RFID_LED(i2c,true);
 800146a:	2101      	movs	r1, #1
 800146c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001470:	f7ff fda4 	bl	8000fbc <RFID_LED>
						   }
						   break;
 8001474:	e081      	b.n	800157a <main+0x38a>
						   case i2cAddr_LIDAR:
						   {
							   enableLIDAR = true;
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <main+0x368>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
							   //lcd7735_print((char *)"TOF/LIADR connected \0",0,28,0);
						   }
						   break;
 800147c:	e07d      	b.n	800157a <main+0x38a>
						   case i2cAddr_LIS3DH:
						   {
							   LIS3DHenable = true;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
							   tftPrint((char *)"LIS3DH connected \0",0,28,0);
 8001484:	2300      	movs	r3, #0
 8001486:	221c      	movs	r2, #28
 8001488:	2100      	movs	r1, #0
 800148a:	4834      	ldr	r0, [pc, #208]	; (800155c <main+0x36c>)
 800148c:	f002 f8d8 	bl	8003640 <tftPrint>

							   tftPrint((char *)"Temp:\0",0,40,0);
 8001490:	2300      	movs	r3, #0
 8001492:	2228      	movs	r2, #40	; 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4832      	ldr	r0, [pc, #200]	; (8001560 <main+0x370>)
 8001498:	f002 f8d2 	bl	8003640 <tftPrint>
							   tftPrint((char *)"X:\0",0,50,0);
 800149c:	2300      	movs	r3, #0
 800149e:	2232      	movs	r2, #50	; 0x32
 80014a0:	2100      	movs	r1, #0
 80014a2:	4830      	ldr	r0, [pc, #192]	; (8001564 <main+0x374>)
 80014a4:	f002 f8cc 	bl	8003640 <tftPrint>
							   tftPrint((char *)"Y:\0",0,60,0);
 80014a8:	2300      	movs	r3, #0
 80014aa:	223c      	movs	r2, #60	; 0x3c
 80014ac:	2100      	movs	r1, #0
 80014ae:	482e      	ldr	r0, [pc, #184]	; (8001568 <main+0x378>)
 80014b0:	f002 f8c6 	bl	8003640 <tftPrint>
							   tftPrint((char *)"Z:\0",0,70,0);
 80014b4:	2300      	movs	r3, #0
 80014b6:	2246      	movs	r2, #70	; 0x46
 80014b8:	2100      	movs	r1, #0
 80014ba:	482c      	ldr	r0, [pc, #176]	; (800156c <main+0x37c>)
 80014bc:	f002 f8c0 	bl	8003640 <tftPrint>
							   LED_blue_on;
 80014c0:	210d      	movs	r1, #13
 80014c2:	481b      	ldr	r0, [pc, #108]	; (8001530 <main+0x340>)
 80014c4:	f003 fa9a 	bl	80049fc <gpioResetPin>
						   }
						   break;
 80014c8:	e057      	b.n	800157a <main+0x38a>
						   case i2cAddr_BMA020:
						   {
							   BMA020enable = true;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
							   tftPrint((char *)"BMA020 \0",0,42,0);
 80014d0:	2300      	movs	r3, #0
 80014d2:	222a      	movs	r2, #42	; 0x2a
 80014d4:	2100      	movs	r1, #0
 80014d6:	4826      	ldr	r0, [pc, #152]	; (8001570 <main+0x380>)
 80014d8:	f002 f8b2 	bl	8003640 <tftPrint>
							   tftPrint((char *)"X:\0",0,50,0);
 80014dc:	2300      	movs	r3, #0
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	2100      	movs	r1, #0
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <main+0x374>)
 80014e4:	f002 f8ac 	bl	8003640 <tftPrint>
							   tftPrint((char *)"Y:\0",0,60,0);
 80014e8:	2300      	movs	r3, #0
 80014ea:	223c      	movs	r2, #60	; 0x3c
 80014ec:	2100      	movs	r1, #0
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <main+0x378>)
 80014f0:	f002 f8a6 	bl	8003640 <tftPrint>
							   tftPrint((char *)"Z:\0",0,70,0);
 80014f4:	2300      	movs	r3, #0
 80014f6:	2246      	movs	r2, #70	; 0x46
 80014f8:	2100      	movs	r1, #0
 80014fa:	481c      	ldr	r0, [pc, #112]	; (800156c <main+0x37c>)
 80014fc:	f002 f8a0 	bl	8003640 <tftPrint>
						   }
						   break;
 8001500:	e03b      	b.n	800157a <main+0x38a>
						   case i2cAddr_MPU6050:
						   {
							   MPU6050enable = true;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							   tftPrint((char *)"MPU6050 \0",65,42,0);
 8001508:	2300      	movs	r3, #0
 800150a:	222a      	movs	r2, #42	; 0x2a
 800150c:	2141      	movs	r1, #65	; 0x41
 800150e:	4819      	ldr	r0, [pc, #100]	; (8001574 <main+0x384>)
 8001510:	f002 f896 	bl	8003640 <tftPrint>

						   }
						   break;
 8001514:	e031      	b.n	800157a <main+0x38a>
 8001516:	bf00      	nop
 8001518:	40005400 	.word	0x40005400
 800151c:	40005800 	.word	0x40005800
 8001520:	0800a1f0 	.word	0x0800a1f0
 8001524:	0800a208 	.word	0x0800a208
 8001528:	3ca3d70a 	.word	0x3ca3d70a
 800152c:	0800a21c 	.word	0x0800a21c
 8001530:	40020400 	.word	0x40020400
 8001534:	0800a264 	.word	0x0800a264
 8001538:	20000230 	.word	0x20000230
 800153c:	0800a0a8 	.word	0x0800a0a8
 8001540:	2000022b 	.word	0x2000022b
 8001544:	20000011 	.word	0x20000011
 8001548:	0800a0c0 	.word	0x0800a0c0
 800154c:	0800a0d0 	.word	0x0800a0d0
 8001550:	20000224 	.word	0x20000224
 8001554:	0800a0dc 	.word	0x0800a0dc
 8001558:	20000225 	.word	0x20000225
 800155c:	0800a0f0 	.word	0x0800a0f0
 8001560:	0800a104 	.word	0x0800a104
 8001564:	0800a10c 	.word	0x0800a10c
 8001568:	0800a110 	.word	0x0800a110
 800156c:	0800a114 	.word	0x0800a114
 8001570:	0800a118 	.word	0x0800a118
 8001574:	0800a124 	.word	0x0800a124
					   }
				   }
 8001578:	bf00      	nop

				   if ((scanAddr == 0) && (enableRFID))
 800157a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <main+0x3ac>
 8001582:	4b80      	ldr	r3, [pc, #512]	; (8001784 <main+0x594>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <main+0x3ac>
				   {
					   scanAddr = 0x7F;
 800158a:	237f      	movs	r3, #127	; 0x7f
 800158c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
					   i2cTaskTime = 200UL;
 8001590:	23c8      	movs	r3, #200	; 0xc8
 8001592:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
					   		// SL018 only works with 100kHz
					   testmode = 2;
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <main+0x598>)
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
				   }
				   if ((scanAddr == 0) && ((LIS3DHenable)|| (BMA020enable)||(MPU6050enable)))
 800159c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d118      	bne.n	80015d6 <main+0x3e6>
 80015a4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <main+0x3cc>
 80015ac:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <main+0x3cc>
 80015b4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <main+0x3e6>
				   {
					   LED_blue_on;
 80015bc:	210d      	movs	r1, #13
 80015be:	4873      	ldr	r0, [pc, #460]	; (800178c <main+0x59c>)
 80015c0:	f003 fa1c 	bl	80049fc <gpioResetPin>
					   scanAddr = 0x7F;
 80015c4:	237f      	movs	r3, #127	; 0x7f
 80015c6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
					   testmode = 4;
 80015ca:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <main+0x598>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	701a      	strb	r2, [r3, #0]
					   i2cTaskTime = 200;
 80015d0:	23c8      	movs	r3, #200	; 0xc8
 80015d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

				   }
				   if ((scanAddr == 0))
 80015d6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <main+0x41c>
				   {
					   scanAddr = 0x7F;
 80015de:	237f      	movs	r3, #127	; 0x7f
 80015e0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
					   if (i2c == I2C1)
 80015e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015e8:	4a69      	ldr	r2, [pc, #420]	; (8001790 <main+0x5a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d103      	bne.n	80015f6 <main+0x406>
					   {
						   i2c = I2C2;
 80015ee:	4b69      	ldr	r3, [pc, #420]	; (8001794 <main+0x5a4>)
 80015f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015f4:	e005      	b.n	8001602 <main+0x412>
					   }
					   else
					   {
						   i2c = I2C1;
 80015f6:	4b66      	ldr	r3, [pc, #408]	; (8001790 <main+0x5a0>)
 80015f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
						   tftFillScreen(tft_BLACK);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f002 f8b9 	bl	8003774 <tftFillScreen>
					   }
				       testmode = 0;
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <main+0x598>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
				   }
				   else
				   {
					   scanAddr -=1;
				   }
				   break;
 8001608:	f000 bc96 	b.w	8001f38 <main+0xd48>
					   scanAddr -=1;
 800160c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001610:	3b01      	subs	r3, #1
 8001612:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				   break;
 8001616:	f000 bc8f 	b.w	8001f38 <main+0xd48>
				}
		   	   	case 2:  // read RFID Firmware
				{
					if (RFID_readFWVersion(i2c, (char *)strFirmware) >= 0)
 800161a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800161e:	4619      	mov	r1, r3
 8001620:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001624:	f7ff fd82 	bl	800112c <RFID_readFWVersion>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f2c0 8471 	blt.w	8001f12 <main+0xd22>
					{
						tftPrint((char *)"FW: \0",0,48,0);
 8001630:	2300      	movs	r3, #0
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4858      	ldr	r0, [pc, #352]	; (8001798 <main+0x5a8>)
 8001638:	f002 f802 	bl	8003640 <tftPrint>
						tftPrint((char *)strFirmware,24,48,0);
 800163c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001640:	2300      	movs	r3, #0
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	2118      	movs	r1, #24
 8001646:	f001 fffb 	bl	8003640 <tftPrint>
						testmode = 3;
 800164a:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <main+0x598>)
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
						tftPrint((char *)"ID:\0",0,70,0);
 8001650:	2300      	movs	r3, #0
 8001652:	2246      	movs	r2, #70	; 0x46
 8001654:	2100      	movs	r1, #0
 8001656:	4851      	ldr	r0, [pc, #324]	; (800179c <main+0x5ac>)
 8001658:	f001 fff2 	bl	8003640 <tftPrint>
					else
					{
						;
					}
				}
				break;
 800165c:	f000 bc59 	b.w	8001f12 <main+0xd22>
		   	   	case 3:  // read RFID ID
		   		{
		   			if (RFID_readCard(i2c, strCardID)> 0)
 8001660:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800166a:	f7ff fcc5 	bl	8000ff8 <RFID_readCard>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	f340 8451 	ble.w	8001f18 <main+0xd28>
		   			{
		   				tftPrint((char *)strCardID,24,70,0);
 8001676:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800167a:	2300      	movs	r3, #0
 800167c:	2246      	movs	r2, #70	; 0x46
 800167e:	2118      	movs	r1, #24
 8001680:	f001 ffde 	bl	8003640 <tftPrint>
		   			}
		   		}
		   		break;
 8001684:	f000 bc48 	b.w	8001f18 <main+0xd28>

// 3DG Sensor function
		   	 	case 4:  // 3DGInit Init
		   	 	{
		   	 		LED_green_on;
 8001688:	210e      	movs	r1, #14
 800168a:	4840      	ldr	r0, [pc, #256]	; (800178c <main+0x59c>)
 800168c:	f003 f9b6 	bl	80049fc <gpioResetPin>
		   			if ((BMA020enable) && (BMA020ret < 0))
 8001690:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <main+0x4c2>
 8001698:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800169c:	2b00      	cmp	r3, #0
 800169e:	da08      	bge.n	80016b2 <main+0x4c2>
		   			{
		   				BMA020ret = i2cBMA020_init(i2c,0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80016a6:	f002 f983 	bl	80039b0 <i2cBMA020_init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80016b0:	e002      	b.n	80016b8 <main+0x4c8>
		   			}
		   			else
		   			{ BMA020ret = 0; }
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		   			if ((MPU6050enable) && (MPU6050ret <0))
 80016b8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <main+0x4ea>
 80016c0:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da08      	bge.n	80016da <main+0x4ea>
					{
						MPU6050ret = i2cMPU6050_init(i2c,0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80016ce:	f002 fae1 	bl	8003c94 <i2cMPU6050_init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80016d8:	e002      	b.n	80016e0 <main+0x4f0>
					}
		   			else
		   			{ MPU6050ret = 0; }
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6

					if (BMA020ret > 0)										// no LIS3DH Sensor present
 80016e0:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0c      	ble.n	8001702 <main+0x512>
					{
						tftPrint("no 3DGSensors Present ",0,0,0);
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	482c      	ldr	r0, [pc, #176]	; (80017a0 <main+0x5b0>)
 80016f0:	f001 ffa6 	bl	8003640 <tftPrint>
						i2cTaskTime = 500;
 80016f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						testmode = 1;
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <main+0x598>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
					}



					if ((BMA020ret == 0)  && (MPU6050ret == 0))									// LIS3DH init-procedure finished
 8001702:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 8409 	bne.w	8001f1e <main+0xd2e>
 800170c:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 8404 	bne.w	8001f1e <main+0xd2e>
					{
						if ((StepRightenable)&& (StepLeftenable))
 8001716:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800171a:	2b00      	cmp	r3, #0
 800171c:	d027      	beq.n	800176e <main+0x57e>
 800171e:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <main+0x57e>
						{
							setAccShape(i2cAddr_StepRight, 0);
 8001726:	2100      	movs	r1, #0
 8001728:	2061      	movs	r0, #97	; 0x61
 800172a:	f002 fc7b 	bl	8004024 <setAccShape>
							setAcceleration(i2cAddr_StepRight, Acc);
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <main+0x5b4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	2061      	movs	r0, #97	; 0x61
 8001736:	f002 fc13 	bl	8003f60 <setAcceleration>
							//setIrun(i2cAddr_StepRight, Irun);
							//setIhold(i2cAddr_StepRight, Ihold);

							setAccShape(i2cAddr_StepLeft, 0);
 800173a:	2100      	movs	r1, #0
 800173c:	2060      	movs	r0, #96	; 0x60
 800173e:	f002 fc71 	bl	8004024 <setAccShape>
							setAcceleration(i2cAddr_StepLeft, Acc);
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <main+0x5b4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	2060      	movs	r0, #96	; 0x60
 800174a:	f002 fc09 	bl	8003f60 <setAcceleration>
							//setIrun(i2cAddr_StepLeft, Irun);
							//setIhold(i2cAddr_StepLeft, Ihold);
							i2cTaskTime = StepTaskTime;									// Tasktime for Stepper Balancing 70ms
 800174e:	2307      	movs	r3, #7
 8001750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
							testmode = 9;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <main+0x598>)
 8001756:	2209      	movs	r2, #9
 8001758:	701a      	strb	r2, [r3, #0]
							tftFillScreen(tft_BLACK);
 800175a:	2000      	movs	r0, #0
 800175c:	f002 f80a 	bl	8003774 <tftFillScreen>
							tftPrint("DHBW BALANCER (c)Fl\0",0,0,0);
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	4810      	ldr	r0, [pc, #64]	; (80017a8 <main+0x5b8>)
 8001768:	f001 ff6a 	bl	8003640 <tftPrint>
							testmode = 5;
							timeTMode5 = 100;							// count of cycles in Mode5
						}
					}
				}
				break;
 800176c:	e3d7      	b.n	8001f1e <main+0xd2e>
							i2cTaskTime = 70;									// Tasktime for display 70ms
 800176e:	2346      	movs	r3, #70	; 0x46
 8001770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
							testmode = 5;
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <main+0x598>)
 8001776:	2205      	movs	r2, #5
 8001778:	701a      	strb	r2, [r3, #0]
							timeTMode5 = 100;							// count of cycles in Mode5
 800177a:	2364      	movs	r3, #100	; 0x64
 800177c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
				break;
 8001780:	e3cd      	b.n	8001f1e <main+0xd2e>
 8001782:	bf00      	nop
 8001784:	20000224 	.word	0x20000224
 8001788:	20000011 	.word	0x20000011
 800178c:	40020400 	.word	0x40020400
 8001790:	40005400 	.word	0x40005400
 8001794:	40005800 	.word	0x40005800
 8001798:	0800a130 	.word	0x0800a130
 800179c:	0800a138 	.word	0x0800a138
 80017a0:	0800a140 	.word	0x0800a140
 80017a4:	20000010 	.word	0x20000010
 80017a8:	0800a158 	.word	0x0800a158
		   	 	case 5:  // read 3DG Data
				{
					LED_green_off;
 80017ac:	210e      	movs	r1, #14
 80017ae:	48b5      	ldr	r0, [pc, #724]	; (8001a84 <main+0x894>)
 80017b0:	f003 f8f9 	bl	80049a6 <gpioSetPin>
					LED_red_on;
 80017b4:	210f      	movs	r1, #15
 80017b6:	48b3      	ldr	r0, [pc, #716]	; (8001a84 <main+0x894>)
 80017b8:	f003 f920 	bl	80049fc <gpioResetPin>
					if (BMA020enable)
 80017bc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d064      	beq.n	800188e <main+0x69e>
					{
						i2cBMA020XYZ(i2c,(int16_t *) XYZBMA);
 80017c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017c8:	4619      	mov	r1, r3
 80017ca:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80017ce:	f002 f947 	bl	8003a60 <i2cBMA020XYZ>
						XPOS =15;
 80017d2:	230f      	movs	r3, #15
 80017d4:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						sprintf(strX, "%+5i", XYZBMA[2]); tftPrint((char *)strX,XPOS,50,0);
 80017d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80017dc:	461a      	mov	r2, r3
 80017de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e2:	49a9      	ldr	r1, [pc, #676]	; (8001a88 <main+0x898>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 ff65 	bl	80066b4 <siprintf>
 80017ea:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 80017ee:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80017f2:	2300      	movs	r3, #0
 80017f4:	2232      	movs	r2, #50	; 0x32
 80017f6:	f001 ff23 	bl	8003640 <tftPrint>
						sprintf(strX, "%+5i", -XYZBMA[1]); tftPrint((char *)strX,XPOS,60,0);
 80017fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80017fe:	425a      	negs	r2, r3
 8001800:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001804:	49a0      	ldr	r1, [pc, #640]	; (8001a88 <main+0x898>)
 8001806:	4618      	mov	r0, r3
 8001808:	f004 ff54 	bl	80066b4 <siprintf>
 800180c:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 8001810:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001814:	2300      	movs	r3, #0
 8001816:	223c      	movs	r2, #60	; 0x3c
 8001818:	f001 ff12 	bl	8003640 <tftPrint>
				//		sprintf(strX, "%+5i", XYZBMA[0]); tftPrint((char *)strX,XPOS,70,0);
						AlphaBeta[0] =57* atan((float)-XYZBMA[1]/XYZBMA[2]);
 800181c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001820:	425b      	negs	r3, r3
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800183a:	ee16 0a90 	vmov	r0, s13
 800183e:	f7fe fe8b 	bl	8000558 <__aeabi_f2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f007 f9ad 	bl	8008ba8 <atan>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b8e      	ldr	r3, [pc, #568]	; (8001a8c <main+0x89c>)
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f9aa 	bl	8000bb8 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
						sprintf(strX, "%+4.1f", AlphaBeta[0]); tftPrint((char *)strX,XPOS,80,0);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe74 	bl	8000558 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001878:	4985      	ldr	r1, [pc, #532]	; (8001a90 <main+0x8a0>)
 800187a:	f004 ff1b 	bl	80066b4 <siprintf>
 800187e:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 8001882:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001886:	2300      	movs	r3, #0
 8001888:	2250      	movs	r2, #80	; 0x50
 800188a:	f001 fed9 	bl	8003640 <tftPrint>
					}
					if (MPU6050enable)
 800188e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80a9 	beq.w	80019ea <main+0x7fa>
					{
						i2cMPU6050XYZ(i2c,(int16_t *) XYZMPU);
 8001898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800189c:	4619      	mov	r1, r3
 800189e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80018a2:	f002 fa67 	bl	8003d74 <i2cMPU6050XYZ>
						XPOS =60;
 80018a6:	233c      	movs	r3, #60	; 0x3c
 80018a8:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						const float MPU6050Res = 16.384;
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <main+0x8a4>)
 80018ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
						sprintf(strX, "%+5.0f", XYZMPU[0]/MPU6050Res); tftPrint((char *)strX,XPOS,50,0);
 80018b2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80018c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018c6:	ee16 0a90 	vmov	r0, s13
 80018ca:	f7fe fe45 	bl	8000558 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80018d6:	4970      	ldr	r1, [pc, #448]	; (8001a98 <main+0x8a8>)
 80018d8:	f004 feec 	bl	80066b4 <siprintf>
 80018dc:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 80018e0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80018e4:	2300      	movs	r3, #0
 80018e6:	2232      	movs	r2, #50	; 0x32
 80018e8:	f001 feaa 	bl	8003640 <tftPrint>
						sprintf(strX, "%+5.0f", XYZMPU[1]/MPU6050Res); tftPrint((char *)strX,XPOS,60,0);
 80018ec:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80018fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001900:	ee16 0a90 	vmov	r0, s13
 8001904:	f7fe fe28 	bl	8000558 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001910:	4961      	ldr	r1, [pc, #388]	; (8001a98 <main+0x8a8>)
 8001912:	f004 fecf 	bl	80066b4 <siprintf>
 8001916:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 800191a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800191e:	2300      	movs	r3, #0
 8001920:	223c      	movs	r2, #60	; 0x3c
 8001922:	f001 fe8d 	bl	8003640 <tftPrint>
					//	sprintf(strX, "%+5.0f", XYZMPU[2]/MPU6050Res); tftPrint((char *)strX,XPOS,70,0);
						AlphaBeta[1] =57* atan((float)XYZMPU[1]/XYZMPU[0]);
 8001926:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001942:	ee16 0a90 	vmov	r0, s13
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f007 f929 	bl	8008ba8 <atan>
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <main+0x89c>)
 800195c:	f7fe fe54 	bl	8000608 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f926 	bl	8000bb8 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	613b      	str	r3, [r7, #16]
						sprintf(strX, "%+4.1f", AlphaBeta[1]); tftPrint((char *)strX,XPOS,80,0);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf0 	bl	8000558 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001980:	4943      	ldr	r1, [pc, #268]	; (8001a90 <main+0x8a0>)
 8001982:	f004 fe97 	bl	80066b4 <siprintf>
 8001986:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 800198a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800198e:	2300      	movs	r3, #0
 8001990:	2250      	movs	r2, #80	; 0x50
 8001992:	f001 fe55 	bl	8003640 <tftPrint>

						i2cMPU6050GYRO(i2c,(int16_t *) XYZgMPU);
 8001996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199a:	4619      	mov	r1, r3
 800199c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80019a0:	f002 fa22 	bl	8003de8 <i2cMPU6050GYRO>
						XPOS =115;
 80019a4:	2373      	movs	r3, #115	; 0x73
 80019a6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						const float MPU6050GyroRes = 131;
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <main+0x8ac>)
 80019ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						sprintf(strX, "%+4.0f", XYZgMPU[2]/MPU6050GyroRes); tftPrint((char *)strX,XPOS,70,0);
 80019b0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80019c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019c4:	ee16 0a90 	vmov	r0, s13
 80019c8:	f7fe fdc6 	bl	8000558 <__aeabi_f2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80019d4:	4932      	ldr	r1, [pc, #200]	; (8001aa0 <main+0x8b0>)
 80019d6:	f004 fe6d 	bl	80066b4 <siprintf>
 80019da:	f997 10ae 	ldrsb.w	r1, [r7, #174]	; 0xae
 80019de:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80019e2:	2300      	movs	r3, #0
 80019e4:	2246      	movs	r2, #70	; 0x46
 80019e6:	f001 fe2b 	bl	8003640 <tftPrint>
				//		sprintf(strX, "%+4.0f", XYZgMPU[2]/MPU6050GyroRes); tftPrint((char *)strX,XPOS,70,0);


					}

					if ((timeTMode5--) > 0)
 80019ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	f8a7 20ce 	strh.w	r2, [r7, #206]	; 0xce
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8295 	beq.w	8001f24 <main+0xd34>
					{
						testmode = 8;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <main+0x8b4>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	701a      	strb	r2, [r3, #0]
						i2cTaskTime = StepTaskTime;
 8001a00:	2307      	movs	r3, #7
 8001a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						LED_blue_off;
 8001a06:	210d      	movs	r1, #13
 8001a08:	481e      	ldr	r0, [pc, #120]	; (8001a84 <main+0x894>)
 8001a0a:	f002 ffcc 	bl	80049a6 <gpioSetPin>
						LED_red_off;
 8001a0e:	210f      	movs	r1, #15
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <main+0x894>)
 8001a12:	f002 ffc8 	bl	80049a6 <gpioSetPin>
						tftFillScreen(tft_BLACK);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f001 feac 	bl	8003774 <tftFillScreen>

					}
		   	 	}
				break;
 8001a1c:	e282      	b.n	8001f24 <main+0xd34>
		 	 	case 6:  // LIS3DH Init		   			   		{
				{
					LED_red_off;
 8001a1e:	210f      	movs	r1, #15
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <main+0x894>)
 8001a22:	f002 ffc0 	bl	80049a6 <gpioSetPin>
					LIS3DHret = i2cLIS3DH_init(i2c, 0);
 8001a26:	2100      	movs	r1, #0
 8001a28:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001a2c:	f002 f87c 	bl	8003b28 <i2cLIS3DH_init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
					if (LIS3DHret > 0)										// no LIS3DH Sensor present
 8001a36:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dd0c      	ble.n	8001a58 <main+0x868>
					{
						tftPrint("LIS3DH not Present ",0,0,0);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <main+0x8b8>)
 8001a46:	f001 fdfb 	bl	8003640 <tftPrint>
						i2cTaskTime = 500;
 8001a4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						testmode = 1;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <main+0x8b4>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
					}
					if (LIS3DHret == 0)										// LIS3DH init-procedure finished
 8001a58:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 8264 	bne.w	8001f2a <main+0xd3a>
					{
						tftPrint("(C)23Fl I2C LIS3DH ",0,0,0);
 8001a62:	2300      	movs	r3, #0
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	4810      	ldr	r0, [pc, #64]	; (8001aac <main+0x8bc>)
 8001a6a:	f001 fde9 	bl	8003640 <tftPrint>
						i2cTaskTime = 70;									// Tasktime for display 70ms
 8001a6e:	2346      	movs	r3, #70	; 0x46
 8001a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						testmode = 7;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <main+0x8b4>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	701a      	strb	r2, [r3, #0]
						timeTMode5 = 10;							// count of cycles in Mode5
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
					}
				}
				break;
 8001a80:	e253      	b.n	8001f2a <main+0xd3a>
 8001a82:	bf00      	nop
 8001a84:	40020400 	.word	0x40020400
 8001a88:	0800a170 	.word	0x0800a170
 8001a8c:	404c8000 	.word	0x404c8000
 8001a90:	0800a178 	.word	0x0800a178
 8001a94:	4183126f 	.word	0x4183126f
 8001a98:	0800a180 	.word	0x0800a180
 8001a9c:	43030000 	.word	0x43030000
 8001aa0:	0800a188 	.word	0x0800a188
 8001aa4:	20000011 	.word	0x20000011
 8001aa8:	0800a190 	.word	0x0800a190
 8001aac:	0800a1a4 	.word	0x0800a1a4
		   		case 7:  // read LIS3DH Data
		   		{
		   			LED_blue_on;
 8001ab0:	210d      	movs	r1, #13
 8001ab2:	48db      	ldr	r0, [pc, #876]	; (8001e20 <main+0xc30>)
 8001ab4:	f002 ffa2 	bl	80049fc <gpioResetPin>

		   			Temp = i2cLIS3DH_Temp(i2c);
 8001ab8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001abc:	f002 f8d6 	bl	8003c6c <i2cLIS3DH_Temp>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		   			sprintf(strT, "%+3i", Temp);
 8001ac6:	f997 20af 	ldrsb.w	r2, [r7, #175]	; 0xaf
 8001aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ace:	49d5      	ldr	r1, [pc, #852]	; (8001e24 <main+0xc34>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fdef 	bl	80066b4 <siprintf>
		   			tftPrint((char *)strT,40,40,0);
 8001ad6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ada:	2300      	movs	r3, #0
 8001adc:	2228      	movs	r2, #40	; 0x28
 8001ade:	2128      	movs	r1, #40	; 0x28
 8001ae0:	f001 fdae 	bl	8003640 <tftPrint>

		   			i2cLIS3DH_XYZ(i2c,(int16_t *) XYZraw);
 8001ae4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001aee:	f002 f8ab 	bl	8003c48 <i2cLIS3DH_XYZ>

  					XYZ[0] = (float) XYZraw[0]/0x3FFF;  //skalierung 1mg/digit at +-2g
 8001af2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afe:	eddf 6aca 	vldr	s13, [pc, #808]	; 8001e28 <main+0xc38>
 8001b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b06:	edc7 7a05 	vstr	s15, [r7, #20]
		   			XYZ[1] = (float) XYZraw[1]/0x3FFF;
 8001b0a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b16:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8001e28 <main+0xc38>
 8001b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1e:	edc7 7a06 	vstr	s15, [r7, #24]
		   			XYZ[2] = (float) XYZraw[2]/0x3FFF;
 8001b22:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2e:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001e28 <main+0xc38>
 8001b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b36:	edc7 7a07 	vstr	s15, [r7, #28]
		   			sprintf(strX, "%+6.3f", XYZ[0]);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd0b 	bl	8000558 <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001b4a:	49b8      	ldr	r1, [pc, #736]	; (8001e2c <main+0xc3c>)
 8001b4c:	f004 fdb2 	bl	80066b4 <siprintf>
		   			tftPrint((char *)strX,20,50,0);
 8001b50:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001b54:	2300      	movs	r3, #0
 8001b56:	2232      	movs	r2, #50	; 0x32
 8001b58:	2114      	movs	r1, #20
 8001b5a:	f001 fd71 	bl	8003640 <tftPrint>
		   			sprintf(strY, "%+6.3f", XYZ[1]);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001b6e:	49af      	ldr	r1, [pc, #700]	; (8001e2c <main+0xc3c>)
 8001b70:	f004 fda0 	bl	80066b4 <siprintf>
		   			tftPrint((char *)strY,20,60,0);
 8001b74:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001b78:	2300      	movs	r3, #0
 8001b7a:	223c      	movs	r2, #60	; 0x3c
 8001b7c:	2114      	movs	r1, #20
 8001b7e:	f001 fd5f 	bl	8003640 <tftPrint>
		   			sprintf(strZ, "%+6.3f", XYZ[2]);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fce7 	bl	8000558 <__aeabi_f2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001b92:	49a6      	ldr	r1, [pc, #664]	; (8001e2c <main+0xc3c>)
 8001b94:	f004 fd8e 	bl	80066b4 <siprintf>
		   			tftPrint((char *)strZ,20,70,0);
 8001b98:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2246      	movs	r2, #70	; 0x46
 8001ba0:	2114      	movs	r1, #20
 8001ba2:	f001 fd4d 	bl	8003640 <tftPrint>
					if ((timeTMode5--) > 0)
 8001ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	f8a7 20ce 	strh.w	r2, [r7, #206]	; 0xce
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 81bd 	beq.w	8001f30 <main+0xd40>
					{
						testmode = 8;
 8001bb6:	4b9e      	ldr	r3, [pc, #632]	; (8001e30 <main+0xc40>)
 8001bb8:	2208      	movs	r2, #8
 8001bba:	701a      	strb	r2, [r3, #0]
						tftFillScreen(tft_BLACK);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f001 fdd9 	bl	8003774 <tftFillScreen>
						tftPrint("T:    LIS3DH (C)23Fl",0,0,0);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	489a      	ldr	r0, [pc, #616]	; (8001e34 <main+0xc44>)
 8001bca:	f001 fd39 	bl	8003640 <tftPrint>
						i2cTaskTime = 100;
 8001bce:	2364      	movs	r3, #100	; 0x64
 8001bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						LED_blue_off;
 8001bd4:	210d      	movs	r1, #13
 8001bd6:	4892      	ldr	r0, [pc, #584]	; (8001e20 <main+0xc30>)
 8001bd8:	f002 fee5 	bl	80049a6 <gpioSetPin>

					}
				    break;
 8001bdc:	e1a8      	b.n	8001f30 <main+0xd40>
				}
		   		case 8:  // Scope display the LIS3DH Data
				{
					if (BMA020enable)
 8001bde:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d027      	beq.n	8001c36 <main+0xa46>
					{
						i2cBMA020XYZ(i2c,(int16_t *) XYZBMA);
 8001be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bea:	4619      	mov	r1, r3
 8001bec:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001bf0:	f001 ff36 	bl	8003a60 <i2cBMA020XYZ>
						AlphaBeta[0] = atan((float)-XYZBMA[1]/XYZBMA[2]);
 8001bf4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c02:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c12:	ee16 0a90 	vmov	r0, s13
 8001c16:	f7fe fc9f 	bl	8000558 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f006 ffc1 	bl	8008ba8 <atan>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffc3 	bl	8000bb8 <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]
					}
					if (MPU6050enable)
 8001c36:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <main+0xa9c>
					{
						i2cMPU6050XYZ(i2c,(int16_t *) XYZMPU);
 8001c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c42:	4619      	mov	r1, r3
 8001c44:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001c48:	f002 f894 	bl	8003d74 <i2cMPU6050XYZ>
						AlphaBeta[1] = atan((float)XYZMPU[1]/XYZMPU[0]);
 8001c4c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c58:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c68:	ee16 0a90 	vmov	r0, s13
 8001c6c:	f7fe fc74 	bl	8000558 <__aeabi_f2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f006 ff96 	bl	8008ba8 <atan>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff98 	bl	8000bb8 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]
					}

					//i2cLIS3DH_XYZ(i2c, XYZraw);

					if (fabs(AlphaBeta[1]) < 0.1)
 8001c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c90:	eef0 7ae7 	vabs.f32	s15, s15
 8001c94:	ee17 0a90 	vmov	r0, s15
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	a35e      	add	r3, pc, #376	; (adr r3, 8001e18 <main+0xc28>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <main+0xac4>
					{
						setRotaryColor(LED_GREEN);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 fe77 	bl	80029a0 <setRotaryColor>
 8001cb2:	e002      	b.n	8001cba <main+0xaca>
					}
					else
					{
						setRotaryColor(LED_YELLOW);
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f000 fe73 	bl	80029a0 <setRotaryColor>
					}
					AlphaBeta[0] *=10;
 8001cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc6:	edc7 7a03 	vstr	s15, [r7, #12]
					AlphaBeta[1] *=10;
 8001cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd6:	edc7 7a04 	vstr	s15, [r7, #16]
					AlBeScreen(AlphaBeta);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fa3a 	bl	8002158 <AlBeScreen>


					//testmode = 2;

				}
				break;
 8001ce4:	e128      	b.n	8001f38 <main+0xd48>
		   		case 9:  // Scope display the LIS3DH Data
				{
					if (BMA020enable)
 8001ce6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d029      	beq.n	8001d42 <main+0xb52>
					{
						i2cBMA020XYZ(i2c,(int16_t *) XYZBMA);
 8001cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001cf8:	f001 feb2 	bl	8003a60 <i2cBMA020XYZ>
						getFiltertAccData(XYZBMA, BMAfilt, kFilt);
 8001cfc:	f107 0120 	add.w	r1, r7, #32
 8001d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 f8a7 	bl	8003e5c <getFiltertAccData>
						AlphaBeta[0] = atan((float)-BMAfilt[1]/BMAfilt[2]);
 8001d0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d12:	eeb1 7a67 	vneg.f32	s14, s15
 8001d16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d1e:	ee16 0a90 	vmov	r0, s13
 8001d22:	f7fe fc19 	bl	8000558 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f006 ff3b 	bl	8008ba8 <atan>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff3d 	bl	8000bb8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	60fb      	str	r3, [r7, #12]
					}
					if (MPU6050enable)
 8001d42:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d027      	beq.n	8001d9a <main+0xbaa>
					{
						i2cMPU6050XYZ(i2c,(int16_t *) XYZMPU);
 8001d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001d54:	f002 f80e 	bl	8003d74 <i2cMPU6050XYZ>
						getFiltertAccData(XYZMPU, MPUfilt, kFilt);
 8001d58:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 f879 	bl	8003e5c <getFiltertAccData>
						AlphaBeta[1] = atan((float)MPUfilt[1]/MPUfilt[0]);
 8001d6a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001d6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d76:	ee16 0a90 	vmov	r0, s13
 8001d7a:	f7fe fbed 	bl	8000558 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f006 ff0f 	bl	8008ba8 <atan>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff11 	bl	8000bb8 <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	613b      	str	r3, [r7, #16]
					}

					//i2cLIS3DH_XYZ(i2c, XYZraw);

					if (fabs(AlphaBeta[1]) < 0.1)
 8001d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9e:	eef0 7ae7 	vabs.f32	s15, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbd7 	bl	8000558 <__aeabi_f2d>
 8001daa:	a31b      	add	r3, pc, #108	; (adr r3, 8001e18 <main+0xc28>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fe9c 	bl	8000aec <__aeabi_dcmplt>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <main+0xbd2>
					{
						setRotaryColor(LED_GREEN);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f000 fdf0 	bl	80029a0 <setRotaryColor>
 8001dc0:	e002      	b.n	8001dc8 <main+0xbd8>
					}
					else
					{
						setRotaryColor(LED_YELLOW);
 8001dc2:	2006      	movs	r0, #6
 8001dc4:	f000 fdec 	bl	80029a0 <setRotaryColor>
					}


					int PosLeft = ((float)AlphaBeta[0]*573);
 8001dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dcc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001e38 <main+0xc48>
 8001dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd8:	ee17 3a90 	vmov	r3, s15
 8001ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					int PosRight = ((float)AlphaBeta[1]*573);
 8001de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001e38 <main+0xc48>
 8001de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					if (StepRightenable)
 8001df8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01f      	beq.n	8001e40 <main+0xc50>
					{
						setPosition(i2cAddr_StepRight, PosRight);
 8001e00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001e04:	2061      	movs	r0, #97	; 0x61
 8001e06:	f002 f971 	bl	80040ec <setPosition>
						StepRightenable = false;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001e10:	e01e      	b.n	8001e50 <main+0xc60>
 8001e12:	bf00      	nop
 8001e14:	f3af 8000 	nop.w
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fb99999 	.word	0x3fb99999
 8001e20:	40020400 	.word	0x40020400
 8001e24:	0800a1b8 	.word	0x0800a1b8
 8001e28:	467ffc00 	.word	0x467ffc00
 8001e2c:	0800a1c0 	.word	0x0800a1c0
 8001e30:	20000011 	.word	0x20000011
 8001e34:	0800a1c8 	.word	0x0800a1c8
 8001e38:	440f4000 	.word	0x440f4000
 8001e3c:	447a0000 	.word	0x447a0000
					}
					else
					{
						setPosition(i2cAddr_StepLeft, PosLeft);
 8001e40:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001e44:	2060      	movs	r0, #96	; 0x60
 8001e46:	f002 f951 	bl	80040ec <setPosition>
						StepRightenable = true;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
					}

					ButtPos = getRotaryPosition();
 8001e50:	f000 fe5e 	bl	8002b10 <getRotaryPosition>
 8001e54:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					if (getRotaryPushButton())
 8001e58:	f000 fe36 	bl	8002ac8 <getRotaryPushButton>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <main+0xc80>
					{
						tftPrintInt(ButtPos,120,20,0);
 8001e62:	2300      	movs	r3, #0
 8001e64:	2214      	movs	r2, #20
 8001e66:	2178      	movs	r1, #120	; 0x78
 8001e68:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001e6c:	f001 fbcc 	bl	8003608 <tftPrintInt>
					}

					if (ButtPos != oldButtPos)
 8001e70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d05c      	beq.n	8001f36 <main+0xd46>
					{
						kFilt = orgkFilt+ ((float)ButtPos)/1000;
 8001e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e88:	ed5f 6a14 	vldr	s13, [pc, #-80]	; 8001e3c <main+0xc4c>
 8001e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e90:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
						if (kFilt < 0.001) {kFilt = 0.001;}
 8001e9c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001ea0:	f7fe fb5a 	bl	8000558 <__aeabi_f2d>
 8001ea4:	a329      	add	r3, pc, #164	; (adr r3, 8001f4c <main+0xd5c>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fe1f 	bl	8000aec <__aeabi_dcmplt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <main+0xcca>
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <main+0xd50>)
 8001eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						if (kFilt > 1) {kFilt =1;}
 8001eba:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dd03      	ble.n	8001ed4 <main+0xce4>
 8001ecc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						sprintf(strX, "kFilt %4.3f\0", kFilt);
 8001ed4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001ed8:	f7fe fb3e 	bl	8000558 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001ee4:	4917      	ldr	r1, [pc, #92]	; (8001f44 <main+0xd54>)
 8001ee6:	f004 fbe5 	bl	80066b4 <siprintf>
						tftPrint((char *)strX,10,20,0);
 8001eea:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2214      	movs	r2, #20
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	f001 fba4 	bl	8003640 <tftPrint>
						oldButtPos = ButtPos;
 8001ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					}

					//testmode = 2;

				}
				break;
 8001f00:	e019      	b.n	8001f36 <main+0xd46>
		   		default:
				{
					testmode = 0;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <main+0xd58>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	f7ff b9e4 	b.w	80012d4 <main+0xe4>
				}
		   }  //end switch (testmode)
	   } // end if systickexp
 8001f0c:	bf00      	nop
 8001f0e:	f7ff b9e1 	b.w	80012d4 <main+0xe4>
				break;
 8001f12:	bf00      	nop
 8001f14:	f7ff b9de 	b.w	80012d4 <main+0xe4>
		   		break;
 8001f18:	bf00      	nop
 8001f1a:	f7ff b9db 	b.w	80012d4 <main+0xe4>
				break;
 8001f1e:	bf00      	nop
 8001f20:	f7ff b9d8 	b.w	80012d4 <main+0xe4>
				break;
 8001f24:	bf00      	nop
 8001f26:	f7ff b9d5 	b.w	80012d4 <main+0xe4>
				break;
 8001f2a:	bf00      	nop
 8001f2c:	f7ff b9d2 	b.w	80012d4 <main+0xe4>
				    break;
 8001f30:	bf00      	nop
 8001f32:	f7ff b9cf 	b.w	80012d4 <main+0xe4>
				break;
 8001f36:	bf00      	nop
	   if (true == timerTrigger)
 8001f38:	f7ff b9cc 	b.w	80012d4 <main+0xe4>
 8001f3c:	f3af 8000 	nop.w
 8001f40:	3a83126f 	.word	0x3a83126f
 8001f44:	0800a1e0 	.word	0x0800a1e0
 8001f48:	20000011 	.word	0x20000011
 8001f4c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f50:	3f50624d 	.word	0x3f50624d

08001f54 <I2C_SCAN>:
 */



uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <I2C_SCAN+0xd0>)
 8001f62:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 28
	uint8_t foundAddr = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <I2C_SCAN+0xd4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d102      	bne.n	8001f76 <I2C_SCAN+0x22>
    {
	   port = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	e001      	b.n	8001f7a <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <I2C_SCAN+0xd8>)
 8001f82:	221c      	movs	r2, #28
 8001f84:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <I2C_SCAN+0xd8>)
 8001f88:	221c      	movs	r2, #28
 8001f8a:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f003 fa32 	bl	80053fa <i2cFindSlaveAddr>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <I2C_SCAN+0xd8>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d110      	bne.n	8001fc8 <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <I2C_SCAN+0xdc>)
 8001faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <I2C_SCAN+0xd8>)
 8001fb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6938      	ldr	r0, [r7, #16]
 8001fba:	f001 fb41 	bl	8003640 <tftPrint>
		yPos[port] = 66;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <I2C_SCAN+0xd8>)
 8001fc2:	2142      	movs	r1, #66	; 0x42
 8001fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ffc6 	bl	8000f5c <convDecByteToHex>
 8001fd0:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <I2C_SCAN+0xdc>)
 8001fdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <I2C_SCAN+0xd8>)
 8001fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f001 fb28 	bl	8003640 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <I2C_SCAN+0xd8>)
 8001ff4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	320e      	adds	r2, #14
 8001ffc:	490b      	ldr	r1, [pc, #44]	; (800202c <I2C_SCAN+0xd8>)
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <I2C_SCAN+0xd8>)
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	dd04      	ble.n	8002018 <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <I2C_SCAN+0xd8>)
 8002012:	211c      	movs	r1, #28
 8002014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 8002018:	7bfb      	ldrb	r3, [r7, #15]

}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800a224 	.word	0x0800a224
 8002028:	40005400 	.word	0x40005400
 800202c:	20000014 	.word	0x20000014
 8002030:	2000001c 	.word	0x2000001c

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	2302      	movs	r3, #2
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	2302      	movs	r3, #2
 8002070:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <SystemCoreClockUpdate+0xec>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d011      	beq.n	80020a6 <SystemCoreClockUpdate+0x4e>
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d844      	bhi.n	8002112 <SystemCoreClockUpdate+0xba>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <SystemCoreClockUpdate+0x3e>
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d004      	beq.n	800209e <SystemCoreClockUpdate+0x46>
 8002094:	e03d      	b.n	8002112 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 8002098:	4a2c      	ldr	r2, [pc, #176]	; (800214c <SystemCoreClockUpdate+0xf4>)
 800209a:	601a      	str	r2, [r3, #0]
      break;
 800209c:	e03d      	b.n	800211a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 80020a0:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <SystemCoreClockUpdate+0xf8>)
 80020a2:	601a      	str	r2, [r3, #0]
      break;
 80020a4:	e039      	b.n	800211a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <SystemCoreClockUpdate+0xec>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0d9b      	lsrs	r3, r3, #22
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <SystemCoreClockUpdate+0xec>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ba:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80020c2:	4a23      	ldr	r2, [pc, #140]	; (8002150 <SystemCoreClockUpdate+0xf8>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <SystemCoreClockUpdate+0xec>)
 80020cc:	6852      	ldr	r2, [r2, #4]
 80020ce:	0992      	lsrs	r2, r2, #6
 80020d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e00b      	b.n	80020f4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <SystemCoreClockUpdate+0xf4>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <SystemCoreClockUpdate+0xec>)
 80020e6:	6852      	ldr	r2, [r2, #4]
 80020e8:	0992      	lsrs	r2, r2, #6
 80020ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <SystemCoreClockUpdate+0xec>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 800210e:	6013      	str	r3, [r2, #0]
      break;
 8002110:	e003      	b.n	800211a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <SystemCoreClockUpdate+0xf4>)
 8002116:	601a      	str	r2, [r3, #0]
      break;
 8002118:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <SystemCoreClockUpdate+0xec>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <SystemCoreClockUpdate+0xfc>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <SystemCoreClockUpdate+0xf0>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40023800 	.word	0x40023800
 8002148:	20000024 	.word	0x20000024
 800214c:	00f42400 	.word	0x00f42400
 8002150:	007a1200 	.word	0x007a1200
 8002154:	0800a23c 	.word	0x0800a23c

08002158 <AlBeScreen>:
			else {AlphaBeta[1] +=_pi;}
		}
}

uint16_t AlBeScreen(float *AlphaBeta)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
#define bDots 12

	//const float _pi=3.141;
	const int16_t a_midxyl[3] = {30,40,14};			// alpha circle xpos, ypos ,length
	const int16_t b_midxyl[3] = {100,40,38};		// beta circle xpos, ypos ,length
	const uint16_t aColor = tft_YELLOW;
 8002160:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002164:	83fb      	strh	r3, [r7, #30]
	const uint16_t bColor = tft_MAGENTA;
 8002166:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800216a:	83bb      	strh	r3, [r7, #28]
	static int16_t j, XYa[2][aDots], XYb[2][bDots];								// aDots Wertepaare für Winkeldarstellung alpha
	float xgrad, ygrad;

	// Variables for Oszi Function
	const int16_t oszi[3] = {92,28,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
	const uint16_t osziColor = tft_GREY;
 800216c:	f641 1323 	movw	r3, #6435	; 0x1923
 8002170:	837b      	strh	r3, [r7, #26]

	static int16_t timepos = 0;


	xgrad = cos(AlphaBeta[0])*a_midxyl[2];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9ee 	bl	8000558 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f006 fea0 	bl	8008ec8 <cos>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	4b8d      	ldr	r3, [pc, #564]	; (80023c4 <AlBeScreen+0x26c>)
 800218e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9ce 	bl	8000534 <__aeabi_i2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe fa32 	bl	8000608 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd04 	bl	8000bb8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[0])*a_midxyl[2];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f9cd 	bl	8000558 <__aeabi_f2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f006 ff0b 	bl	8008fe0 <sin>
 80021ca:	4604      	mov	r4, r0
 80021cc:	460d      	mov	r5, r1
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <AlBeScreen+0x26c>)
 80021d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9ad 	bl	8000534 <__aeabi_i2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4620      	mov	r0, r4
 80021e0:	4629      	mov	r1, r5
 80021e2:	f7fe fa11 	bl	8000608 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fce3 	bl	8000bb8 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	613b      	str	r3, [r7, #16]
	for (j = 0; j<aDots; j++ )
 80021f6:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <AlBeScreen+0x270>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	e094      	b.n	8002328 <AlBeScreen+0x1d0>
	{
		tftDrawPixel(XYa[0][j],XYa[1][j],tft_BLACK);
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <AlBeScreen+0x270>)
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	461a      	mov	r2, r3
 8002206:	4b71      	ldr	r3, [pc, #452]	; (80023cc <AlBeScreen+0x274>)
 8002208:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800220c:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <AlBeScreen+0x270>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <AlBeScreen+0x274>)
 8002214:	3306      	adds	r3, #6
 8002216:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	f000 fe7d 	bl	8002f1c <tftDrawPixel>
		XYa[0][j] = lround(a_midxyl[0] + xgrad*(2*j - (float)aDots+1)/(aDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002222:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <AlBeScreen+0x26c>)
 8002224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002230:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <AlBeScreen+0x270>)
 8002232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002244:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800224c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002250:	edd7 7a05 	vldr	s15, [r7, #20]
 8002254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002258:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800225c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	ee17 0a90 	vmov	r0, s15
 8002268:	f7fe f976 	bl	8000558 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f006 fe71 	bl	8008f5a <lround>
 8002278:	4601      	mov	r1, r0
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <AlBeScreen+0x270>)
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	461a      	mov	r2, r3
 8002282:	b209      	sxth	r1, r1
 8002284:	4b51      	ldr	r3, [pc, #324]	; (80023cc <AlBeScreen+0x274>)
 8002286:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYa[1][j] = lround(a_midxyl[1] + ygrad*(2*j - (float)aDots+1)/(aDots-1));
 800228a:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <AlBeScreen+0x26c>)
 800228c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002298:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <AlBeScreen+0x270>)
 800229a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80022b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80022c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f942 	bl	8000558 <__aeabi_f2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f006 fe3d 	bl	8008f5a <lround>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <AlBeScreen+0x270>)
 80022e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e8:	b211      	sxth	r1, r2
 80022ea:	4a38      	ldr	r2, [pc, #224]	; (80023cc <AlBeScreen+0x274>)
 80022ec:	3306      	adds	r3, #6
 80022ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYa[0][j],XYa[1][j],aColor);
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <AlBeScreen+0x270>)
 80022f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <AlBeScreen+0x274>)
 80022fc:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <AlBeScreen+0x270>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	4a31      	ldr	r2, [pc, #196]	; (80023cc <AlBeScreen+0x274>)
 8002308:	3306      	adds	r3, #6
 800230a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800230e:	8bfa      	ldrh	r2, [r7, #30]
 8002310:	4619      	mov	r1, r3
 8002312:	f000 fe03 	bl	8002f1c <tftDrawPixel>
	for (j = 0; j<aDots; j++ )
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <AlBeScreen+0x270>)
 8002318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231c:	b29b      	uxth	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	b21a      	sxth	r2, r3
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <AlBeScreen+0x270>)
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <AlBeScreen+0x270>)
 800232a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232e:	2b05      	cmp	r3, #5
 8002330:	f77f af65 	ble.w	80021fe <AlBeScreen+0xa6>
	}
	//lcd7735_drawPixel(a_midxyl[0],a_midxyl[1],ST7735_RED);

	xgrad = cos(AlphaBeta[1])*b_midxyl[2];
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f90c 	bl	8000558 <__aeabi_f2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f006 fdbe 	bl	8008ec8 <cos>
 800234c:	4604      	mov	r4, r0
 800234e:	460d      	mov	r5, r1
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <AlBeScreen+0x278>)
 8002352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8ec 	bl	8000534 <__aeabi_i2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fe f950 	bl	8000608 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc22 	bl	8000bb8 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[1])*b_midxyl[2];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8ea 	bl	8000558 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f006 fe28 	bl	8008fe0 <sin>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <AlBeScreen+0x278>)
 8002396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8ca 	bl	8000534 <__aeabi_i2d>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fe f92e 	bl	8000608 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fc00 	bl	8000bb8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
	for (j = 0; j<bDots; j++ )
 80023bc:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <AlBeScreen+0x270>)
 80023be:	2200      	movs	r2, #0
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	e09c      	b.n	80024fe <AlBeScreen+0x3a6>
 80023c4:	0800a24c 	.word	0x0800a24c
 80023c8:	20000234 	.word	0x20000234
 80023cc:	20000238 	.word	0x20000238
 80023d0:	0800a254 	.word	0x0800a254
	{
		tftDrawPixel(XYb[0][j],XYb[1][j],tft_BLACK);
 80023d4:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <AlBeScreen+0x4fc>)
 80023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <AlBeScreen+0x500>)
 80023de:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 80023e2:	4b9c      	ldr	r3, [pc, #624]	; (8002654 <AlBeScreen+0x4fc>)
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	4a9b      	ldr	r2, [pc, #620]	; (8002658 <AlBeScreen+0x500>)
 80023ea:	330c      	adds	r3, #12
 80023ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	f000 fd92 	bl	8002f1c <tftDrawPixel>
		XYb[0][j] = lround(b_midxyl[0] + xgrad*(2*j - (float)bDots+1)/(bDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 80023f8:	4b98      	ldr	r3, [pc, #608]	; (800265c <AlBeScreen+0x504>)
 80023fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002406:	4b93      	ldr	r3, [pc, #588]	; (8002654 <AlBeScreen+0x4fc>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800241a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800241e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002422:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002426:	edd7 7a05 	vldr	s15, [r7, #20]
 800242a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800242e:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002432:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	ee17 0a90 	vmov	r0, s15
 800243e:	f7fe f88b 	bl	8000558 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f006 fd86 	bl	8008f5a <lround>
 800244e:	4601      	mov	r1, r0
 8002450:	4b80      	ldr	r3, [pc, #512]	; (8002654 <AlBeScreen+0x4fc>)
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	461a      	mov	r2, r3
 8002458:	b209      	sxth	r1, r1
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <AlBeScreen+0x500>)
 800245c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYb[1][j] = lround(b_midxyl[1] + ygrad*(2*j - (float)bDots+1)/(bDots-1));
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <AlBeScreen+0x504>)
 8002462:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246e:	4b79      	ldr	r3, [pc, #484]	; (8002654 <AlBeScreen+0x4fc>)
 8002470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002482:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002496:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 800249a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	ee17 0a90 	vmov	r0, s15
 80024a6:	f7fe f857 	bl	8000558 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f006 fd52 	bl	8008f5a <lround>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <AlBeScreen+0x4fc>)
 80024ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024be:	b211      	sxth	r1, r2
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <AlBeScreen+0x500>)
 80024c2:	330c      	adds	r3, #12
 80024c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tftDrawPixel(XYb[0][j],XYb[1][j],bColor);
 80024c8:	4b62      	ldr	r3, [pc, #392]	; (8002654 <AlBeScreen+0x4fc>)
 80024ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <AlBeScreen+0x500>)
 80024d2:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <AlBeScreen+0x4fc>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	4a5e      	ldr	r2, [pc, #376]	; (8002658 <AlBeScreen+0x500>)
 80024de:	330c      	adds	r3, #12
 80024e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e4:	8bba      	ldrh	r2, [r7, #28]
 80024e6:	4619      	mov	r1, r3
 80024e8:	f000 fd18 	bl	8002f1c <tftDrawPixel>
	for (j = 0; j<bDots; j++ )
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <AlBeScreen+0x4fc>)
 80024ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	4b56      	ldr	r3, [pc, #344]	; (8002654 <AlBeScreen+0x4fc>)
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	4b55      	ldr	r3, [pc, #340]	; (8002654 <AlBeScreen+0x4fc>)
 8002500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002504:	2b0b      	cmp	r3, #11
 8002506:	f77f af65 	ble.w	80023d4 <AlBeScreen+0x27c>
	}



// kleines Oszi als Zeitmitschrieb
	int16_t Ya = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[0]/_pi);			// - ST7735 y = 0 upper line inverter direct to y Scale
 800250a:	4b55      	ldr	r3, [pc, #340]	; (8002660 <AlBeScreen+0x508>)
 800250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <AlBeScreen+0x508>)
 8002514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002664 <AlBeScreen+0x50c>
 800252e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	b21b      	sxth	r3, r3
 800253c:	b29b      	uxth	r3, r3
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	b29b      	uxth	r3, r3
 8002542:	81fb      	strh	r3, [r7, #14]
	int16_t Yb = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[1]/_pi);
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <AlBeScreen+0x508>)
 8002546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b44      	ldr	r3, [pc, #272]	; (8002660 <AlBeScreen+0x508>)
 800254e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002566:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002664 <AlBeScreen+0x50c>
 800256a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	b21b      	sxth	r3, r3
 8002578:	b29b      	uxth	r3, r3
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	b29b      	uxth	r3, r3
 800257e:	81bb      	strh	r3, [r7, #12]
	int16_t osziHight = oszi[1]*2;
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <AlBeScreen+0x508>)
 8002582:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002586:	b29b      	uxth	r3, r3
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	817b      	strh	r3, [r7, #10]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <AlBeScreen+0x510>)
 8002590:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <AlBeScreen+0x508>)
 8002596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b30      	ldr	r3, [pc, #192]	; (8002660 <AlBeScreen+0x508>)
 800259e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b219      	sxth	r1, r3
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025b0:	f000 fd72 	bl	8003098 <tftDrawFastVLine>
	if (Ya == Yb)
 80025b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d10a      	bne.n	80025d6 <AlBeScreen+0x47e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <AlBeScreen+0x510>)
 80025c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80025ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fca4 	bl	8002f1c <tftDrawPixel>
 80025d4:	e011      	b.n	80025fa <AlBeScreen+0x4a2>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <AlBeScreen+0x510>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	8bfa      	ldrh	r2, [r7, #30]
 80025de:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fc9a 	bl	8002f1c <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <AlBeScreen+0x510>)
 80025ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ee:	8bba      	ldrh	r2, [r7, #28]
 80025f0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fc91 	bl	8002f1c <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <AlBeScreen+0x510>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	b29b      	uxth	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	b29b      	uxth	r3, r3
 8002606:	b21a      	sxth	r2, r3
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <AlBeScreen+0x510>)
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <AlBeScreen+0x510>)
 800260e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <AlBeScreen+0x508>)
 8002614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dd02      	ble.n	8002622 <AlBeScreen+0x4ca>
	{
		timepos = 0;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <AlBeScreen+0x510>)
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <AlBeScreen+0x510>)
 8002624:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <AlBeScreen+0x508>)
 800262a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <AlBeScreen+0x508>)
 8002630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002634:	0fda      	lsrs	r2, r3, #31
 8002636:	4413      	add	r3, r2
 8002638:	105b      	asrs	r3, r3, #1
 800263a:	b21a      	sxth	r2, r3
 800263c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002640:	f000 fd2a 	bl	8003098 <tftDrawFastVLine>
	return timepos;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <AlBeScreen+0x510>)
 8002646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264a:	b29b      	uxth	r3, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bdb0      	pop	{r4, r5, r7, pc}
 8002654:	20000234 	.word	0x20000234
 8002658:	20000250 	.word	0x20000250
 800265c:	0800a254 	.word	0x0800a254
 8002660:	0800a25c 	.word	0x0800a25c
 8002664:	40490625 	.word	0x40490625
 8002668:	20000280 	.word	0x20000280

0800266c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002670:	f7ff fce0 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <LoopForever+0xe>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800269a:	f003 fb73 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800269e:	f7fe fda7 	bl	80011f0 <main>

080026a2 <LoopForever>:

LoopForever:
  b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   r0, =_estack
 80026a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80026b0:	0800ad88 	.word	0x0800ad88
  ldr r2, =_sbss
 80026b4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80026b8:	200002d0 	.word	0x200002d0

080026bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>
	...

080026c0 <i2cActivate>:
// Init hardware



void i2cActivate()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <i2cActivate+0xc8>)
 80026c8:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <i2cActivate+0xcc>)
 80026cc:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <i2cActivate+0xd0>)
 80026d0:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f002 fb66 	bl	8004da4 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 f853 	bl	8004784 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 80026de:	2202      	movs	r2, #2
 80026e0:	2108      	movs	r1, #8
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f002 f914 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 80026e8:	2204      	movs	r2, #4
 80026ea:	2108      	movs	r1, #8
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f002 f9b1 	bl	8004a54 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 80026f2:	2202      	movs	r2, #2
 80026f4:	2109      	movs	r1, #9
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f002 f90a 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 80026fc:	2204      	movs	r2, #4
 80026fe:	2109      	movs	r1, #9
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f002 f9a7 	bl	8004a54 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8002706:	2201      	movs	r2, #1
 8002708:	2108      	movs	r1, #8
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f002 fa0b 	bl	8004b26 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8002710:	2201      	movs	r2, #1
 8002712:	2109      	movs	r1, #9
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f002 fa06 	bl	8004b26 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800271a:	2300      	movs	r3, #0
 800271c:	2211      	movs	r2, #17
 800271e:	2100      	movs	r1, #0
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f002 fbf1 	bl	8004f08 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f002 fe56 	bl	80053d8 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	f002 fb39 	bl	8004da4 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 8002732:	2202      	movs	r2, #2
 8002734:	210a      	movs	r1, #10
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f002 f8ea 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 800273c:	2204      	movs	r2, #4
 800273e:	210a      	movs	r1, #10
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f002 f987 	bl	8004a54 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 8002746:	2202      	movs	r2, #2
 8002748:	2103      	movs	r1, #3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f002 f8e0 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 8002750:	2209      	movs	r2, #9
 8002752:	2103      	movs	r1, #3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f002 f97d 	bl	8004a54 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 800275a:	2201      	movs	r2, #1
 800275c:	210a      	movs	r1, #10
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f002 f9e1 	bl	8004b26 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8002764:	2201      	movs	r2, #1
 8002766:	2103      	movs	r1, #3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f002 f9dc 	bl	8004b26 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800276e:	2300      	movs	r3, #0
 8002770:	2211      	movs	r2, #17
 8002772:	2100      	movs	r1, #0
 8002774:	68b8      	ldr	r0, [r7, #8]
 8002776:	f002 fbc7 	bl	8004f08 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f002 fe2c 	bl	80053d8 <i2cEnableDevice>
#endif /* BALA2024 */
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40005400 	.word	0x40005400
 800278c:	40005800 	.word	0x40005800
 8002790:	40020400 	.word	0x40020400

08002794 <ledActivate>:




void ledActivate(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8002798:	481e      	ldr	r0, [pc, #120]	; (8002814 <ledActivate+0x80>)
 800279a:	f002 f855 	bl	8004848 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800279e:	2201      	movs	r2, #1
 80027a0:	210f      	movs	r1, #15
 80027a2:	481c      	ldr	r0, [pc, #112]	; (8002814 <ledActivate+0x80>)
 80027a4:	f002 f8b4 	bl	8004910 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 80027a8:	2200      	movs	r2, #0
 80027aa:	210f      	movs	r1, #15
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <ledActivate+0x80>)
 80027ae:	f002 f9ba 	bl	8004b26 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 80027b2:	2201      	movs	r2, #1
 80027b4:	210f      	movs	r1, #15
 80027b6:	4817      	ldr	r0, [pc, #92]	; (8002814 <ledActivate+0x80>)
 80027b8:	f002 f9fe 	bl	8004bb8 <gpioSelectPushPullMode>
    LED_red_off;
 80027bc:	210f      	movs	r1, #15
 80027be:	4815      	ldr	r0, [pc, #84]	; (8002814 <ledActivate+0x80>)
 80027c0:	f002 f8f1 	bl	80049a6 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 80027c4:	2201      	movs	r2, #1
 80027c6:	210e      	movs	r1, #14
 80027c8:	4812      	ldr	r0, [pc, #72]	; (8002814 <ledActivate+0x80>)
 80027ca:	f002 f8a1 	bl	8004910 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 80027ce:	2200      	movs	r2, #0
 80027d0:	210e      	movs	r1, #14
 80027d2:	4810      	ldr	r0, [pc, #64]	; (8002814 <ledActivate+0x80>)
 80027d4:	f002 f9a7 	bl	8004b26 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 80027d8:	2201      	movs	r2, #1
 80027da:	210e      	movs	r1, #14
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <ledActivate+0x80>)
 80027de:	f002 f9eb 	bl	8004bb8 <gpioSelectPushPullMode>
    LED_green_off;
 80027e2:	210e      	movs	r1, #14
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <ledActivate+0x80>)
 80027e6:	f002 f8de 	bl	80049a6 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 80027ea:	2201      	movs	r2, #1
 80027ec:	210d      	movs	r1, #13
 80027ee:	4809      	ldr	r0, [pc, #36]	; (8002814 <ledActivate+0x80>)
 80027f0:	f002 f88e 	bl	8004910 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 80027f4:	2200      	movs	r2, #0
 80027f6:	210d      	movs	r1, #13
 80027f8:	4806      	ldr	r0, [pc, #24]	; (8002814 <ledActivate+0x80>)
 80027fa:	f002 f994 	bl	8004b26 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 80027fe:	2201      	movs	r2, #1
 8002800:	210d      	movs	r1, #13
 8002802:	4804      	ldr	r0, [pc, #16]	; (8002814 <ledActivate+0x80>)
 8002804:	f002 f9d8 	bl	8004bb8 <gpioSelectPushPullMode>
    LED_blue_off;
 8002808:	210d      	movs	r1, #13
 800280a:	4802      	ldr	r0, [pc, #8]	; (8002814 <ledActivate+0x80>)
 800280c:	f002 f8cb 	bl	80049a6 <gpioSetPin>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020400 	.word	0x40020400

08002818 <BalaHWsetup>:




void BalaHWsetup(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 800281c:	f7ff ffba 	bl	8002794 <ledActivate>
   i2cActivate();
 8002820:	f7ff ff4e 	bl	80026c0 <i2cActivate>

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8002868:	482b      	ldr	r0, [pc, #172]	; (8002918 <initRotaryPushButton+0xb4>)
 800286a:	f001 ff8b 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOB);
 800286e:	482b      	ldr	r0, [pc, #172]	; (800291c <initRotaryPushButton+0xb8>)
 8002870:	f001 ff88 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOC);
 8002874:	482a      	ldr	r0, [pc, #168]	; (8002920 <initRotaryPushButton+0xbc>)
 8002876:	f001 ff85 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOD);
 800287a:	482a      	ldr	r0, [pc, #168]	; (8002924 <initRotaryPushButton+0xc0>)
 800287c:	f001 ff82 	bl	8004784 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
}
 8002882:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <initRotaryPushButton+0xc4>)
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <initRotaryPushButton+0xc4>)
 800288a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288e:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	4821      	ldr	r0, [pc, #132]	; (800291c <initRotaryPushButton+0xb8>)
 8002896:	f002 f83b 	bl	8004910 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 800289a:	2201      	movs	r2, #1
 800289c:	2100      	movs	r1, #0
 800289e:	481f      	ldr	r0, [pc, #124]	; (800291c <initRotaryPushButton+0xb8>)
 80028a0:	f002 f98a 	bl	8004bb8 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2101      	movs	r1, #1
 80028a8:	481c      	ldr	r0, [pc, #112]	; (800291c <initRotaryPushButton+0xb8>)
 80028aa:	f002 f831 	bl	8004910 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 80028ae:	2201      	movs	r2, #1
 80028b0:	2101      	movs	r1, #1
 80028b2:	481a      	ldr	r0, [pc, #104]	; (800291c <initRotaryPushButton+0xb8>)
 80028b4:	f002 f980 	bl	8004bb8 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 80028b8:	2200      	movs	r2, #0
 80028ba:	210a      	movs	r1, #10
 80028bc:	4816      	ldr	r0, [pc, #88]	; (8002918 <initRotaryPushButton+0xb4>)
 80028be:	f002 f827 	bl	8004910 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 80028c2:	2201      	movs	r2, #1
 80028c4:	210a      	movs	r1, #10
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <initRotaryPushButton+0xb4>)
 80028c8:	f002 f976 	bl	8004bb8 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 80028cc:	f001 fd04 	bl	80042d8 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 80028d0:	2100      	movs	r1, #0
 80028d2:	4812      	ldr	r0, [pc, #72]	; (800291c <initRotaryPushButton+0xb8>)
 80028d4:	f001 fd1c 	bl	8004310 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 80028d8:	210a      	movs	r1, #10
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <initRotaryPushButton+0xb4>)
 80028dc:	f001 fd18 	bl	8004310 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f001 fdc9 	bl	8004478 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 80028e6:	200a      	movs	r0, #10
 80028e8:	f001 fdc6 	bl	8004478 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 80028ec:	2101      	movs	r1, #1
 80028ee:	2000      	movs	r0, #0
 80028f0:	f001 fde4 	bl	80044bc <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 80028f4:	2100      	movs	r1, #0
 80028f6:	200a      	movs	r0, #10
 80028f8:	f001 fde0 	bl	80044bc <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 80028fc:	2006      	movs	r0, #6
 80028fe:	f7ff ff93 	bl	8002828 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 8002902:	2028      	movs	r0, #40	; 0x28
 8002904:	f7ff ff90 	bl	8002828 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002908:	b662      	cpsie	i
}
 800290a:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <initRotaryPushButton+0xc8>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40023800 	.word	0x40023800
 800292c:	20000289 	.word	0x20000289

08002930 <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8002934:	4815      	ldr	r0, [pc, #84]	; (800298c <initRotaryPushButtonLED+0x5c>)
 8002936:	f001 ff25 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOB);
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <initRotaryPushButtonLED+0x60>)
 800293c:	f001 ff22 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOC);
 8002940:	4814      	ldr	r0, [pc, #80]	; (8002994 <initRotaryPushButtonLED+0x64>)
 8002942:	f001 ff1f 	bl	8004784 <gpioInitPort>
	gpioInitPort(GPIOD);
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <initRotaryPushButtonLED+0x68>)
 8002948:	f001 ff1c 	bl	8004784 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 800294c:	2201      	movs	r2, #1
 800294e:	210f      	movs	r1, #15
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <initRotaryPushButtonLED+0x60>)
 8002952:	f001 ffdd 	bl	8004910 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 8002956:	2201      	movs	r2, #1
 8002958:	210e      	movs	r1, #14
 800295a:	480d      	ldr	r0, [pc, #52]	; (8002990 <initRotaryPushButtonLED+0x60>)
 800295c:	f001 ffd8 	bl	8004910 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 8002960:	2201      	movs	r2, #1
 8002962:	210d      	movs	r1, #13
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <initRotaryPushButtonLED+0x60>)
 8002966:	f001 ffd3 	bl	8004910 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 800296a:	210f      	movs	r1, #15
 800296c:	4808      	ldr	r0, [pc, #32]	; (8002990 <initRotaryPushButtonLED+0x60>)
 800296e:	f002 f81a 	bl	80049a6 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 8002972:	210e      	movs	r1, #14
 8002974:	4806      	ldr	r0, [pc, #24]	; (8002990 <initRotaryPushButtonLED+0x60>)
 8002976:	f002 f816 	bl	80049a6 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 800297a:	210d      	movs	r1, #13
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <initRotaryPushButtonLED+0x60>)
 800297e:	f002 f812 	bl	80049a6 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <initRotaryPushButtonLED+0x6c>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	2000028a 	.word	0x2000028a

080029a0 <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 80029aa:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <setRotaryColor+0x120>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 80029b8:	f7ff ffba 	bl	8002930 <initRotaryPushButtonLED>
	}

	switch(color)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b07      	cmp	r3, #7
 80029c0:	d87a      	bhi.n	8002ab8 <setRotaryColor+0x118>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <setRotaryColor+0x28>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029e9 	.word	0x080029e9
 80029cc:	08002a03 	.word	0x08002a03
 80029d0:	08002a1d 	.word	0x08002a1d
 80029d4:	08002a37 	.word	0x08002a37
 80029d8:	08002a51 	.word	0x08002a51
 80029dc:	08002a6b 	.word	0x08002a6b
 80029e0:	08002a85 	.word	0x08002a85
 80029e4:	08002a9f 	.word	0x08002a9f
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 80029e8:	210f      	movs	r1, #15
 80029ea:	4836      	ldr	r0, [pc, #216]	; (8002ac4 <setRotaryColor+0x124>)
 80029ec:	f001 ffdb 	bl	80049a6 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 80029f0:	210e      	movs	r1, #14
 80029f2:	4834      	ldr	r0, [pc, #208]	; (8002ac4 <setRotaryColor+0x124>)
 80029f4:	f001 ffd7 	bl	80049a6 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 80029f8:	210d      	movs	r1, #13
 80029fa:	4832      	ldr	r0, [pc, #200]	; (8002ac4 <setRotaryColor+0x124>)
 80029fc:	f001 ffd3 	bl	80049a6 <gpioSetPin>
			break;
 8002a00:	e05a      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 8002a02:	210f      	movs	r1, #15
 8002a04:	482f      	ldr	r0, [pc, #188]	; (8002ac4 <setRotaryColor+0x124>)
 8002a06:	f001 fff9 	bl	80049fc <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8002a0a:	210e      	movs	r1, #14
 8002a0c:	482d      	ldr	r0, [pc, #180]	; (8002ac4 <setRotaryColor+0x124>)
 8002a0e:	f001 ffca 	bl	80049a6 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8002a12:	210d      	movs	r1, #13
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <setRotaryColor+0x124>)
 8002a16:	f001 ffc6 	bl	80049a6 <gpioSetPin>
			break;
 8002a1a:	e04d      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	4829      	ldr	r0, [pc, #164]	; (8002ac4 <setRotaryColor+0x124>)
 8002a20:	f001 ffc1 	bl	80049a6 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8002a24:	210e      	movs	r1, #14
 8002a26:	4827      	ldr	r0, [pc, #156]	; (8002ac4 <setRotaryColor+0x124>)
 8002a28:	f001 ffe8 	bl	80049fc <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8002a2c:	210d      	movs	r1, #13
 8002a2e:	4825      	ldr	r0, [pc, #148]	; (8002ac4 <setRotaryColor+0x124>)
 8002a30:	f001 ffb9 	bl	80049a6 <gpioSetPin>
			break;
 8002a34:	e040      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 8002a36:	210f      	movs	r1, #15
 8002a38:	4822      	ldr	r0, [pc, #136]	; (8002ac4 <setRotaryColor+0x124>)
 8002a3a:	f001 ffb4 	bl	80049a6 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 8002a3e:	210e      	movs	r1, #14
 8002a40:	4820      	ldr	r0, [pc, #128]	; (8002ac4 <setRotaryColor+0x124>)
 8002a42:	f001 ffb0 	bl	80049a6 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 8002a46:	210d      	movs	r1, #13
 8002a48:	481e      	ldr	r0, [pc, #120]	; (8002ac4 <setRotaryColor+0x124>)
 8002a4a:	f001 ffd7 	bl	80049fc <gpioResetPin>
			break;
 8002a4e:	e033      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 8002a50:	210f      	movs	r1, #15
 8002a52:	481c      	ldr	r0, [pc, #112]	; (8002ac4 <setRotaryColor+0x124>)
 8002a54:	f001 ffd2 	bl	80049fc <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8002a58:	210e      	movs	r1, #14
 8002a5a:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <setRotaryColor+0x124>)
 8002a5c:	f001 ffa3 	bl	80049a6 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 8002a60:	210d      	movs	r1, #13
 8002a62:	4818      	ldr	r0, [pc, #96]	; (8002ac4 <setRotaryColor+0x124>)
 8002a64:	f001 ffca 	bl	80049fc <gpioResetPin>
			break;
 8002a68:	e026      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	4815      	ldr	r0, [pc, #84]	; (8002ac4 <setRotaryColor+0x124>)
 8002a6e:	f001 ff9a 	bl	80049a6 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8002a72:	210e      	movs	r1, #14
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <setRotaryColor+0x124>)
 8002a76:	f001 ffc1 	bl	80049fc <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8002a7a:	210d      	movs	r1, #13
 8002a7c:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <setRotaryColor+0x124>)
 8002a7e:	f001 ffbd 	bl	80049fc <gpioResetPin>
			break;
 8002a82:	e019      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 8002a84:	210f      	movs	r1, #15
 8002a86:	480f      	ldr	r0, [pc, #60]	; (8002ac4 <setRotaryColor+0x124>)
 8002a88:	f001 ffb8 	bl	80049fc <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8002a8c:	210e      	movs	r1, #14
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <setRotaryColor+0x124>)
 8002a90:	f001 ffb4 	bl	80049fc <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8002a94:	210d      	movs	r1, #13
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <setRotaryColor+0x124>)
 8002a98:	f001 ff85 	bl	80049a6 <gpioSetPin>
			break;
 8002a9c:	e00c      	b.n	8002ab8 <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <setRotaryColor+0x124>)
 8002aa2:	f001 ffab 	bl	80049fc <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8002aa6:	210e      	movs	r1, #14
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <setRotaryColor+0x124>)
 8002aaa:	f001 ffa7 	bl	80049fc <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8002aae:	210d      	movs	r1, #13
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <setRotaryColor+0x124>)
 8002ab2:	f001 ffa3 	bl	80049fc <gpioResetPin>
			break;
 8002ab6:	bf00      	nop
	}
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000028a 	.word	0x2000028a
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <getRotaryPushButton+0x3c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 8002adc:	f7ff fec2 	bl	8002864 <initRotaryPushButton>
		return ERROR_VALUE;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <getRotaryPushButton+0x40>)
 8002ae2:	e00a      	b.n	8002afa <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <getRotaryPushButton+0x44>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <getRotaryPushButton+0x44>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <getRotaryPushButton+0x44>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8002af8:	687b      	ldr	r3, [r7, #4]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000289 	.word	0x20000289
 8002b08:	ffff0001 	.word	0xffff0001
 8002b0c:	20000288 	.word	0x20000288

08002b10 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <getRotaryPosition+0x24>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f083 0301 	eor.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <getRotaryPosition+0x28>)
 8002b24:	e001      	b.n	8002b2a <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <getRotaryPosition+0x2c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	20000289 	.word	0x20000289
 8002b38:	ffff0001 	.word	0xffff0001
 8002b3c:	20000284 	.word	0x20000284

08002b40 <EXTI0_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for ROT A.
 *               Checks ROT B and updates the position accordingly.
 */
void ROTARY_A_HANDLER(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8002b44:	2101      	movs	r1, #1
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <EXTI0_IRQHandler+0x44>)
 8002b48:	f002 f893 	bl	8004c72 <gpioGetPinState>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <EXTI0_IRQHandler+0x48>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <EXTI0_IRQHandler+0x48>)
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e004      	b.n	8002b68 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <EXTI0_IRQHandler+0x48>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <EXTI0_IRQHandler+0x48>)
 8002b66:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <EXTI0_IRQHandler+0x4c>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <EXTI0_IRQHandler+0x4c>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <EXTI0_IRQHandler+0x4c>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6153      	str	r3, [r2, #20]
	}
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40020400 	.word	0x40020400
 8002b88:	20000284 	.word	0x20000284
 8002b8c:	40013c00 	.word	0x40013c00

08002b90 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <EXTI15_10_IRQHandler+0x2c>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <EXTI15_10_IRQHandler+0x30>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <EXTI15_10_IRQHandler+0x30>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <EXTI15_10_IRQHandler+0x30>)
 8002bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb0:	6153      	str	r3, [r2, #20]
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000288 	.word	0x20000288
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4803      	ldr	r0, [pc, #12]	; (8002bdc <delayms+0x18>)
 8002bd0:	f003 f8b4 	bl	8005d3c <systickDelay>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000022c 	.word	0x2000022c

08002be0 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <tftSPISenddata+0x20>)
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	4904      	ldr	r1, [pc, #16]	; (8002c04 <tftSPISenddata+0x24>)
 8002bf4:	f002 ff93 	bl	8005b1e <spiWriteByte>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000002c 	.word	0x2000002c
 8002c04:	40020000 	.word	0x40020000

08002c08 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 8002c12:	2105      	movs	r1, #5
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <tftSendCmd+0x24>)
 8002c16:	f001 fef1 	bl	80049fc <gpioResetPin>
    tftSPISenddata(cmd);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ffdf 	bl	8002be0 <tftSPISenddata>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020400 	.word	0x40020400

08002c30 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <tftSendData+0x24>)
 8002c3e:	f001 feb2 	bl	80049a6 <gpioSetPin>
    tftSPISenddata(data);
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ffcb 	bl	8002be0 <tftSPISenddata>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020400 	.word	0x40020400

08002c58 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8002c5e:	4825      	ldr	r0, [pc, #148]	; (8002cf4 <spiInit+0x9c>)
 8002c60:	f001 fdf2 	bl	8004848 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8002c64:	2201      	movs	r2, #1
 8002c66:	2104      	movs	r1, #4
 8002c68:	4822      	ldr	r0, [pc, #136]	; (8002cf4 <spiInit+0x9c>)
 8002c6a:	f001 fe51 	bl	8004910 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8002c6e:	4821      	ldr	r0, [pc, #132]	; (8002cf4 <spiInit+0x9c>)
 8002c70:	f001 fdea 	bl	8004848 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002c74:	2201      	movs	r2, #1
 8002c76:	2105      	movs	r1, #5
 8002c78:	481e      	ldr	r0, [pc, #120]	; (8002cf4 <spiInit+0x9c>)
 8002c7a:	f001 fe49 	bl	8004910 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8002c7e:	481e      	ldr	r0, [pc, #120]	; (8002cf8 <spiInit+0xa0>)
 8002c80:	f001 fd80 	bl	8004784 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002c84:	2201      	movs	r2, #1
 8002c86:	210f      	movs	r1, #15
 8002c88:	481b      	ldr	r0, [pc, #108]	; (8002cf8 <spiInit+0xa0>)
 8002c8a:	f001 fe41 	bl	8004910 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	210f      	movs	r1, #15
 8002c92:	4819      	ldr	r0, [pc, #100]	; (8002cf8 <spiInit+0xa0>)
 8002c94:	f001 ff90 	bl	8004bb8 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8002c98:	4817      	ldr	r0, [pc, #92]	; (8002cf8 <spiInit+0xa0>)
 8002c9a:	f001 fd73 	bl	8004784 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	4815      	ldr	r0, [pc, #84]	; (8002cf8 <spiInit+0xa0>)
 8002ca4:	f001 fe34 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8002ca8:	2205      	movs	r2, #5
 8002caa:	2105      	movs	r1, #5
 8002cac:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <spiInit+0xa0>)
 8002cae:	f001 fed1 	bl	8004a54 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	2107      	movs	r1, #7
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <spiInit+0xa0>)
 8002cb8:	f001 fe2a 	bl	8004910 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	2107      	movs	r1, #7
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <spiInit+0xa0>)
 8002cc2:	f001 fec7 	bl	8004a54 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <spiInit+0xa4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fecc 	bl	8005a68 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <spiInit+0xa4>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9303      	str	r3, [sp, #12]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2103      	movs	r1, #3
 8002cea:	f002 fdcf 	bl	800588c <spiInitSPI>

}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	2000002c 	.word	0x2000002c

08002d00 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 8002d12:	e033      	b.n	8002d7c <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff73 	bl	8002c08 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8002d36:	7bbb      	ldrb	r3, [r7, #14]
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8002d3e:	e006      	b.n	8002d4e <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff71 	bl	8002c30 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8002d4e:	7bbb      	ldrb	r3, [r7, #14]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	73ba      	strb	r2, [r7, #14]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f3      	bne.n	8002d40 <commandList+0x40>
		}

		if(ms) {
 8002d58:	89bb      	ldrh	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002d68:	89bb      	ldrh	r3, [r7, #12]
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d102      	bne.n	8002d74 <commandList+0x74>
 8002d6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d72:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8002d74:	89bb      	ldrh	r3, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff24 	bl	8002bc4 <delayms>
	while(numCommands--) {                 // For each command...
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	73fa      	strb	r2, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1c6      	bne.n	8002d14 <commandList+0x14>
		}
	}
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8002d98:	210f      	movs	r1, #15
 8002d9a:	480c      	ldr	r0, [pc, #48]	; (8002dcc <commonInit+0x3c>)
 8002d9c:	f001 fe2e 	bl	80049fc <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8002da0:	2104      	movs	r1, #4
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <commonInit+0x40>)
 8002da4:	f001 fe2a 	bl	80049fc <gpioResetPin>
	delayms(50);  //default value 500
 8002da8:	2032      	movs	r0, #50	; 0x32
 8002daa:	f7ff ff0b 	bl	8002bc4 <delayms>
	ST7735_RST1;
 8002dae:	2104      	movs	r1, #4
 8002db0:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <commonInit+0x40>)
 8002db2:	f001 fdf8 	bl	80049a6 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <commonInit+0x32>
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff9f 	bl	8002d00 <commandList>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020400 	.word	0x40020400

08002dd4 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 8002dde:	2032      	movs	r0, #50	; 0x32
 8002de0:	f7ff fef0 	bl	8002bc4 <delayms>
	commonInit(Rcmd1);
 8002de4:	4811      	ldr	r0, [pc, #68]	; (8002e2c <tftInitR+0x58>)
 8002de6:	f7ff ffd3 	bl	8002d90 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 8002df0:	480f      	ldr	r0, [pc, #60]	; (8002e30 <tftInitR+0x5c>)
 8002df2:	f7ff ff85 	bl	8002d00 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <tftInitR+0x60>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <tftInitR+0x64>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e002      	b.n	8002e0a <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <tftInitR+0x68>)
 8002e06:	f7ff ff7b 	bl	8002d00 <commandList>
	}
	commandList(Rcmd3);
 8002e0a:	480d      	ldr	r0, [pc, #52]	; (8002e40 <tftInitR+0x6c>)
 8002e0c:	f7ff ff78 	bl	8002d00 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d105      	bne.n	8002e22 <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8002e16:	2036      	movs	r0, #54	; 0x36
 8002e18:	f7ff fef6 	bl	8002c08 <tftSendCmd>
		tftSendData(0xC0);
 8002e1c:	20c0      	movs	r0, #192	; 0xc0
 8002e1e:	f7ff ff07 	bl	8002c30 <tftSendData>
	}

	//  tabcolor = options;
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	0800a6dc 	.word	0x0800a6dc
 8002e30:	0800a718 	.word	0x0800a718
 8002e34:	2000028c 	.word	0x2000028c
 8002e38:	20000290 	.word	0x20000290
 8002e3c:	0800a728 	.word	0x0800a728
 8002e40:	0800a738 	.word	0x0800a738

08002e44 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	4603      	mov	r3, r0
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	717b      	strb	r3, [r7, #5]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8002e62:	202a      	movs	r0, #42	; 0x2a
 8002e64:	f7ff fed0 	bl	8002c08 <tftSendCmd>
	tftSendData(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff fee1 	bl	8002c30 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <tftSetAddrWindow+0x98>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fed8 	bl	8002c30 <tftSendData>
	tftSendData(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fed5 	bl	8002c30 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <tftSetAddrWindow+0x98>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	797b      	ldrb	r3, [r7, #5]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fecc 	bl	8002c30 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002e98:	202b      	movs	r0, #43	; 0x2b
 8002e9a:	f7ff feb5 	bl	8002c08 <tftSendCmd>
	tftSendData(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff fec6 	bl	8002c30 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <tftSetAddrWindow+0x9c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	79bb      	ldrb	r3, [r7, #6]
 8002eac:	4413      	add	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff febd 	bl	8002c30 <tftSendData>
	tftSendData(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff feba 	bl	8002c30 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <tftSetAddrWindow+0x9c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	793b      	ldrb	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff feb1 	bl	8002c30 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	f7ff fe9a 	bl	8002c08 <tftSendCmd>
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	2000028c 	.word	0x2000028c
 8002ee0:	20000290 	.word	0x20000290

08002ee4 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8002eee:	2105      	movs	r1, #5
 8002ef0:	4809      	ldr	r0, [pc, #36]	; (8002f18 <tftPushColor+0x34>)
 8002ef2:	f001 fd58 	bl	80049a6 <gpioSetPin>
	putpix(color);
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fe6e 	bl	8002be0 <tftSPISenddata>
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe69 	bl	8002be0 <tftSPISenddata>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40020400 	.word	0x40020400

08002f1c <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
 8002f26:	460b      	mov	r3, r1
 8002f28:	80bb      	strh	r3, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8002f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db22      	blt.n	8002f7c <tftDrawPixel+0x60>
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <tftDrawPixel+0x68>)
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	da1c      	bge.n	8002f7c <tftDrawPixel+0x60>
 8002f42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db18      	blt.n	8002f7c <tftDrawPixel+0x60>
 8002f4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <tftDrawPixel+0x6c>)
 8002f50:	8812      	ldrh	r2, [r2, #0]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	da12      	bge.n	8002f7c <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	b2d8      	uxtb	r0, r3
 8002f5a:	88bb      	ldrh	r3, [r7, #4]
 8002f5c:	b2d9      	uxtb	r1, r3
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f7ff ff69 	bl	8002e44 <tftSetAddrWindow>
	tftPushColor(color);
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ffb5 	bl	8002ee4 <tftPushColor>
 8002f7a:	e000      	b.n	8002f7e <tftDrawPixel+0x62>
		return;
 8002f7c:	bf00      	nop
}
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000028 	.word	0x20000028
 8002f88:	2000002a 	.word	0x2000002a

08002f8c <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	80fb      	strh	r3, [r7, #6]
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80bb      	strh	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	807b      	strh	r3, [r7, #2]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8002faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fae:	4a37      	ldr	r2, [pc, #220]	; (800308c <tftFillRect+0x100>)
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	da65      	bge.n	8003082 <tftFillRect+0xf6>
 8002fb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <tftFillRect+0x104>)
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	da5f      	bge.n	8003082 <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 8002fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <tftFillRect+0x100>)
 8002fce:	8812      	ldrh	r2, [r2, #0]
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	dd05      	ble.n	8002fe0 <tftFillRect+0x54>
		{
		w = width  - x;
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	; (800308c <tftFillRect+0x100>)
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8002fe0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002fe4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <tftFillRect+0x104>)
 8002fec:	8812      	ldrh	r2, [r2, #0]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	dd05      	ble.n	8002ffe <tftFillRect+0x72>
		{
		h = height - y;
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <tftFillRect+0x104>)
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2d8      	uxtb	r0, r3
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	b2d9      	uxtb	r1, r3
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4413      	add	r3, r2
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b2dc      	uxtb	r4, r3
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	883b      	ldrh	r3, [r7, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4622      	mov	r2, r4
 8003028:	f7ff ff0c 	bl	8002e44 <tftSetAddrWindow>

	ST7735_DC1;
 800302c:	2105      	movs	r1, #5
 800302e:	4819      	ldr	r0, [pc, #100]	; (8003094 <tftFillRect+0x108>)
 8003030:	f001 fcb9 	bl	80049a6 <gpioSetPin>
	for(y=h; y>0; y--)
 8003034:	883b      	ldrh	r3, [r7, #0]
 8003036:	80bb      	strh	r3, [r7, #4]
 8003038:	e01e      	b.n	8003078 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	80fb      	strh	r3, [r7, #6]
 800303e:	e011      	b.n	8003064 <tftFillRect+0xd8>
		{
			putpix(color);
 8003040:	8b3b      	ldrh	r3, [r7, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b29b      	uxth	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fdc9 	bl	8002be0 <tftSPISenddata>
 800304e:	8b3b      	ldrh	r3, [r7, #24]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fdc4 	bl	8002be0 <tftSPISenddata>
		for(x=w; x>0; x--)
 8003058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	80fb      	strh	r3, [r7, #6]
 8003064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	dce9      	bgt.n	8003040 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 800306c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29b      	uxth	r3, r3
 8003076:	80bb      	strh	r3, [r7, #4]
 8003078:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	dcdc      	bgt.n	800303a <tftFillRect+0xae>
 8003080:	e000      	b.n	8003084 <tftFillRect+0xf8>
		return;
 8003082:	bf00      	nop
		}
	}
}
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	20000028 	.word	0x20000028
 8003090:	2000002a 	.word	0x2000002a
 8003094:	40020400 	.word	0x40020400

08003098 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	80fb      	strh	r3, [r7, #6]
 80030aa:	4603      	mov	r3, r0
 80030ac:	80bb      	strh	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	4a24      	ldr	r2, [pc, #144]	; (800314c <tftDrawFastVLine+0xb4>)
 80030bc:	8812      	ldrh	r2, [r2, #0]
 80030be:	4293      	cmp	r3, r2
 80030c0:	da3f      	bge.n	8003142 <tftDrawFastVLine+0xaa>
 80030c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <tftDrawFastVLine+0xb8>)
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	da39      	bge.n	8003142 <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 80030ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <tftDrawFastVLine+0xb8>)
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	4293      	cmp	r3, r2
 80030de:	dd05      	ble.n	80030ec <tftDrawFastVLine+0x54>
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <tftDrawFastVLine+0xb8>)
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	88bb      	ldrh	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	b2d8      	uxtb	r0, r3
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	b2d9      	uxtb	r1, r3
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	b2dc      	uxtb	r4, r3
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4413      	add	r3, r2
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4622      	mov	r2, r4
 800310a:	f7ff fe9b 	bl	8002e44 <tftSetAddrWindow>

	ST7735_DC1;
 800310e:	2105      	movs	r1, #5
 8003110:	4810      	ldr	r0, [pc, #64]	; (8003154 <tftDrawFastVLine+0xbc>)
 8003112:	f001 fc48 	bl	80049a6 <gpioSetPin>
	while (h--) {
 8003116:	e00b      	b.n	8003130 <tftDrawFastVLine+0x98>
		putpix(color);
 8003118:	883b      	ldrh	r3, [r7, #0]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	b29b      	uxth	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd5d 	bl	8002be0 <tftSPISenddata>
 8003126:	883b      	ldrh	r3, [r7, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fd58 	bl	8002be0 <tftSPISenddata>
	while (h--) {
 8003130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003134:	b29a      	uxth	r2, r3
 8003136:	3a01      	subs	r2, #1
 8003138:	b292      	uxth	r2, r2
 800313a:	807a      	strh	r2, [r7, #2]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1eb      	bne.n	8003118 <tftDrawFastVLine+0x80>
 8003140:	e000      	b.n	8003144 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8003142:	bf00      	nop
	}
}
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	20000028 	.word	0x20000028
 8003150:	2000002a 	.word	0x2000002a
 8003154:	40020400 	.word	0x40020400

08003158 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <tftSetFont+0x40>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <tftSetFont+0x40>)
 800316c:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	785a      	ldrb	r2, [r3, #1]
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <tftSetFont+0x40>)
 8003174:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	789a      	ldrb	r2, [r3, #2]
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <tftSetFont+0x40>)
 800317c:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3303      	adds	r3, #3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <tftSetFont+0x40>)
 8003188:	811a      	strh	r2, [r3, #8]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000298 	.word	0x20000298

0800319c <tftPrintChar>:
 * charval is ASCII-Value of char to print
 * x is x position of character
 * y is y position of character
*/
void tftPrintChar(uint8_t charval, int x, int y)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 80031aa:	4b74      	ldr	r3, [pc, #464]	; (800337c <tftPrintChar+0x1e0>)
 80031ac:	791b      	ldrb	r3, [r3, #4]
 80031ae:	2b07      	cmp	r3, #7
 80031b0:	d803      	bhi.n	80031ba <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <tftPrintChar+0x1e0>)
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	77bb      	strb	r3, [r7, #30]
 80031b8:	e003      	b.n	80031c2 <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 80031ba:	4b70      	ldr	r3, [pc, #448]	; (800337c <tftPrintChar+0x1e0>)
 80031bc:	791b      	ldrb	r3, [r3, #4]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 80031c2:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <tftPrintChar+0x1e4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d15e      	bne.n	8003288 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	b2d8      	uxtb	r0, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <tftPrintChar+0x1e0>)
 80031d4:	791a      	ldrb	r2, [r3, #4]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4413      	add	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b2dc      	uxtb	r4, r3
 80031e2:	4b66      	ldr	r3, [pc, #408]	; (800337c <tftPrintChar+0x1e0>)
 80031e4:	795a      	ldrb	r2, [r3, #5]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4622      	mov	r2, r4
 80031f4:	f7ff fe26 	bl	8002e44 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <tftPrintChar+0x1e0>)
 80031fc:	7992      	ldrb	r2, [r2, #6]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	b29a      	uxth	r2, r3
 8003202:	7fbb      	ldrb	r3, [r7, #30]
 8003204:	b299      	uxth	r1, r3
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <tftPrintChar+0x1e0>)
 8003208:	795b      	ldrb	r3, [r3, #5]
 800320a:	b29b      	uxth	r3, r3
 800320c:	fb11 f303 	smulbb	r3, r1, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	fb12 f303 	smulbb	r3, r2, r3
 8003216:	b29b      	uxth	r3, r3
 8003218:	3304      	adds	r3, #4
 800321a:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 800321c:	2300      	movs	r3, #0
 800321e:	83bb      	strh	r3, [r7, #28]
 8003220:	e029      	b.n	8003276 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <tftPrintChar+0x1e0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	8b7b      	ldrh	r3, [r7, #26]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 800322e:	2300      	movs	r3, #0
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e017      	b.n	8003264 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8003234:	7cfa      	ldrb	r2, [r7, #19]
 8003236:	7ffb      	ldrb	r3, [r7, #31]
 8003238:	f1c3 0307 	rsb	r3, r3, #7
 800323c:	fa42 f303 	asr.w	r3, r2, r3
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8003248:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <tftPrintChar+0x1e8>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fe49 	bl	8002ee4 <tftPushColor>
 8003252:	e004      	b.n	800325e <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <tftPrintChar+0x1ec>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fe43 	bl	8002ee4 <tftPushColor>
			for(i=0;i<8;i++)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	3301      	adds	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	2b07      	cmp	r3, #7
 8003268:	d9e4      	bls.n	8003234 <tftPrintChar+0x98>
				}
			}
			temp++;
 800326a:	8b7b      	ldrh	r3, [r7, #26]
 800326c:	3301      	adds	r3, #1
 800326e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8003270:	8bbb      	ldrh	r3, [r7, #28]
 8003272:	3301      	adds	r3, #1
 8003274:	83bb      	strh	r3, [r7, #28]
 8003276:	8bba      	ldrh	r2, [r7, #28]
 8003278:	7fbb      	ldrb	r3, [r7, #30]
 800327a:	4940      	ldr	r1, [pc, #256]	; (800337c <tftPrintChar+0x1e0>)
 800327c:	7949      	ldrb	r1, [r1, #5]
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	429a      	cmp	r2, r3
 8003284:	dbcd      	blt.n	8003222 <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8003286:	e075      	b.n	8003374 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	4a3c      	ldr	r2, [pc, #240]	; (800337c <tftPrintChar+0x1e0>)
 800328c:	7992      	ldrb	r2, [r2, #6]
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	b29a      	uxth	r2, r3
 8003292:	7fbb      	ldrb	r3, [r7, #30]
 8003294:	b299      	uxth	r1, r3
 8003296:	4b39      	ldr	r3, [pc, #228]	; (800337c <tftPrintChar+0x1e0>)
 8003298:	795b      	ldrb	r3, [r3, #5]
 800329a:	b29b      	uxth	r3, r3
 800329c:	fb11 f303 	smulbb	r3, r1, r3
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	fb12 f303 	smulbb	r3, r2, r3
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3304      	adds	r3, #4
 80032aa:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	83bb      	strh	r3, [r7, #28]
 80032b0:	e05a      	b.n	8003368 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e04b      	b.n	8003350 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 80032b8:	4b30      	ldr	r3, [pc, #192]	; (800337c <tftPrintChar+0x1e0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	8b79      	ldrh	r1, [r7, #26]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	440a      	add	r2, r1
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e03a      	b.n	8003344 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	4413      	add	r3, r2
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	b2d8      	uxtb	r0, r3
 80032e4:	8bbb      	ldrh	r3, [r7, #28]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	b2d9      	uxtb	r1, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	4413      	add	r3, r2
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4413      	add	r3, r2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3301      	adds	r3, #1
 8003308:	b2dc      	uxtb	r4, r3
 800330a:	8bbb      	ldrh	r3, [r7, #28]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4413      	add	r3, r2
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4622      	mov	r2, r4
 800331c:	f7ff fd92 	bl	8002e44 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8003320:	7cfa      	ldrb	r2, [r7, #19]
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	f1c3 0307 	rsb	r3, r3, #7
 8003328:	fa42 f303 	asr.w	r3, r2, r3
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <tftPrintChar+0x1e8>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fdd3 	bl	8002ee4 <tftPushColor>
				for(i=0;i<8;i++)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	3301      	adds	r3, #1
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	2b07      	cmp	r3, #7
 8003348:	d9c1      	bls.n	80032ce <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	7fbb      	ldrb	r3, [r7, #30]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	dbaf      	blt.n	80032b8 <tftPrintChar+0x11c>
			temp+=(fz);
 8003358:	7fbb      	ldrb	r3, [r7, #30]
 800335a:	b29a      	uxth	r2, r3
 800335c:	8b7b      	ldrh	r3, [r7, #26]
 800335e:	4413      	add	r3, r2
 8003360:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8003362:	8bbb      	ldrh	r3, [r7, #28]
 8003364:	3301      	adds	r3, #1
 8003366:	83bb      	strh	r3, [r7, #28]
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <tftPrintChar+0x1e0>)
 800336a:	795b      	ldrb	r3, [r3, #5]
 800336c:	b29b      	uxth	r3, r3
 800336e:	8bba      	ldrh	r2, [r7, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	d39e      	bcc.n	80032b2 <tftPrintChar+0x116>
}
 8003374:	bf00      	nop
 8003376:	3724      	adds	r7, #36	; 0x24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	20000298 	.word	0x20000298
 8003380:	200002a4 	.word	0x200002a4
 8003384:	20000030 	.word	0x20000030
 8003388:	200002a6 	.word	0x200002a6
 800338c:	00000000 	.word	0x00000000

08003390 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b08e      	sub	sp, #56	; 0x38
 8003396:	af00      	add	r7, sp, #0
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4603      	mov	r3, r0
 80033a0:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 80033a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033a4:	f7fd f8c6 	bl	8000534 <__aeabi_i2d>
 80033a8:	a395      	add	r3, pc, #596	; (adr r3, 8003600 <tftRotateChar+0x270>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd f92b 	bl	8000608 <__aeabi_dmul>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <tftRotateChar+0x260>)
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	2b07      	cmp	r3, #7
 80033c0:	d804      	bhi.n	80033cc <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <tftRotateChar+0x260>)
 80033c4:	791b      	ldrb	r3, [r3, #4]
 80033c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80033ca:	e017      	b.n	80033fc <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 80033cc:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <tftRotateChar+0x260>)
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	4a85      	ldr	r2, [pc, #532]	; (80035f0 <tftRotateChar+0x260>)
 80033da:	7992      	ldrb	r2, [r2, #6]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80033e4:	b299      	uxth	r1, r3
 80033e6:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <tftRotateChar+0x260>)
 80033e8:	795b      	ldrb	r3, [r3, #5]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	fb11 f303 	smulbb	r3, r1, r3
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	fb12 f303 	smulbb	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3304      	adds	r3, #4
 80033fa:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003402:	e0e6      	b.n	80035d2 <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003408:	e0d2      	b.n	80035b0 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <tftRotateChar+0x260>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003412:	440a      	add	r2, r1
 8003414:	4413      	add	r3, r2
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 800341a:	2300      	movs	r3, #0
 800341c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003420:	e0be      	b.n	80035a0 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f7fd f886 	bl	8000534 <__aeabi_i2d>
 8003428:	4604      	mov	r4, r0
 800342a:	460d      	mov	r5, r1
 800342c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	441a      	add	r2, r3
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <tftRotateChar+0x260>)
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f875 	bl	8000534 <__aeabi_i2d>
 800344a:	4680      	mov	r8, r0
 800344c:	4689      	mov	r9, r1
 800344e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003452:	f005 fd39 	bl	8008ec8 <cos>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4640      	mov	r0, r8
 800345c:	4649      	mov	r1, r9
 800345e:	f7fd f8d3 	bl	8000608 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4692      	mov	sl, r2
 8003468:	469b      	mov	fp, r3
 800346a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f860 	bl	8000534 <__aeabi_i2d>
 8003474:	4680      	mov	r8, r0
 8003476:	4689      	mov	r9, r1
 8003478:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800347c:	f005 fdb0 	bl	8008fe0 <sin>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4640      	mov	r0, r8
 8003486:	4649      	mov	r1, r9
 8003488:	f7fd f8be 	bl	8000608 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4650      	mov	r0, sl
 8003492:	4659      	mov	r1, fp
 8003494:	f7fc ff00 	bl	8000298 <__aeabi_dsub>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	f7fc fefc 	bl	800029c <__adddf3>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fd fb5c 	bl	8000b68 <__aeabi_d2iz>
 80034b0:	4603      	mov	r3, r0
 80034b2:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fd f83d 	bl	8000534 <__aeabi_i2d>
 80034ba:	4604      	mov	r4, r0
 80034bc:	460d      	mov	r5, r1
 80034be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f836 	bl	8000534 <__aeabi_i2d>
 80034c8:	4680      	mov	r8, r0
 80034ca:	4689      	mov	r9, r1
 80034cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034d0:	f005 fcfa 	bl	8008ec8 <cos>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4640      	mov	r0, r8
 80034da:	4649      	mov	r1, r9
 80034dc:	f7fd f894 	bl	8000608 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4692      	mov	sl, r2
 80034e6:	469b      	mov	fp, r3
 80034e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	441a      	add	r2, r3
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <tftRotateChar+0x260>)
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	4619      	mov	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd f817 	bl	8000534 <__aeabi_i2d>
 8003506:	4680      	mov	r8, r0
 8003508:	4689      	mov	r9, r1
 800350a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800350e:	f005 fd67 	bl	8008fe0 <sin>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fd f875 	bl	8000608 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4650      	mov	r0, sl
 8003524:	4659      	mov	r1, fp
 8003526:	f7fc feb9 	bl	800029c <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	f7fc feb3 	bl	800029c <__adddf3>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f7fd fb13 	bl	8000b68 <__aeabi_d2iz>
 8003542:	4603      	mov	r3, r0
 8003544:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	b2d8      	uxtb	r0, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f7ff fc71 	bl	8002e44 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8003562:	7ffa      	ldrb	r2, [r7, #31]
 8003564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003568:	f1c3 0307 	rsb	r3, r3, #7
 800356c:	fa42 f303 	asr.w	r3, r2, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <tftRotateChar+0x264>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fcb1 	bl	8002ee4 <tftPushColor>
 8003582:	e008      	b.n	8003596 <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <tftRotateChar+0x268>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <tftRotateChar+0x26c>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fca7 	bl	8002ee4 <tftPushColor>
			for(i=0;i<8;i++)
 8003596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800359a:	3301      	adds	r3, #1
 800359c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80035a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	f67f af3c 	bls.w	8003422 <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	3301      	adds	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80035b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	f6ff af27 	blt.w	800340a <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 80035bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035c4:	4413      	add	r3, r2
 80035c6:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 80035c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80035cc:	3301      	adds	r3, #1
 80035ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <tftRotateChar+0x260>)
 80035d4:	795b      	ldrb	r3, [r3, #5]
 80035d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80035da:	429a      	cmp	r2, r3
 80035dc:	f4ff af12 	bcc.w	8003404 <tftRotateChar+0x74>
	}
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3738      	adds	r7, #56	; 0x38
 80035e6:	46bd      	mov	sp, r7
 80035e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ec:	f3af 8000 	nop.w
 80035f0:	20000298 	.word	0x20000298
 80035f4:	20000030 	.word	0x20000030
 80035f8:	200002a4 	.word	0x200002a4
 80035fc:	200002a6 	.word	0x200002a6
 8003600:	1eb851ec 	.word	0x1eb851ec
 8003604:	3f91eb85 	.word	0x3f91eb85

08003608 <tftPrintInt>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrintInt(int value,int x, int y, int deg)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b09e      	sub	sp, #120	; 0x78
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
	char buffer[100];
	sprintf(buffer,"%d",value);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <tftPrintInt+0x34>)
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f848 	bl	80066b4 <siprintf>
	tftPrint(buffer,x,y,deg);
 8003624:	f107 0014 	add.w	r0, r7, #20
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	f000 f807 	bl	8003640 <tftPrint>
}
 8003632:	bf00      	nop
 8003634:	3778      	adds	r7, #120	; 0x78
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	0800a230 	.word	0x0800a230

08003640 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7fc fdc0 	bl	80001e0 <strlen>
 8003660:	4603      	mov	r3, r0
 8003662:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f113 0f02 	cmn.w	r3, #2
 800366a:	d10a      	bne.n	8003682 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 800366c:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <tftPrint+0x128>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <tftPrint+0x12c>)
 8003674:	791b      	ldrb	r3, [r3, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d10d      	bne.n	80036a6 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <tftPrint+0x130>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <tftPrint+0x12c>)
 8003692:	791b      	ldrb	r3, [r3, #4]
 8003694:	4619      	mov	r1, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	0fda      	lsrs	r2, r3, #31
 80036a0:	4413      	add	r3, r2
 80036a2:	105b      	asrs	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	e053      	b.n	8003754 <tftPrint+0x114>
	{
		lettercount++;
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	3301      	adds	r3, #1
 80036b0:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d112      	bne.n	80036de <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	60fa      	str	r2, [r7, #12]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	69f9      	ldr	r1, [r7, #28]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fd69 	bl	800319c <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <tftPrint+0x12c>)
 80036cc:	791b      	ldrb	r3, [r3, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e00a      	b.n	80036f4 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	60fa      	str	r2, [r7, #12]
 80036e4:	7818      	ldrb	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	f7ff fe4e 	bl	8003390 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 80036f4:	f000 f8a8 	bl	8003848 <tftGetWidth>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <tftPrint+0x12c>)
 80036fe:	791b      	ldrb	r3, [r3, #4]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	4293      	cmp	r3, r2
 800370c:	db1f      	blt.n	800374e <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <tftPrint+0x12c>)
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8003722:	f000 f89d 	bl	8003860 <tftGetHeight>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <tftPrint+0x12c>)
 800372c:	795b      	ldrb	r3, [r3, #5]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	429a      	cmp	r2, r3
 8003734:	dd09      	ble.n	800374a <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8003736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800373a:	f7ff fa43 	bl	8002bc4 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 800373e:	2000      	movs	r0, #0
 8003740:	f000 f818 	bl	8003774 <tftFillScreen>
				y=0; // start at top left of new Page
 8003744:	2300      	movs	r3, #0
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	e001      	b.n	800374e <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	3301      	adds	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	dba7      	blt.n	80036ac <tftPrint+0x6c>
			}

		}

	}
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000028 	.word	0x20000028
 800376c:	20000298 	.word	0x20000298
 8003770:	2000002a 	.word	0x2000002a

08003774 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af02      	add	r7, sp, #8
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <tftFillScreen+0x2c>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b21a      	sxth	r2, r3
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <tftFillScreen+0x30>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b219      	sxth	r1, r3
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	460b      	mov	r3, r1
 8003790:	2100      	movs	r1, #0
 8003792:	2000      	movs	r0, #0
 8003794:	f7ff fbfa 	bl	8002f8c <tftFillRect>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000028 	.word	0x20000028
 80037a4:	2000002a 	.word	0x2000002a

080037a8 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 80037ba:	2036      	movs	r0, #54	; 0x36
 80037bc:	f7ff fa24 	bl	8002c08 <tftSendCmd>

	switch (rotation)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d836      	bhi.n	8003834 <tftSetRotation+0x8c>
 80037c6:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <tftSetRotation+0x24>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037f1 	.word	0x080037f1
 80037d4:	08003805 	.word	0x08003805
 80037d8:	08003819 	.word	0x08003819
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80037dc:	20c0      	movs	r0, #192	; 0xc0
 80037de:	f7ff fa27 	bl	8002c30 <tftSendData>
		width  = ST7735_TFTWIDTH;
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <tftSetRotation+0x94>)
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <tftSetRotation+0x98>)
 80037ea:	22a0      	movs	r2, #160	; 0xa0
 80037ec:	801a      	strh	r2, [r3, #0]
		break;
 80037ee:	e01d      	b.n	800382c <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80037f0:	20a0      	movs	r0, #160	; 0xa0
 80037f2:	f7ff fa1d 	bl	8002c30 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <tftSetRotation+0x94>)
 80037f8:	22a0      	movs	r2, #160	; 0xa0
 80037fa:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <tftSetRotation+0x98>)
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	801a      	strh	r2, [r3, #0]
		   break;
 8003802:	e013      	b.n	800382c <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff fa13 	bl	8002c30 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <tftSetRotation+0x94>)
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <tftSetRotation+0x98>)
 8003812:	22a0      	movs	r2, #160	; 0xa0
 8003814:	801a      	strh	r2, [r3, #0]
		   break;
 8003816:	e009      	b.n	800382c <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8003818:	2060      	movs	r0, #96	; 0x60
 800381a:	f7ff fa09 	bl	8002c30 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <tftSetRotation+0x94>)
 8003820:	22a0      	movs	r2, #160	; 0xa0
 8003822:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <tftSetRotation+0x98>)
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	801a      	strh	r2, [r3, #0]
		   break;
 800382a:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 800382c:	4a05      	ldr	r2, [pc, #20]	; (8003844 <tftSetRotation+0x9c>)
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	7013      	strb	r3, [r2, #0]
 8003832:	e000      	b.n	8003836 <tftSetRotation+0x8e>
		   return;
 8003834:	bf00      	nop
}
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000028 	.word	0x20000028
 8003840:	2000002a 	.word	0x2000002a
 8003844:	20000294 	.word	0x20000294

08003848 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <tftGetWidth+0x14>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b2db      	uxtb	r3, r3
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000028 	.word	0x20000028

08003860 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <tftGetHeight+0x14>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	2000002a 	.word	0x2000002a

08003878 <sensor_presCheck>:
#define BMA020precision 1



int8_t sensor_presCheck(I2C_TypeDef *i2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]

	i2cReadByteFromSlaveReg(i2c, i2cAddr_Sensor[currentSensor], DummyReg[currentSensor], &ret);
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <sensor_presCheck+0x48>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <sensor_presCheck+0x4c>)
 800388c:	5c99      	ldrb	r1, [r3, r2]
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <sensor_presCheck+0x48>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <sensor_presCheck+0x50>)
 8003896:	5c9a      	ldrb	r2, [r3, r2]
 8003898:	f107 030f 	add.w	r3, r7, #15
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 fc2e 	bl	80050fe <i2cReadByteFromSlaveReg>
	//spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (DummyReg|spiRead), ret, 2);
	if (dummyVal[currentSensor] == ret)
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <sensor_presCheck+0x48>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <sensor_presCheck+0x54>)
 80038aa:	5c9a      	ldrb	r2, [r3, r2]
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d101      	bne.n	80038b6 <sensor_presCheck+0x3e>
	{
		return 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <sensor_presCheck+0x40>
	}
	else
	{
		return 0;
 80038b6:	2300      	movs	r3, #0
	}
	return 1;
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	200002a8 	.word	0x200002a8
 80038c4:	0800a764 	.word	0x0800a764
 80038c8:	0800a768 	.word	0x0800a768
 80038cc:	0800a76c 	.word	0x0800a76c

080038d0 <setBMA020_Bandwidth>:
		}
	return returnValue; // Rückgabewert zurückgeben
}

void setBMA020_Bandwidth(I2C_TypeDef *i2c, uint8_t Bandwidth)		// Ändern der Bandbreite (Bandwidth) 25 50 750 1500
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
	uint8_t daten;
	i2cReadByteFromSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR2, &daten);
 80038dc:	2138      	movs	r1, #56	; 0x38
 80038de:	f107 030f 	add.w	r3, r7, #15
 80038e2:	2214      	movs	r2, #20
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f001 fc0a 	bl	80050fe <i2cReadByteFromSlaveReg>

	daten = (daten & 0b11111000);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	f023 0307 	bic.w	r3, r3, #7
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73fb      	strb	r3, [r7, #15]
	daten = (daten |(uint8_t) Bandwidth);
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	73fb      	strb	r3, [r7, #15]

	i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR2, daten);
 80038fe:	2138      	movs	r1, #56	; 0x38
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2214      	movs	r2, #20
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 fb4f 	bl	8004fa8 <i2cSendByteToSlaveReg>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <setBMA020_Range>:


uint8_t setBMA020_Range(I2C_TypeDef *i2c, uint8_t Range)							// Ändern der Empfindlichkeit (Range) 2 4 8g
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
	static uint8_t _range;
	uint8_t daten;
	i2cReadByteFromSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR2, &daten);
 8003920:	2138      	movs	r1, #56	; 0x38
 8003922:	f107 030f 	add.w	r3, r7, #15
 8003926:	2214      	movs	r2, #20
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f001 fbe8 	bl	80050fe <i2cReadByteFromSlaveReg>

	switch (Range)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d01d      	beq.n	8003970 <setBMA020_Range+0x5c>
 8003934:	2b08      	cmp	r3, #8
 8003936:	dc29      	bgt.n	800398c <setBMA020_Range+0x78>
 8003938:	2b02      	cmp	r3, #2
 800393a:	d002      	beq.n	8003942 <setBMA020_Range+0x2e>
 800393c:	2b04      	cmp	r3, #4
 800393e:	d009      	beq.n	8003954 <setBMA020_Range+0x40>
 8003940:	e024      	b.n	800398c <setBMA020_Range+0x78>
	{
	case 2:															// Empfindlichkeit: +/- 2g
		{
		daten &= 0b11100111;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	f023 0318 	bic.w	r3, r3, #24
 8003948:	b2db      	uxtb	r3, r3
 800394a:	73fb      	strb	r3, [r7, #15]
		_range = 2;
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <setBMA020_Range+0x98>)
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
		break;
 8003952:	e01e      	b.n	8003992 <setBMA020_Range+0x7e>
		}
	case 4:															// Empfindlichkeit: +/- 4g
		{
		daten &= 0b11101111;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	f023 0310 	bic.w	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	73fb      	strb	r3, [r7, #15]
		daten |= 0b00001000;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	b2db      	uxtb	r3, r3
 8003966:	73fb      	strb	r3, [r7, #15]
		_range = 4;
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <setBMA020_Range+0x98>)
 800396a:	2204      	movs	r2, #4
 800396c:	701a      	strb	r2, [r3, #0]
		break;
 800396e:	e010      	b.n	8003992 <setBMA020_Range+0x7e>
		}
	case 8:															// Empfindlichkeit: +/- 8g
		{
		daten &= 0b11110111;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	f023 0308 	bic.w	r3, r3, #8
 8003976:	b2db      	uxtb	r3, r3
 8003978:	73fb      	strb	r3, [r7, #15]
		daten |= 0b00010000;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	f043 0310 	orr.w	r3, r3, #16
 8003980:	b2db      	uxtb	r3, r3
 8003982:	73fb      	strb	r3, [r7, #15]
		_range = 8;
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <setBMA020_Range+0x98>)
 8003986:	2208      	movs	r2, #8
 8003988:	701a      	strb	r2, [r3, #0]
		break;
 800398a:	e002      	b.n	8003992 <setBMA020_Range+0x7e>
		}
	default:							// nur Rückgabe des aktuell eingestellten Messbereichs
		{
		return _range;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <setBMA020_Range+0x98>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	e007      	b.n	80039a2 <setBMA020_Range+0x8e>
		}
	}
	i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR2, daten);
 8003992:	2138      	movs	r1, #56	; 0x38
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2214      	movs	r2, #20
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f001 fb05 	bl	8004fa8 <i2cSendByteToSlaveReg>
	return _range;
 800399e:	4b03      	ldr	r3, [pc, #12]	; (80039ac <setBMA020_Range+0x98>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200002a9 	.word	0x200002a9

080039b0 <i2cBMA020_init>:


int8_t i2cBMA020_init(I2C_TypeDef *i2c, int8_t restart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
	static int8_t step = stepStart[SENSOR_BMA020];


	if ((restart != 0) && (step == stepStart[SENSOR_BMA020]))
 80039bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <i2cBMA020_init+0x32>
 80039c4:	f06f 0203 	mvn.w	r2, #3
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <i2cBMA020_init+0xac>)
 80039ca:	f993 3000 	ldrsb.w	r3, [r3]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d107      	bne.n	80039e2 <i2cBMA020_init+0x32>
	{
		step = stepStart[SENSOR_BMA020] + 1;
 80039d2:	f06f 0303 	mvn.w	r3, #3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	b25a      	sxtb	r2, r3
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <i2cBMA020_init+0xac>)
 80039e0:	701a      	strb	r2, [r3, #0]
	}


	switch (step)
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <i2cBMA020_init+0xac>)
 80039e4:	f993 3000 	ldrsb.w	r3, [r3]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d82c      	bhi.n	8003a48 <i2cBMA020_init+0x98>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <i2cBMA020_init+0x44>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a39 	.word	0x08003a39
	{
		case -4:		// CLK Speed von I2C auf Fast Mode
		{
			i2cSetClkSpd(i2c, I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 8003a04:	2104      	movs	r1, #4
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f001 fa00 	bl	8004e0c <i2cSetClkSpd>
			step = -2;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a0e:	22fe      	movs	r2, #254	; 0xfe
 8003a10:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003a12:	e01c      	b.n	8003a4e <i2cBMA020_init+0x9e>
		case -3:
		{		// SW Reset
			i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR3, BMA020_SWRESET); // reboot memory content
 8003a14:	2138      	movs	r1, #56	; 0x38
 8003a16:	2302      	movs	r3, #2
 8003a18:	220a      	movs	r2, #10
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f001 fac4 	bl	8004fa8 <i2cSendByteToSlaveReg>
			step = -2;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a22:	22fe      	movs	r2, #254	; 0xfe
 8003a24:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003a26:	e012      	b.n	8003a4e <i2cBMA020_init+0x9e>
		case -2:
		{
			setBMA020_Range(i2c, 4);			// Set Range +-4 g
 8003a28:	2104      	movs	r1, #4
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff72 	bl	8003914 <setBMA020_Range>
			step = -1;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003a36:	e00a      	b.n	8003a4e <i2cBMA020_init+0x9e>
		case -1:
		{		// Config Range & Bandwidth
			setBMA020_Bandwidth(i2c, BMA020_ACCEL_BANDW_50);
 8003a38:	2101      	movs	r1, #1
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff48 	bl	80038d0 <setBMA020_Bandwidth>
			//i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_CR2, (BMA020_ACCEL_RANGE_2g|BMA020_ACCEL_BANDW_190)); // Set Range to ±2g, Set Filter bandwidth to 190Hz
			step = 0;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003a46:	e002      	b.n	8003a4e <i2cBMA020_init+0x9e>
		default:
		{
			step = -4;
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a4a:	22fc      	movs	r2, #252	; 0xfc
 8003a4c:	701a      	strb	r2, [r3, #0]
		}
	}
	return step;
 8003a4e:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <i2cBMA020_init+0xac>)
 8003a50:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000032 	.word	0x20000032

08003a60 <i2cBMA020XYZ>:

int16_t i2cBMA020XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	uint8_t _rdata[6];
	int16_t schiebeReg;
	i2cBurstRegRead(i2c, i2cAddr_Sensor[SENSOR_BMA020], BMA020_DR, _rdata, 6);
 8003a6a:	2138      	movs	r1, #56	; 0x38
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	2206      	movs	r2, #6
 8003a72:	9200      	str	r2, [sp, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f001 fbad 	bl	80051d6 <i2cBurstRegRead>

	float skal_div = 1/4.088;															// Zwischenspeicher für Bearbeitung der dez. Achsdaten
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <i2cBMA020XYZ+0xbc>)
 8003a7e:	61fb      	str	r3, [r7, #28]
	int i;
	uint8_t range = setBMA020_Range(i2c, 0);
 8003a80:	2100      	movs	r1, #0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff46 	bl	8003914 <setBMA020_Range>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]
	switch (range)													// Skalierungsfaktoren für den Messberich +/-(2,4,8g) ermitteln
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d002      	beq.n	8003a98 <i2cBMA020XYZ+0x38>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <i2cBMA020XYZ+0x3e>
 8003a96:	e004      	b.n	8003aa2 <i2cBMA020XYZ+0x42>
	{
	case 2:
		{
		skal_div =1/16.352;
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <i2cBMA020XYZ+0xc0>)
 8003a9a:	61fb      	str	r3, [r7, #28]
		break;
 8003a9c:	e001      	b.n	8003aa2 <i2cBMA020XYZ+0x42>
		}
	case 4:
		{
		skal_div = 1/8.176;
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <i2cBMA020XYZ+0xc4>)
 8003aa0:	61fb      	str	r3, [r7, #28]
		}
	}

	for (i=0;i<=2;i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e031      	b.n	8003b0c <i2cBMA020XYZ+0xac>
	{

		schiebeReg = _rdata[2*i+1];									// MSB in Schieberegister schreiben
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	3301      	adds	r3, #1
 8003aae:	3320      	adds	r3, #32
 8003ab0:	443b      	add	r3, r7
 8003ab2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003ab6:	82bb      	strh	r3, [r7, #20]
		schiebeReg <<= 8;											// Schieben an die ersten 8 Bit
 8003ab8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	82bb      	strh	r3, [r7, #20]

		if(BMA020precision)
		{
			schiebeReg += _rdata[2*i];										// Addition des jeweiligen LSB zum MSB
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	443b      	add	r3, r7
 8003ac8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	8abb      	ldrh	r3, [r7, #20]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	82bb      	strh	r3, [r7, #20]
			schiebeReg &= 0xFFC0; //b1111111111000000; 					// Abschneiden der geringeren Stellen, da diese keine Daten enthalten
 8003ad6:	8abb      	ldrh	r3, [r7, #20]
 8003ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003adc:	82bb      	strh	r3, [r7, #20]
		}
		xyz[i] = (int16_t)(((int16_t)schiebeReg) * skal_div);									// Konvertieren in Integer-Format und Messbereich einrechnen (2,4,8g) einberechnen
 8003ade:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003afe:	ee17 2a90 	vmov	r2, s15
 8003b02:	b212      	sxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
	for (i=0;i<=2;i++)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	ddca      	ble.n	8003aa8 <i2cBMA020XYZ+0x48>
	}

	return 0;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	3e7a7d3f 	.word	0x3e7a7d3f
 8003b20:	3d7a7d3f 	.word	0x3d7a7d3f
 8003b24:	3dfa7d3f 	.word	0x3dfa7d3f

08003b28 <i2cLIS3DH_init>:


int8_t i2cLIS3DH_init(I2C_TypeDef *i2c, int8_t restart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
	int8_t step = stepStart[SENSOR_LIS3DH];
 8003b34:	23f9      	movs	r3, #249	; 0xf9
 8003b36:	73fb      	strb	r3, [r7, #15]

	if ((restart != 0) && (step == stepStart[SENSOR_LIS3DH]))
 8003b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <i2cLIS3DH_init+0x30>
 8003b40:	f06f 0206 	mvn.w	r2, #6
 8003b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d105      	bne.n	8003b58 <i2cLIS3DH_init+0x30>
	{
		step = stepStart[SENSOR_LIS3DH] + 1;
 8003b4c:	f06f 0306 	mvn.w	r3, #6
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	73fb      	strb	r3, [r7, #15]
	}
	switch (step)
 8003b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5c:	3307      	adds	r3, #7
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d865      	bhi.n	8003c2e <i2cLIS3DH_init+0x106>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <i2cLIS3DH_init+0x40>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b85 	.word	0x08003b85
 8003b6c:	08003b93 	.word	0x08003b93
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003bc3 	.word	0x08003bc3
 8003b78:	08003bdd 	.word	0x08003bdd
 8003b7c:	08003bf7 	.word	0x08003bf7
 8003b80:	08003c15 	.word	0x08003c15
	case -7:		// CLK Speed von I2C auf Fast Mode
	{
		//i2cResetDevice(i2c);
		//i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_400);

		i2cSetClkSpd(i2c, I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 8003b84:	2104      	movs	r1, #4
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f940 	bl	8004e0c <i2cSetClkSpd>
		//i2cEnableDevice(i2c);
		step = -6;
 8003b8c:	23fa      	movs	r3, #250	; 0xfa
 8003b8e:	73fb      	strb	r3, [r7, #15]
		break;
 8003b90:	e04f      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	case -6:		//
	{
		if (1 == sensor_presCheck(i2c))
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fe70 	bl	8003878 <sensor_presCheck>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <i2cLIS3DH_init+0x7c>
		{
			step = -5;
 8003b9e:	23fb      	movs	r3, #251	; 0xfb
 8003ba0:	73fb      	strb	r3, [r7, #15]
		} else
		{
			return 1;		//1 = failure
		}
		break;
 8003ba2:	e046      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
			return 1;		//1 = failure
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e046      	b.n	8003c36 <i2cLIS3DH_init+0x10e>
	}
	case -5:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg5, 0b10000000); // reboot memory content
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <i2cLIS3DH_init+0x118>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <i2cLIS3DH_init+0x11c>)
 8003bb0:	5c99      	ldrb	r1, [r3, r2]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	2224      	movs	r2, #36	; 0x24
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 f9f6 	bl	8004fa8 <i2cSendByteToSlaveReg>
		step = -4;
 8003bbc:	23fc      	movs	r3, #252	; 0xfc
 8003bbe:	73fb      	strb	r3, [r7, #15]
		break;
 8003bc0:	e037      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	case -4:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg4, 0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <i2cLIS3DH_init+0x118>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <i2cLIS3DH_init+0x11c>)
 8003bca:	5c99      	ldrb	r1, [r3, r2]
 8003bcc:	238c      	movs	r3, #140	; 0x8c
 8003bce:	2223      	movs	r2, #35	; 0x23
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 f9e9 	bl	8004fa8 <i2cSendByteToSlaveReg>
		step = -3;
 8003bd6:	23fd      	movs	r3, #253	; 0xfd
 8003bd8:	73fb      	strb	r3, [r7, #15]
		break;
 8003bda:	e02a      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	case -3:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg1,
 8003bdc:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <i2cLIS3DH_init+0x118>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <i2cLIS3DH_init+0x11c>)
 8003be4:	5c99      	ldrb	r1, [r3, r2]
 8003be6:	2397      	movs	r3, #151	; 0x97
 8003be8:	2220      	movs	r2, #32
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f9dc 	bl	8004fa8 <i2cSendByteToSlaveReg>
				(uint8_t) 0b10010111); //
		step = -2;
 8003bf0:	23fe      	movs	r3, #254	; 0xfe
 8003bf2:	73fb      	strb	r3, [r7, #15]
		break;
 8003bf4:	e01d      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	case -2:
	{
		uint8_t LIS3DH_Reg4 = 0b10001000;	// BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8003bf6:	2388      	movs	r3, #136	; 0x88
 8003bf8:	73bb      	strb	r3, [r7, #14]
#ifdef XYZopt
//			LIS3DH_Reg4 |=        0b01000000;			// enable to switch High and Low Byte order. special Hint: High Byte first for a fast read sequence to array of int16
#endif
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_CtrlReg4, LIS3DH_Reg4); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <i2cLIS3DH_init+0x118>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <i2cLIS3DH_init+0x11c>)
 8003c02:	5c99      	ldrb	r1, [r3, r2]
 8003c04:	7bbb      	ldrb	r3, [r7, #14]
 8003c06:	2223      	movs	r2, #35	; 0x23
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f001 f9cd 	bl	8004fa8 <i2cSendByteToSlaveReg>
		step = -1;
 8003c0e:	23ff      	movs	r3, #255	; 0xff
 8003c10:	73fb      	strb	r3, [r7, #15]
		break;
 8003c12:	e00e      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	case -1:
	{
		i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[currentSensor], LIS3DH_ADCConfReg,
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <i2cLIS3DH_init+0x118>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <i2cLIS3DH_init+0x11c>)
 8003c1c:	5c99      	ldrb	r1, [r3, r2]
 8003c1e:	23c0      	movs	r3, #192	; 0xc0
 8003c20:	221f      	movs	r2, #31
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 f9c0 	bl	8004fa8 <i2cSendByteToSlaveReg>
				(uint8_t) 0b11000000); // ADC Temp 0 0 0 0 0 0

		step = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
		break;
 8003c2c:	e001      	b.n	8003c32 <i2cLIS3DH_init+0x10a>
	}
	default:
	{
		step = -7;
 8003c2e:	23f9      	movs	r3, #249	; 0xf9
 8003c30:	73fb      	strb	r3, [r7, #15]
	}
	}
	return step;
 8003c32:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200002a8 	.word	0x200002a8
 8003c44:	0800a764 	.word	0x0800a764

08003c48 <i2cLIS3DH_XYZ>:


int16_t i2cLIS3DH_XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
#ifdef XYZopt
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (OUTxyz|I2Crepeat),(uint8_t *) xyz, 6);
 8003c52:	2306      	movs	r3, #6
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	22a8      	movs	r2, #168	; 0xa8
 8003c5a:	2118      	movs	r1, #24
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f001 faba 	bl	80051d6 <i2cBurstRegRead>
	xyz++;
	*xyz = (readBuffer[3]<<8) + readBuffer[2];
	xyz++;
	*xyz = (readBuffer[5]<<8) + readBuffer[4];
#endif
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <i2cLIS3DH_Temp>:
- read both the ADC output 3 registers (because of BDU enabled): OUT_ADC_3_L(0x0C) and OUT_ADC_3_H(0x0D).
Useful bits: 8, left aligned, hence useful data in OUT_ADC_3_H.
Temperature sensor output change vs temperature: 1digit/degrCelsius
*/
int8_t i2cLIS3DH_Temp(I2C_TypeDef *i2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[2];
	//i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, (ADC3Temp+1), (uint8_t *) &readBuffer[1]);  	// only Hihg byte with data
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (ADC3Temp|I2Crepeat), readBuffer, 2);					// but BDU =1 required for update data to read both, high and low Byte
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	2202      	movs	r2, #2
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	228c      	movs	r2, #140	; 0x8c
 8003c7e:	2118      	movs	r1, #24
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 faa8 	bl	80051d6 <i2cBurstRegRead>
	return ((int8_t) readBuffer[1]);					// send a delta Temp Value
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	b25b      	sxtb	r3, r3
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <i2cMPU6050_init>:


int8_t i2cMPU6050_init(I2C_TypeDef *i2c, int8_t restart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
	static int8_t step = stepStart[SENSOR_MPU6050];
	if ((restart != 0) && (step == stepStart[SENSOR_MPU6050]))
 8003ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <i2cMPU6050_init+0x32>
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003cae:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d107      	bne.n	8003cc6 <i2cMPU6050_init+0x32>
	{
		step = stepStart[SENSOR_MPU6050] + 1;
 8003cb6:	f06f 0304 	mvn.w	r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	b25a      	sxtb	r2, r3
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003cc4:	701a      	strb	r2, [r3, #0]
	}
	switch (step)
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ccc:	3305      	adds	r3, #5
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d842      	bhi.n	8003d58 <i2cMPU6050_init+0xc4>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <i2cMPU6050_init+0x44>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003ced 	.word	0x08003ced
 8003cdc:	08003cfd 	.word	0x08003cfd
 8003ce0:	08003d11 	.word	0x08003d11
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003d45 	.word	0x08003d45
		{

			case -5:		// CLK Speed von I2C auf 400kHz
			{
				i2cSetClkSpd(i2c, I2C_CLOCK_1Mz); //set I2C Clock 1000kHz
 8003cec:	2104      	movs	r1, #4
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f001 f88c 	bl	8004e0c <i2cSetClkSpd>
				step = -4;
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003cf6:	22fc      	movs	r2, #252	; 0xfc
 8003cf8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003cfa:	e031      	b.n	8003d60 <i2cMPU6050_init+0xcc>
			case -4:		// SW Reset
			{
				i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_PWR_MGMT_1, (MPU6050_SWRESET)); // reboot memory content
 8003cfc:	2168      	movs	r1, #104	; 0x68
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	226b      	movs	r2, #107	; 0x6b
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 f950 	bl	8004fa8 <i2cSendByteToSlaveReg>
				step = -3;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d0a:	22fd      	movs	r2, #253	; 0xfd
 8003d0c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d0e:	e027      	b.n	8003d60 <i2cMPU6050_init+0xcc>
			case -3:
			{		// PWR Mngt
				i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_PWR_MGMT_1, (MPU6050_PWR1_TEMP_dis|MPU6050_PWR1_CLKSEL));
 8003d10:	2168      	movs	r1, #104	; 0x68
 8003d12:	2308      	movs	r3, #8
 8003d14:	226b      	movs	r2, #107	; 0x6b
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 f946 	bl	8004fa8 <i2cSendByteToSlaveReg>
				i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_PWR_MGMT_2, (MPU6050_PWR2_ACConXY_GYonZ));
 8003d1c:	2168      	movs	r1, #104	; 0x68
 8003d1e:	230e      	movs	r3, #14
 8003d20:	226c      	movs	r2, #108	; 0x6c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 f940 	bl	8004fa8 <i2cSendByteToSlaveReg>
				step = -2;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d2a:	22fe      	movs	r2, #254	; 0xfe
 8003d2c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d2e:	e017      	b.n	8003d60 <i2cMPU6050_init+0xcc>
			case -2:
			{		// GYRO Config
				i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_GYRO_CONFIG, MPU6050_GYRO_FSCALE_250); 	// full scale range of gyroscope = ± 250 °/s
 8003d30:	2168      	movs	r1, #104	; 0x68
 8003d32:	2300      	movs	r3, #0
 8003d34:	221b      	movs	r2, #27
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 f936 	bl	8004fa8 <i2cSendByteToSlaveReg>
				step = -1;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d3e:	22ff      	movs	r2, #255	; 0xff
 8003d40:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d42:	e00d      	b.n	8003d60 <i2cMPU6050_init+0xcc>
			case -1:
			{		// ACCEL Config
				i2cSendByteToSlaveReg(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_ACCEL_CONFIG, MPU6050_ACCEL_RANGE_2); 	// full scale range of accelerometer = ± 2g
 8003d44:	2168      	movs	r1, #104	; 0x68
 8003d46:	2300      	movs	r3, #0
 8003d48:	221c      	movs	r2, #28
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f001 f92c 	bl	8004fa8 <i2cSendByteToSlaveReg>
				step = 0;
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d56:	e003      	b.n	8003d60 <i2cMPU6050_init+0xcc>
			default:
			{
				step = stepStart[SENSOR_MPU6050];
 8003d58:	f06f 0204 	mvn.w	r2, #4
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d5e:	701a      	strb	r2, [r3, #0]
			}
		}
	return step;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <i2cMPU6050_init+0xdc>)
 8003d62:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000033 	.word	0x20000033

08003d74 <i2cMPU6050XYZ>:

int16_t i2cMPU6050XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
	//i2cBurstRegRead(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_AccXYZ,(uint8_t *) xyz, 6);
	uint8_t readBuffer[6];
	i2cBurstRegRead(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_AccXYZ,readBuffer, 6);
 8003d7e:	2168      	movs	r1, #104	; 0x68
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	2206      	movs	r2, #6
 8003d86:	9200      	str	r2, [sp, #0]
 8003d88:	223b      	movs	r2, #59	; 0x3b
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 fa23 	bl	80051d6 <i2cBurstRegRead>
	*xyz = (readBuffer[0]<<8) + readBuffer[1];
 8003d90:	7a3b      	ldrb	r3, [r7, #8]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	7a7b      	ldrb	r3, [r7, #9]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	801a      	strh	r2, [r3, #0]
	xyz++;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3302      	adds	r3, #2
 8003daa:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[2]<<8) + readBuffer[3];
 8003dac:	7abb      	ldrb	r3, [r7, #10]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	7afb      	ldrb	r3, [r7, #11]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	b21a      	sxth	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	801a      	strh	r2, [r3, #0]
	xyz++;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[4]<<8) + readBuffer[5];
 8003dc8:	7b3b      	ldrb	r3, [r7, #12]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	7b7b      	ldrb	r3, [r7, #13]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	801a      	strh	r2, [r3, #0]
	return 0;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <i2cMPU6050GYRO>:
int16_t i2cMPU6050GYRO(I2C_TypeDef *i2c, int16_t *xyz)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	uint8_t readBuffer[6];
	i2cBurstRegRead(i2c, i2cAddr_Sensor[SENSOR_MPU6050], MPU6050_GyroXYZ,readBuffer, 6);
 8003df2:	2168      	movs	r1, #104	; 0x68
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	2206      	movs	r2, #6
 8003dfa:	9200      	str	r2, [sp, #0]
 8003dfc:	2243      	movs	r2, #67	; 0x43
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 f9e9 	bl	80051d6 <i2cBurstRegRead>
	*xyz = (readBuffer[0]<<8) + readBuffer[1];
 8003e04:	7a3b      	ldrb	r3, [r7, #8]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	7a7b      	ldrb	r3, [r7, #9]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	b21a      	sxth	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	801a      	strh	r2, [r3, #0]
	xyz++;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[2]<<8) + readBuffer[3];
 8003e20:	7abb      	ldrb	r3, [r7, #10]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	7afb      	ldrb	r3, [r7, #11]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	801a      	strh	r2, [r3, #0]
	xyz++;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[4]<<8) + readBuffer[5];
 8003e3c:	7b3b      	ldrb	r3, [r7, #12]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	7b7b      	ldrb	r3, [r7, #13]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b21a      	sxth	r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	801a      	strh	r2, [r3, #0]
	return 0;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <getFiltertAccData>:
		}
	}
}

void getFiltertAccData(int16_t *XYZ, float *XYZFiltert, float kFilt)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	uint8_t i;
	for (i = 0; i<=3; i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
 8003e6c:	e032      	b.n	8003ed4 <getFiltertAccData+0x78>
	{
		XYZFiltert[i] *= (1-kFilt);
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4413      	add	r3, r2
 8003e76:	ed93 7a00 	vldr	s14, [r3]
 8003e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc3 7a00 	vstr	s15, [r3]
		XYZFiltert[i] += ((float)XYZ[i] * kFilt);
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	ed93 7a00 	vldr	s14, [r3]
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i<=3; i++)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d9c9      	bls.n	8003e6e <getFiltertAccData+0x12>
	}
}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <getFullStatus1>:
 * read the data of the first system register of the stepper
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void getFullStatus1(uint8_t addr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x81;
 8003ef2:	2381      	movs	r3, #129	; 0x81
 8003ef4:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <getFullStatus1+0x34>)
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	f107 020f 	add.w	r2, r7, #15
 8003efe:	79f9      	ldrb	r1, [r7, #7]
 8003f00:	2301      	movs	r3, #1
 8003f02:	f001 f89f 	bl	8005044 <i2cBurstWrite>
	i2cBurstRead(i2c, addr, statusReg1, 8);
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <getFullStatus1+0x34>)
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	79f9      	ldrb	r1, [r7, #7]
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <getFullStatus1+0x38>)
 8003f10:	f001 f9f9 	bl	8005306 <i2cBurstRead>
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000034 	.word	0x20000034
 8003f20:	200002ac 	.word	0x200002ac

08003f24 <getFullStatus2>:
 * read the data of the second system register of the stepper
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void getFullStatus2(uint8_t addr)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0xFC;
 8003f2e:	23fc      	movs	r3, #252	; 0xfc
 8003f30:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <getFullStatus2+0x34>)
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	f107 020f 	add.w	r2, r7, #15
 8003f3a:	79f9      	ldrb	r1, [r7, #7]
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f001 f881 	bl	8005044 <i2cBurstWrite>
	i2cBurstRead(i2c, addr, statusReg2, 8);
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <getFullStatus2+0x34>)
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	79f9      	ldrb	r1, [r7, #7]
 8003f48:	2308      	movs	r3, #8
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <getFullStatus2+0x38>)
 8003f4c:	f001 f9db 	bl	8005306 <i2cBurstRead>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000034 	.word	0x20000034
 8003f5c:	200002b4 	.word	0x200002b4

08003f60 <setAcceleration>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param uint8_t Databyte - 0x0 .. 0xF, 49Full−step/s^2 .. 40047Full−step/s^2 - for more information view data sheet
 * @returns uint8_t shaft - returns 0 or 1
 */
void setAcceleration(uint8_t addr, uint8_t Databyte)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	460a      	mov	r2, r1
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71bb      	strb	r3, [r7, #6]
	uint8_t befehl = (uint8_t) 0x89;
 8003f70:	2389      	movs	r3, #137	; 0x89
 8003f72:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorParam[8];
	uint8_t schiebeReg;

	getFullStatus1(addr);
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ffb6 	bl	8003ee8 <getFullStatus1>
	getFullStatus2(addr);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ffd0 	bl	8003f24 <getFullStatus2>
	MotorParam[0]=befehl;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	733b      	strb	r3, [r7, #12]
	MotorParam[1]=0xFF;
 8003f88:	23ff      	movs	r3, #255	; 0xff
 8003f8a:	737b      	strb	r3, [r7, #13]
	MotorParam[2]=0xFF;
 8003f8c:	23ff      	movs	r3, #255	; 0xff
 8003f8e:	73bb      	strb	r3, [r7, #14]
	MotorParam[3]=statusReg1[1];		// x|y x=Irun y=Ihold
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <setAcceleration+0xb8>)
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	73fb      	strb	r3, [r7, #15]
	MotorParam[4]=statusReg1[2];		// x|y x=Vmax y=Vmin
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <setAcceleration+0xb8>)
 8003f98:	789b      	ldrb	r3, [r3, #2]
 8003f9a:	743b      	strb	r3, [r7, #16]

	MotorParam[5]=0b00000000;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	747b      	strb	r3, [r7, #17]
	schiebeReg=statusReg2[6];			// xxx|y|zzzz x=SecPosition 10:8 aus StatusReg2
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <setAcceleration+0xbc>)
 8003fa2:	799b      	ldrb	r3, [r3, #6]
 8003fa4:	75bb      	strb	r3, [r7, #22]
	schiebeReg<<=5;
 8003fa6:	7dbb      	ldrb	r3, [r7, #22]
 8003fa8:	015b      	lsls	r3, r3, #5
 8003faa:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]=schiebeReg;
 8003fac:	7dbb      	ldrb	r3, [r7, #22]
 8003fae:	747b      	strb	r3, [r7, #17]

	schiebeReg=statusReg1[3];			// xxx|y|zzzz y=Shaft und z=Acc aus StatusReg1
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <setAcceleration+0xb8>)
 8003fb2:	78db      	ldrb	r3, [r3, #3]
 8003fb4:	75bb      	strb	r3, [r7, #22]
	schiebeReg&=0b00011111;
 8003fb6:	7dbb      	ldrb	r3, [r7, #22]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]+=schiebeReg;
 8003fbe:	7c7a      	ldrb	r2, [r7, #17]
 8003fc0:	7dbb      	ldrb	r3, [r7, #22]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	747b      	strb	r3, [r7, #17]

	MotorParam[6]=statusReg2[5];		// =SecPos(7:0)
 8003fc8:	4b14      	ldr	r3, [pc, #80]	; (800401c <setAcceleration+0xbc>)
 8003fca:	795b      	ldrb	r3, [r3, #5]
 8003fcc:	74bb      	strb	r3, [r7, #18]

	schiebeReg=statusReg1[3];			// xxx|y|zz|xx  x=N/A y=AccShape z=StepMode
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <setAcceleration+0xb8>)
 8003fd0:	78db      	ldrb	r3, [r3, #3]
 8003fd2:	75bb      	strb	r3, [r7, #22]
	schiebeReg>>=3;
 8003fd4:	7dbb      	ldrb	r3, [r7, #22]
 8003fd6:	08db      	lsrs	r3, r3, #3
 8003fd8:	75bb      	strb	r3, [r7, #22]
	MotorParam[7]=schiebeReg;
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	74fb      	strb	r3, [r7, #19]

	schiebeReg=Databyte;				// write acceleration into MotorParam value
 8003fde:	79bb      	ldrb	r3, [r7, #6]
 8003fe0:	75bb      	strb	r3, [r7, #22]
	schiebeReg&=0b00001111;
 8003fe2:	7dbb      	ldrb	r3, [r7, #22]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]&=0b11110000;
 8003fea:	7c7b      	ldrb	r3, [r7, #17]
 8003fec:	f023 030f 	bic.w	r3, r3, #15
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	747b      	strb	r3, [r7, #17]
	MotorParam[5]+=schiebeReg;
 8003ff4:	7c7a      	ldrb	r2, [r7, #17]
 8003ff6:	7dbb      	ldrb	r3, [r7, #22]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	747b      	strb	r3, [r7, #17]


	i2cBurstWrite(i2c, addr,MotorParam,8);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <setAcceleration+0xc0>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f107 020c 	add.w	r2, r7, #12
 8004006:	79f9      	ldrb	r1, [r7, #7]
 8004008:	2308      	movs	r3, #8
 800400a:	f001 f81b 	bl	8005044 <i2cBurstWrite>
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200002ac 	.word	0x200002ac
 800401c:	200002b4 	.word	0x200002b4
 8004020:	20000034 	.word	0x20000034

08004024 <setAccShape>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param uint8_t Databyte - 0x0 / 0x1, `0`: normal acceleration from Vmin to Vmax, `1`: motion at Vmin without acceleration - for more information view data sheet 
 * @returns void
 */
void setAccShape(uint8_t addr, uint8_t Databyte)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	460a      	mov	r2, r1
 800402e:	71fb      	strb	r3, [r7, #7]
 8004030:	4613      	mov	r3, r2
 8004032:	71bb      	strb	r3, [r7, #6]
	uint8_t befehl = (uint8_t) 0x89;
 8004034:	2389      	movs	r3, #137	; 0x89
 8004036:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorParam[8];
	uint8_t schiebeReg;

	getFullStatus1(addr);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff54 	bl	8003ee8 <getFullStatus1>
	getFullStatus2(addr);
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff6e 	bl	8003f24 <getFullStatus2>
	MotorParam[0]=befehl;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	733b      	strb	r3, [r7, #12]
	MotorParam[1]=0xFF;
 800404c:	23ff      	movs	r3, #255	; 0xff
 800404e:	737b      	strb	r3, [r7, #13]
	MotorParam[2]=0xFF;
 8004050:	23ff      	movs	r3, #255	; 0xff
 8004052:	73bb      	strb	r3, [r7, #14]
	MotorParam[3]=statusReg1[1];		// x|y x=Irun y=Ihold
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <setAccShape+0xbc>)
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	73fb      	strb	r3, [r7, #15]
	MotorParam[4]=statusReg1[2];		// x|y x=Vmax y=Vmin
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <setAccShape+0xbc>)
 800405c:	789b      	ldrb	r3, [r3, #2]
 800405e:	743b      	strb	r3, [r7, #16]

	MotorParam[5]=0b00000000;
 8004060:	2300      	movs	r3, #0
 8004062:	747b      	strb	r3, [r7, #17]
	schiebeReg=statusReg2[6];			// xxx|y|zzzz x=SecPosition 10:8 from StatusReg2
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <setAccShape+0xc0>)
 8004066:	799b      	ldrb	r3, [r3, #6]
 8004068:	75bb      	strb	r3, [r7, #22]
	schiebeReg<<=5;
 800406a:	7dbb      	ldrb	r3, [r7, #22]
 800406c:	015b      	lsls	r3, r3, #5
 800406e:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]=schiebeReg;
 8004070:	7dbb      	ldrb	r3, [r7, #22]
 8004072:	747b      	strb	r3, [r7, #17]

	schiebeReg=statusReg1[3];			// xxx|y|zzzz y=Shaft und z=Acc from StatusReg1
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <setAccShape+0xbc>)
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	75bb      	strb	r3, [r7, #22]
	schiebeReg&=0b00011111;
 800407a:	7dbb      	ldrb	r3, [r7, #22]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]+=schiebeReg;
 8004082:	7c7a      	ldrb	r2, [r7, #17]
 8004084:	7dbb      	ldrb	r3, [r7, #22]
 8004086:	4413      	add	r3, r2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	747b      	strb	r3, [r7, #17]

	MotorParam[6]=statusReg2[5];		// =SecPos(7:0)
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <setAccShape+0xc0>)
 800408e:	795b      	ldrb	r3, [r3, #5]
 8004090:	74bb      	strb	r3, [r7, #18]

	schiebeReg=statusReg1[3];			// xxx|y|zz|xx  x=N/A y=AccShape z=StepMode
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <setAccShape+0xbc>)
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	75bb      	strb	r3, [r7, #22]
	schiebeReg>>=3;
 8004098:	7dbb      	ldrb	r3, [r7, #22]
 800409a:	08db      	lsrs	r3, r3, #3
 800409c:	75bb      	strb	r3, [r7, #22]
	MotorParam[7]=schiebeReg;
 800409e:	7dbb      	ldrb	r3, [r7, #22]
 80040a0:	74fb      	strb	r3, [r7, #19]

	schiebeReg=Databyte;				// AccShape Wert in MotorParam schreiben
 80040a2:	79bb      	ldrb	r3, [r7, #6]
 80040a4:	75bb      	strb	r3, [r7, #22]
	schiebeReg&=0b00000001;
 80040a6:	7dbb      	ldrb	r3, [r7, #22]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	75bb      	strb	r3, [r7, #22]
	schiebeReg<<=4;
 80040ae:	7dbb      	ldrb	r3, [r7, #22]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	75bb      	strb	r3, [r7, #22]
	MotorParam[7]&=0b11101111;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	74fb      	strb	r3, [r7, #19]
	MotorParam[7]+=schiebeReg;
 80040be:	7cfa      	ldrb	r2, [r7, #19]
 80040c0:	7dbb      	ldrb	r3, [r7, #22]
 80040c2:	4413      	add	r3, r2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	74fb      	strb	r3, [r7, #19]


	i2cBurstWrite(i2c,addr,MotorParam,8);
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <setAccShape+0xc4>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	f107 020c 	add.w	r2, r7, #12
 80040d0:	79f9      	ldrb	r1, [r7, #7]
 80040d2:	2308      	movs	r3, #8
 80040d4:	f000 ffb6 	bl	8005044 <i2cBurstWrite>
}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	200002ac 	.word	0x200002ac
 80040e4:	200002b4 	.word	0x200002b4
 80040e8:	20000034 	.word	0x20000034

080040ec <setPosition>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param int step - the step the stepper shall go to - for more information view data sheet 
 * @returns void
 */
void setPosition(uint8_t addr, int data)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x8B;
 80040f8:	238b      	movs	r3, #139	; 0x8b
 80040fa:	75fb      	strb	r3, [r7, #23]
	uint8_t sendData[5];
	uint32_t Register;
	sendData[0]= befehl;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	723b      	strb	r3, [r7, #8]
	sendData[1]= 0xFF;
 8004100:	23ff      	movs	r3, #255	; 0xff
 8004102:	727b      	strb	r3, [r7, #9]
	sendData[2]= 0xFF;
 8004104:	23ff      	movs	r3, #255	; 0xff
 8004106:	72bb      	strb	r3, [r7, #10]

	Register = (uint32_t) data;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	613b      	str	r3, [r7, #16]
	Register >>= 8;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	613b      	str	r3, [r7, #16]
	sendData[3] = (uint8_t) Register;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	72fb      	strb	r3, [r7, #11]

	Register = (uint32_t) data;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	613b      	str	r3, [r7, #16]
	Register &= 0b0000000011111111;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	613b      	str	r3, [r7, #16]
	sendData[4] = (uint8_t) Register;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	733b      	strb	r3, [r7, #12]

	i2cBurstWrite(i2c,addr, sendData,5);
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <setPosition+0x54>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	f107 0208 	add.w	r2, r7, #8
 8004130:	79f9      	ldrb	r1, [r7, #7]
 8004132:	2305      	movs	r3, #5
 8004134:	f000 ff86 	bl	8005044 <i2cBurstWrite>
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000034 	.word	0x20000034

08004144 <initMotorParam>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
static void initMotorParam(uint8_t addr, uint8_t rotdir)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	460a      	mov	r2, r1
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	4613      	mov	r3, r2
 8004152:	71bb      	strb	r3, [r7, #6]
	uint8_t befehl = (uint8_t) 0x89;
 8004154:	2389      	movs	r3, #137	; 0x89
 8004156:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorParam[8];

	MotorParam[0]=befehl;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	733b      	strb	r3, [r7, #12]
	MotorParam[1]=0xFF;
 800415c:	23ff      	movs	r3, #255	; 0xff
 800415e:	737b      	strb	r3, [r7, #13]
	MotorParam[2]=0xFF;
 8004160:	23ff      	movs	r3, #255	; 0xff
 8004162:	73bb      	strb	r3, [r7, #14]
	MotorParam[3]=0b11100111;					// xxxx|yyyy x=Irun y=Ihold
 8004164:	23e7      	movs	r3, #231	; 0xe7
 8004166:	73fb      	strb	r3, [r7, #15]
	MotorParam[4]=0b11100010;					// xxxx|yyyy x=Vmax y=Vmin
 8004168:	23e2      	movs	r3, #226	; 0xe2
 800416a:	743b      	strb	r3, [r7, #16]
	if (rotdir == (BOOL) 1)
 800416c:	79bb      	ldrb	r3, [r7, #6]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <initMotorParam+0x34>
	{
		MotorParam[5]=0b00010011;		// xxx|y|zzzz   x=SecPos(10:8) y=Shaft z=Acc(3:0)
 8004172:	2313      	movs	r3, #19
 8004174:	747b      	strb	r3, [r7, #17]
 8004176:	e001      	b.n	800417c <initMotorParam+0x38>
	}
	else
	{
		MotorParam[5]=0b00000011;		// xxx|y|zzzz   x=SecPos(10:8) y=Shaft z=Acc(3:0)
 8004178:	2303      	movs	r3, #3
 800417a:	747b      	strb	r3, [r7, #17]
	}
	MotorParam[6]=0b00000000;			// =SecPos(7:0)
 800417c:	2300      	movs	r3, #0
 800417e:	74bb      	strb	r3, [r7, #18]
	MotorParam[7]=0b00001100;			// xxx|y|zz|xx  x=N/A y=AccShape z=StepMode
 8004180:	230c      	movs	r3, #12
 8004182:	74fb      	strb	r3, [r7, #19]
	i2cBurstWrite(i2c,addr,MotorParam,8);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <initMotorParam+0x58>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	f107 020c 	add.w	r2, r7, #12
 800418c:	79f9      	ldrb	r1, [r7, #7]
 800418e:	2308      	movs	r3, #8
 8004190:	f000 ff58 	bl	8005044 <i2cBurstWrite>
}
 8004194:	bf00      	nop
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000034 	.word	0x20000034

080041a0 <resetPosition>:
 *
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void resetPosition (uint8_t addr)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x86;
 80041aa:	2386      	movs	r3, #134	; 0x86
 80041ac:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <resetPosition+0x28>)
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f107 020f 	add.w	r2, r7, #15
 80041b6:	79f9      	ldrb	r1, [r7, #7]
 80041b8:	2301      	movs	r3, #1
 80041ba:	f000 ff43 	bl	8005044 <i2cBurstWrite>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000034 	.word	0x20000034

080041cc <stepMotorInit>:
 * @param uint8_t mot_addr - 8bit adress of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
void stepMotorInit(uint8_t mot_addr, uint8_t rotdir)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	460a      	mov	r2, r1
 80041d6:	71fb      	strb	r3, [r7, #7]
 80041d8:	4613      	mov	r3, r2
 80041da:	71bb      	strb	r3, [r7, #6]
        17,                                     // set rise time: 17 (experience value)
        I2C_CLOCK_400                           // bus clock
        );
*/
	// Init Motor-Params
	getFullStatus1(mot_addr);					// read the first system register of the stepper
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe82 	bl	8003ee8 <getFullStatus1>
	getFullStatus2(mot_addr); 					// read the second system register of the stepper
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fe9c 	bl	8003f24 <getFullStatus2>

	initMotorParam(mot_addr, rotdir);
 80041ec:	79ba      	ldrb	r2, [r7, #6]
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ffa6 	bl	8004144 <initMotorParam>
	resetPosition(mot_addr); 					/*
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ffd0 	bl	80041a0 <resetPosition>
												 * so that position cannot be the same as that of `runInit(...)`
												 * if the positions are the same --> DEADLOCK!
												 */

	//runInit(mot_addr, 0x8,0x5,0x0002,0x0001); 	// go to reference position
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d03e      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d03b      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d038      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d035      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d032      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d02f      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d02c      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	2b07      	cmp	r3, #7
 8004240:	d029      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d026      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	2b09      	cmp	r3, #9
 800424c:	d023      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b0a      	cmp	r3, #10
 8004252:	d020      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b0b      	cmp	r3, #11
 8004258:	d01d      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d01a      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	2b0d      	cmp	r3, #13
 8004264:	d017      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b0e      	cmp	r3, #14
 800426a:	d014      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d011      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	2b10      	cmp	r3, #16
 8004276:	d00e      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	2b11      	cmp	r3, #17
 800427c:	d00b      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b12      	cmp	r3, #18
 8004282:	d008      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b14      	cmp	r3, #20
 8004288:	d005      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b15      	cmp	r3, #21
 800428e:	d002      	beq.n	8004296 <extiVerifyIrqNum+0x8e>
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	2b16      	cmp	r3, #22
 8004294:	d101      	bne.n	800429a <extiVerifyIrqNum+0x92>
    {
        return true;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <extiVerifyIrqNum+0x94>
    }
    return false;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <extiVerifyTrigger+0x1c>
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <extiVerifyTrigger+0x1c>
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d101      	bne.n	80042c8 <extiVerifyTrigger+0x20>
    {
        return true;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <extiVerifyTrigger+0x22>
    }
    return false;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 80042de:	2300      	movs	r3, #0
 80042e0:	71fb      	strb	r3, [r7, #7]
 80042e2:	e008      	b.n	80042f6 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <extiInit+0x34>)
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	3302      	adds	r3, #2
 80042ea:	2100      	movs	r1, #0
 80042ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	3301      	adds	r3, #1
 80042f4:	71fb      	strb	r3, [r7, #7]
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d9f3      	bls.n	80042e4 <extiInit+0xc>
    }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40013800 	.word	0x40013800

08004310 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f937 	bl	800459c <gpioVerifyPort>
 800432e:	4603      	mov	r3, r0
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 800433a:	23ff      	movs	r3, #255	; 0xff
 800433c:	e08a      	b.n	8004454 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f95d 	bl	8004600 <gpioVerifyPin>
 8004346:	4603      	mov	r3, r0
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8004352:	23fe      	movs	r3, #254	; 0xfe
 8004354:	e07e      	b.n	8004454 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d841      	bhi.n	80043e0 <extiConfigIrq+0xd0>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <extiConfigIrq+0x54>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	080043a5 	.word	0x080043a5
 8004368:	080043a5 	.word	0x080043a5
 800436c:	080043a5 	.word	0x080043a5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043d1 	.word	0x080043d1
 8004398:	080043d1 	.word	0x080043d1
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043d1 	.word	0x080043d1
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
            break;
 80043ae:	e017      	b.n	80043e0 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	73bb      	strb	r3, [r7, #14]
            index = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
            break;
 80043be:	e00f      	b.n	80043e0 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	3b08      	subs	r3, #8
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	73bb      	strb	r3, [r7, #14]
            index = 2;
 80043ca:	2302      	movs	r3, #2
 80043cc:	73fb      	strb	r3, [r7, #15]
            break;
 80043ce:	e007      	b.n	80043e0 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	3b0c      	subs	r3, #12
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	73bb      	strb	r3, [r7, #14]
            index = 3;
 80043da:	2303      	movs	r3, #3
 80043dc:	73fb      	strb	r3, [r7, #15]
            break;
 80043de:	bf00      	nop
    }

    if (GPIOA == port)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	; (800445c <extiConfigIrq+0x14c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d102      	bne.n	80043ee <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 80043e8:	2300      	movs	r3, #0
 80043ea:	737b      	strb	r3, [r7, #13]
 80043ec:	e021      	b.n	8004432 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <extiConfigIrq+0x150>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d102      	bne.n	80043fc <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 80043f6:	2301      	movs	r3, #1
 80043f8:	737b      	strb	r3, [r7, #13]
 80043fa:	e01a      	b.n	8004432 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a19      	ldr	r2, [pc, #100]	; (8004464 <extiConfigIrq+0x154>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d102      	bne.n	800440a <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8004404:	2302      	movs	r3, #2
 8004406:	737b      	strb	r3, [r7, #13]
 8004408:	e013      	b.n	8004432 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <extiConfigIrq+0x158>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d102      	bne.n	8004418 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8004412:	2303      	movs	r3, #3
 8004414:	737b      	strb	r3, [r7, #13]
 8004416:	e00c      	b.n	8004432 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <extiConfigIrq+0x15c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d102      	bne.n	8004426 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8004420:	2304      	movs	r3, #4
 8004422:	737b      	strb	r3, [r7, #13]
 8004424:	e005      	b.n	8004432 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <extiConfigIrq+0x160>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 800442e:	2307      	movs	r3, #7
 8004430:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <extiConfigIrq+0x164>)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3302      	adds	r3, #2
 8004438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800443c:	7b79      	ldrb	r1, [r7, #13]
 800443e:	7bbb      	ldrb	r3, [r7, #14]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	4618      	mov	r0, r3
 8004446:	490b      	ldr	r1, [pc, #44]	; (8004474 <extiConfigIrq+0x164>)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	4302      	orrs	r2, r0
 800444c:	3302      	adds	r3, #2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40020000 	.word	0x40020000
 8004460:	40020400 	.word	0x40020400
 8004464:	40020800 	.word	0x40020800
 8004468:	40020c00 	.word	0x40020c00
 800446c:	40021000 	.word	0x40021000
 8004470:	40021c00 	.word	0x40021c00
 8004474:	40013800 	.word	0x40013800

08004478 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff febf 	bl	8004208 <extiVerifyIrqNum>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8004496:	23d8      	movs	r3, #216	; 0xd8
 8004498:	e00a      	b.n	80044b0 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <extiEnableIrq+0x40>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	79fa      	ldrb	r2, [r7, #7]
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <extiEnableIrq+0x40>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40013c00 	.word	0x40013c00

080044bc <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	460a      	mov	r2, r1
 80044c6:	71fb      	strb	r3, [r7, #7]
 80044c8:	4613      	mov	r3, r2
 80044ca:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fe9a 	bl	8004208 <extiVerifyIrqNum>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 80044e0:	23d8      	movs	r3, #216	; 0xd8
 80044e2:	e055      	b.n	8004590 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 80044e4:	79bb      	ldrb	r3, [r7, #6]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fede 	bl	80042a8 <extiVerifyTrigger>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 80044f8:	23d7      	movs	r3, #215	; 0xd7
 80044fa:	e049      	b.n	8004590 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d115      	bne.n	800452e <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8004502:	4b25      	ldr	r3, [pc, #148]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	79fa      	ldrb	r2, [r7, #7]
 8004508:	2101      	movs	r1, #1
 800450a:	fa01 f202 	lsl.w	r2, r1, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4a21      	ldr	r2, [pc, #132]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	79fa      	ldrb	r2, [r7, #7]
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f202 	lsl.w	r2, r1, r2
 8004522:	43d2      	mvns	r2, r2
 8004524:	4611      	mov	r1, r2
 8004526:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004528:	400b      	ands	r3, r1
 800452a:	60d3      	str	r3, [r2, #12]
 800452c:	e02f      	b.n	800458e <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 800452e:	79bb      	ldrb	r3, [r7, #6]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d115      	bne.n	8004560 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	79fa      	ldrb	r2, [r7, #7]
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f202 	lsl.w	r2, r1, r2
 8004540:	4611      	mov	r1, r2
 8004542:	4a15      	ldr	r2, [pc, #84]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004544:	430b      	orrs	r3, r1
 8004546:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <extiSetTriggerEdge+0xdc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	79fa      	ldrb	r2, [r7, #7]
 800454e:	2101      	movs	r1, #1
 8004550:	fa01 f202 	lsl.w	r2, r1, r2
 8004554:	43d2      	mvns	r2, r2
 8004556:	4611      	mov	r1, r2
 8004558:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <extiSetTriggerEdge+0xdc>)
 800455a:	400b      	ands	r3, r1
 800455c:	6093      	str	r3, [r2, #8]
 800455e:	e016      	b.n	800458e <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8004560:	79bb      	ldrb	r3, [r7, #6]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d113      	bne.n	800458e <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	79fa      	ldrb	r2, [r7, #7]
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f202 	lsl.w	r2, r1, r2
 8004572:	4611      	mov	r1, r2
 8004574:	4a08      	ldr	r2, [pc, #32]	; (8004598 <extiSetTriggerEdge+0xdc>)
 8004576:	430b      	orrs	r3, r1
 8004578:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <extiSetTriggerEdge+0xdc>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	79fa      	ldrb	r2, [r7, #7]
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f202 	lsl.w	r2, r1, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4a03      	ldr	r2, [pc, #12]	; (8004598 <extiSetTriggerEdge+0xdc>)
 800458a:	430b      	orrs	r3, r1
 800458c:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40013c00 	.word	0x40013c00

0800459c <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <gpioVerifyPort+0x4c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <gpioVerifyPort+0x38>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <gpioVerifyPort+0x50>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <gpioVerifyPort+0x38>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <gpioVerifyPort+0x54>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <gpioVerifyPort+0x38>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <gpioVerifyPort+0x58>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <gpioVerifyPort+0x5c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <gpioVerifyPort+0x38>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <gpioVerifyPort+0x60>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <gpioVerifyPort+0x3c>
    {
        return true;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <gpioVerifyPort+0x3e>
    }
    return false;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020800 	.word	0x40020800
 80045f4:	40020c00 	.word	0x40020c00
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40021c00 	.word	0x40021c00

08004600 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d02c      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d029      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d026      	beq.n	800466a <gpioVerifyPin+0x6a>
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d023      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d020      	beq.n	800466a <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d01d      	beq.n	800466a <gpioVerifyPin+0x6a>
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b06      	cmp	r3, #6
 8004632:	d01a      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	2b07      	cmp	r3, #7
 8004638:	d017      	beq.n	800466a <gpioVerifyPin+0x6a>
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d014      	beq.n	800466a <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	2b09      	cmp	r3, #9
 8004644:	d011      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	2b0a      	cmp	r3, #10
 800464a:	d00e      	beq.n	800466a <gpioVerifyPin+0x6a>
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2b0b      	cmp	r3, #11
 8004650:	d00b      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d008      	beq.n	800466a <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b0d      	cmp	r3, #13
 800465c:	d005      	beq.n	800466a <gpioVerifyPin+0x6a>
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b0e      	cmp	r3, #14
 8004662:	d002      	beq.n	800466a <gpioVerifyPin+0x6a>
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	d101      	bne.n	800466e <gpioVerifyPin+0x6e>
    {
        return true;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <gpioVerifyPin+0x70>
    }
    return false;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02c      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d029      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d026      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d023      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d020      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d01d      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d01a      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2b07      	cmp	r3, #7
 80046b4:	d017      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d014      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d011      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	2b0a      	cmp	r3, #10
 80046c6:	d00e      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b0b      	cmp	r3, #11
 80046cc:	d00b      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d008      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	2b0d      	cmp	r3, #13
 80046d8:	d005      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	2b0e      	cmp	r3, #14
 80046de:	d002      	beq.n	80046e6 <gpioVerifyAltFunc+0x6a>
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	d101      	bne.n	80046ea <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <gpioVerifyAltFunc+0x70>
    }

    return false;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <gpioVerifyPinMode+0x22>
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d005      	beq.n	800471a <gpioVerifyPinMode+0x22>
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d002      	beq.n	800471a <gpioVerifyPinMode+0x22>
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d101      	bne.n	800471e <gpioVerifyPinMode+0x26>
    {
        return true;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <gpioVerifyPinMode+0x28>
    }

    return false;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <gpioVerifyOutputType+0x16>
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <gpioVerifyPushPullMode+0x1c>
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d002      	beq.n	8004770 <gpioVerifyPushPullMode+0x1c>
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d101      	bne.n	8004774 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff05 	bl	800459c <gpioVerifyPort>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d042      	beq.n	800481e <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <gpioInitPort+0xa8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d106      	bne.n	80047ae <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <gpioInitPort+0xac>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	4a22      	ldr	r2, [pc, #136]	; (8004830 <gpioInitPort+0xac>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6313      	str	r3, [r2, #48]	; 0x30
 80047ac:	e035      	b.n	800481a <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a20      	ldr	r2, [pc, #128]	; (8004834 <gpioInitPort+0xb0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d106      	bne.n	80047c4 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <gpioInitPort+0xac>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <gpioInitPort+0xac>)
 80047bc:	f043 0302 	orr.w	r3, r3, #2
 80047c0:	6313      	str	r3, [r2, #48]	; 0x30
 80047c2:	e02a      	b.n	800481a <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <gpioInitPort+0xb4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d106      	bne.n	80047da <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <gpioInitPort+0xac>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <gpioInitPort+0xac>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6313      	str	r3, [r2, #48]	; 0x30
 80047d8:	e01f      	b.n	800481a <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <gpioInitPort+0xb8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d106      	bne.n	80047f0 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <gpioInitPort+0xac>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <gpioInitPort+0xac>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	e014      	b.n	800481a <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <gpioInitPort+0xbc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <gpioInitPort+0xac>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <gpioInitPort+0xac>)
 80047fe:	f043 0310 	orr.w	r3, r3, #16
 8004802:	6313      	str	r3, [r2, #48]	; 0x30
 8004804:	e009      	b.n	800481a <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <gpioInitPort+0xc0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d105      	bne.n	800481a <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <gpioInitPort+0xac>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <gpioInitPort+0xac>)
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e001      	b.n	8004822 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40020000 	.word	0x40020000
 8004830:	40023800 	.word	0x40023800
 8004834:	40020400 	.word	0x40020400
 8004838:	40020800 	.word	0x40020800
 800483c:	40020c00 	.word	0x40020c00
 8004840:	40021000 	.word	0x40021000
 8004844:	40021c00 	.word	0x40021c00

08004848 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fea3 	bl	800459c <gpioVerifyPort>
 8004856:	4603      	mov	r3, r0
 8004858:	f083 0301 	eor.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8004862:	f04f 33ff 	mov.w	r3, #4294967295
 8004866:	e041      	b.n	80048ec <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <gpioSelectPort+0xac>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d106      	bne.n	800487e <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8004870:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <gpioSelectPort+0xb0>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <gpioSelectPort+0xb0>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6313      	str	r3, [r2, #48]	; 0x30
 800487c:	e035      	b.n	80048ea <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <gpioSelectPort+0xb4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d106      	bne.n	8004894 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <gpioSelectPort+0xb0>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <gpioSelectPort+0xb0>)
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	e02a      	b.n	80048ea <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <gpioSelectPort+0xb8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d106      	bne.n	80048aa <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <gpioSelectPort+0xb0>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <gpioSelectPort+0xb0>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	6313      	str	r3, [r2, #48]	; 0x30
 80048a8:	e01f      	b.n	80048ea <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <gpioSelectPort+0xbc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d106      	bne.n	80048c0 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <gpioSelectPort+0xb0>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <gpioSelectPort+0xb0>)
 80048b8:	f043 0308 	orr.w	r3, r3, #8
 80048bc:	6313      	str	r3, [r2, #48]	; 0x30
 80048be:	e014      	b.n	80048ea <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <gpioSelectPort+0xc0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d106      	bne.n	80048d6 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <gpioSelectPort+0xb0>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <gpioSelectPort+0xb0>)
 80048ce:	f043 0310 	orr.w	r3, r3, #16
 80048d2:	6313      	str	r3, [r2, #48]	; 0x30
 80048d4:	e009      	b.n	80048ea <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0c      	ldr	r2, [pc, #48]	; (800490c <gpioSelectPort+0xc4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d105      	bne.n	80048ea <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <gpioSelectPort+0xb0>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <gpioSelectPort+0xb0>)
 80048e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40020400 	.word	0x40020400
 8004900:	40020800 	.word	0x40020800
 8004904:	40020c00 	.word	0x40020c00
 8004908:	40021000 	.word	0x40021000
 800490c:	40021c00 	.word	0x40021c00

08004910 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
 800491c:	4613      	mov	r3, r2
 800491e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fe3b 	bl	800459c <gpioVerifyPort>
 8004926:	4603      	mov	r3, r0
 8004928:	f083 0301 	eor.w	r3, r3, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e032      	b.n	800499e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fe60 	bl	8004600 <gpioVerifyPin>
 8004940:	4603      	mov	r3, r0
 8004942:	f083 0301 	eor.w	r3, r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 800494c:	f06f 0301 	mvn.w	r3, #1
 8004950:	e025      	b.n	800499e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8004952:	78bb      	ldrb	r3, [r7, #2]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fecf 	bl	80046f8 <gpioVerifyPinMode>
 800495a:	4603      	mov	r3, r0
 800495c:	f083 0301 	eor.w	r3, r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8004966:	f06f 0305 	mvn.w	r3, #5
 800496a:	e018      	b.n	800499e <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	0052      	lsls	r2, r2, #1
 8004974:	2103      	movs	r1, #3
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	43d2      	mvns	r2, r2
 800497c:	401a      	ands	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8004982:	78bb      	ldrb	r3, [r7, #2]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	78b9      	ldrb	r1, [r7, #2]
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	0052      	lsls	r2, r2, #1
 8004992:	fa01 f202 	lsl.w	r2, r1, r2
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fdf2 	bl	800459c <gpioVerifyPort>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e014      	b.n	80049f4 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fe17 	bl	8004600 <gpioVerifyPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f083 0301 	eor.w	r3, r3, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80049de:	f06f 0301 	mvn.w	r3, #1
 80049e2:	e007      	b.n	80049f4 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2201      	movs	r2, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fdc7 	bl	800459c <gpioVerifyPort>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f083 0301 	eor.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	e015      	b.n	8004a4c <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fdec 	bl	8004600 <gpioVerifyPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f083 0301 	eor.w	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8004a34:	f06f 0301 	mvn.w	r3, #1
 8004a38:	e008      	b.n	8004a4c <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	2201      	movs	r2, #1
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
 8004a60:	4613      	mov	r3, r2
 8004a62:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fd99 	bl	800459c <gpioVerifyPort>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f083 0301 	eor.w	r3, r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e050      	b.n	8004b1e <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fdbe 	bl	8004600 <gpioVerifyPin>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8004a90:	f06f 0301 	mvn.w	r3, #1
 8004a94:	e043      	b.n	8004b1e <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8004a96:	78bb      	ldrb	r3, [r7, #2]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fdef 	bl	800467c <gpioVerifyAltFunc>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f083 0301 	eor.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8004aaa:	f06f 0302 	mvn.w	r3, #2
 8004aae:	e036      	b.n	8004b1e <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ff2a 	bl	8004910 <gpioSelectPinMode>

	if (pin <= PIN7)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	d815      	bhi.n	8004aee <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	210f      	movs	r1, #15
 8004acc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad0:	43d2      	mvns	r2, r2
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	78b9      	ldrb	r1, [r7, #2]
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]
 8004aec:	e016      	b.n	8004b1c <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	3a08      	subs	r2, #8
 8004af6:	0092      	lsls	r2, r2, #2
 8004af8:	210f      	movs	r1, #15
 8004afa:	fa01 f202 	lsl.w	r2, r1, r2
 8004afe:	43d2      	mvns	r2, r2
 8004b00:	401a      	ands	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	78b9      	ldrb	r1, [r7, #2]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	3a08      	subs	r2, #8
 8004b10:	0092      	lsls	r2, r2, #2
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	70fb      	strb	r3, [r7, #3]
 8004b32:	4613      	mov	r3, r2
 8004b34:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fd30 	bl	800459c <gpioVerifyPort>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	e030      	b.n	8004bb0 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fd55 	bl	8004600 <gpioVerifyPin>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f083 0301 	eor.w	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8004b62:	f06f 0301 	mvn.w	r3, #1
 8004b66:	e023      	b.n	8004bb0 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8004b68:	78bb      	ldrb	r3, [r7, #2]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fdde 	bl	800472c <gpioVerifyOutputType>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8004b7c:	f06f 0303 	mvn.w	r3, #3
 8004b80:	e016      	b.n	8004bb0 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8e:	43d2      	mvns	r2, r2
 8004b90:	401a      	ands	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8004b96:	78bb      	ldrb	r3, [r7, #2]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fce7 	bl	800459c <gpioVerifyPort>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f083 0301 	eor.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	e044      	b.n	8004c6a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fd0c 	bl	8004600 <gpioVerifyPin>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8004bf4:	f06f 0301 	mvn.w	r3, #1
 8004bf8:	e037      	b.n	8004c6a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8004bfa:	78bb      	ldrb	r3, [r7, #2]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fda9 	bl	8004754 <gpioVerifyPushPullMode>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f083 0301 	eor.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8004c0e:	f06f 0306 	mvn.w	r3, #6
 8004c12:	e02a      	b.n	8004c6a <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	0052      	lsls	r2, r2, #1
 8004c1c:	2103      	movs	r1, #3
 8004c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c22:	43d2      	mvns	r2, r2
 8004c24:	401a      	ands	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d11a      	bne.n	8004c68 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8004c32:	78bb      	ldrb	r3, [r7, #2]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10a      	bne.n	8004c4e <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	0052      	lsls	r2, r2, #1
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f202 	lsl.w	r2, r1, r2
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e00c      	b.n	8004c68 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8004c4e:	78bb      	ldrb	r3, [r7, #2]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d109      	bne.n	8004c68 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	0052      	lsls	r2, r2, #1
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f202 	lsl.w	r2, r1, r2
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8004cbe:	bf00      	nop
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f9      	beq.n	8004cc0 <__i2c_start+0x16>
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8004cee:	bf00      	nop
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f9      	beq.n	8004cf0 <__i2c_stop+0x16>
 }
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8004d12:	bf00      	nop
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ed      	bne.n	8004d14 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8004d4e:	bf00      	nop
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f9      	beq.n	8004d50 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e002      	b.n	8004d68 <__i2c_Chk_TX_empty+0x22>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b13      	cmp	r3, #19
 8004d6c:	d9f9      	bls.n	8004d62 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <i2cVerifyDutyCycle+0x16>
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <i2cSelectI2C+0x58>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d106      	bne.n	8004dc2 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	4a11      	ldr	r2, [pc, #68]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc0:	e014      	b.n	8004dec <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a0f      	ldr	r2, [pc, #60]	; (8004e04 <i2cSelectI2C+0x60>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d106      	bne.n	8004dd8 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	e009      	b.n	8004dec <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <i2cSelectI2C+0x64>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d105      	bne.n	8004dec <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <i2cSelectI2C+0x5c>)
 8004de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dea:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40005400 	.word	0x40005400
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40005800 	.word	0x40005800
 8004e08:	40005c00 	.word	0x40005c00

08004e0c <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <i2cSetClkSpd+0x2a>
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d008      	beq.n	8004e36 <i2cSetClkSpd+0x2a>
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d005      	beq.n	8004e36 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d002      	beq.n	8004e36 <i2cSetClkSpd+0x2a>
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d160      	bne.n	8004ef8 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8004e36:	bf00      	nop
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e52:	f023 030f 	bic.w	r3, r3, #15
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d836      	bhi.n	8004eda <i2cSetClkSpd+0xce>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <i2cSetClkSpd+0x68>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004ec1 	.word	0x08004ec1
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	61da      	str	r2, [r3, #28]
				break;
 8004e94:	e02e      	b.n	8004ef4 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	61da      	str	r2, [r3, #28]
    			break;
 8004ea2:	e027      	b.n	8004ef4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	61da      	str	r2, [r3, #28]
    				break;
 8004eb0:	e020      	b.n	8004ef4 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f043 0214 	orr.w	r2, r3, #20
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	61da      	str	r2, [r3, #28]
    			break;
 8004ebe:	e019      	b.n	8004ef4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f043 0205 	orr.w	r2, r3, #5
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	61da      	str	r2, [r3, #28]
				break;
 8004ed8:	e00c      	b.n	8004ef4 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	61da      	str	r2, [r3, #28]
    			break;
 8004ef2:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e001      	b.n	8004efc <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8004ef8:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	70fb      	strb	r3, [r7, #3]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70bb      	strb	r3, [r7, #2]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff29 	bl	8004d7c <i2cVerifyDutyCycle>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f083 0301 	eor.w	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8004f36:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8004f3a:	e02f      	b.n	8004f9c <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f42:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8004f56:	f000 fbad 	bl	80056b4 <rccGetPclk1Freq>
 8004f5a:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <i2cInitI2C+0x9c>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0c9a      	lsrs	r2, r3, #18
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2211      	movs	r2, #17
 8004f6e:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8004f84:	787b      	ldrb	r3, [r7, #1]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff3f 	bl	8004e0c <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f043 0201 	orr.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	431bde83 	.word	0x431bde83

08004fa8 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	70fb      	strb	r3, [r7, #3]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70bb      	strb	r3, [r7, #2]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8004fc2:	bf00      	nop
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f9      	bne.n	8004fc4 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fe6a 	bl	8004caa <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8004fd6:	bf00      	nop
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f9      	beq.n	8004fd8 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8004fee:	bf00      	nop
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f9      	beq.n	8004ff0 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fe84 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff fe9f 	bl	8004d46 <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8005008:	78ba      	ldrb	r2, [r7, #2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fe99 	bl	8004d46 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fe78 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 800501a:	787a      	ldrb	r2, [r7, #1]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8005020:	bf00      	nop
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f9      	beq.n	8005022 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fe6b 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fe50 	bl	8004cda <__i2c_stop>


    return I2C_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	460b      	mov	r3, r1
 8005052:	72fb      	strb	r3, [r7, #11]
 8005054:	4613      	mov	r3, r2
 8005056:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 800505c:	bf00      	nop
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f9      	bne.n	800505e <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fe17 	bl	8004caa <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800507c:	bf00      	nop
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f9      	beq.n	800507e <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 800508a:	7afb      	ldrb	r3, [r7, #11]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8005094:	bf00      	nop
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f9      	beq.n	8005096 <i2cBurstWrite+0x52>

    while (numBytes < len)
 80050a2:	e016      	b.n	80050d2 <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fe4e 	bl	8004d46 <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fe2d 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 80050be:	bf00      	nop
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f9      	beq.n	80050c0 <i2cBurstWrite+0x7c>

        numBytes++;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	3301      	adds	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 80050d2:	7dfa      	ldrb	r2, [r7, #23]
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3e4      	bcc.n	80050a4 <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 80050da:	bf00      	nop
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f9      	beq.n	80050dc <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fe0e 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff fdf3 	bl	8004cda <__i2c_stop>

    return I2C_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	72fb      	strb	r3, [r7, #11]
 800510c:	4613      	mov	r3, r2
 800510e:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8005110:	bf00      	nop
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f9      	bne.n	8005112 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff fdc3 	bl	8004caa <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8005124:	bf00      	nop
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f9      	beq.n	8005126 <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800513c:	bf00      	nop
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f9      	beq.n	800513e <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fddd 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8005150:	7aba      	ldrb	r2, [r7, #10]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff fdf5 	bl	8004d46 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff fdd4 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 800516e:	bf00      	nop
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f9      	beq.n	8005170 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 800517c:	7afb      	ldrb	r3, [r7, #11]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	461a      	mov	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800518a:	bf00      	nop
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f9      	beq.n	800518c <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fdb0 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff fd95 	bl	8004cda <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 80051b0:	bf00      	nop
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f9      	beq.n	80051b2 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6919      	ldr	r1, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	b2ca      	uxtb	r2, r1
 80051ca:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	72fb      	strb	r3, [r7, #11]
 80051e4:	4613      	mov	r3, r2
 80051e6:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 80051e8:	bf00      	nop
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f9      	bne.n	80051ea <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fd57 	bl	8004caa <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80051fc:	bf00      	nop
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f9      	beq.n	80051fe <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 800520a:	7afb      	ldrb	r3, [r7, #11]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8005214:	bf00      	nop
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f9      	beq.n	8005216 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fd71 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8005228:	7aba      	ldrb	r2, [r7, #10]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fd89 	bl	8004d46 <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8005234:	bf00      	nop
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f9      	beq.n	8005236 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff fd61 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8005254:	bf00      	nop
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f9      	beq.n	8005256 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8005270:	bf00      	nop
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f9      	beq.n	8005272 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 800528a:	e02e      	b.n	80052ea <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 800528c:	7e3b      	ldrb	r3, [r7, #24]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d117      	bne.n	80052c2 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff fd33 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80052a4:	bf00      	nop
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f9      	beq.n	80052a6 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6919      	ldr	r1, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	b2ca      	uxtb	r2, r1
 80052be:	701a      	strb	r2, [r3, #0]
            break;
 80052c0:	e016      	b.n	80052f0 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff fd21 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80052c8:	bf00      	nop
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f9      	beq.n	80052ca <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6919      	ldr	r1, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	b2ca      	uxtb	r2, r1
 80052e2:	701a      	strb	r2, [r3, #0]
            num--;
 80052e4:	7e3b      	ldrb	r3, [r7, #24]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 80052ea:	7e3b      	ldrb	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1cd      	bne.n	800528c <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7ff fd0a 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fcef 	bl	8004cda <__i2c_stop>

    return I2C_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <i2cBurstRead>:

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	461a      	mov	r2, r3
 8005312:	460b      	mov	r3, r1
 8005314:	72fb      	strb	r3, [r7, #11]
 8005316:	4613      	mov	r3, r2
 8005318:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 800531a:	bf00      	nop
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f9      	bne.n	800531c <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fcb8 	bl	8004caa <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 800533a:	7afb      	ldrb	r3, [r7, #11]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8005348:	bf00      	nop
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f9      	beq.n	800534a <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fcd7 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8005368:	e02e      	b.n	80053c8 <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 800536a:	7abb      	ldrb	r3, [r7, #10]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d11a      	bne.n	80053a6 <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fcc4 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff fca9 	bl	8004cda <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8005388:	bf00      	nop
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f9      	beq.n	800538a <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6919      	ldr	r1, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	b2ca      	uxtb	r2, r1
 80053a2:	701a      	strb	r2, [r3, #0]
            break;
 80053a4:	e013      	b.n	80053ce <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80053a6:	bf00      	nop
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f9      	beq.n	80053a8 <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6919      	ldr	r1, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	b2ca      	uxtb	r2, r1
 80053c0:	701a      	strb	r2, [r3, #0]
            num--;
 80053c2:	7abb      	ldrb	r3, [r7, #10]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 80053c8:	7abb      	ldrb	r3, [r7, #10]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cd      	bne.n	800536a <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fc4f 	bl	8004caa <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	461a      	mov	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fc77 	bl	8004d0a <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e002      	b.n	8005434 <i2cFindSlaveAddr+0x3a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800543a:	d3f8      	bcc.n	800542e <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	e000      	b.n	800544e <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 800544c:	2300      	movs	r3, #0
    }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8005458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800545c:	b094      	sub	sp, #80	; 0x50
 800545e:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8005460:	2300      	movs	r3, #0
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8005464:	2300      	movs	r3, #0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8005468:	2300      	movs	r3, #0
 800546a:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 800546c:	2300      	movs	r3, #0
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8005470:	4b79      	ldr	r3, [pc, #484]	; (8005658 <rccGetSysClock+0x200>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d00d      	beq.n	8005498 <rccGetSysClock+0x40>
 800547c:	2b08      	cmp	r3, #8
 800547e:	f200 80e1 	bhi.w	8005644 <rccGetSysClock+0x1ec>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <rccGetSysClock+0x34>
 8005486:	2b04      	cmp	r3, #4
 8005488:	d003      	beq.n	8005492 <rccGetSysClock+0x3a>
 800548a:	e0db      	b.n	8005644 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 800548c:	4b73      	ldr	r3, [pc, #460]	; (800565c <rccGetSysClock+0x204>)
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8005490:	e0db      	b.n	800564a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8005492:	4b73      	ldr	r3, [pc, #460]	; (8005660 <rccGetSysClock+0x208>)
 8005494:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8005496:	e0d8      	b.n	800564a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005498:	4b6f      	ldr	r3, [pc, #444]	; (8005658 <rccGetSysClock+0x200>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054a2:	4b6d      	ldr	r3, [pc, #436]	; (8005658 <rccGetSysClock+0x200>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d063      	beq.n	8005576 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80054ae:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <rccGetSysClock+0x200>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	099b      	lsrs	r3, r3, #6
 80054b4:	2200      	movs	r2, #0
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
 80054c2:	2300      	movs	r3, #0
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
 80054c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	f04f 0000 	mov.w	r0, #0
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	0159      	lsls	r1, r3, #5
 80054d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054dc:	0150      	lsls	r0, r2, #5
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4621      	mov	r1, r4
 80054e4:	1a51      	subs	r1, r2, r1
 80054e6:	6139      	str	r1, [r7, #16]
 80054e8:	4629      	mov	r1, r5
 80054ea:	eb63 0301 	sbc.w	r3, r3, r1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fc:	4659      	mov	r1, fp
 80054fe:	018b      	lsls	r3, r1, #6
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005506:	4651      	mov	r1, sl
 8005508:	018a      	lsls	r2, r1, #6
 800550a:	4651      	mov	r1, sl
 800550c:	ebb2 0801 	subs.w	r8, r2, r1
 8005510:	4659      	mov	r1, fp
 8005512:	eb63 0901 	sbc.w	r9, r3, r1
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	4623      	mov	r3, r4
 8005530:	eb18 0303 	adds.w	r3, r8, r3
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	462b      	mov	r3, r5
 8005538:	eb49 0303 	adc.w	r3, r9, r3
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800554a:	4629      	mov	r1, r5
 800554c:	024b      	lsls	r3, r1, #9
 800554e:	4621      	mov	r1, r4
 8005550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005554:	4621      	mov	r1, r4
 8005556:	024a      	lsls	r2, r1, #9
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	2200      	movs	r2, #0
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005568:	f7fb fb76 	bl	8000c58 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8005570:	4613      	mov	r3, r2
 8005572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005574:	e058      	b.n	8005628 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8005576:	4b38      	ldr	r3, [pc, #224]	; (8005658 <rccGetSysClock+0x200>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	2200      	movs	r2, #0
 800557e:	4618      	mov	r0, r3
 8005580:	4611      	mov	r1, r2
 8005582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	f04f 0000 	mov.w	r0, #0
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a2:	0150      	lsls	r0, r2, #5
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4641      	mov	r1, r8
 80055aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055c8:	ebb2 040a 	subs.w	r4, r2, sl
 80055cc:	eb63 050b 	sbc.w	r5, r3, fp
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	00eb      	lsls	r3, r5, #3
 80055da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055de:	00e2      	lsls	r2, r4, #3
 80055e0:	4614      	mov	r4, r2
 80055e2:	461d      	mov	r5, r3
 80055e4:	4643      	mov	r3, r8
 80055e6:	18e3      	adds	r3, r4, r3
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	464b      	mov	r3, r9
 80055ec:	eb45 0303 	adc.w	r3, r5, r3
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055fe:	4629      	mov	r1, r5
 8005600:	028b      	lsls	r3, r1, #10
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005608:	4621      	mov	r1, r4
 800560a:	028a      	lsls	r2, r1, #10
 800560c:	4610      	mov	r0, r2
 800560e:	4619      	mov	r1, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005612:	2200      	movs	r2, #0
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	61fa      	str	r2, [r7, #28]
 8005618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800561c:	f7fb fb1c 	bl	8000c58 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8005624:	4613      	mov	r3, r2
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <rccGetSysClock+0x200>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	3301      	adds	r3, #1
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8005638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800563a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8005642:	e002      	b.n	800564a <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <rccGetSysClock+0x204>)
 8005646:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8005648:	bf00      	nop
    }

    return sysClock;
 800564a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800564c:	4618      	mov	r0, r3
 800564e:	3750      	adds	r7, #80	; 0x50
 8005650:	46bd      	mov	sp, r7
 8005652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00f42400 	.word	0x00f42400
 8005660:	007a1200 	.word	0x007a1200

08005664 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 800566a:	f7ff fef5 	bl	8005458 <rccGetSysClock>
 800566e:	4601      	mov	r1, r0
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <rccGetHclkFreq+0x44>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005678:	22f0      	movs	r2, #240	; 0xf0
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	fa92 f2a2 	rbit	r2, r2
 8005682:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	fab2 f282 	clz	r2, r2
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	40d3      	lsrs	r3, r2
 800568e:	4a07      	ldr	r2, [pc, #28]	; (80056ac <rccGetHclkFreq+0x48>)
 8005690:	5cd3      	ldrb	r3, [r2, r3]
 8005692:	fa21 f303 	lsr.w	r3, r1, r3
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <rccGetHclkFreq+0x4c>)
 8005698:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <rccGetHclkFreq+0x4c>)
 800569c:	681b      	ldr	r3, [r3, #0]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	0800a770 	.word	0x0800a770
 80056b0:	20000024 	.word	0x20000024

080056b4 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80056ba:	f7ff ffd3 	bl	8005664 <rccGetHclkFreq>
 80056be:	4601      	mov	r1, r0
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <rccGetPclk1Freq+0x3c>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80056c8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80056cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	fa92 f2a2 	rbit	r2, r2
 80056d4:	603a      	str	r2, [r7, #0]
  return result;
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	fab2 f282 	clz	r2, r2
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	40d3      	lsrs	r3, r2
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <rccGetPclk1Freq+0x40>)
 80056e2:	5cd3      	ldrb	r3, [r2, r3]
 80056e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	0800a770 	.word	0x0800a770

080056f8 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8005700:	bf00      	nop
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f9      	beq.n	8005702 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800570e:	2300      	movs	r3, #0
 8005710:	81fb      	strh	r3, [r7, #14]
 8005712:	e002      	b.n	800571a <__spi_Chk_TX_empty+0x22>
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	3301      	adds	r3, #1
 8005718:	81fb      	strh	r3, [r7, #14]
 800571a:	89fb      	ldrh	r3, [r7, #14]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d9f9      	bls.n	8005714 <__spi_Chk_TX_empty+0x1c>

}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8005736:	bf00      	nop
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f9      	bne.n	8005738 <__spi_Chk_notBSY+0xa>
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <spiVerifySPI+0x3c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <spiVerifySPI+0x28>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <spiVerifySPI+0x40>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <spiVerifySPI+0x28>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <spiVerifySPI+0x44>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <spiVerifySPI+0x28>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <spiVerifySPI+0x48>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d101      	bne.n	8005780 <spiVerifySPI+0x2c>
    {
        return true;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <spiVerifySPI+0x2e>
    }
    return false;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40013000 	.word	0x40013000
 8005794:	40003800 	.word	0x40003800
 8005798:	40003c00 	.word	0x40003c00
 800579c:	40013400 	.word	0x40013400

080057a0 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d014      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d011      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d00e      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d00b      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d008      	beq.n	80057da <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d005      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d002      	beq.n	80057da <spiVerifyClkDivider+0x3a>
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b07      	cmp	r3, #7
 80057d8:	d101      	bne.n	80057de <spiVerifyClkDivider+0x3e>
    {
        return true;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <spiVerifyClkDivider+0x40>
    }
    return false;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d002      	beq.n	8005802 <spiVerifySSM+0x16>
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <spiVerifySSM+0x1a>
    {
        return true;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <spiVerifySSM+0x1c>
    }
    return false;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <spiVerifyOpMode+0x16>
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <spiVerifyOpMode+0x1a>
    {
        return true;
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <spiVerifyOpMode+0x1c>
    }
    return false;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <spiVerifyPhase+0x16>
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <spiVerifyPhase+0x1a>
    {
        return true;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <spiVerifyPhase+0x1c>
    }
    return false;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <spiVerifyIdlePolarity+0x16>
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4603      	mov	r3, r0
 800589c:	70fb      	strb	r3, [r7, #3]
 800589e:	460b      	mov	r3, r1
 80058a0:	70bb      	strb	r3, [r7, #2]
 80058a2:	4613      	mov	r3, r2
 80058a4:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ff77 	bl	80057a0 <spiVerifyClkDivider>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f083 0301 	eor.w	r3, r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80058be:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80058c2:	e0cc      	b.n	8005a5e <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 80058c4:	787b      	ldrb	r3, [r7, #1]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff ff90 	bl	80057ec <spiVerifySSM>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 80058d8:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80058dc:	e0bf      	b.n	8005a5e <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 80058de:	7f3b      	ldrb	r3, [r7, #28]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ff97 	bl	8005814 <spiVerifyOpMode>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f083 0301 	eor.w	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 80058f2:	f06f 0355 	mvn.w	r3, #85	; 0x55
 80058f6:	e0b2      	b.n	8005a5e <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 80058f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff ff9d 	bl	800583c <spiVerifyPhase>
 8005902:	4603      	mov	r3, r0
 8005904:	f083 0301 	eor.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 800590e:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8005912:	e0a4      	b.n	8005a5e <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8005914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ffa3 	bl	8005864 <spiVerifyIdlePolarity>
 800591e:	4603      	mov	r3, r0
 8005920:	f083 0301 	eor.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800592a:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800592e:	e096      	b.n	8005a5e <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	2b07      	cmp	r3, #7
 8005934:	d83a      	bhi.n	80059ac <spiInitSPI+0x120>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <spiInitSPI+0xb0>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800595d 	.word	0x0800595d
 8005940:	08005967 	.word	0x08005967
 8005944:	08005971 	.word	0x08005971
 8005948:	0800597b 	.word	0x0800597b
 800594c:	08005985 	.word	0x08005985
 8005950:	0800598f 	.word	0x0800598f
 8005954:	08005999 	.word	0x08005999
 8005958:	080059a3 	.word	0x080059a3
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005962:	81fb      	strh	r3, [r7, #14]
            break;
 8005964:	e027      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	81fb      	strh	r3, [r7, #14]
            break;
 800596e:	e022      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	f043 0310 	orr.w	r3, r3, #16
 8005976:	81fb      	strh	r3, [r7, #14]
            break;
 8005978:	e01d      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800597a:	89fb      	ldrh	r3, [r7, #14]
 800597c:	f043 0318 	orr.w	r3, r3, #24
 8005980:	81fb      	strh	r3, [r7, #14]
            break;
 8005982:	e018      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	f043 0320 	orr.w	r3, r3, #32
 800598a:	81fb      	strh	r3, [r7, #14]
            break;
 800598c:	e013      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005994:	81fb      	strh	r3, [r7, #14]
            break;
 8005996:	e00e      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8005998:	89fb      	ldrh	r3, [r7, #14]
 800599a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800599e:	81fb      	strh	r3, [r7, #14]
            break;
 80059a0:	e009      	b.n	80059b6 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80059a8:	81fb      	strh	r3, [r7, #14]
            break;
 80059aa:	e004      	b.n	80059b6 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80059ac:	89fb      	ldrh	r3, [r7, #14]
 80059ae:	f043 0318 	orr.w	r3, r3, #24
 80059b2:	81fb      	strh	r3, [r7, #14]
            break;
 80059b4:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 80059b6:	78bb      	ldrb	r3, [r7, #2]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c2:	81fb      	strh	r3, [r7, #14]
 80059c4:	e003      	b.n	80059ce <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059cc:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80059ce:	787b      	ldrb	r3, [r7, #1]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d110      	bne.n	80059f6 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 80059d4:	89fb      	ldrh	r3, [r7, #14]
 80059d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059da:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 80059dc:	7e3b      	ldrb	r3, [r7, #24]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d104      	bne.n	80059ec <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e8:	81fb      	strh	r3, [r7, #14]
 80059ea:	e008      	b.n	80059fe <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 80059ec:	89fb      	ldrh	r3, [r7, #14]
 80059ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f2:	81fb      	strh	r3, [r7, #14]
 80059f4:	e003      	b.n	80059fe <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 80059f6:	89fb      	ldrh	r3, [r7, #14]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059fc:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 80059fe:	7f3b      	ldrb	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8005a04:	89fb      	ldrh	r3, [r7, #14]
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	81fb      	strh	r3, [r7, #14]
 8005a0c:	e003      	b.n	8005a16 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8005a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8005a1e:	89fb      	ldrh	r3, [r7, #14]
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	81fb      	strh	r3, [r7, #14]
 8005a26:	e003      	b.n	8005a30 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8005a28:	89fb      	ldrh	r3, [r7, #14]
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8005a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8005a38:	89fb      	ldrh	r3, [r7, #14]
 8005a3a:	f023 0302 	bic.w	r3, r3, #2
 8005a3e:	81fb      	strh	r3, [r7, #14]
 8005a40:	e003      	b.n	8005a4a <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8005a4a:	89fa      	ldrh	r2, [r7, #14]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f846 	bl	8005ae8 <spiEnableSPI>

    return SPI_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop

08005a68 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <spiSelectSPI+0x6c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d106      	bne.n	8005a86 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <spiSelectSPI+0x70>)
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7c:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <spiSelectSPI+0x70>)
 8005a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a82:	6453      	str	r3, [r2, #68]	; 0x44
 8005a84:	e01f      	b.n	8005ac6 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <spiSelectSPI+0x74>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d106      	bne.n	8005a9c <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <spiSelectSPI+0x70>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <spiSelectSPI+0x70>)
 8005a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a98:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9a:	e014      	b.n	8005ac6 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <spiSelectSPI+0x78>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d106      	bne.n	8005ab2 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <spiSelectSPI+0x70>)
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	; (8005ad8 <spiSelectSPI+0x70>)
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab0:	e009      	b.n	8005ac6 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <spiSelectSPI+0x7c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d105      	bne.n	8005ac6 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <spiSelectSPI+0x70>)
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <spiSelectSPI+0x70>)
 8005ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ac4:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40013000 	.word	0x40013000
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40003800 	.word	0x40003800
 8005ae0:	40003c00 	.word	0x40003c00
 8005ae4:	40013400 	.word	0x40013400

08005ae8 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe2f 	bl	8005754 <spiVerifySPI>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f083 0301 	eor.w	r3, r3, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8005b02:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8005b06:	e006      	b.n	8005b16 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	71fb      	strb	r3, [r7, #7]
 8005b30:	4613      	mov	r3, r2
 8005b32:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fd62 	bl	8004600 <gpioVerifyPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f083 0301 	eor.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8005b48:	f06f 0301 	mvn.w	r3, #1
 8005b4c:	e016      	b.n	8005b7c <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fdd2 	bl	80056f8 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	4619      	mov	r1, r3
 8005b58:	68b8      	ldr	r0, [r7, #8]
 8005b5a:	f7fe ff4f 	bl	80049fc <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8005b5e:	79ba      	ldrb	r2, [r7, #6]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fdc7 	bl	80056f8 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fddf 	bl	800572e <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	4619      	mov	r1, r3
 8005b74:	68b8      	ldr	r0, [r7, #8]
 8005b76:	f7fe ff16 	bl	80049a6 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db0a      	blt.n	8005bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <__NVIC_SetPriority+0x4c>)
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bac:	e00a      	b.n	8005bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <__NVIC_SetPriority+0x50>)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	0112      	lsls	r2, r2, #4
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	761a      	strb	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be8:	d301      	bcc.n	8005bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bea:	2301      	movs	r3, #1
 8005bec:	e00f      	b.n	8005c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bee:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <SysTick_Config+0x40>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bf6:	210f      	movs	r1, #15
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	f7ff ffc2 	bl	8005b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <SysTick_Config+0x40>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <SysTick_Config+0x40>)
 8005c08:	2207      	movs	r2, #7
 8005c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	e000e010 	.word	0xe000e010

08005c1c <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	601a      	str	r2, [r3, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8005c40:	f7fc fa0a 	bl	8002058 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <systickInit+0x24>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ffc2 	bl	8005bd8 <SysTick_Config>
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000024 	.word	0x20000024

08005c60 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	601a      	str	r2, [r3, #0]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <isSystickExpired+0x16>
	{
		timerState = true;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <SysTick_Handler+0x14>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	2000022b 	.word	0x2000022b

08005cb8 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <systickUpdateTimer+0x1a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	1e5a      	subs	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <systickUpdateTimer+0x2c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	2000022b 	.word	0x2000022b

08005ce8 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e011      	b.n	8005d1e <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <systickUpdateTimerList+0x30>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	1e5a      	subs	r2, r3, #1
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3e9      	bcc.n	8005cfa <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <systickUpdateTimerList+0x50>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	2000022b 	.word	0x2000022b

08005d3c <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff ff67 	bl	8005c1c <systickSetMillis>
    while (!isSystickExpired(*timer))
 8005d4e:	e006      	b.n	8005d5e <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <systickDelay+0x44>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ffad 	bl	8005cb8 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ff8a 	bl	8005c7c <isSystickExpired>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f083 0301 	eor.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ed      	bne.n	8005d50 <systickDelay+0x14>
        }
    }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000022b 	.word	0x2000022b

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	4d0d      	ldr	r5, [pc, #52]	; (8005dbc <__libc_init_array+0x38>)
 8005d88:	4c0d      	ldr	r4, [pc, #52]	; (8005dc0 <__libc_init_array+0x3c>)
 8005d8a:	1b64      	subs	r4, r4, r5
 8005d8c:	10a4      	asrs	r4, r4, #2
 8005d8e:	2600      	movs	r6, #0
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	4d0b      	ldr	r5, [pc, #44]	; (8005dc4 <__libc_init_array+0x40>)
 8005d96:	4c0c      	ldr	r4, [pc, #48]	; (8005dc8 <__libc_init_array+0x44>)
 8005d98:	f004 f978 	bl	800a08c <_init>
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	2600      	movs	r6, #0
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	0800ad80 	.word	0x0800ad80
 8005dc0:	0800ad80 	.word	0x0800ad80
 8005dc4:	0800ad80 	.word	0x0800ad80
 8005dc8:	0800ad84 	.word	0x0800ad84

08005dcc <memset>:
 8005dcc:	4402      	add	r2, r0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d100      	bne.n	8005dd6 <memset+0xa>
 8005dd4:	4770      	bx	lr
 8005dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dda:	e7f9      	b.n	8005dd0 <memset+0x4>

08005ddc <__cvt>:
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	b088      	sub	sp, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	461d      	mov	r5, r3
 8005de6:	4614      	mov	r4, r2
 8005de8:	bfbc      	itt	lt
 8005dea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	4614      	movlt	r4, r2
 8005df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005df2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005df4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005df8:	bfb6      	itet	lt
 8005dfa:	461d      	movlt	r5, r3
 8005dfc:	2300      	movge	r3, #0
 8005dfe:	232d      	movlt	r3, #45	; 0x2d
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e04:	f023 0820 	bic.w	r8, r3, #32
 8005e08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e0c:	d005      	beq.n	8005e1a <__cvt+0x3e>
 8005e0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e12:	d100      	bne.n	8005e16 <__cvt+0x3a>
 8005e14:	3601      	adds	r6, #1
 8005e16:	2302      	movs	r3, #2
 8005e18:	e000      	b.n	8005e1c <__cvt+0x40>
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	aa07      	add	r2, sp, #28
 8005e1e:	9204      	str	r2, [sp, #16]
 8005e20:	aa06      	add	r2, sp, #24
 8005e22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e26:	e9cd 3600 	strd	r3, r6, [sp]
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	f000 fcef 	bl	8006810 <_dtoa_r>
 8005e32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e36:	4607      	mov	r7, r0
 8005e38:	d102      	bne.n	8005e40 <__cvt+0x64>
 8005e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e3c:	07db      	lsls	r3, r3, #31
 8005e3e:	d522      	bpl.n	8005e86 <__cvt+0xaa>
 8005e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e44:	eb07 0906 	add.w	r9, r7, r6
 8005e48:	d110      	bne.n	8005e6c <__cvt+0x90>
 8005e4a:	783b      	ldrb	r3, [r7, #0]
 8005e4c:	2b30      	cmp	r3, #48	; 0x30
 8005e4e:	d10a      	bne.n	8005e66 <__cvt+0x8a>
 8005e50:	2200      	movs	r2, #0
 8005e52:	2300      	movs	r3, #0
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e5c:	b918      	cbnz	r0, 8005e66 <__cvt+0x8a>
 8005e5e:	f1c6 0601 	rsb	r6, r6, #1
 8005e62:	f8ca 6000 	str.w	r6, [sl]
 8005e66:	f8da 3000 	ldr.w	r3, [sl]
 8005e6a:	4499      	add	r9, r3
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4620      	mov	r0, r4
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7fa fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e78:	b108      	cbz	r0, 8005e7e <__cvt+0xa2>
 8005e7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e7e:	2230      	movs	r2, #48	; 0x30
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	454b      	cmp	r3, r9
 8005e84:	d307      	bcc.n	8005e96 <__cvt+0xba>
 8005e86:	9b07      	ldr	r3, [sp, #28]
 8005e88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e8a:	1bdb      	subs	r3, r3, r7
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	b008      	add	sp, #32
 8005e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	9107      	str	r1, [sp, #28]
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e7f0      	b.n	8005e80 <__cvt+0xa4>

08005e9e <__exponent>:
 8005e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	bfb8      	it	lt
 8005ea6:	4249      	neglt	r1, r1
 8005ea8:	f803 2b02 	strb.w	r2, [r3], #2
 8005eac:	bfb4      	ite	lt
 8005eae:	222d      	movlt	r2, #45	; 0x2d
 8005eb0:	222b      	movge	r2, #43	; 0x2b
 8005eb2:	2909      	cmp	r1, #9
 8005eb4:	7042      	strb	r2, [r0, #1]
 8005eb6:	dd2a      	ble.n	8005f0e <__exponent+0x70>
 8005eb8:	f10d 0407 	add.w	r4, sp, #7
 8005ebc:	46a4      	mov	ip, r4
 8005ebe:	270a      	movs	r7, #10
 8005ec0:	46a6      	mov	lr, r4
 8005ec2:	460a      	mov	r2, r1
 8005ec4:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ec8:	fb07 1516 	mls	r5, r7, r6, r1
 8005ecc:	3530      	adds	r5, #48	; 0x30
 8005ece:	2a63      	cmp	r2, #99	; 0x63
 8005ed0:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ed4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ed8:	4631      	mov	r1, r6
 8005eda:	dcf1      	bgt.n	8005ec0 <__exponent+0x22>
 8005edc:	3130      	adds	r1, #48	; 0x30
 8005ede:	f1ae 0502 	sub.w	r5, lr, #2
 8005ee2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ee6:	1c44      	adds	r4, r0, #1
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4561      	cmp	r1, ip
 8005eec:	d30a      	bcc.n	8005f04 <__exponent+0x66>
 8005eee:	f10d 0209 	add.w	r2, sp, #9
 8005ef2:	eba2 020e 	sub.w	r2, r2, lr
 8005ef6:	4565      	cmp	r5, ip
 8005ef8:	bf88      	it	hi
 8005efa:	2200      	movhi	r2, #0
 8005efc:	4413      	add	r3, r2
 8005efe:	1a18      	subs	r0, r3, r0
 8005f00:	b003      	add	sp, #12
 8005f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f08:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f0c:	e7ed      	b.n	8005eea <__exponent+0x4c>
 8005f0e:	2330      	movs	r3, #48	; 0x30
 8005f10:	3130      	adds	r1, #48	; 0x30
 8005f12:	7083      	strb	r3, [r0, #2]
 8005f14:	70c1      	strb	r1, [r0, #3]
 8005f16:	1d03      	adds	r3, r0, #4
 8005f18:	e7f1      	b.n	8005efe <__exponent+0x60>
	...

08005f1c <_printf_float>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	ed2d 8b02 	vpush	{d8}
 8005f24:	b091      	sub	sp, #68	; 0x44
 8005f26:	460c      	mov	r4, r1
 8005f28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	461f      	mov	r7, r3
 8005f30:	4605      	mov	r5, r0
 8005f32:	f001 fa5b 	bl	80073ec <_localeconv_r>
 8005f36:	f8d0 a000 	ldr.w	sl, [r0]
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	f7fa f950 	bl	80001e0 <strlen>
 8005f40:	2300      	movs	r3, #0
 8005f42:	930e      	str	r3, [sp, #56]	; 0x38
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	9309      	str	r3, [sp, #36]	; 0x24
 8005f48:	f8d8 3000 	ldr.w	r3, [r8]
 8005f4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f50:	3307      	adds	r3, #7
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	f103 0208 	add.w	r2, r3, #8
 8005f5a:	f8c8 2000 	str.w	r2, [r8]
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005f74:	ee08 0a10 	vmov	s16, r0
 8005f78:	4ba0      	ldr	r3, [pc, #640]	; (80061fc <_printf_float+0x2e0>)
 8005f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	f7fa fddb 	bl	8000b3c <__aeabi_dcmpun>
 8005f86:	bb88      	cbnz	r0, 8005fec <_printf_float+0xd0>
 8005f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f8c:	4b9b      	ldr	r3, [pc, #620]	; (80061fc <_printf_float+0x2e0>)
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	f7fa fdb5 	bl	8000b00 <__aeabi_dcmple>
 8005f96:	bb48      	cbnz	r0, 8005fec <_printf_float+0xd0>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa fda4 	bl	8000aec <__aeabi_dcmplt>
 8005fa4:	b110      	cbz	r0, 8005fac <_printf_float+0x90>
 8005fa6:	232d      	movs	r3, #45	; 0x2d
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	4b94      	ldr	r3, [pc, #592]	; (8006200 <_printf_float+0x2e4>)
 8005fae:	4895      	ldr	r0, [pc, #596]	; (8006204 <_printf_float+0x2e8>)
 8005fb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fb4:	bf94      	ite	ls
 8005fb6:	4698      	movls	r8, r3
 8005fb8:	4680      	movhi	r8, r0
 8005fba:	2303      	movs	r3, #3
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4633      	mov	r3, r6
 8005fce:	aa0f      	add	r2, sp, #60	; 0x3c
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f9da 	bl	800638c <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f040 8092 	bne.w	8006102 <_printf_float+0x1e6>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	b011      	add	sp, #68	; 0x44
 8005fe4:	ecbd 8b02 	vpop	{d8}
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	4642      	mov	r2, r8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fda2 	bl	8000b3c <__aeabi_dcmpun>
 8005ff8:	b140      	cbz	r0, 800600c <_printf_float+0xf0>
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbc      	itt	lt
 8006000:	232d      	movlt	r3, #45	; 0x2d
 8006002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006006:	4880      	ldr	r0, [pc, #512]	; (8006208 <_printf_float+0x2ec>)
 8006008:	4b80      	ldr	r3, [pc, #512]	; (800620c <_printf_float+0x2f0>)
 800600a:	e7d1      	b.n	8005fb0 <_printf_float+0x94>
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8006014:	d143      	bne.n	800609e <_printf_float+0x182>
 8006016:	2306      	movs	r3, #6
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	aa0e      	add	r2, sp, #56	; 0x38
 8006022:	e9cd b204 	strd	fp, r2, [sp, #16]
 8006026:	aa0d      	add	r2, sp, #52	; 0x34
 8006028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602c:	9203      	str	r2, [sp, #12]
 800602e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006032:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	4628      	mov	r0, r5
 8006042:	910a      	str	r1, [sp, #40]	; 0x28
 8006044:	f7ff feca 	bl	8005ddc <__cvt>
 8006048:	990a      	ldr	r1, [sp, #40]	; 0x28
 800604a:	2947      	cmp	r1, #71	; 0x47
 800604c:	4680      	mov	r8, r0
 800604e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006050:	d108      	bne.n	8006064 <_printf_float+0x148>
 8006052:	1cc8      	adds	r0, r1, #3
 8006054:	db02      	blt.n	800605c <_printf_float+0x140>
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	4299      	cmp	r1, r3
 800605a:	dd40      	ble.n	80060de <_printf_float+0x1c2>
 800605c:	f1ab 0b02 	sub.w	fp, fp, #2
 8006060:	fa5f fb8b 	uxtb.w	fp, fp
 8006064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006068:	d81f      	bhi.n	80060aa <_printf_float+0x18e>
 800606a:	3901      	subs	r1, #1
 800606c:	465a      	mov	r2, fp
 800606e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006072:	910d      	str	r1, [sp, #52]	; 0x34
 8006074:	f7ff ff13 	bl	8005e9e <__exponent>
 8006078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800607a:	1813      	adds	r3, r2, r0
 800607c:	2a01      	cmp	r2, #1
 800607e:	4681      	mov	r9, r0
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	dc02      	bgt.n	800608a <_printf_float+0x16e>
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	07d2      	lsls	r2, r2, #31
 8006088:	d501      	bpl.n	800608e <_printf_float+0x172>
 800608a:	3301      	adds	r3, #1
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006092:	2b00      	cmp	r3, #0
 8006094:	d099      	beq.n	8005fca <_printf_float+0xae>
 8006096:	232d      	movs	r3, #45	; 0x2d
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	e795      	b.n	8005fca <_printf_float+0xae>
 800609e:	2947      	cmp	r1, #71	; 0x47
 80060a0:	d1bb      	bne.n	800601a <_printf_float+0xfe>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1b9      	bne.n	800601a <_printf_float+0xfe>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7b6      	b.n	8006018 <_printf_float+0xfc>
 80060aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060ae:	d118      	bne.n	80060e2 <_printf_float+0x1c6>
 80060b0:	2900      	cmp	r1, #0
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	dd0b      	ble.n	80060ce <_printf_float+0x1b2>
 80060b6:	6121      	str	r1, [r4, #16]
 80060b8:	b913      	cbnz	r3, 80060c0 <_printf_float+0x1a4>
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	07d0      	lsls	r0, r2, #31
 80060be:	d502      	bpl.n	80060c6 <_printf_float+0x1aa>
 80060c0:	3301      	adds	r3, #1
 80060c2:	440b      	add	r3, r1
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	e7df      	b.n	800608e <_printf_float+0x172>
 80060ce:	b913      	cbnz	r3, 80060d6 <_printf_float+0x1ba>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	07d2      	lsls	r2, r2, #31
 80060d4:	d501      	bpl.n	80060da <_printf_float+0x1be>
 80060d6:	3302      	adds	r3, #2
 80060d8:	e7f4      	b.n	80060c4 <_printf_float+0x1a8>
 80060da:	2301      	movs	r3, #1
 80060dc:	e7f2      	b.n	80060c4 <_printf_float+0x1a8>
 80060de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e4:	4299      	cmp	r1, r3
 80060e6:	db05      	blt.n	80060f4 <_printf_float+0x1d8>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	6121      	str	r1, [r4, #16]
 80060ec:	07d8      	lsls	r0, r3, #31
 80060ee:	d5ea      	bpl.n	80060c6 <_printf_float+0x1aa>
 80060f0:	1c4b      	adds	r3, r1, #1
 80060f2:	e7e7      	b.n	80060c4 <_printf_float+0x1a8>
 80060f4:	2900      	cmp	r1, #0
 80060f6:	bfd4      	ite	le
 80060f8:	f1c1 0202 	rsble	r2, r1, #2
 80060fc:	2201      	movgt	r2, #1
 80060fe:	4413      	add	r3, r2
 8006100:	e7e0      	b.n	80060c4 <_printf_float+0x1a8>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	055a      	lsls	r2, r3, #21
 8006106:	d407      	bmi.n	8006118 <_printf_float+0x1fc>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	4642      	mov	r2, r8
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	d12c      	bne.n	8006170 <_printf_float+0x254>
 8006116:	e762      	b.n	8005fde <_printf_float+0xc2>
 8006118:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800611c:	f240 80e0 	bls.w	80062e0 <_printf_float+0x3c4>
 8006120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	f7fa fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800612c:	2800      	cmp	r0, #0
 800612e:	d034      	beq.n	800619a <_printf_float+0x27e>
 8006130:	4a37      	ldr	r2, [pc, #220]	; (8006210 <_printf_float+0x2f4>)
 8006132:	2301      	movs	r3, #1
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f af4f 	beq.w	8005fde <_printf_float+0xc2>
 8006140:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006144:	429a      	cmp	r2, r3
 8006146:	db02      	blt.n	800614e <_printf_float+0x232>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07d8      	lsls	r0, r3, #31
 800614c:	d510      	bpl.n	8006170 <_printf_float+0x254>
 800614e:	ee18 3a10 	vmov	r3, s16
 8006152:	4652      	mov	r2, sl
 8006154:	4631      	mov	r1, r6
 8006156:	4628      	mov	r0, r5
 8006158:	47b8      	blx	r7
 800615a:	3001      	adds	r0, #1
 800615c:	f43f af3f 	beq.w	8005fde <_printf_float+0xc2>
 8006160:	f04f 0800 	mov.w	r8, #0
 8006164:	f104 091a 	add.w	r9, r4, #26
 8006168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800616a:	3b01      	subs	r3, #1
 800616c:	4543      	cmp	r3, r8
 800616e:	dc09      	bgt.n	8006184 <_printf_float+0x268>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	079b      	lsls	r3, r3, #30
 8006174:	f100 8105 	bmi.w	8006382 <_printf_float+0x466>
 8006178:	68e0      	ldr	r0, [r4, #12]
 800617a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617c:	4298      	cmp	r0, r3
 800617e:	bfb8      	it	lt
 8006180:	4618      	movlt	r0, r3
 8006182:	e72e      	b.n	8005fe2 <_printf_float+0xc6>
 8006184:	2301      	movs	r3, #1
 8006186:	464a      	mov	r2, r9
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	f43f af25 	beq.w	8005fde <_printf_float+0xc2>
 8006194:	f108 0801 	add.w	r8, r8, #1
 8006198:	e7e6      	b.n	8006168 <_printf_float+0x24c>
 800619a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800619c:	2b00      	cmp	r3, #0
 800619e:	dc39      	bgt.n	8006214 <_printf_float+0x2f8>
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <_printf_float+0x2f4>)
 80061a2:	2301      	movs	r3, #1
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f af17 	beq.w	8005fde <_printf_float+0xc2>
 80061b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d102      	bne.n	80061be <_printf_float+0x2a2>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	d5d8      	bpl.n	8006170 <_printf_float+0x254>
 80061be:	ee18 3a10 	vmov	r3, s16
 80061c2:	4652      	mov	r2, sl
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	f43f af07 	beq.w	8005fde <_printf_float+0xc2>
 80061d0:	f04f 0900 	mov.w	r9, #0
 80061d4:	f104 0a1a 	add.w	sl, r4, #26
 80061d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061da:	425b      	negs	r3, r3
 80061dc:	454b      	cmp	r3, r9
 80061de:	dc01      	bgt.n	80061e4 <_printf_float+0x2c8>
 80061e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e2:	e792      	b.n	800610a <_printf_float+0x1ee>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4652      	mov	r2, sl
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f aef5 	beq.w	8005fde <_printf_float+0xc2>
 80061f4:	f109 0901 	add.w	r9, r9, #1
 80061f8:	e7ee      	b.n	80061d8 <_printf_float+0x2bc>
 80061fa:	bf00      	nop
 80061fc:	7fefffff 	.word	0x7fefffff
 8006200:	0800a784 	.word	0x0800a784
 8006204:	0800a788 	.word	0x0800a788
 8006208:	0800a790 	.word	0x0800a790
 800620c:	0800a78c 	.word	0x0800a78c
 8006210:	0800a794 	.word	0x0800a794
 8006214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006216:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006218:	429a      	cmp	r2, r3
 800621a:	bfa8      	it	ge
 800621c:	461a      	movge	r2, r3
 800621e:	2a00      	cmp	r2, #0
 8006220:	4691      	mov	r9, r2
 8006222:	dc37      	bgt.n	8006294 <_printf_float+0x378>
 8006224:	f04f 0b00 	mov.w	fp, #0
 8006228:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622c:	f104 021a 	add.w	r2, r4, #26
 8006230:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006232:	9309      	str	r3, [sp, #36]	; 0x24
 8006234:	eba3 0309 	sub.w	r3, r3, r9
 8006238:	455b      	cmp	r3, fp
 800623a:	dc33      	bgt.n	80062a4 <_printf_float+0x388>
 800623c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006240:	429a      	cmp	r2, r3
 8006242:	db3b      	blt.n	80062bc <_printf_float+0x3a0>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	07da      	lsls	r2, r3, #31
 8006248:	d438      	bmi.n	80062bc <_printf_float+0x3a0>
 800624a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800624c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006250:	1a9a      	subs	r2, r3, r2
 8006252:	eba3 0901 	sub.w	r9, r3, r1
 8006256:	4591      	cmp	r9, r2
 8006258:	bfa8      	it	ge
 800625a:	4691      	movge	r9, r2
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	dc35      	bgt.n	80062ce <_printf_float+0x3b2>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800626a:	f104 0a1a 	add.w	sl, r4, #26
 800626e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	eba3 0309 	sub.w	r3, r3, r9
 8006278:	4543      	cmp	r3, r8
 800627a:	f77f af79 	ble.w	8006170 <_printf_float+0x254>
 800627e:	2301      	movs	r3, #1
 8006280:	4652      	mov	r2, sl
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f aea8 	beq.w	8005fde <_printf_float+0xc2>
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	e7ec      	b.n	800626e <_printf_float+0x352>
 8006294:	4613      	mov	r3, r2
 8006296:	4631      	mov	r1, r6
 8006298:	4642      	mov	r2, r8
 800629a:	4628      	mov	r0, r5
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	d1c0      	bne.n	8006224 <_printf_float+0x308>
 80062a2:	e69c      	b.n	8005fde <_printf_float+0xc2>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	9209      	str	r2, [sp, #36]	; 0x24
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f ae95 	beq.w	8005fde <_printf_float+0xc2>
 80062b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b6:	f10b 0b01 	add.w	fp, fp, #1
 80062ba:	e7b9      	b.n	8006230 <_printf_float+0x314>
 80062bc:	ee18 3a10 	vmov	r3, s16
 80062c0:	4652      	mov	r2, sl
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1be      	bne.n	800624a <_printf_float+0x32e>
 80062cc:	e687      	b.n	8005fde <_printf_float+0xc2>
 80062ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d0:	464b      	mov	r3, r9
 80062d2:	4442      	add	r2, r8
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	d1c1      	bne.n	8006262 <_printf_float+0x346>
 80062de:	e67e      	b.n	8005fde <_printf_float+0xc2>
 80062e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062e2:	2a01      	cmp	r2, #1
 80062e4:	dc01      	bgt.n	80062ea <_printf_float+0x3ce>
 80062e6:	07db      	lsls	r3, r3, #31
 80062e8:	d538      	bpl.n	800635c <_printf_float+0x440>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4642      	mov	r2, r8
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f ae72 	beq.w	8005fde <_printf_float+0xc2>
 80062fa:	ee18 3a10 	vmov	r3, s16
 80062fe:	4652      	mov	r2, sl
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f ae69 	beq.w	8005fde <_printf_float+0xc2>
 800630c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	f7fa fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006318:	b9d8      	cbnz	r0, 8006352 <_printf_float+0x436>
 800631a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800631c:	f108 0201 	add.w	r2, r8, #1
 8006320:	3b01      	subs	r3, #1
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	d10e      	bne.n	800634a <_printf_float+0x42e>
 800632c:	e657      	b.n	8005fde <_printf_float+0xc2>
 800632e:	2301      	movs	r3, #1
 8006330:	4652      	mov	r2, sl
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f ae50 	beq.w	8005fde <_printf_float+0xc2>
 800633e:	f108 0801 	add.w	r8, r8, #1
 8006342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006344:	3b01      	subs	r3, #1
 8006346:	4543      	cmp	r3, r8
 8006348:	dcf1      	bgt.n	800632e <_printf_float+0x412>
 800634a:	464b      	mov	r3, r9
 800634c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006350:	e6dc      	b.n	800610c <_printf_float+0x1f0>
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	f104 0a1a 	add.w	sl, r4, #26
 800635a:	e7f2      	b.n	8006342 <_printf_float+0x426>
 800635c:	2301      	movs	r3, #1
 800635e:	4642      	mov	r2, r8
 8006360:	e7df      	b.n	8006322 <_printf_float+0x406>
 8006362:	2301      	movs	r3, #1
 8006364:	464a      	mov	r2, r9
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae36 	beq.w	8005fde <_printf_float+0xc2>
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	4543      	cmp	r3, r8
 800637e:	dcf0      	bgt.n	8006362 <_printf_float+0x446>
 8006380:	e6fa      	b.n	8006178 <_printf_float+0x25c>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 0919 	add.w	r9, r4, #25
 800638a:	e7f4      	b.n	8006376 <_printf_float+0x45a>

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4699      	mov	r9, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d8:	1e13      	subs	r3, r2, #0
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e8:	4649      	mov	r1, r9
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	68e5      	ldr	r5, [r4, #12]
 80063f6:	6832      	ldr	r2, [r6, #0]
 80063f8:	f003 0306 	and.w	r3, r3, #6
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	bf08      	it	eq
 8006400:	1aad      	subeq	r5, r5, r2
 8006402:	68a3      	ldr	r3, [r4, #8]
 8006404:	6922      	ldr	r2, [r4, #16]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4649      	mov	r1, r9
 8006428:	4638      	mov	r0, r7
 800642a:	47c0      	blx	r8
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	; 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4649      	mov	r1, r9
 800645a:	4638      	mov	r0, r7
 800645c:	47c0      	blx	r8
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006470:	2f78      	cmp	r7, #120	; 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	; 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d8 	beq.w	800663a <_printf_i+0x1d2>
 800648a:	2f58      	cmp	r7, #88	; 0x58
 800648c:	f000 80a3 	beq.w	80065d6 <_printf_i+0x16e>
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	; (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006621 	.word	0x08006621
 80064d8:	08006545 	.word	0x08006545
 80064dc:	08006603 	.word	0x08006603
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006643 	.word	0x08006643
 80064ec:	08006491 	.word	0x08006491
 80064f0:	08006545 	.word	0x08006545
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	0800660b 	.word	0x0800660b
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e0a3      	b.n	800665c <_printf_i+0x1f4>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	6829      	ldr	r1, [r5, #0]
 8006518:	0606      	lsls	r6, r0, #24
 800651a:	f101 0304 	add.w	r3, r1, #4
 800651e:	d50a      	bpl.n	8006536 <_printf_i+0xce>
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	2e00      	cmp	r6, #0
 8006526:	da03      	bge.n	8006530 <_printf_i+0xc8>
 8006528:	232d      	movs	r3, #45	; 0x2d
 800652a:	4276      	negs	r6, r6
 800652c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006530:	485e      	ldr	r0, [pc, #376]	; (80066ac <_printf_i+0x244>)
 8006532:	230a      	movs	r3, #10
 8006534:	e019      	b.n	800656a <_printf_i+0x102>
 8006536:	680e      	ldr	r6, [r1, #0]
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653e:	bf18      	it	ne
 8006540:	b236      	sxthne	r6, r6
 8006542:	e7ef      	b.n	8006524 <_printf_i+0xbc>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	1d19      	adds	r1, r3, #4
 800654a:	6029      	str	r1, [r5, #0]
 800654c:	0601      	lsls	r1, r0, #24
 800654e:	d501      	bpl.n	8006554 <_printf_i+0xec>
 8006550:	681e      	ldr	r6, [r3, #0]
 8006552:	e002      	b.n	800655a <_printf_i+0xf2>
 8006554:	0646      	lsls	r6, r0, #25
 8006556:	d5fb      	bpl.n	8006550 <_printf_i+0xe8>
 8006558:	881e      	ldrh	r6, [r3, #0]
 800655a:	4854      	ldr	r0, [pc, #336]	; (80066ac <_printf_i+0x244>)
 800655c:	2f6f      	cmp	r7, #111	; 0x6f
 800655e:	bf0c      	ite	eq
 8006560:	2308      	moveq	r3, #8
 8006562:	230a      	movne	r3, #10
 8006564:	2100      	movs	r1, #0
 8006566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800656a:	6865      	ldr	r5, [r4, #4]
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	2d00      	cmp	r5, #0
 8006570:	bfa2      	ittt	ge
 8006572:	6821      	ldrge	r1, [r4, #0]
 8006574:	f021 0104 	bicge.w	r1, r1, #4
 8006578:	6021      	strge	r1, [r4, #0]
 800657a:	b90e      	cbnz	r6, 8006580 <_printf_i+0x118>
 800657c:	2d00      	cmp	r5, #0
 800657e:	d04d      	beq.n	800661c <_printf_i+0x1b4>
 8006580:	4615      	mov	r5, r2
 8006582:	fbb6 f1f3 	udiv	r1, r6, r3
 8006586:	fb03 6711 	mls	r7, r3, r1, r6
 800658a:	5dc7      	ldrb	r7, [r0, r7]
 800658c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006590:	4637      	mov	r7, r6
 8006592:	42bb      	cmp	r3, r7
 8006594:	460e      	mov	r6, r1
 8006596:	d9f4      	bls.n	8006582 <_printf_i+0x11a>
 8006598:	2b08      	cmp	r3, #8
 800659a:	d10b      	bne.n	80065b4 <_printf_i+0x14c>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07de      	lsls	r6, r3, #31
 80065a0:	d508      	bpl.n	80065b4 <_printf_i+0x14c>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	6861      	ldr	r1, [r4, #4]
 80065a6:	4299      	cmp	r1, r3
 80065a8:	bfde      	ittt	le
 80065aa:	2330      	movle	r3, #48	; 0x30
 80065ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065b4:	1b52      	subs	r2, r2, r5
 80065b6:	6122      	str	r2, [r4, #16]
 80065b8:	f8cd a000 	str.w	sl, [sp]
 80065bc:	464b      	mov	r3, r9
 80065be:	aa03      	add	r2, sp, #12
 80065c0:	4621      	mov	r1, r4
 80065c2:	4640      	mov	r0, r8
 80065c4:	f7ff fee2 	bl	800638c <_printf_common>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d14c      	bne.n	8006666 <_printf_i+0x1fe>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	b004      	add	sp, #16
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	4835      	ldr	r0, [pc, #212]	; (80066ac <_printf_i+0x244>)
 80065d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065dc:	6829      	ldr	r1, [r5, #0]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e4:	6029      	str	r1, [r5, #0]
 80065e6:	061d      	lsls	r5, r3, #24
 80065e8:	d514      	bpl.n	8006614 <_printf_i+0x1ac>
 80065ea:	07df      	lsls	r7, r3, #31
 80065ec:	bf44      	itt	mi
 80065ee:	f043 0320 	orrmi.w	r3, r3, #32
 80065f2:	6023      	strmi	r3, [r4, #0]
 80065f4:	b91e      	cbnz	r6, 80065fe <_printf_i+0x196>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f023 0320 	bic.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2310      	movs	r3, #16
 8006600:	e7b0      	b.n	8006564 <_printf_i+0xfc>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f043 0320 	orr.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2378      	movs	r3, #120	; 0x78
 800660c:	4828      	ldr	r0, [pc, #160]	; (80066b0 <_printf_i+0x248>)
 800660e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006612:	e7e3      	b.n	80065dc <_printf_i+0x174>
 8006614:	0659      	lsls	r1, r3, #25
 8006616:	bf48      	it	mi
 8006618:	b2b6      	uxthmi	r6, r6
 800661a:	e7e6      	b.n	80065ea <_printf_i+0x182>
 800661c:	4615      	mov	r5, r2
 800661e:	e7bb      	b.n	8006598 <_printf_i+0x130>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	6826      	ldr	r6, [r4, #0]
 8006624:	6961      	ldr	r1, [r4, #20]
 8006626:	1d18      	adds	r0, r3, #4
 8006628:	6028      	str	r0, [r5, #0]
 800662a:	0635      	lsls	r5, r6, #24
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	d501      	bpl.n	8006634 <_printf_i+0x1cc>
 8006630:	6019      	str	r1, [r3, #0]
 8006632:	e002      	b.n	800663a <_printf_i+0x1d2>
 8006634:	0670      	lsls	r0, r6, #25
 8006636:	d5fb      	bpl.n	8006630 <_printf_i+0x1c8>
 8006638:	8019      	strh	r1, [r3, #0]
 800663a:	2300      	movs	r3, #0
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	4615      	mov	r5, r2
 8006640:	e7ba      	b.n	80065b8 <_printf_i+0x150>
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	1d1a      	adds	r2, r3, #4
 8006646:	602a      	str	r2, [r5, #0]
 8006648:	681d      	ldr	r5, [r3, #0]
 800664a:	6862      	ldr	r2, [r4, #4]
 800664c:	2100      	movs	r1, #0
 800664e:	4628      	mov	r0, r5
 8006650:	f7f9 fdce 	bl	80001f0 <memchr>
 8006654:	b108      	cbz	r0, 800665a <_printf_i+0x1f2>
 8006656:	1b40      	subs	r0, r0, r5
 8006658:	6060      	str	r0, [r4, #4]
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	2300      	movs	r3, #0
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006664:	e7a8      	b.n	80065b8 <_printf_i+0x150>
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	462a      	mov	r2, r5
 800666a:	4649      	mov	r1, r9
 800666c:	4640      	mov	r0, r8
 800666e:	47d0      	blx	sl
 8006670:	3001      	adds	r0, #1
 8006672:	d0ab      	beq.n	80065cc <_printf_i+0x164>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	079b      	lsls	r3, r3, #30
 8006678:	d413      	bmi.n	80066a2 <_printf_i+0x23a>
 800667a:	68e0      	ldr	r0, [r4, #12]
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	4298      	cmp	r0, r3
 8006680:	bfb8      	it	lt
 8006682:	4618      	movlt	r0, r3
 8006684:	e7a4      	b.n	80065d0 <_printf_i+0x168>
 8006686:	2301      	movs	r3, #1
 8006688:	4632      	mov	r2, r6
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d09b      	beq.n	80065cc <_printf_i+0x164>
 8006694:	3501      	adds	r5, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	9903      	ldr	r1, [sp, #12]
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	42ab      	cmp	r3, r5
 800669e:	dcf2      	bgt.n	8006686 <_printf_i+0x21e>
 80066a0:	e7eb      	b.n	800667a <_printf_i+0x212>
 80066a2:	2500      	movs	r5, #0
 80066a4:	f104 0619 	add.w	r6, r4, #25
 80066a8:	e7f5      	b.n	8006696 <_printf_i+0x22e>
 80066aa:	bf00      	nop
 80066ac:	0800a796 	.word	0x0800a796
 80066b0:	0800a7a7 	.word	0x0800a7a7

080066b4 <siprintf>:
 80066b4:	b40e      	push	{r1, r2, r3}
 80066b6:	b500      	push	{lr}
 80066b8:	b09c      	sub	sp, #112	; 0x70
 80066ba:	ab1d      	add	r3, sp, #116	; 0x74
 80066bc:	9002      	str	r0, [sp, #8]
 80066be:	9006      	str	r0, [sp, #24]
 80066c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066c4:	4809      	ldr	r0, [pc, #36]	; (80066ec <siprintf+0x38>)
 80066c6:	9107      	str	r1, [sp, #28]
 80066c8:	9104      	str	r1, [sp, #16]
 80066ca:	4909      	ldr	r1, [pc, #36]	; (80066f0 <siprintf+0x3c>)
 80066cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d0:	9105      	str	r1, [sp, #20]
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	a902      	add	r1, sp, #8
 80066d8:	f001 fb76 	bl	8007dc8 <_svfiprintf_r>
 80066dc:	9b02      	ldr	r3, [sp, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	b01c      	add	sp, #112	; 0x70
 80066e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066e8:	b003      	add	sp, #12
 80066ea:	4770      	bx	lr
 80066ec:	20000038 	.word	0x20000038
 80066f0:	ffff0208 	.word	0xffff0208

080066f4 <quorem>:
 80066f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	6903      	ldr	r3, [r0, #16]
 80066fa:	690c      	ldr	r4, [r1, #16]
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	4607      	mov	r7, r0
 8006700:	f2c0 8081 	blt.w	8006806 <quorem+0x112>
 8006704:	3c01      	subs	r4, #1
 8006706:	f101 0814 	add.w	r8, r1, #20
 800670a:	f100 0514 	add.w	r5, r0, #20
 800670e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800671c:	3301      	adds	r3, #1
 800671e:	429a      	cmp	r2, r3
 8006720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006728:	fbb2 f6f3 	udiv	r6, r2, r3
 800672c:	d331      	bcc.n	8006792 <quorem+0x9e>
 800672e:	f04f 0e00 	mov.w	lr, #0
 8006732:	4640      	mov	r0, r8
 8006734:	46ac      	mov	ip, r5
 8006736:	46f2      	mov	sl, lr
 8006738:	f850 2b04 	ldr.w	r2, [r0], #4
 800673c:	b293      	uxth	r3, r2
 800673e:	fb06 e303 	mla	r3, r6, r3, lr
 8006742:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006746:	b29b      	uxth	r3, r3
 8006748:	ebaa 0303 	sub.w	r3, sl, r3
 800674c:	f8dc a000 	ldr.w	sl, [ip]
 8006750:	0c12      	lsrs	r2, r2, #16
 8006752:	fa13 f38a 	uxtah	r3, r3, sl
 8006756:	fb06 e202 	mla	r2, r6, r2, lr
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	9b00      	ldr	r3, [sp, #0]
 800675e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006762:	b292      	uxth	r2, r2
 8006764:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800676c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006770:	4581      	cmp	r9, r0
 8006772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006776:	f84c 3b04 	str.w	r3, [ip], #4
 800677a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800677e:	d2db      	bcs.n	8006738 <quorem+0x44>
 8006780:	f855 300b 	ldr.w	r3, [r5, fp]
 8006784:	b92b      	cbnz	r3, 8006792 <quorem+0x9e>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	3b04      	subs	r3, #4
 800678a:	429d      	cmp	r5, r3
 800678c:	461a      	mov	r2, r3
 800678e:	d32e      	bcc.n	80067ee <quorem+0xfa>
 8006790:	613c      	str	r4, [r7, #16]
 8006792:	4638      	mov	r0, r7
 8006794:	f001 f8c6 	bl	8007924 <__mcmp>
 8006798:	2800      	cmp	r0, #0
 800679a:	db24      	blt.n	80067e6 <quorem+0xf2>
 800679c:	3601      	adds	r6, #1
 800679e:	4628      	mov	r0, r5
 80067a0:	f04f 0c00 	mov.w	ip, #0
 80067a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80067a8:	f8d0 e000 	ldr.w	lr, [r0]
 80067ac:	b293      	uxth	r3, r2
 80067ae:	ebac 0303 	sub.w	r3, ip, r3
 80067b2:	0c12      	lsrs	r2, r2, #16
 80067b4:	fa13 f38e 	uxtah	r3, r3, lr
 80067b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c6:	45c1      	cmp	r9, r8
 80067c8:	f840 3b04 	str.w	r3, [r0], #4
 80067cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067d0:	d2e8      	bcs.n	80067a4 <quorem+0xb0>
 80067d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067da:	b922      	cbnz	r2, 80067e6 <quorem+0xf2>
 80067dc:	3b04      	subs	r3, #4
 80067de:	429d      	cmp	r5, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	d30a      	bcc.n	80067fa <quorem+0x106>
 80067e4:	613c      	str	r4, [r7, #16]
 80067e6:	4630      	mov	r0, r6
 80067e8:	b003      	add	sp, #12
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	d1cc      	bne.n	8006790 <quorem+0x9c>
 80067f6:	3c01      	subs	r4, #1
 80067f8:	e7c7      	b.n	800678a <quorem+0x96>
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d1f0      	bne.n	80067e4 <quorem+0xf0>
 8006802:	3c01      	subs	r4, #1
 8006804:	e7eb      	b.n	80067de <quorem+0xea>
 8006806:	2000      	movs	r0, #0
 8006808:	e7ee      	b.n	80067e8 <quorem+0xf4>
 800680a:	0000      	movs	r0, r0
 800680c:	0000      	movs	r0, r0
	...

08006810 <_dtoa_r>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	ed2d 8b04 	vpush	{d8-d9}
 8006818:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800681a:	b093      	sub	sp, #76	; 0x4c
 800681c:	4604      	mov	r4, r0
 800681e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8006822:	4616      	mov	r6, r2
 8006824:	461f      	mov	r7, r3
 8006826:	4692      	mov	sl, r2
 8006828:	469b      	mov	fp, r3
 800682a:	b975      	cbnz	r5, 800684a <_dtoa_r+0x3a>
 800682c:	2010      	movs	r0, #16
 800682e:	f000 fde1 	bl	80073f4 <malloc>
 8006832:	4602      	mov	r2, r0
 8006834:	6260      	str	r0, [r4, #36]	; 0x24
 8006836:	b920      	cbnz	r0, 8006842 <_dtoa_r+0x32>
 8006838:	4ba9      	ldr	r3, [pc, #676]	; (8006ae0 <_dtoa_r+0x2d0>)
 800683a:	21ea      	movs	r1, #234	; 0xea
 800683c:	48a9      	ldr	r0, [pc, #676]	; (8006ae4 <_dtoa_r+0x2d4>)
 800683e:	f001 fbd3 	bl	8007fe8 <__assert_func>
 8006842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006846:	6005      	str	r5, [r0, #0]
 8006848:	60c5      	str	r5, [r0, #12]
 800684a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800684c:	6819      	ldr	r1, [r3, #0]
 800684e:	b151      	cbz	r1, 8006866 <_dtoa_r+0x56>
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	604a      	str	r2, [r1, #4]
 8006854:	2301      	movs	r3, #1
 8006856:	4093      	lsls	r3, r2
 8006858:	608b      	str	r3, [r1, #8]
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fe20 	bl	80074a0 <_Bfree>
 8006860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	1e3b      	subs	r3, r7, #0
 8006868:	bfaa      	itet	ge
 800686a:	2300      	movge	r3, #0
 800686c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006870:	f8c8 3000 	strge.w	r3, [r8]
 8006874:	4b9c      	ldr	r3, [pc, #624]	; (8006ae8 <_dtoa_r+0x2d8>)
 8006876:	bfbc      	itt	lt
 8006878:	2201      	movlt	r2, #1
 800687a:	f8c8 2000 	strlt.w	r2, [r8]
 800687e:	ea33 030b 	bics.w	r3, r3, fp
 8006882:	d11b      	bne.n	80068bc <_dtoa_r+0xac>
 8006884:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006886:	f242 730f 	movw	r3, #9999	; 0x270f
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006890:	4333      	orrs	r3, r6
 8006892:	f000 8596 	beq.w	80073c2 <_dtoa_r+0xbb2>
 8006896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006898:	b963      	cbnz	r3, 80068b4 <_dtoa_r+0xa4>
 800689a:	4b94      	ldr	r3, [pc, #592]	; (8006aec <_dtoa_r+0x2dc>)
 800689c:	e022      	b.n	80068e4 <_dtoa_r+0xd4>
 800689e:	4b94      	ldr	r3, [pc, #592]	; (8006af0 <_dtoa_r+0x2e0>)
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	3308      	adds	r3, #8
 80068a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	9804      	ldr	r0, [sp, #16]
 80068aa:	b013      	add	sp, #76	; 0x4c
 80068ac:	ecbd 8b04 	vpop	{d8-d9}
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	4b8d      	ldr	r3, [pc, #564]	; (8006aec <_dtoa_r+0x2dc>)
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	3303      	adds	r3, #3
 80068ba:	e7f3      	b.n	80068a4 <_dtoa_r+0x94>
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7fa f908 	bl	8000ad8 <__aeabi_dcmpeq>
 80068c8:	ec4b ab19 	vmov	d9, sl, fp
 80068cc:	4680      	mov	r8, r0
 80068ce:	b158      	cbz	r0, 80068e8 <_dtoa_r+0xd8>
 80068d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068d2:	2301      	movs	r3, #1
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 856f 	beq.w	80073bc <_dtoa_r+0xbac>
 80068de:	4885      	ldr	r0, [pc, #532]	; (8006af4 <_dtoa_r+0x2e4>)
 80068e0:	6018      	str	r0, [r3, #0]
 80068e2:	1e43      	subs	r3, r0, #1
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	e7df      	b.n	80068a8 <_dtoa_r+0x98>
 80068e8:	ab10      	add	r3, sp, #64	; 0x40
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	ab11      	add	r3, sp, #68	; 0x44
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	4620      	mov	r0, r4
 80068f6:	f001 f8bb 	bl	8007a70 <__d2b>
 80068fa:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80068fe:	ee08 0a10 	vmov	s16, r0
 8006902:	2d00      	cmp	r5, #0
 8006904:	f000 8084 	beq.w	8006a10 <_dtoa_r+0x200>
 8006908:	ee19 3a90 	vmov	r3, s19
 800690c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006910:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006914:	4656      	mov	r6, sl
 8006916:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800691a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800691e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006922:	4b75      	ldr	r3, [pc, #468]	; (8006af8 <_dtoa_r+0x2e8>)
 8006924:	2200      	movs	r2, #0
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fcb5 	bl	8000298 <__aeabi_dsub>
 800692e:	a366      	add	r3, pc, #408	; (adr r3, 8006ac8 <_dtoa_r+0x2b8>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fe68 	bl	8000608 <__aeabi_dmul>
 8006938:	a365      	add	r3, pc, #404	; (adr r3, 8006ad0 <_dtoa_r+0x2c0>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fcad 	bl	800029c <__adddf3>
 8006942:	4606      	mov	r6, r0
 8006944:	4628      	mov	r0, r5
 8006946:	460f      	mov	r7, r1
 8006948:	f7f9 fdf4 	bl	8000534 <__aeabi_i2d>
 800694c:	a362      	add	r3, pc, #392	; (adr r3, 8006ad8 <_dtoa_r+0x2c8>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fe59 	bl	8000608 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7f9 fc9d 	bl	800029c <__adddf3>
 8006962:	4606      	mov	r6, r0
 8006964:	460f      	mov	r7, r1
 8006966:	f7fa f8ff 	bl	8000b68 <__aeabi_d2iz>
 800696a:	2200      	movs	r2, #0
 800696c:	9003      	str	r0, [sp, #12]
 800696e:	2300      	movs	r3, #0
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7fa f8ba 	bl	8000aec <__aeabi_dcmplt>
 8006978:	b150      	cbz	r0, 8006990 <_dtoa_r+0x180>
 800697a:	9803      	ldr	r0, [sp, #12]
 800697c:	f7f9 fdda 	bl	8000534 <__aeabi_i2d>
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	f7fa f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006988:	b910      	cbnz	r0, 8006990 <_dtoa_r+0x180>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	3b01      	subs	r3, #1
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	2b16      	cmp	r3, #22
 8006994:	d85a      	bhi.n	8006a4c <_dtoa_r+0x23c>
 8006996:	9a03      	ldr	r2, [sp, #12]
 8006998:	4b58      	ldr	r3, [pc, #352]	; (8006afc <_dtoa_r+0x2ec>)
 800699a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	ec51 0b19 	vmov	r0, r1, d9
 80069a6:	f7fa f8a1 	bl	8000aec <__aeabi_dcmplt>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d050      	beq.n	8006a50 <_dtoa_r+0x240>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	9303      	str	r3, [sp, #12]
 80069b4:	2300      	movs	r3, #0
 80069b6:	930c      	str	r3, [sp, #48]	; 0x30
 80069b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069ba:	1b5d      	subs	r5, r3, r5
 80069bc:	1e6b      	subs	r3, r5, #1
 80069be:	9308      	str	r3, [sp, #32]
 80069c0:	bf45      	ittet	mi
 80069c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80069c6:	9307      	strmi	r3, [sp, #28]
 80069c8:	2300      	movpl	r3, #0
 80069ca:	2300      	movmi	r3, #0
 80069cc:	bf4c      	ite	mi
 80069ce:	9308      	strmi	r3, [sp, #32]
 80069d0:	9307      	strpl	r3, [sp, #28]
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db3d      	blt.n	8006a54 <_dtoa_r+0x244>
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	9a03      	ldr	r2, [sp, #12]
 80069dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80069de:	4413      	add	r3, r2
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	2300      	movs	r3, #0
 80069e4:	9309      	str	r3, [sp, #36]	; 0x24
 80069e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	f200 808b 	bhi.w	8006b04 <_dtoa_r+0x2f4>
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	bfc4      	itt	gt
 80069f2:	3b04      	subgt	r3, #4
 80069f4:	9320      	strgt	r3, [sp, #128]	; 0x80
 80069f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069f8:	f1a3 0302 	sub.w	r3, r3, #2
 80069fc:	bfcc      	ite	gt
 80069fe:	2500      	movgt	r5, #0
 8006a00:	2501      	movle	r5, #1
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	f200 8089 	bhi.w	8006b1a <_dtoa_r+0x30a>
 8006a08:	e8df f003 	tbb	[pc, r3]
 8006a0c:	59383a2d 	.word	0x59383a2d
 8006a10:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a14:	441d      	add	r5, r3
 8006a16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	bfc1      	itttt	gt
 8006a1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a22:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a26:	fa0b f303 	lslgt.w	r3, fp, r3
 8006a2a:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a2e:	bfda      	itte	le
 8006a30:	f1c3 0320 	rsble	r3, r3, #32
 8006a34:	fa06 f003 	lslle.w	r0, r6, r3
 8006a38:	4318      	orrgt	r0, r3
 8006a3a:	f7f9 fd6b 	bl	8000514 <__aeabi_ui2d>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4606      	mov	r6, r0
 8006a42:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a46:	3d01      	subs	r5, #1
 8006a48:	930e      	str	r3, [sp, #56]	; 0x38
 8006a4a:	e76a      	b.n	8006922 <_dtoa_r+0x112>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e7b2      	b.n	80069b6 <_dtoa_r+0x1a6>
 8006a50:	900c      	str	r0, [sp, #48]	; 0x30
 8006a52:	e7b1      	b.n	80069b8 <_dtoa_r+0x1a8>
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	9a03      	ldr	r2, [sp, #12]
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	9307      	str	r3, [sp, #28]
 8006a5c:	4253      	negs	r3, r2
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	2300      	movs	r3, #0
 8006a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a64:	e7bf      	b.n	80069e6 <_dtoa_r+0x1d6>
 8006a66:	2300      	movs	r3, #0
 8006a68:	930a      	str	r3, [sp, #40]	; 0x28
 8006a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc57      	bgt.n	8006b20 <_dtoa_r+0x310>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a76:	461a      	mov	r2, r3
 8006a78:	9221      	str	r2, [sp, #132]	; 0x84
 8006a7a:	e00c      	b.n	8006a96 <_dtoa_r+0x286>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e7f3      	b.n	8006a68 <_dtoa_r+0x258>
 8006a80:	2300      	movs	r3, #0
 8006a82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a84:	930a      	str	r3, [sp, #40]	; 0x28
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	9306      	str	r3, [sp, #24]
 8006a92:	bfb8      	it	lt
 8006a94:	2301      	movlt	r3, #1
 8006a96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a98:	2200      	movs	r2, #0
 8006a9a:	6042      	str	r2, [r0, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	f102 0614 	add.w	r6, r2, #20
 8006aa2:	429e      	cmp	r6, r3
 8006aa4:	6841      	ldr	r1, [r0, #4]
 8006aa6:	d93f      	bls.n	8006b28 <_dtoa_r+0x318>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fcb9 	bl	8007420 <_Balloc>
 8006aae:	9004      	str	r0, [sp, #16]
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d13d      	bne.n	8006b30 <_dtoa_r+0x320>
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <_dtoa_r+0x2f0>)
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006abc:	e6be      	b.n	800683c <_dtoa_r+0x2c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e7df      	b.n	8006a82 <_dtoa_r+0x272>
 8006ac2:	bf00      	nop
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	636f4361 	.word	0x636f4361
 8006acc:	3fd287a7 	.word	0x3fd287a7
 8006ad0:	8b60c8b3 	.word	0x8b60c8b3
 8006ad4:	3fc68a28 	.word	0x3fc68a28
 8006ad8:	509f79fb 	.word	0x509f79fb
 8006adc:	3fd34413 	.word	0x3fd34413
 8006ae0:	0800a7c5 	.word	0x0800a7c5
 8006ae4:	0800a7dc 	.word	0x0800a7dc
 8006ae8:	7ff00000 	.word	0x7ff00000
 8006aec:	0800a7c1 	.word	0x0800a7c1
 8006af0:	0800a7b8 	.word	0x0800a7b8
 8006af4:	0800a795 	.word	0x0800a795
 8006af8:	3ff80000 	.word	0x3ff80000
 8006afc:	0800a8d0 	.word	0x0800a8d0
 8006b00:	0800a837 	.word	0x0800a837
 8006b04:	2501      	movs	r5, #1
 8006b06:	2300      	movs	r3, #0
 8006b08:	9320      	str	r3, [sp, #128]	; 0x80
 8006b0a:	950a      	str	r5, [sp, #40]	; 0x28
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2312      	movs	r3, #18
 8006b18:	e7ae      	b.n	8006a78 <_dtoa_r+0x268>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1e:	e7f5      	b.n	8006b0c <_dtoa_r+0x2fc>
 8006b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b22:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006b26:	e7b6      	b.n	8006a96 <_dtoa_r+0x286>
 8006b28:	3101      	adds	r1, #1
 8006b2a:	6041      	str	r1, [r0, #4]
 8006b2c:	0052      	lsls	r2, r2, #1
 8006b2e:	e7b6      	b.n	8006a9e <_dtoa_r+0x28e>
 8006b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	9b06      	ldr	r3, [sp, #24]
 8006b38:	2b0e      	cmp	r3, #14
 8006b3a:	f200 809d 	bhi.w	8006c78 <_dtoa_r+0x468>
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	f000 809a 	beq.w	8006c78 <_dtoa_r+0x468>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	dd32      	ble.n	8006bb0 <_dtoa_r+0x3a0>
 8006b4a:	4ab7      	ldr	r2, [pc, #732]	; (8006e28 <_dtoa_r+0x618>)
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	05d8      	lsls	r0, r3, #23
 8006b5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006b60:	d516      	bpl.n	8006b90 <_dtoa_r+0x380>
 8006b62:	4bb2      	ldr	r3, [pc, #712]	; (8006e2c <_dtoa_r+0x61c>)
 8006b64:	ec51 0b19 	vmov	r0, r1, d9
 8006b68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b6c:	f7f9 fe76 	bl	800085c <__aeabi_ddiv>
 8006b70:	f007 070f 	and.w	r7, r7, #15
 8006b74:	4682      	mov	sl, r0
 8006b76:	468b      	mov	fp, r1
 8006b78:	2503      	movs	r5, #3
 8006b7a:	4eac      	ldr	r6, [pc, #688]	; (8006e2c <_dtoa_r+0x61c>)
 8006b7c:	b957      	cbnz	r7, 8006b94 <_dtoa_r+0x384>
 8006b7e:	4642      	mov	r2, r8
 8006b80:	464b      	mov	r3, r9
 8006b82:	4650      	mov	r0, sl
 8006b84:	4659      	mov	r1, fp
 8006b86:	f7f9 fe69 	bl	800085c <__aeabi_ddiv>
 8006b8a:	4682      	mov	sl, r0
 8006b8c:	468b      	mov	fp, r1
 8006b8e:	e028      	b.n	8006be2 <_dtoa_r+0x3d2>
 8006b90:	2502      	movs	r5, #2
 8006b92:	e7f2      	b.n	8006b7a <_dtoa_r+0x36a>
 8006b94:	07f9      	lsls	r1, r7, #31
 8006b96:	d508      	bpl.n	8006baa <_dtoa_r+0x39a>
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ba0:	f7f9 fd32 	bl	8000608 <__aeabi_dmul>
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	4689      	mov	r9, r1
 8006baa:	107f      	asrs	r7, r7, #1
 8006bac:	3608      	adds	r6, #8
 8006bae:	e7e5      	b.n	8006b7c <_dtoa_r+0x36c>
 8006bb0:	f000 809b 	beq.w	8006cea <_dtoa_r+0x4da>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	4f9d      	ldr	r7, [pc, #628]	; (8006e2c <_dtoa_r+0x61c>)
 8006bb8:	425e      	negs	r6, r3
 8006bba:	4b9b      	ldr	r3, [pc, #620]	; (8006e28 <_dtoa_r+0x618>)
 8006bbc:	f006 020f 	and.w	r2, r6, #15
 8006bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	ec51 0b19 	vmov	r0, r1, d9
 8006bcc:	f7f9 fd1c 	bl	8000608 <__aeabi_dmul>
 8006bd0:	1136      	asrs	r6, r6, #4
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	468b      	mov	fp, r1
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2502      	movs	r5, #2
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d17a      	bne.n	8006cd4 <_dtoa_r+0x4c4>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1d3      	bne.n	8006b8a <_dtoa_r+0x37a>
 8006be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8082 	beq.w	8006cee <_dtoa_r+0x4de>
 8006bea:	4b91      	ldr	r3, [pc, #580]	; (8006e30 <_dtoa_r+0x620>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	f7f9 ff7b 	bl	8000aec <__aeabi_dcmplt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d079      	beq.n	8006cee <_dtoa_r+0x4de>
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d076      	beq.n	8006cee <_dtoa_r+0x4de>
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd36      	ble.n	8006c74 <_dtoa_r+0x464>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	1e5f      	subs	r7, r3, #1
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4b88      	ldr	r3, [pc, #544]	; (8006e34 <_dtoa_r+0x624>)
 8006c12:	f7f9 fcf9 	bl	8000608 <__aeabi_dmul>
 8006c16:	9e05      	ldr	r6, [sp, #20]
 8006c18:	4682      	mov	sl, r0
 8006c1a:	468b      	mov	fp, r1
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7f9 fc88 	bl	8000534 <__aeabi_i2d>
 8006c24:	4652      	mov	r2, sl
 8006c26:	465b      	mov	r3, fp
 8006c28:	f7f9 fcee 	bl	8000608 <__aeabi_dmul>
 8006c2c:	4b82      	ldr	r3, [pc, #520]	; (8006e38 <_dtoa_r+0x628>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7f9 fb34 	bl	800029c <__adddf3>
 8006c34:	46d0      	mov	r8, sl
 8006c36:	46d9      	mov	r9, fp
 8006c38:	4682      	mov	sl, r0
 8006c3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d158      	bne.n	8006cf4 <_dtoa_r+0x4e4>
 8006c42:	4b7e      	ldr	r3, [pc, #504]	; (8006e3c <_dtoa_r+0x62c>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fb25 	bl	8000298 <__aeabi_dsub>
 8006c4e:	4652      	mov	r2, sl
 8006c50:	465b      	mov	r3, fp
 8006c52:	4680      	mov	r8, r0
 8006c54:	4689      	mov	r9, r1
 8006c56:	f7f9 ff67 	bl	8000b28 <__aeabi_dcmpgt>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f040 8295 	bne.w	800718a <_dtoa_r+0x97a>
 8006c60:	4652      	mov	r2, sl
 8006c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f040 8289 	bne.w	8007186 <_dtoa_r+0x976>
 8006c74:	ec5b ab19 	vmov	sl, fp, d9
 8006c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f2c0 8148 	blt.w	8006f10 <_dtoa_r+0x700>
 8006c80:	9a03      	ldr	r2, [sp, #12]
 8006c82:	2a0e      	cmp	r2, #14
 8006c84:	f300 8144 	bgt.w	8006f10 <_dtoa_r+0x700>
 8006c88:	4b67      	ldr	r3, [pc, #412]	; (8006e28 <_dtoa_r+0x618>)
 8006c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f280 80d5 	bge.w	8006e44 <_dtoa_r+0x634>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f300 80d1 	bgt.w	8006e44 <_dtoa_r+0x634>
 8006ca2:	f040 826f 	bne.w	8007184 <_dtoa_r+0x974>
 8006ca6:	4b65      	ldr	r3, [pc, #404]	; (8006e3c <_dtoa_r+0x62c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4640      	mov	r0, r8
 8006cac:	4649      	mov	r1, r9
 8006cae:	f7f9 fcab 	bl	8000608 <__aeabi_dmul>
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	f7f9 ff2d 	bl	8000b14 <__aeabi_dcmpge>
 8006cba:	9e06      	ldr	r6, [sp, #24]
 8006cbc:	4637      	mov	r7, r6
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f040 8245 	bne.w	800714e <_dtoa_r+0x93e>
 8006cc4:	9d04      	ldr	r5, [sp, #16]
 8006cc6:	2331      	movs	r3, #49	; 0x31
 8006cc8:	f805 3b01 	strb.w	r3, [r5], #1
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	9303      	str	r3, [sp, #12]
 8006cd2:	e240      	b.n	8007156 <_dtoa_r+0x946>
 8006cd4:	07f2      	lsls	r2, r6, #31
 8006cd6:	d505      	bpl.n	8006ce4 <_dtoa_r+0x4d4>
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	f7f9 fc94 	bl	8000608 <__aeabi_dmul>
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	1076      	asrs	r6, r6, #1
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	e777      	b.n	8006bda <_dtoa_r+0x3ca>
 8006cea:	2502      	movs	r5, #2
 8006cec:	e779      	b.n	8006be2 <_dtoa_r+0x3d2>
 8006cee:	9f03      	ldr	r7, [sp, #12]
 8006cf0:	9e06      	ldr	r6, [sp, #24]
 8006cf2:	e794      	b.n	8006c1e <_dtoa_r+0x40e>
 8006cf4:	9904      	ldr	r1, [sp, #16]
 8006cf6:	4b4c      	ldr	r3, [pc, #304]	; (8006e28 <_dtoa_r+0x618>)
 8006cf8:	4431      	add	r1, r6
 8006cfa:	910d      	str	r1, [sp, #52]	; 0x34
 8006cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d06:	2900      	cmp	r1, #0
 8006d08:	d043      	beq.n	8006d92 <_dtoa_r+0x582>
 8006d0a:	494d      	ldr	r1, [pc, #308]	; (8006e40 <_dtoa_r+0x630>)
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7f9 fda5 	bl	800085c <__aeabi_ddiv>
 8006d12:	4652      	mov	r2, sl
 8006d14:	465b      	mov	r3, fp
 8006d16:	f7f9 fabf 	bl	8000298 <__aeabi_dsub>
 8006d1a:	9d04      	ldr	r5, [sp, #16]
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	468b      	mov	fp, r1
 8006d20:	4649      	mov	r1, r9
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7f9 ff20 	bl	8000b68 <__aeabi_d2iz>
 8006d28:	4606      	mov	r6, r0
 8006d2a:	f7f9 fc03 	bl	8000534 <__aeabi_i2d>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4640      	mov	r0, r8
 8006d34:	4649      	mov	r1, r9
 8006d36:	f7f9 faaf 	bl	8000298 <__aeabi_dsub>
 8006d3a:	3630      	adds	r6, #48	; 0x30
 8006d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8006d40:	4652      	mov	r2, sl
 8006d42:	465b      	mov	r3, fp
 8006d44:	4680      	mov	r8, r0
 8006d46:	4689      	mov	r9, r1
 8006d48:	f7f9 fed0 	bl	8000aec <__aeabi_dcmplt>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d163      	bne.n	8006e18 <_dtoa_r+0x608>
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	4936      	ldr	r1, [pc, #216]	; (8006e30 <_dtoa_r+0x620>)
 8006d56:	2000      	movs	r0, #0
 8006d58:	f7f9 fa9e 	bl	8000298 <__aeabi_dsub>
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	465b      	mov	r3, fp
 8006d60:	f7f9 fec4 	bl	8000aec <__aeabi_dcmplt>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f040 80b5 	bne.w	8006ed4 <_dtoa_r+0x6c4>
 8006d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6c:	429d      	cmp	r5, r3
 8006d6e:	d081      	beq.n	8006c74 <_dtoa_r+0x464>
 8006d70:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <_dtoa_r+0x624>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	4650      	mov	r0, sl
 8006d76:	4659      	mov	r1, fp
 8006d78:	f7f9 fc46 	bl	8000608 <__aeabi_dmul>
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <_dtoa_r+0x624>)
 8006d7e:	4682      	mov	sl, r0
 8006d80:	468b      	mov	fp, r1
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7f9 fc3e 	bl	8000608 <__aeabi_dmul>
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4689      	mov	r9, r1
 8006d90:	e7c6      	b.n	8006d20 <_dtoa_r+0x510>
 8006d92:	4650      	mov	r0, sl
 8006d94:	4659      	mov	r1, fp
 8006d96:	f7f9 fc37 	bl	8000608 <__aeabi_dmul>
 8006d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9c:	9d04      	ldr	r5, [sp, #16]
 8006d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006da0:	4682      	mov	sl, r0
 8006da2:	468b      	mov	fp, r1
 8006da4:	4649      	mov	r1, r9
 8006da6:	4640      	mov	r0, r8
 8006da8:	f7f9 fede 	bl	8000b68 <__aeabi_d2iz>
 8006dac:	4606      	mov	r6, r0
 8006dae:	f7f9 fbc1 	bl	8000534 <__aeabi_i2d>
 8006db2:	3630      	adds	r6, #48	; 0x30
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 fa6c 	bl	8000298 <__aeabi_dsub>
 8006dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8006dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc6:	429d      	cmp	r5, r3
 8006dc8:	4680      	mov	r8, r0
 8006dca:	4689      	mov	r9, r1
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	d124      	bne.n	8006e1c <_dtoa_r+0x60c>
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <_dtoa_r+0x630>)
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	4659      	mov	r1, fp
 8006dd8:	f7f9 fa60 	bl	800029c <__adddf3>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4640      	mov	r0, r8
 8006de2:	4649      	mov	r1, r9
 8006de4:	f7f9 fea0 	bl	8000b28 <__aeabi_dcmpgt>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d173      	bne.n	8006ed4 <_dtoa_r+0x6c4>
 8006dec:	4652      	mov	r2, sl
 8006dee:	465b      	mov	r3, fp
 8006df0:	4913      	ldr	r1, [pc, #76]	; (8006e40 <_dtoa_r+0x630>)
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7f9 fa50 	bl	8000298 <__aeabi_dsub>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe74 	bl	8000aec <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f43f af35 	beq.w	8006c74 <_dtoa_r+0x464>
 8006e0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e0c:	1e6b      	subs	r3, r5, #1
 8006e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e14:	2b30      	cmp	r3, #48	; 0x30
 8006e16:	d0f8      	beq.n	8006e0a <_dtoa_r+0x5fa>
 8006e18:	9703      	str	r7, [sp, #12]
 8006e1a:	e049      	b.n	8006eb0 <_dtoa_r+0x6a0>
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <_dtoa_r+0x624>)
 8006e1e:	f7f9 fbf3 	bl	8000608 <__aeabi_dmul>
 8006e22:	4680      	mov	r8, r0
 8006e24:	4689      	mov	r9, r1
 8006e26:	e7bd      	b.n	8006da4 <_dtoa_r+0x594>
 8006e28:	0800a8d0 	.word	0x0800a8d0
 8006e2c:	0800a8a8 	.word	0x0800a8a8
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	40240000 	.word	0x40240000
 8006e38:	401c0000 	.word	0x401c0000
 8006e3c:	40140000 	.word	0x40140000
 8006e40:	3fe00000 	.word	0x3fe00000
 8006e44:	9d04      	ldr	r5, [sp, #16]
 8006e46:	4656      	mov	r6, sl
 8006e48:	465f      	mov	r7, fp
 8006e4a:	4642      	mov	r2, r8
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	f7f9 fd03 	bl	800085c <__aeabi_ddiv>
 8006e56:	f7f9 fe87 	bl	8000b68 <__aeabi_d2iz>
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	f7f9 fb6a 	bl	8000534 <__aeabi_i2d>
 8006e60:	4642      	mov	r2, r8
 8006e62:	464b      	mov	r3, r9
 8006e64:	f7f9 fbd0 	bl	8000608 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006e74:	f7f9 fa10 	bl	8000298 <__aeabi_dsub>
 8006e78:	f805 6b01 	strb.w	r6, [r5], #1
 8006e7c:	9e04      	ldr	r6, [sp, #16]
 8006e7e:	9f06      	ldr	r7, [sp, #24]
 8006e80:	1bae      	subs	r6, r5, r6
 8006e82:	42b7      	cmp	r7, r6
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	d135      	bne.n	8006ef6 <_dtoa_r+0x6e6>
 8006e8a:	f7f9 fa07 	bl	800029c <__adddf3>
 8006e8e:	4642      	mov	r2, r8
 8006e90:	464b      	mov	r3, r9
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	f7f9 fe47 	bl	8000b28 <__aeabi_dcmpgt>
 8006e9a:	b9d0      	cbnz	r0, 8006ed2 <_dtoa_r+0x6c2>
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ea8:	b110      	cbz	r0, 8006eb0 <_dtoa_r+0x6a0>
 8006eaa:	f01a 0f01 	tst.w	sl, #1
 8006eae:	d110      	bne.n	8006ed2 <_dtoa_r+0x6c2>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	f000 faf3 	bl	80074a0 <_Bfree>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9803      	ldr	r0, [sp, #12]
 8006ebe:	702b      	strb	r3, [r5, #0]
 8006ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	6018      	str	r0, [r3, #0]
 8006ec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f43f aced 	beq.w	80068a8 <_dtoa_r+0x98>
 8006ece:	601d      	str	r5, [r3, #0]
 8006ed0:	e4ea      	b.n	80068a8 <_dtoa_r+0x98>
 8006ed2:	9f03      	ldr	r7, [sp, #12]
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006edc:	2a39      	cmp	r2, #57	; 0x39
 8006ede:	d106      	bne.n	8006eee <_dtoa_r+0x6de>
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d1f7      	bne.n	8006ed6 <_dtoa_r+0x6c6>
 8006ee6:	9904      	ldr	r1, [sp, #16]
 8006ee8:	2230      	movs	r2, #48	; 0x30
 8006eea:	3701      	adds	r7, #1
 8006eec:	700a      	strb	r2, [r1, #0]
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	3201      	adds	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e790      	b.n	8006e18 <_dtoa_r+0x608>
 8006ef6:	4ba6      	ldr	r3, [pc, #664]	; (8007190 <_dtoa_r+0x980>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f7f9 fb85 	bl	8000608 <__aeabi_dmul>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	4606      	mov	r6, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	f7f9 fde7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d09d      	beq.n	8006e4a <_dtoa_r+0x63a>
 8006f0e:	e7cf      	b.n	8006eb0 <_dtoa_r+0x6a0>
 8006f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	f000 80d7 	beq.w	80070c6 <_dtoa_r+0x8b6>
 8006f18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f1a:	2a01      	cmp	r2, #1
 8006f1c:	f300 80ba 	bgt.w	8007094 <_dtoa_r+0x884>
 8006f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	f000 80b2 	beq.w	800708c <_dtoa_r+0x87c>
 8006f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f2e:	9d07      	ldr	r5, [sp, #28]
 8006f30:	9a07      	ldr	r2, [sp, #28]
 8006f32:	441a      	add	r2, r3
 8006f34:	9207      	str	r2, [sp, #28]
 8006f36:	9a08      	ldr	r2, [sp, #32]
 8006f38:	2101      	movs	r1, #1
 8006f3a:	441a      	add	r2, r3
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	9208      	str	r2, [sp, #32]
 8006f40:	f000 fb66 	bl	8007610 <__i2b>
 8006f44:	4607      	mov	r7, r0
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	dd0c      	ble.n	8006f64 <_dtoa_r+0x754>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd09      	ble.n	8006f64 <_dtoa_r+0x754>
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	9a07      	ldr	r2, [sp, #28]
 8006f54:	bfa8      	it	ge
 8006f56:	462b      	movge	r3, r5
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	9a08      	ldr	r2, [sp, #32]
 8006f5e:	1aed      	subs	r5, r5, r3
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	9308      	str	r3, [sp, #32]
 8006f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f66:	b31b      	cbz	r3, 8006fb0 <_dtoa_r+0x7a0>
 8006f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80af 	beq.w	80070ce <_dtoa_r+0x8be>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	dd13      	ble.n	8006f9c <_dtoa_r+0x78c>
 8006f74:	4639      	mov	r1, r7
 8006f76:	4632      	mov	r2, r6
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fc09 	bl	8007790 <__pow5mult>
 8006f7e:	ee18 2a10 	vmov	r2, s16
 8006f82:	4601      	mov	r1, r0
 8006f84:	4607      	mov	r7, r0
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fb58 	bl	800763c <__multiply>
 8006f8c:	ee18 1a10 	vmov	r1, s16
 8006f90:	4680      	mov	r8, r0
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fa84 	bl	80074a0 <_Bfree>
 8006f98:	ee08 8a10 	vmov	s16, r8
 8006f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9e:	1b9a      	subs	r2, r3, r6
 8006fa0:	d006      	beq.n	8006fb0 <_dtoa_r+0x7a0>
 8006fa2:	ee18 1a10 	vmov	r1, s16
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fbf2 	bl	8007790 <__pow5mult>
 8006fac:	ee08 0a10 	vmov	s16, r0
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fb2c 	bl	8007610 <__i2b>
 8006fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	f340 8088 	ble.w	80070d2 <_dtoa_r+0x8c2>
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 fbe2 	bl	8007790 <__pow5mult>
 8006fcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	f340 8081 	ble.w	80070d8 <_dtoa_r+0x8c8>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	6933      	ldr	r3, [r6, #16]
 8006fdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fe0:	6918      	ldr	r0, [r3, #16]
 8006fe2:	f000 fac5 	bl	8007570 <__hi0bits>
 8006fe6:	f1c0 0020 	rsb	r0, r0, #32
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	4418      	add	r0, r3
 8006fee:	f010 001f 	ands.w	r0, r0, #31
 8006ff2:	f000 8092 	beq.w	800711a <_dtoa_r+0x90a>
 8006ff6:	f1c0 0320 	rsb	r3, r0, #32
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	f340 808a 	ble.w	8007114 <_dtoa_r+0x904>
 8007000:	f1c0 001c 	rsb	r0, r0, #28
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	4403      	add	r3, r0
 8007008:	9307      	str	r3, [sp, #28]
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	4403      	add	r3, r0
 800700e:	4405      	add	r5, r0
 8007010:	9308      	str	r3, [sp, #32]
 8007012:	9b07      	ldr	r3, [sp, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd07      	ble.n	8007028 <_dtoa_r+0x818>
 8007018:	ee18 1a10 	vmov	r1, s16
 800701c:	461a      	mov	r2, r3
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fc10 	bl	8007844 <__lshift>
 8007024:	ee08 0a10 	vmov	s16, r0
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd05      	ble.n	800703a <_dtoa_r+0x82a>
 800702e:	4631      	mov	r1, r6
 8007030:	461a      	mov	r2, r3
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fc06 	bl	8007844 <__lshift>
 8007038:	4606      	mov	r6, r0
 800703a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d06e      	beq.n	800711e <_dtoa_r+0x90e>
 8007040:	ee18 0a10 	vmov	r0, s16
 8007044:	4631      	mov	r1, r6
 8007046:	f000 fc6d 	bl	8007924 <__mcmp>
 800704a:	2800      	cmp	r0, #0
 800704c:	da67      	bge.n	800711e <_dtoa_r+0x90e>
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	3b01      	subs	r3, #1
 8007052:	ee18 1a10 	vmov	r1, s16
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	220a      	movs	r2, #10
 800705a:	2300      	movs	r3, #0
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fa41 	bl	80074e4 <__multadd>
 8007062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007064:	ee08 0a10 	vmov	s16, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 81b1 	beq.w	80073d0 <_dtoa_r+0xbc0>
 800706e:	2300      	movs	r3, #0
 8007070:	4639      	mov	r1, r7
 8007072:	220a      	movs	r2, #10
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fa35 	bl	80074e4 <__multadd>
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	4607      	mov	r7, r0
 8007080:	f300 808e 	bgt.w	80071a0 <_dtoa_r+0x990>
 8007084:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007086:	2b02      	cmp	r3, #2
 8007088:	dc51      	bgt.n	800712e <_dtoa_r+0x91e>
 800708a:	e089      	b.n	80071a0 <_dtoa_r+0x990>
 800708c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800708e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007092:	e74b      	b.n	8006f2c <_dtoa_r+0x71c>
 8007094:	9b06      	ldr	r3, [sp, #24]
 8007096:	1e5e      	subs	r6, r3, #1
 8007098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709a:	42b3      	cmp	r3, r6
 800709c:	bfbf      	itttt	lt
 800709e:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80070a0:	9609      	strlt	r6, [sp, #36]	; 0x24
 80070a2:	1af2      	sublt	r2, r6, r3
 80070a4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80070a6:	bfb6      	itet	lt
 80070a8:	189b      	addlt	r3, r3, r2
 80070aa:	1b9e      	subge	r6, r3, r6
 80070ac:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	bfb8      	it	lt
 80070b2:	2600      	movlt	r6, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb7      	itett	lt
 80070b8:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
 80070bc:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
 80070c0:	1a9d      	sublt	r5, r3, r2
 80070c2:	2300      	movlt	r3, #0
 80070c4:	e734      	b.n	8006f30 <_dtoa_r+0x720>
 80070c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80070c8:	9d07      	ldr	r5, [sp, #28]
 80070ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80070cc:	e73b      	b.n	8006f46 <_dtoa_r+0x736>
 80070ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d0:	e767      	b.n	8006fa2 <_dtoa_r+0x792>
 80070d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	dc18      	bgt.n	800710a <_dtoa_r+0x8fa>
 80070d8:	f1ba 0f00 	cmp.w	sl, #0
 80070dc:	d115      	bne.n	800710a <_dtoa_r+0x8fa>
 80070de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070e2:	b993      	cbnz	r3, 800710a <_dtoa_r+0x8fa>
 80070e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070e8:	0d1b      	lsrs	r3, r3, #20
 80070ea:	051b      	lsls	r3, r3, #20
 80070ec:	b183      	cbz	r3, 8007110 <_dtoa_r+0x900>
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	3301      	adds	r3, #1
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	9b08      	ldr	r3, [sp, #32]
 80070f6:	3301      	adds	r3, #1
 80070f8:	9308      	str	r3, [sp, #32]
 80070fa:	f04f 0801 	mov.w	r8, #1
 80070fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	f47f af6a 	bne.w	8006fda <_dtoa_r+0x7ca>
 8007106:	2001      	movs	r0, #1
 8007108:	e76f      	b.n	8006fea <_dtoa_r+0x7da>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	e7f6      	b.n	80070fe <_dtoa_r+0x8ee>
 8007110:	4698      	mov	r8, r3
 8007112:	e7f4      	b.n	80070fe <_dtoa_r+0x8ee>
 8007114:	f43f af7d 	beq.w	8007012 <_dtoa_r+0x802>
 8007118:	4618      	mov	r0, r3
 800711a:	301c      	adds	r0, #28
 800711c:	e772      	b.n	8007004 <_dtoa_r+0x7f4>
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	dc37      	bgt.n	8007194 <_dtoa_r+0x984>
 8007124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007126:	2b02      	cmp	r3, #2
 8007128:	dd34      	ble.n	8007194 <_dtoa_r+0x984>
 800712a:	9b06      	ldr	r3, [sp, #24]
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	9b05      	ldr	r3, [sp, #20]
 8007130:	b96b      	cbnz	r3, 800714e <_dtoa_r+0x93e>
 8007132:	4631      	mov	r1, r6
 8007134:	2205      	movs	r2, #5
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f9d4 	bl	80074e4 <__multadd>
 800713c:	4601      	mov	r1, r0
 800713e:	4606      	mov	r6, r0
 8007140:	ee18 0a10 	vmov	r0, s16
 8007144:	f000 fbee 	bl	8007924 <__mcmp>
 8007148:	2800      	cmp	r0, #0
 800714a:	f73f adbb 	bgt.w	8006cc4 <_dtoa_r+0x4b4>
 800714e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007150:	9d04      	ldr	r5, [sp, #16]
 8007152:	43db      	mvns	r3, r3
 8007154:	9303      	str	r3, [sp, #12]
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	4631      	mov	r1, r6
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f99f 	bl	80074a0 <_Bfree>
 8007162:	2f00      	cmp	r7, #0
 8007164:	f43f aea4 	beq.w	8006eb0 <_dtoa_r+0x6a0>
 8007168:	f1b8 0f00 	cmp.w	r8, #0
 800716c:	d005      	beq.n	800717a <_dtoa_r+0x96a>
 800716e:	45b8      	cmp	r8, r7
 8007170:	d003      	beq.n	800717a <_dtoa_r+0x96a>
 8007172:	4641      	mov	r1, r8
 8007174:	4620      	mov	r0, r4
 8007176:	f000 f993 	bl	80074a0 <_Bfree>
 800717a:	4639      	mov	r1, r7
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f98f 	bl	80074a0 <_Bfree>
 8007182:	e695      	b.n	8006eb0 <_dtoa_r+0x6a0>
 8007184:	2600      	movs	r6, #0
 8007186:	4637      	mov	r7, r6
 8007188:	e7e1      	b.n	800714e <_dtoa_r+0x93e>
 800718a:	9703      	str	r7, [sp, #12]
 800718c:	4637      	mov	r7, r6
 800718e:	e599      	b.n	8006cc4 <_dtoa_r+0x4b4>
 8007190:	40240000 	.word	0x40240000
 8007194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80ca 	beq.w	8007330 <_dtoa_r+0xb20>
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	dd05      	ble.n	80071b0 <_dtoa_r+0x9a0>
 80071a4:	4639      	mov	r1, r7
 80071a6:	462a      	mov	r2, r5
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fb4b 	bl	8007844 <__lshift>
 80071ae:	4607      	mov	r7, r0
 80071b0:	f1b8 0f00 	cmp.w	r8, #0
 80071b4:	d05b      	beq.n	800726e <_dtoa_r+0xa5e>
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f931 	bl	8007420 <_Balloc>
 80071be:	4605      	mov	r5, r0
 80071c0:	b928      	cbnz	r0, 80071ce <_dtoa_r+0x9be>
 80071c2:	4b87      	ldr	r3, [pc, #540]	; (80073e0 <_dtoa_r+0xbd0>)
 80071c4:	4602      	mov	r2, r0
 80071c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071ca:	f7ff bb37 	b.w	800683c <_dtoa_r+0x2c>
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	3202      	adds	r2, #2
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	f107 010c 	add.w	r1, r7, #12
 80071d8:	300c      	adds	r0, #12
 80071da:	f000 f913 	bl	8007404 <memcpy>
 80071de:	2201      	movs	r2, #1
 80071e0:	4629      	mov	r1, r5
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fb2e 	bl	8007844 <__lshift>
 80071e8:	9b04      	ldr	r3, [sp, #16]
 80071ea:	f103 0901 	add.w	r9, r3, #1
 80071ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	9308      	str	r3, [sp, #32]
 80071f6:	f00a 0301 	and.w	r3, sl, #1
 80071fa:	46b8      	mov	r8, r7
 80071fc:	9307      	str	r3, [sp, #28]
 80071fe:	4607      	mov	r7, r0
 8007200:	4631      	mov	r1, r6
 8007202:	ee18 0a10 	vmov	r0, s16
 8007206:	f7ff fa75 	bl	80066f4 <quorem>
 800720a:	4641      	mov	r1, r8
 800720c:	9005      	str	r0, [sp, #20]
 800720e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007212:	ee18 0a10 	vmov	r0, s16
 8007216:	f000 fb85 	bl	8007924 <__mcmp>
 800721a:	463a      	mov	r2, r7
 800721c:	9006      	str	r0, [sp, #24]
 800721e:	4631      	mov	r1, r6
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fb9b 	bl	800795c <__mdiff>
 8007226:	68c2      	ldr	r2, [r0, #12]
 8007228:	f109 3bff 	add.w	fp, r9, #4294967295
 800722c:	4605      	mov	r5, r0
 800722e:	bb02      	cbnz	r2, 8007272 <_dtoa_r+0xa62>
 8007230:	4601      	mov	r1, r0
 8007232:	ee18 0a10 	vmov	r0, s16
 8007236:	f000 fb75 	bl	8007924 <__mcmp>
 800723a:	4602      	mov	r2, r0
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
 8007240:	9209      	str	r2, [sp, #36]	; 0x24
 8007242:	f000 f92d 	bl	80074a0 <_Bfree>
 8007246:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724a:	ea43 0102 	orr.w	r1, r3, r2
 800724e:	9b07      	ldr	r3, [sp, #28]
 8007250:	430b      	orrs	r3, r1
 8007252:	464d      	mov	r5, r9
 8007254:	d10f      	bne.n	8007276 <_dtoa_r+0xa66>
 8007256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800725a:	d02a      	beq.n	80072b2 <_dtoa_r+0xaa2>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	dd02      	ble.n	8007268 <_dtoa_r+0xa58>
 8007262:	9b05      	ldr	r3, [sp, #20]
 8007264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007268:	f88b a000 	strb.w	sl, [fp]
 800726c:	e775      	b.n	800715a <_dtoa_r+0x94a>
 800726e:	4638      	mov	r0, r7
 8007270:	e7ba      	b.n	80071e8 <_dtoa_r+0x9d8>
 8007272:	2201      	movs	r2, #1
 8007274:	e7e2      	b.n	800723c <_dtoa_r+0xa2c>
 8007276:	9b06      	ldr	r3, [sp, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	db04      	blt.n	8007286 <_dtoa_r+0xa76>
 800727c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800727e:	430b      	orrs	r3, r1
 8007280:	9907      	ldr	r1, [sp, #28]
 8007282:	430b      	orrs	r3, r1
 8007284:	d122      	bne.n	80072cc <_dtoa_r+0xabc>
 8007286:	2a00      	cmp	r2, #0
 8007288:	ddee      	ble.n	8007268 <_dtoa_r+0xa58>
 800728a:	ee18 1a10 	vmov	r1, s16
 800728e:	2201      	movs	r2, #1
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fad7 	bl	8007844 <__lshift>
 8007296:	4631      	mov	r1, r6
 8007298:	ee08 0a10 	vmov	s16, r0
 800729c:	f000 fb42 	bl	8007924 <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	dc03      	bgt.n	80072ac <_dtoa_r+0xa9c>
 80072a4:	d1e0      	bne.n	8007268 <_dtoa_r+0xa58>
 80072a6:	f01a 0f01 	tst.w	sl, #1
 80072aa:	d0dd      	beq.n	8007268 <_dtoa_r+0xa58>
 80072ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072b0:	d1d7      	bne.n	8007262 <_dtoa_r+0xa52>
 80072b2:	2339      	movs	r3, #57	; 0x39
 80072b4:	f88b 3000 	strb.w	r3, [fp]
 80072b8:	462b      	mov	r3, r5
 80072ba:	461d      	mov	r5, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072c2:	2a39      	cmp	r2, #57	; 0x39
 80072c4:	d071      	beq.n	80073aa <_dtoa_r+0xb9a>
 80072c6:	3201      	adds	r2, #1
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	e746      	b.n	800715a <_dtoa_r+0x94a>
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	dd07      	ble.n	80072e0 <_dtoa_r+0xad0>
 80072d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072d4:	d0ed      	beq.n	80072b2 <_dtoa_r+0xaa2>
 80072d6:	f10a 0301 	add.w	r3, sl, #1
 80072da:	f88b 3000 	strb.w	r3, [fp]
 80072de:	e73c      	b.n	800715a <_dtoa_r+0x94a>
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80072e6:	4599      	cmp	r9, r3
 80072e8:	d047      	beq.n	800737a <_dtoa_r+0xb6a>
 80072ea:	ee18 1a10 	vmov	r1, s16
 80072ee:	2300      	movs	r3, #0
 80072f0:	220a      	movs	r2, #10
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f8f6 	bl	80074e4 <__multadd>
 80072f8:	45b8      	cmp	r8, r7
 80072fa:	ee08 0a10 	vmov	s16, r0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	f04f 020a 	mov.w	r2, #10
 8007306:	4641      	mov	r1, r8
 8007308:	4620      	mov	r0, r4
 800730a:	d106      	bne.n	800731a <_dtoa_r+0xb0a>
 800730c:	f000 f8ea 	bl	80074e4 <__multadd>
 8007310:	4680      	mov	r8, r0
 8007312:	4607      	mov	r7, r0
 8007314:	f109 0901 	add.w	r9, r9, #1
 8007318:	e772      	b.n	8007200 <_dtoa_r+0x9f0>
 800731a:	f000 f8e3 	bl	80074e4 <__multadd>
 800731e:	4639      	mov	r1, r7
 8007320:	4680      	mov	r8, r0
 8007322:	2300      	movs	r3, #0
 8007324:	220a      	movs	r2, #10
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f8dc 	bl	80074e4 <__multadd>
 800732c:	4607      	mov	r7, r0
 800732e:	e7f1      	b.n	8007314 <_dtoa_r+0xb04>
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	9305      	str	r3, [sp, #20]
 8007334:	9d04      	ldr	r5, [sp, #16]
 8007336:	ee18 0a10 	vmov	r0, s16
 800733a:	4631      	mov	r1, r6
 800733c:	f7ff f9da 	bl	80066f4 <quorem>
 8007340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007344:	9b04      	ldr	r3, [sp, #16]
 8007346:	f805 ab01 	strb.w	sl, [r5], #1
 800734a:	1aea      	subs	r2, r5, r3
 800734c:	9b05      	ldr	r3, [sp, #20]
 800734e:	4293      	cmp	r3, r2
 8007350:	dd09      	ble.n	8007366 <_dtoa_r+0xb56>
 8007352:	ee18 1a10 	vmov	r1, s16
 8007356:	2300      	movs	r3, #0
 8007358:	220a      	movs	r2, #10
 800735a:	4620      	mov	r0, r4
 800735c:	f000 f8c2 	bl	80074e4 <__multadd>
 8007360:	ee08 0a10 	vmov	s16, r0
 8007364:	e7e7      	b.n	8007336 <_dtoa_r+0xb26>
 8007366:	9b05      	ldr	r3, [sp, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfc8      	it	gt
 800736c:	461d      	movgt	r5, r3
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	bfd8      	it	le
 8007372:	2501      	movle	r5, #1
 8007374:	441d      	add	r5, r3
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	ee18 1a10 	vmov	r1, s16
 800737e:	2201      	movs	r2, #1
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fa5f 	bl	8007844 <__lshift>
 8007386:	4631      	mov	r1, r6
 8007388:	ee08 0a10 	vmov	s16, r0
 800738c:	f000 faca 	bl	8007924 <__mcmp>
 8007390:	2800      	cmp	r0, #0
 8007392:	dc91      	bgt.n	80072b8 <_dtoa_r+0xaa8>
 8007394:	d102      	bne.n	800739c <_dtoa_r+0xb8c>
 8007396:	f01a 0f01 	tst.w	sl, #1
 800739a:	d18d      	bne.n	80072b8 <_dtoa_r+0xaa8>
 800739c:	462b      	mov	r3, r5
 800739e:	461d      	mov	r5, r3
 80073a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073a4:	2a30      	cmp	r2, #48	; 0x30
 80073a6:	d0fa      	beq.n	800739e <_dtoa_r+0xb8e>
 80073a8:	e6d7      	b.n	800715a <_dtoa_r+0x94a>
 80073aa:	9a04      	ldr	r2, [sp, #16]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d184      	bne.n	80072ba <_dtoa_r+0xaaa>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	2331      	movs	r3, #49	; 0x31
 80073b8:	7013      	strb	r3, [r2, #0]
 80073ba:	e6ce      	b.n	800715a <_dtoa_r+0x94a>
 80073bc:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <_dtoa_r+0xbd4>)
 80073be:	f7ff ba91 	b.w	80068e4 <_dtoa_r+0xd4>
 80073c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f47f aa6a 	bne.w	800689e <_dtoa_r+0x8e>
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <_dtoa_r+0xbd8>)
 80073cc:	f7ff ba8a 	b.w	80068e4 <_dtoa_r+0xd4>
 80073d0:	9b05      	ldr	r3, [sp, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	dcae      	bgt.n	8007334 <_dtoa_r+0xb24>
 80073d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073d8:	2b02      	cmp	r3, #2
 80073da:	f73f aea8 	bgt.w	800712e <_dtoa_r+0x91e>
 80073de:	e7a9      	b.n	8007334 <_dtoa_r+0xb24>
 80073e0:	0800a837 	.word	0x0800a837
 80073e4:	0800a794 	.word	0x0800a794
 80073e8:	0800a7b8 	.word	0x0800a7b8

080073ec <_localeconv_r>:
 80073ec:	4800      	ldr	r0, [pc, #0]	; (80073f0 <_localeconv_r+0x4>)
 80073ee:	4770      	bx	lr
 80073f0:	2000018c 	.word	0x2000018c

080073f4 <malloc>:
 80073f4:	4b02      	ldr	r3, [pc, #8]	; (8007400 <malloc+0xc>)
 80073f6:	4601      	mov	r1, r0
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	f000 bc15 	b.w	8007c28 <_malloc_r>
 80073fe:	bf00      	nop
 8007400:	20000038 	.word	0x20000038

08007404 <memcpy>:
 8007404:	440a      	add	r2, r1
 8007406:	4291      	cmp	r1, r2
 8007408:	f100 33ff 	add.w	r3, r0, #4294967295
 800740c:	d100      	bne.n	8007410 <memcpy+0xc>
 800740e:	4770      	bx	lr
 8007410:	b510      	push	{r4, lr}
 8007412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741a:	4291      	cmp	r1, r2
 800741c:	d1f9      	bne.n	8007412 <memcpy+0xe>
 800741e:	bd10      	pop	{r4, pc}

08007420 <_Balloc>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007424:	4604      	mov	r4, r0
 8007426:	460d      	mov	r5, r1
 8007428:	b976      	cbnz	r6, 8007448 <_Balloc+0x28>
 800742a:	2010      	movs	r0, #16
 800742c:	f7ff ffe2 	bl	80073f4 <malloc>
 8007430:	4602      	mov	r2, r0
 8007432:	6260      	str	r0, [r4, #36]	; 0x24
 8007434:	b920      	cbnz	r0, 8007440 <_Balloc+0x20>
 8007436:	4b18      	ldr	r3, [pc, #96]	; (8007498 <_Balloc+0x78>)
 8007438:	4818      	ldr	r0, [pc, #96]	; (800749c <_Balloc+0x7c>)
 800743a:	2166      	movs	r1, #102	; 0x66
 800743c:	f000 fdd4 	bl	8007fe8 <__assert_func>
 8007440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007444:	6006      	str	r6, [r0, #0]
 8007446:	60c6      	str	r6, [r0, #12]
 8007448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800744a:	68f3      	ldr	r3, [r6, #12]
 800744c:	b183      	cbz	r3, 8007470 <_Balloc+0x50>
 800744e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007456:	b9b8      	cbnz	r0, 8007488 <_Balloc+0x68>
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f605 	lsl.w	r6, r1, r5
 800745e:	1d72      	adds	r2, r6, #5
 8007460:	0092      	lsls	r2, r2, #2
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fb5e 	bl	8007b24 <_calloc_r>
 8007468:	b160      	cbz	r0, 8007484 <_Balloc+0x64>
 800746a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800746e:	e00e      	b.n	800748e <_Balloc+0x6e>
 8007470:	2221      	movs	r2, #33	; 0x21
 8007472:	2104      	movs	r1, #4
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fb55 	bl	8007b24 <_calloc_r>
 800747a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800747c:	60f0      	str	r0, [r6, #12]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e4      	bne.n	800744e <_Balloc+0x2e>
 8007484:	2000      	movs	r0, #0
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	6802      	ldr	r2, [r0, #0]
 800748a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800748e:	2300      	movs	r3, #0
 8007490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007494:	e7f7      	b.n	8007486 <_Balloc+0x66>
 8007496:	bf00      	nop
 8007498:	0800a7c5 	.word	0x0800a7c5
 800749c:	0800a848 	.word	0x0800a848

080074a0 <_Bfree>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	b976      	cbnz	r6, 80074c8 <_Bfree+0x28>
 80074aa:	2010      	movs	r0, #16
 80074ac:	f7ff ffa2 	bl	80073f4 <malloc>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6268      	str	r0, [r5, #36]	; 0x24
 80074b4:	b920      	cbnz	r0, 80074c0 <_Bfree+0x20>
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <_Bfree+0x3c>)
 80074b8:	4809      	ldr	r0, [pc, #36]	; (80074e0 <_Bfree+0x40>)
 80074ba:	218a      	movs	r1, #138	; 0x8a
 80074bc:	f000 fd94 	bl	8007fe8 <__assert_func>
 80074c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c4:	6006      	str	r6, [r0, #0]
 80074c6:	60c6      	str	r6, [r0, #12]
 80074c8:	b13c      	cbz	r4, 80074da <_Bfree+0x3a>
 80074ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074cc:	6862      	ldr	r2, [r4, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d4:	6021      	str	r1, [r4, #0]
 80074d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	0800a7c5 	.word	0x0800a7c5
 80074e0:	0800a848 	.word	0x0800a848

080074e4 <__multadd>:
 80074e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e8:	690d      	ldr	r5, [r1, #16]
 80074ea:	4607      	mov	r7, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	461e      	mov	r6, r3
 80074f0:	f101 0c14 	add.w	ip, r1, #20
 80074f4:	2000      	movs	r0, #0
 80074f6:	f8dc 3000 	ldr.w	r3, [ip]
 80074fa:	b299      	uxth	r1, r3
 80074fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007500:	0c1e      	lsrs	r6, r3, #16
 8007502:	0c0b      	lsrs	r3, r1, #16
 8007504:	fb02 3306 	mla	r3, r2, r6, r3
 8007508:	b289      	uxth	r1, r1
 800750a:	3001      	adds	r0, #1
 800750c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007510:	4285      	cmp	r5, r0
 8007512:	f84c 1b04 	str.w	r1, [ip], #4
 8007516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800751a:	dcec      	bgt.n	80074f6 <__multadd+0x12>
 800751c:	b30e      	cbz	r6, 8007562 <__multadd+0x7e>
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	42ab      	cmp	r3, r5
 8007522:	dc19      	bgt.n	8007558 <__multadd+0x74>
 8007524:	6861      	ldr	r1, [r4, #4]
 8007526:	4638      	mov	r0, r7
 8007528:	3101      	adds	r1, #1
 800752a:	f7ff ff79 	bl	8007420 <_Balloc>
 800752e:	4680      	mov	r8, r0
 8007530:	b928      	cbnz	r0, 800753e <__multadd+0x5a>
 8007532:	4602      	mov	r2, r0
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <__multadd+0x84>)
 8007536:	480d      	ldr	r0, [pc, #52]	; (800756c <__multadd+0x88>)
 8007538:	21b5      	movs	r1, #181	; 0xb5
 800753a:	f000 fd55 	bl	8007fe8 <__assert_func>
 800753e:	6922      	ldr	r2, [r4, #16]
 8007540:	3202      	adds	r2, #2
 8007542:	f104 010c 	add.w	r1, r4, #12
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	300c      	adds	r0, #12
 800754a:	f7ff ff5b 	bl	8007404 <memcpy>
 800754e:	4621      	mov	r1, r4
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff ffa5 	bl	80074a0 <_Bfree>
 8007556:	4644      	mov	r4, r8
 8007558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800755c:	3501      	adds	r5, #1
 800755e:	615e      	str	r6, [r3, #20]
 8007560:	6125      	str	r5, [r4, #16]
 8007562:	4620      	mov	r0, r4
 8007564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007568:	0800a837 	.word	0x0800a837
 800756c:	0800a848 	.word	0x0800a848

08007570 <__hi0bits>:
 8007570:	0c03      	lsrs	r3, r0, #16
 8007572:	041b      	lsls	r3, r3, #16
 8007574:	b9d3      	cbnz	r3, 80075ac <__hi0bits+0x3c>
 8007576:	0400      	lsls	r0, r0, #16
 8007578:	2310      	movs	r3, #16
 800757a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800757e:	bf04      	itt	eq
 8007580:	0200      	lsleq	r0, r0, #8
 8007582:	3308      	addeq	r3, #8
 8007584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007588:	bf04      	itt	eq
 800758a:	0100      	lsleq	r0, r0, #4
 800758c:	3304      	addeq	r3, #4
 800758e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007592:	bf04      	itt	eq
 8007594:	0080      	lsleq	r0, r0, #2
 8007596:	3302      	addeq	r3, #2
 8007598:	2800      	cmp	r0, #0
 800759a:	db05      	blt.n	80075a8 <__hi0bits+0x38>
 800759c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075a0:	f103 0301 	add.w	r3, r3, #1
 80075a4:	bf08      	it	eq
 80075a6:	2320      	moveq	r3, #32
 80075a8:	4618      	mov	r0, r3
 80075aa:	4770      	bx	lr
 80075ac:	2300      	movs	r3, #0
 80075ae:	e7e4      	b.n	800757a <__hi0bits+0xa>

080075b0 <__lo0bits>:
 80075b0:	6803      	ldr	r3, [r0, #0]
 80075b2:	f013 0207 	ands.w	r2, r3, #7
 80075b6:	4601      	mov	r1, r0
 80075b8:	d00b      	beq.n	80075d2 <__lo0bits+0x22>
 80075ba:	07da      	lsls	r2, r3, #31
 80075bc:	d423      	bmi.n	8007606 <__lo0bits+0x56>
 80075be:	0798      	lsls	r0, r3, #30
 80075c0:	bf49      	itett	mi
 80075c2:	085b      	lsrmi	r3, r3, #1
 80075c4:	089b      	lsrpl	r3, r3, #2
 80075c6:	2001      	movmi	r0, #1
 80075c8:	600b      	strmi	r3, [r1, #0]
 80075ca:	bf5c      	itt	pl
 80075cc:	600b      	strpl	r3, [r1, #0]
 80075ce:	2002      	movpl	r0, #2
 80075d0:	4770      	bx	lr
 80075d2:	b298      	uxth	r0, r3
 80075d4:	b9a8      	cbnz	r0, 8007602 <__lo0bits+0x52>
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	2010      	movs	r0, #16
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	b90a      	cbnz	r2, 80075e2 <__lo0bits+0x32>
 80075de:	3008      	adds	r0, #8
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	071a      	lsls	r2, r3, #28
 80075e4:	bf04      	itt	eq
 80075e6:	091b      	lsreq	r3, r3, #4
 80075e8:	3004      	addeq	r0, #4
 80075ea:	079a      	lsls	r2, r3, #30
 80075ec:	bf04      	itt	eq
 80075ee:	089b      	lsreq	r3, r3, #2
 80075f0:	3002      	addeq	r0, #2
 80075f2:	07da      	lsls	r2, r3, #31
 80075f4:	d403      	bmi.n	80075fe <__lo0bits+0x4e>
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	f100 0001 	add.w	r0, r0, #1
 80075fc:	d005      	beq.n	800760a <__lo0bits+0x5a>
 80075fe:	600b      	str	r3, [r1, #0]
 8007600:	4770      	bx	lr
 8007602:	4610      	mov	r0, r2
 8007604:	e7e9      	b.n	80075da <__lo0bits+0x2a>
 8007606:	2000      	movs	r0, #0
 8007608:	4770      	bx	lr
 800760a:	2020      	movs	r0, #32
 800760c:	4770      	bx	lr
	...

08007610 <__i2b>:
 8007610:	b510      	push	{r4, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	2101      	movs	r1, #1
 8007616:	f7ff ff03 	bl	8007420 <_Balloc>
 800761a:	4602      	mov	r2, r0
 800761c:	b928      	cbnz	r0, 800762a <__i2b+0x1a>
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <__i2b+0x24>)
 8007620:	4805      	ldr	r0, [pc, #20]	; (8007638 <__i2b+0x28>)
 8007622:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007626:	f000 fcdf 	bl	8007fe8 <__assert_func>
 800762a:	2301      	movs	r3, #1
 800762c:	6144      	str	r4, [r0, #20]
 800762e:	6103      	str	r3, [r0, #16]
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	0800a837 	.word	0x0800a837
 8007638:	0800a848 	.word	0x0800a848

0800763c <__multiply>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4691      	mov	r9, r2
 8007642:	690a      	ldr	r2, [r1, #16]
 8007644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	bfb8      	it	lt
 800764c:	460b      	movlt	r3, r1
 800764e:	460c      	mov	r4, r1
 8007650:	bfbc      	itt	lt
 8007652:	464c      	movlt	r4, r9
 8007654:	4699      	movlt	r9, r3
 8007656:	6927      	ldr	r7, [r4, #16]
 8007658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	6861      	ldr	r1, [r4, #4]
 8007660:	eb07 060a 	add.w	r6, r7, sl
 8007664:	42b3      	cmp	r3, r6
 8007666:	b085      	sub	sp, #20
 8007668:	bfb8      	it	lt
 800766a:	3101      	addlt	r1, #1
 800766c:	f7ff fed8 	bl	8007420 <_Balloc>
 8007670:	b930      	cbnz	r0, 8007680 <__multiply+0x44>
 8007672:	4602      	mov	r2, r0
 8007674:	4b44      	ldr	r3, [pc, #272]	; (8007788 <__multiply+0x14c>)
 8007676:	4845      	ldr	r0, [pc, #276]	; (800778c <__multiply+0x150>)
 8007678:	f240 115d 	movw	r1, #349	; 0x15d
 800767c:	f000 fcb4 	bl	8007fe8 <__assert_func>
 8007680:	f100 0514 	add.w	r5, r0, #20
 8007684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007688:	462b      	mov	r3, r5
 800768a:	2200      	movs	r2, #0
 800768c:	4543      	cmp	r3, r8
 800768e:	d321      	bcc.n	80076d4 <__multiply+0x98>
 8007690:	f104 0314 	add.w	r3, r4, #20
 8007694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007698:	f109 0314 	add.w	r3, r9, #20
 800769c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	1b3a      	subs	r2, r7, r4
 80076a4:	3a15      	subs	r2, #21
 80076a6:	f022 0203 	bic.w	r2, r2, #3
 80076aa:	3204      	adds	r2, #4
 80076ac:	f104 0115 	add.w	r1, r4, #21
 80076b0:	428f      	cmp	r7, r1
 80076b2:	bf38      	it	cc
 80076b4:	2204      	movcc	r2, #4
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9a02      	ldr	r2, [sp, #8]
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d80c      	bhi.n	80076da <__multiply+0x9e>
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	dd03      	ble.n	80076cc <__multiply+0x90>
 80076c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05a      	beq.n	8007782 <__multiply+0x146>
 80076cc:	6106      	str	r6, [r0, #16]
 80076ce:	b005      	add	sp, #20
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	e7d8      	b.n	800768c <__multiply+0x50>
 80076da:	f8b3 a000 	ldrh.w	sl, [r3]
 80076de:	f1ba 0f00 	cmp.w	sl, #0
 80076e2:	d024      	beq.n	800772e <__multiply+0xf2>
 80076e4:	f104 0e14 	add.w	lr, r4, #20
 80076e8:	46a9      	mov	r9, r5
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076f2:	f8d9 1000 	ldr.w	r1, [r9]
 80076f6:	fa1f fb82 	uxth.w	fp, r2
 80076fa:	b289      	uxth	r1, r1
 80076fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007704:	f8d9 2000 	ldr.w	r2, [r9]
 8007708:	4461      	add	r1, ip
 800770a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800770e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007716:	b289      	uxth	r1, r1
 8007718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800771c:	4577      	cmp	r7, lr
 800771e:	f849 1b04 	str.w	r1, [r9], #4
 8007722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007726:	d8e2      	bhi.n	80076ee <__multiply+0xb2>
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	f845 c002 	str.w	ip, [r5, r2]
 800772e:	9a03      	ldr	r2, [sp, #12]
 8007730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007734:	3304      	adds	r3, #4
 8007736:	f1b9 0f00 	cmp.w	r9, #0
 800773a:	d020      	beq.n	800777e <__multiply+0x142>
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	f104 0c14 	add.w	ip, r4, #20
 8007742:	46ae      	mov	lr, r5
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	f8bc b000 	ldrh.w	fp, [ip]
 800774c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007750:	fb09 220b 	mla	r2, r9, fp, r2
 8007754:	4492      	add	sl, r2
 8007756:	b289      	uxth	r1, r1
 8007758:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800775c:	f84e 1b04 	str.w	r1, [lr], #4
 8007760:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007764:	f8be 1000 	ldrh.w	r1, [lr]
 8007768:	0c12      	lsrs	r2, r2, #16
 800776a:	fb09 1102 	mla	r1, r9, r2, r1
 800776e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007772:	4567      	cmp	r7, ip
 8007774:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007778:	d8e6      	bhi.n	8007748 <__multiply+0x10c>
 800777a:	9a01      	ldr	r2, [sp, #4]
 800777c:	50a9      	str	r1, [r5, r2]
 800777e:	3504      	adds	r5, #4
 8007780:	e79a      	b.n	80076b8 <__multiply+0x7c>
 8007782:	3e01      	subs	r6, #1
 8007784:	e79c      	b.n	80076c0 <__multiply+0x84>
 8007786:	bf00      	nop
 8007788:	0800a837 	.word	0x0800a837
 800778c:	0800a848 	.word	0x0800a848

08007790 <__pow5mult>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4615      	mov	r5, r2
 8007796:	f012 0203 	ands.w	r2, r2, #3
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	d007      	beq.n	80077b0 <__pow5mult+0x20>
 80077a0:	4c25      	ldr	r4, [pc, #148]	; (8007838 <__pow5mult+0xa8>)
 80077a2:	3a01      	subs	r2, #1
 80077a4:	2300      	movs	r3, #0
 80077a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077aa:	f7ff fe9b 	bl	80074e4 <__multadd>
 80077ae:	4607      	mov	r7, r0
 80077b0:	10ad      	asrs	r5, r5, #2
 80077b2:	d03d      	beq.n	8007830 <__pow5mult+0xa0>
 80077b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077b6:	b97c      	cbnz	r4, 80077d8 <__pow5mult+0x48>
 80077b8:	2010      	movs	r0, #16
 80077ba:	f7ff fe1b 	bl	80073f4 <malloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	6270      	str	r0, [r6, #36]	; 0x24
 80077c2:	b928      	cbnz	r0, 80077d0 <__pow5mult+0x40>
 80077c4:	4b1d      	ldr	r3, [pc, #116]	; (800783c <__pow5mult+0xac>)
 80077c6:	481e      	ldr	r0, [pc, #120]	; (8007840 <__pow5mult+0xb0>)
 80077c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077cc:	f000 fc0c 	bl	8007fe8 <__assert_func>
 80077d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	60c4      	str	r4, [r0, #12]
 80077d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e0:	b94c      	cbnz	r4, 80077f6 <__pow5mult+0x66>
 80077e2:	f240 2171 	movw	r1, #625	; 0x271
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff12 	bl	8007610 <__i2b>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f2:	4604      	mov	r4, r0
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	07eb      	lsls	r3, r5, #31
 80077fc:	d50a      	bpl.n	8007814 <__pow5mult+0x84>
 80077fe:	4639      	mov	r1, r7
 8007800:	4622      	mov	r2, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff1a 	bl	800763c <__multiply>
 8007808:	4639      	mov	r1, r7
 800780a:	4680      	mov	r8, r0
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fe47 	bl	80074a0 <_Bfree>
 8007812:	4647      	mov	r7, r8
 8007814:	106d      	asrs	r5, r5, #1
 8007816:	d00b      	beq.n	8007830 <__pow5mult+0xa0>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	b938      	cbnz	r0, 800782c <__pow5mult+0x9c>
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff ff0b 	bl	800763c <__multiply>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f8c0 9000 	str.w	r9, [r0]
 800782c:	4604      	mov	r4, r0
 800782e:	e7e4      	b.n	80077fa <__pow5mult+0x6a>
 8007830:	4638      	mov	r0, r7
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	0800a998 	.word	0x0800a998
 800783c:	0800a7c5 	.word	0x0800a7c5
 8007840:	0800a848 	.word	0x0800a848

08007844 <__lshift>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	6849      	ldr	r1, [r1, #4]
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	4607      	mov	r7, r0
 8007856:	4691      	mov	r9, r2
 8007858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800785c:	f108 0601 	add.w	r6, r8, #1
 8007860:	42b3      	cmp	r3, r6
 8007862:	db0b      	blt.n	800787c <__lshift+0x38>
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff fddb 	bl	8007420 <_Balloc>
 800786a:	4605      	mov	r5, r0
 800786c:	b948      	cbnz	r0, 8007882 <__lshift+0x3e>
 800786e:	4602      	mov	r2, r0
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <__lshift+0xd8>)
 8007872:	482b      	ldr	r0, [pc, #172]	; (8007920 <__lshift+0xdc>)
 8007874:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007878:	f000 fbb6 	bl	8007fe8 <__assert_func>
 800787c:	3101      	adds	r1, #1
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	e7ee      	b.n	8007860 <__lshift+0x1c>
 8007882:	2300      	movs	r3, #0
 8007884:	f100 0114 	add.w	r1, r0, #20
 8007888:	f100 0210 	add.w	r2, r0, #16
 800788c:	4618      	mov	r0, r3
 800788e:	4553      	cmp	r3, sl
 8007890:	db37      	blt.n	8007902 <__lshift+0xbe>
 8007892:	6920      	ldr	r0, [r4, #16]
 8007894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007898:	f104 0314 	add.w	r3, r4, #20
 800789c:	f019 091f 	ands.w	r9, r9, #31
 80078a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078a8:	d02f      	beq.n	800790a <__lshift+0xc6>
 80078aa:	f1c9 0e20 	rsb	lr, r9, #32
 80078ae:	468a      	mov	sl, r1
 80078b0:	f04f 0c00 	mov.w	ip, #0
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	fa02 f209 	lsl.w	r2, r2, r9
 80078ba:	ea42 020c 	orr.w	r2, r2, ip
 80078be:	f84a 2b04 	str.w	r2, [sl], #4
 80078c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c6:	4298      	cmp	r0, r3
 80078c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80078cc:	d8f2      	bhi.n	80078b4 <__lshift+0x70>
 80078ce:	1b03      	subs	r3, r0, r4
 80078d0:	3b15      	subs	r3, #21
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	3304      	adds	r3, #4
 80078d8:	f104 0215 	add.w	r2, r4, #21
 80078dc:	4290      	cmp	r0, r2
 80078de:	bf38      	it	cc
 80078e0:	2304      	movcc	r3, #4
 80078e2:	f841 c003 	str.w	ip, [r1, r3]
 80078e6:	f1bc 0f00 	cmp.w	ip, #0
 80078ea:	d001      	beq.n	80078f0 <__lshift+0xac>
 80078ec:	f108 0602 	add.w	r6, r8, #2
 80078f0:	3e01      	subs	r6, #1
 80078f2:	4638      	mov	r0, r7
 80078f4:	612e      	str	r6, [r5, #16]
 80078f6:	4621      	mov	r1, r4
 80078f8:	f7ff fdd2 	bl	80074a0 <_Bfree>
 80078fc:	4628      	mov	r0, r5
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	f842 0f04 	str.w	r0, [r2, #4]!
 8007906:	3301      	adds	r3, #1
 8007908:	e7c1      	b.n	800788e <__lshift+0x4a>
 800790a:	3904      	subs	r1, #4
 800790c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007910:	f841 2f04 	str.w	r2, [r1, #4]!
 8007914:	4298      	cmp	r0, r3
 8007916:	d8f9      	bhi.n	800790c <__lshift+0xc8>
 8007918:	e7ea      	b.n	80078f0 <__lshift+0xac>
 800791a:	bf00      	nop
 800791c:	0800a837 	.word	0x0800a837
 8007920:	0800a848 	.word	0x0800a848

08007924 <__mcmp>:
 8007924:	b530      	push	{r4, r5, lr}
 8007926:	6902      	ldr	r2, [r0, #16]
 8007928:	690c      	ldr	r4, [r1, #16]
 800792a:	1b12      	subs	r2, r2, r4
 800792c:	d10e      	bne.n	800794c <__mcmp+0x28>
 800792e:	f100 0314 	add.w	r3, r0, #20
 8007932:	3114      	adds	r1, #20
 8007934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800793c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007944:	42a5      	cmp	r5, r4
 8007946:	d003      	beq.n	8007950 <__mcmp+0x2c>
 8007948:	d305      	bcc.n	8007956 <__mcmp+0x32>
 800794a:	2201      	movs	r2, #1
 800794c:	4610      	mov	r0, r2
 800794e:	bd30      	pop	{r4, r5, pc}
 8007950:	4283      	cmp	r3, r0
 8007952:	d3f3      	bcc.n	800793c <__mcmp+0x18>
 8007954:	e7fa      	b.n	800794c <__mcmp+0x28>
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	e7f7      	b.n	800794c <__mcmp+0x28>

0800795c <__mdiff>:
 800795c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	4606      	mov	r6, r0
 8007964:	4611      	mov	r1, r2
 8007966:	4620      	mov	r0, r4
 8007968:	4690      	mov	r8, r2
 800796a:	f7ff ffdb 	bl	8007924 <__mcmp>
 800796e:	1e05      	subs	r5, r0, #0
 8007970:	d110      	bne.n	8007994 <__mdiff+0x38>
 8007972:	4629      	mov	r1, r5
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fd53 	bl	8007420 <_Balloc>
 800797a:	b930      	cbnz	r0, 800798a <__mdiff+0x2e>
 800797c:	4b3a      	ldr	r3, [pc, #232]	; (8007a68 <__mdiff+0x10c>)
 800797e:	4602      	mov	r2, r0
 8007980:	f240 2132 	movw	r1, #562	; 0x232
 8007984:	4839      	ldr	r0, [pc, #228]	; (8007a6c <__mdiff+0x110>)
 8007986:	f000 fb2f 	bl	8007fe8 <__assert_func>
 800798a:	2301      	movs	r3, #1
 800798c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	bfa4      	itt	ge
 8007996:	4643      	movge	r3, r8
 8007998:	46a0      	movge	r8, r4
 800799a:	4630      	mov	r0, r6
 800799c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079a0:	bfa6      	itte	ge
 80079a2:	461c      	movge	r4, r3
 80079a4:	2500      	movge	r5, #0
 80079a6:	2501      	movlt	r5, #1
 80079a8:	f7ff fd3a 	bl	8007420 <_Balloc>
 80079ac:	b920      	cbnz	r0, 80079b8 <__mdiff+0x5c>
 80079ae:	4b2e      	ldr	r3, [pc, #184]	; (8007a68 <__mdiff+0x10c>)
 80079b0:	4602      	mov	r2, r0
 80079b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079b6:	e7e5      	b.n	8007984 <__mdiff+0x28>
 80079b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079bc:	6926      	ldr	r6, [r4, #16]
 80079be:	60c5      	str	r5, [r0, #12]
 80079c0:	f104 0914 	add.w	r9, r4, #20
 80079c4:	f108 0514 	add.w	r5, r8, #20
 80079c8:	f100 0e14 	add.w	lr, r0, #20
 80079cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079d4:	f108 0210 	add.w	r2, r8, #16
 80079d8:	46f2      	mov	sl, lr
 80079da:	2100      	movs	r1, #0
 80079dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80079e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079e4:	fa1f f883 	uxth.w	r8, r3
 80079e8:	fa11 f18b 	uxtah	r1, r1, fp
 80079ec:	0c1b      	lsrs	r3, r3, #16
 80079ee:	eba1 0808 	sub.w	r8, r1, r8
 80079f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079fa:	fa1f f888 	uxth.w	r8, r8
 80079fe:	1419      	asrs	r1, r3, #16
 8007a00:	454e      	cmp	r6, r9
 8007a02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a06:	f84a 3b04 	str.w	r3, [sl], #4
 8007a0a:	d8e7      	bhi.n	80079dc <__mdiff+0x80>
 8007a0c:	1b33      	subs	r3, r6, r4
 8007a0e:	3b15      	subs	r3, #21
 8007a10:	f023 0303 	bic.w	r3, r3, #3
 8007a14:	3304      	adds	r3, #4
 8007a16:	3415      	adds	r4, #21
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	bf38      	it	cc
 8007a1c:	2304      	movcc	r3, #4
 8007a1e:	441d      	add	r5, r3
 8007a20:	4473      	add	r3, lr
 8007a22:	469e      	mov	lr, r3
 8007a24:	462e      	mov	r6, r5
 8007a26:	4566      	cmp	r6, ip
 8007a28:	d30e      	bcc.n	8007a48 <__mdiff+0xec>
 8007a2a:	f10c 0203 	add.w	r2, ip, #3
 8007a2e:	1b52      	subs	r2, r2, r5
 8007a30:	f022 0203 	bic.w	r2, r2, #3
 8007a34:	3d03      	subs	r5, #3
 8007a36:	45ac      	cmp	ip, r5
 8007a38:	bf38      	it	cc
 8007a3a:	2200      	movcc	r2, #0
 8007a3c:	441a      	add	r2, r3
 8007a3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a42:	b17b      	cbz	r3, 8007a64 <__mdiff+0x108>
 8007a44:	6107      	str	r7, [r0, #16]
 8007a46:	e7a3      	b.n	8007990 <__mdiff+0x34>
 8007a48:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a4c:	fa11 f288 	uxtah	r2, r1, r8
 8007a50:	1414      	asrs	r4, r2, #16
 8007a52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a56:	b292      	uxth	r2, r2
 8007a58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a5c:	f84e 2b04 	str.w	r2, [lr], #4
 8007a60:	1421      	asrs	r1, r4, #16
 8007a62:	e7e0      	b.n	8007a26 <__mdiff+0xca>
 8007a64:	3f01      	subs	r7, #1
 8007a66:	e7ea      	b.n	8007a3e <__mdiff+0xe2>
 8007a68:	0800a837 	.word	0x0800a837
 8007a6c:	0800a848 	.word	0x0800a848

08007a70 <__d2b>:
 8007a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	2101      	movs	r1, #1
 8007a76:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8007a7a:	4690      	mov	r8, r2
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	f7ff fccf 	bl	8007420 <_Balloc>
 8007a82:	4604      	mov	r4, r0
 8007a84:	b930      	cbnz	r0, 8007a94 <__d2b+0x24>
 8007a86:	4602      	mov	r2, r0
 8007a88:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <__d2b+0xac>)
 8007a8a:	4825      	ldr	r0, [pc, #148]	; (8007b20 <__d2b+0xb0>)
 8007a8c:	f240 310a 	movw	r1, #778	; 0x30a
 8007a90:	f000 faaa 	bl	8007fe8 <__assert_func>
 8007a94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a9c:	bb2d      	cbnz	r5, 8007aea <__d2b+0x7a>
 8007a9e:	f1b8 0200 	subs.w	r2, r8, #0
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	d026      	beq.n	8007af4 <__d2b+0x84>
 8007aa6:	4668      	mov	r0, sp
 8007aa8:	9200      	str	r2, [sp, #0]
 8007aaa:	f7ff fd81 	bl	80075b0 <__lo0bits>
 8007aae:	9900      	ldr	r1, [sp, #0]
 8007ab0:	b1f0      	cbz	r0, 8007af0 <__d2b+0x80>
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	f1c0 0320 	rsb	r3, r0, #32
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	430b      	orrs	r3, r1
 8007abe:	40c2      	lsrs	r2, r0
 8007ac0:	6163      	str	r3, [r4, #20]
 8007ac2:	9201      	str	r2, [sp, #4]
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	61a3      	str	r3, [r4, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2202      	movne	r2, #2
 8007ace:	2201      	moveq	r2, #1
 8007ad0:	6122      	str	r2, [r4, #16]
 8007ad2:	b1c5      	cbz	r5, 8007b06 <__d2b+0x96>
 8007ad4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ad8:	4405      	add	r5, r0
 8007ada:	603d      	str	r5, [r7, #0]
 8007adc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ae0:	6030      	str	r0, [r6, #0]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	b003      	add	sp, #12
 8007ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aee:	e7d6      	b.n	8007a9e <__d2b+0x2e>
 8007af0:	6161      	str	r1, [r4, #20]
 8007af2:	e7e7      	b.n	8007ac4 <__d2b+0x54>
 8007af4:	a801      	add	r0, sp, #4
 8007af6:	f7ff fd5b 	bl	80075b0 <__lo0bits>
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	6163      	str	r3, [r4, #20]
 8007afe:	2201      	movs	r2, #1
 8007b00:	6122      	str	r2, [r4, #16]
 8007b02:	3020      	adds	r0, #32
 8007b04:	e7e5      	b.n	8007ad2 <__d2b+0x62>
 8007b06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b0e:	6038      	str	r0, [r7, #0]
 8007b10:	6918      	ldr	r0, [r3, #16]
 8007b12:	f7ff fd2d 	bl	8007570 <__hi0bits>
 8007b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b1a:	e7e1      	b.n	8007ae0 <__d2b+0x70>
 8007b1c:	0800a837 	.word	0x0800a837
 8007b20:	0800a848 	.word	0x0800a848

08007b24 <_calloc_r>:
 8007b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b26:	fba1 2402 	umull	r2, r4, r1, r2
 8007b2a:	b94c      	cbnz	r4, 8007b40 <_calloc_r+0x1c>
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	9201      	str	r2, [sp, #4]
 8007b30:	f000 f87a 	bl	8007c28 <_malloc_r>
 8007b34:	9a01      	ldr	r2, [sp, #4]
 8007b36:	4605      	mov	r5, r0
 8007b38:	b930      	cbnz	r0, 8007b48 <_calloc_r+0x24>
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bd30      	pop	{r4, r5, pc}
 8007b40:	220c      	movs	r2, #12
 8007b42:	6002      	str	r2, [r0, #0]
 8007b44:	2500      	movs	r5, #0
 8007b46:	e7f8      	b.n	8007b3a <_calloc_r+0x16>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	f7fe f93f 	bl	8005dcc <memset>
 8007b4e:	e7f4      	b.n	8007b3a <_calloc_r+0x16>

08007b50 <_free_r>:
 8007b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b52:	2900      	cmp	r1, #0
 8007b54:	d044      	beq.n	8007be0 <_free_r+0x90>
 8007b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5a:	9001      	str	r0, [sp, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b62:	bfb8      	it	lt
 8007b64:	18e4      	addlt	r4, r4, r3
 8007b66:	f000 fa9b 	bl	80080a0 <__malloc_lock>
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <_free_r+0x94>)
 8007b6c:	9801      	ldr	r0, [sp, #4]
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	b933      	cbnz	r3, 8007b80 <_free_r+0x30>
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	6014      	str	r4, [r2, #0]
 8007b76:	b003      	add	sp, #12
 8007b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b7c:	f000 ba96 	b.w	80080ac <__malloc_unlock>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d908      	bls.n	8007b96 <_free_r+0x46>
 8007b84:	6825      	ldr	r5, [r4, #0]
 8007b86:	1961      	adds	r1, r4, r5
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	bf01      	itttt	eq
 8007b8c:	6819      	ldreq	r1, [r3, #0]
 8007b8e:	685b      	ldreq	r3, [r3, #4]
 8007b90:	1949      	addeq	r1, r1, r5
 8007b92:	6021      	streq	r1, [r4, #0]
 8007b94:	e7ed      	b.n	8007b72 <_free_r+0x22>
 8007b96:	461a      	mov	r2, r3
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_free_r+0x50>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d9fa      	bls.n	8007b96 <_free_r+0x46>
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	1855      	adds	r5, r2, r1
 8007ba4:	42a5      	cmp	r5, r4
 8007ba6:	d10b      	bne.n	8007bc0 <_free_r+0x70>
 8007ba8:	6824      	ldr	r4, [r4, #0]
 8007baa:	4421      	add	r1, r4
 8007bac:	1854      	adds	r4, r2, r1
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	d1e0      	bne.n	8007b76 <_free_r+0x26>
 8007bb4:	681c      	ldr	r4, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	6053      	str	r3, [r2, #4]
 8007bba:	4421      	add	r1, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	e7da      	b.n	8007b76 <_free_r+0x26>
 8007bc0:	d902      	bls.n	8007bc8 <_free_r+0x78>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	e7d6      	b.n	8007b76 <_free_r+0x26>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf04      	itt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	bf04      	itt	eq
 8007bd8:	1949      	addeq	r1, r1, r5
 8007bda:	6021      	streq	r1, [r4, #0]
 8007bdc:	6054      	str	r4, [r2, #4]
 8007bde:	e7ca      	b.n	8007b76 <_free_r+0x26>
 8007be0:	b003      	add	sp, #12
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	200002bc 	.word	0x200002bc

08007be8 <sbrk_aligned>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	4e0e      	ldr	r6, [pc, #56]	; (8007c24 <sbrk_aligned+0x3c>)
 8007bec:	460c      	mov	r4, r1
 8007bee:	6831      	ldr	r1, [r6, #0]
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b911      	cbnz	r1, 8007bfa <sbrk_aligned+0x12>
 8007bf4:	f000 f9e8 	bl	8007fc8 <_sbrk_r>
 8007bf8:	6030      	str	r0, [r6, #0]
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 f9e3 	bl	8007fc8 <_sbrk_r>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	d00a      	beq.n	8007c1c <sbrk_aligned+0x34>
 8007c06:	1cc4      	adds	r4, r0, #3
 8007c08:	f024 0403 	bic.w	r4, r4, #3
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d007      	beq.n	8007c20 <sbrk_aligned+0x38>
 8007c10:	1a21      	subs	r1, r4, r0
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f9d8 	bl	8007fc8 <_sbrk_r>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d101      	bne.n	8007c20 <sbrk_aligned+0x38>
 8007c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c20:	4620      	mov	r0, r4
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	200002c0 	.word	0x200002c0

08007c28 <_malloc_r>:
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	1ccd      	adds	r5, r1, #3
 8007c2e:	f025 0503 	bic.w	r5, r5, #3
 8007c32:	3508      	adds	r5, #8
 8007c34:	2d0c      	cmp	r5, #12
 8007c36:	bf38      	it	cc
 8007c38:	250c      	movcc	r5, #12
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	db01      	blt.n	8007c44 <_malloc_r+0x1c>
 8007c40:	42a9      	cmp	r1, r5
 8007c42:	d905      	bls.n	8007c50 <_malloc_r+0x28>
 8007c44:	230c      	movs	r3, #12
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	2600      	movs	r6, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	4e2e      	ldr	r6, [pc, #184]	; (8007d0c <_malloc_r+0xe4>)
 8007c52:	f000 fa25 	bl	80080a0 <__malloc_lock>
 8007c56:	6833      	ldr	r3, [r6, #0]
 8007c58:	461c      	mov	r4, r3
 8007c5a:	bb34      	cbnz	r4, 8007caa <_malloc_r+0x82>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4638      	mov	r0, r7
 8007c60:	f7ff ffc2 	bl	8007be8 <sbrk_aligned>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	4604      	mov	r4, r0
 8007c68:	d14d      	bne.n	8007d06 <_malloc_r+0xde>
 8007c6a:	6834      	ldr	r4, [r6, #0]
 8007c6c:	4626      	mov	r6, r4
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	d140      	bne.n	8007cf4 <_malloc_r+0xcc>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	4631      	mov	r1, r6
 8007c76:	4638      	mov	r0, r7
 8007c78:	eb04 0803 	add.w	r8, r4, r3
 8007c7c:	f000 f9a4 	bl	8007fc8 <_sbrk_r>
 8007c80:	4580      	cmp	r8, r0
 8007c82:	d13a      	bne.n	8007cfa <_malloc_r+0xd2>
 8007c84:	6821      	ldr	r1, [r4, #0]
 8007c86:	3503      	adds	r5, #3
 8007c88:	1a6d      	subs	r5, r5, r1
 8007c8a:	f025 0503 	bic.w	r5, r5, #3
 8007c8e:	3508      	adds	r5, #8
 8007c90:	2d0c      	cmp	r5, #12
 8007c92:	bf38      	it	cc
 8007c94:	250c      	movcc	r5, #12
 8007c96:	4629      	mov	r1, r5
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <sbrk_aligned>
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d02b      	beq.n	8007cfa <_malloc_r+0xd2>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	442b      	add	r3, r5
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	e00e      	b.n	8007cc8 <_malloc_r+0xa0>
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	1b52      	subs	r2, r2, r5
 8007cae:	d41e      	bmi.n	8007cee <_malloc_r+0xc6>
 8007cb0:	2a0b      	cmp	r2, #11
 8007cb2:	d916      	bls.n	8007ce2 <_malloc_r+0xba>
 8007cb4:	1961      	adds	r1, r4, r5
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	6025      	str	r5, [r4, #0]
 8007cba:	bf18      	it	ne
 8007cbc:	6059      	strne	r1, [r3, #4]
 8007cbe:	6863      	ldr	r3, [r4, #4]
 8007cc0:	bf08      	it	eq
 8007cc2:	6031      	streq	r1, [r6, #0]
 8007cc4:	5162      	str	r2, [r4, r5]
 8007cc6:	604b      	str	r3, [r1, #4]
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f104 060b 	add.w	r6, r4, #11
 8007cce:	f000 f9ed 	bl	80080ac <__malloc_unlock>
 8007cd2:	f026 0607 	bic.w	r6, r6, #7
 8007cd6:	1d23      	adds	r3, r4, #4
 8007cd8:	1af2      	subs	r2, r6, r3
 8007cda:	d0b6      	beq.n	8007c4a <_malloc_r+0x22>
 8007cdc:	1b9b      	subs	r3, r3, r6
 8007cde:	50a3      	str	r3, [r4, r2]
 8007ce0:	e7b3      	b.n	8007c4a <_malloc_r+0x22>
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	bf0c      	ite	eq
 8007ce8:	6032      	streq	r2, [r6, #0]
 8007cea:	605a      	strne	r2, [r3, #4]
 8007cec:	e7ec      	b.n	8007cc8 <_malloc_r+0xa0>
 8007cee:	4623      	mov	r3, r4
 8007cf0:	6864      	ldr	r4, [r4, #4]
 8007cf2:	e7b2      	b.n	8007c5a <_malloc_r+0x32>
 8007cf4:	4634      	mov	r4, r6
 8007cf6:	6876      	ldr	r6, [r6, #4]
 8007cf8:	e7b9      	b.n	8007c6e <_malloc_r+0x46>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f000 f9d4 	bl	80080ac <__malloc_unlock>
 8007d04:	e7a1      	b.n	8007c4a <_malloc_r+0x22>
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	e7de      	b.n	8007cc8 <_malloc_r+0xa0>
 8007d0a:	bf00      	nop
 8007d0c:	200002bc 	.word	0x200002bc

08007d10 <__ssputs_r>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	688e      	ldr	r6, [r1, #8]
 8007d16:	429e      	cmp	r6, r3
 8007d18:	4682      	mov	sl, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	461f      	mov	r7, r3
 8007d20:	d838      	bhi.n	8007d94 <__ssputs_r+0x84>
 8007d22:	898a      	ldrh	r2, [r1, #12]
 8007d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d28:	d032      	beq.n	8007d90 <__ssputs_r+0x80>
 8007d2a:	6825      	ldr	r5, [r4, #0]
 8007d2c:	6909      	ldr	r1, [r1, #16]
 8007d2e:	eba5 0901 	sub.w	r9, r5, r1
 8007d32:	6965      	ldr	r5, [r4, #20]
 8007d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	444b      	add	r3, r9
 8007d40:	106d      	asrs	r5, r5, #1
 8007d42:	429d      	cmp	r5, r3
 8007d44:	bf38      	it	cc
 8007d46:	461d      	movcc	r5, r3
 8007d48:	0553      	lsls	r3, r2, #21
 8007d4a:	d531      	bpl.n	8007db0 <__ssputs_r+0xa0>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7ff ff6b 	bl	8007c28 <_malloc_r>
 8007d52:	4606      	mov	r6, r0
 8007d54:	b950      	cbnz	r0, 8007d6c <__ssputs_r+0x5c>
 8007d56:	230c      	movs	r3, #12
 8007d58:	f8ca 3000 	str.w	r3, [sl]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	464a      	mov	r2, r9
 8007d70:	f7ff fb48 	bl	8007404 <memcpy>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	6126      	str	r6, [r4, #16]
 8007d82:	6165      	str	r5, [r4, #20]
 8007d84:	444e      	add	r6, r9
 8007d86:	eba5 0509 	sub.w	r5, r5, r9
 8007d8a:	6026      	str	r6, [r4, #0]
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	463e      	mov	r6, r7
 8007d90:	42be      	cmp	r6, r7
 8007d92:	d900      	bls.n	8007d96 <__ssputs_r+0x86>
 8007d94:	463e      	mov	r6, r7
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	f000 f966 	bl	800806c <memmove>
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	1b9b      	subs	r3, r3, r6
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	4433      	add	r3, r6
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7db      	b.n	8007d68 <__ssputs_r+0x58>
 8007db0:	462a      	mov	r2, r5
 8007db2:	f000 f981 	bl	80080b8 <_realloc_r>
 8007db6:	4606      	mov	r6, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1e1      	bne.n	8007d80 <__ssputs_r+0x70>
 8007dbc:	6921      	ldr	r1, [r4, #16]
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7ff fec6 	bl	8007b50 <_free_r>
 8007dc4:	e7c7      	b.n	8007d56 <__ssputs_r+0x46>
	...

08007dc8 <_svfiprintf_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4698      	mov	r8, r3
 8007dce:	898b      	ldrh	r3, [r1, #12]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	b09d      	sub	sp, #116	; 0x74
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	d50e      	bpl.n	8007dfa <_svfiprintf_r+0x32>
 8007ddc:	690b      	ldr	r3, [r1, #16]
 8007dde:	b963      	cbnz	r3, 8007dfa <_svfiprintf_r+0x32>
 8007de0:	2140      	movs	r1, #64	; 0x40
 8007de2:	f7ff ff21 	bl	8007c28 <_malloc_r>
 8007de6:	6028      	str	r0, [r5, #0]
 8007de8:	6128      	str	r0, [r5, #16]
 8007dea:	b920      	cbnz	r0, 8007df6 <_svfiprintf_r+0x2e>
 8007dec:	230c      	movs	r3, #12
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e0d1      	b.n	8007f9a <_svfiprintf_r+0x1d2>
 8007df6:	2340      	movs	r3, #64	; 0x40
 8007df8:	616b      	str	r3, [r5, #20]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfe:	2320      	movs	r3, #32
 8007e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e08:	2330      	movs	r3, #48	; 0x30
 8007e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fb4 <_svfiprintf_r+0x1ec>
 8007e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e12:	f04f 0901 	mov.w	r9, #1
 8007e16:	4623      	mov	r3, r4
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e1e:	b10a      	cbz	r2, 8007e24 <_svfiprintf_r+0x5c>
 8007e20:	2a25      	cmp	r2, #37	; 0x25
 8007e22:	d1f9      	bne.n	8007e18 <_svfiprintf_r+0x50>
 8007e24:	ebba 0b04 	subs.w	fp, sl, r4
 8007e28:	d00b      	beq.n	8007e42 <_svfiprintf_r+0x7a>
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4638      	mov	r0, r7
 8007e32:	f7ff ff6d 	bl	8007d10 <__ssputs_r>
 8007e36:	3001      	adds	r0, #1
 8007e38:	f000 80aa 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3e:	445a      	add	r2, fp
 8007e40:	9209      	str	r2, [sp, #36]	; 0x24
 8007e42:	f89a 3000 	ldrb.w	r3, [sl]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80a2 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e56:	f10a 0a01 	add.w	sl, sl, #1
 8007e5a:	9304      	str	r3, [sp, #16]
 8007e5c:	9307      	str	r3, [sp, #28]
 8007e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e62:	931a      	str	r3, [sp, #104]	; 0x68
 8007e64:	4654      	mov	r4, sl
 8007e66:	2205      	movs	r2, #5
 8007e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6c:	4851      	ldr	r0, [pc, #324]	; (8007fb4 <_svfiprintf_r+0x1ec>)
 8007e6e:	f7f8 f9bf 	bl	80001f0 <memchr>
 8007e72:	9a04      	ldr	r2, [sp, #16]
 8007e74:	b9d8      	cbnz	r0, 8007eae <_svfiprintf_r+0xe6>
 8007e76:	06d0      	lsls	r0, r2, #27
 8007e78:	bf44      	itt	mi
 8007e7a:	2320      	movmi	r3, #32
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e80:	0711      	lsls	r1, r2, #28
 8007e82:	bf44      	itt	mi
 8007e84:	232b      	movmi	r3, #43	; 0x2b
 8007e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e90:	d015      	beq.n	8007ebe <_svfiprintf_r+0xf6>
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	4654      	mov	r4, sl
 8007e96:	2000      	movs	r0, #0
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea2:	3b30      	subs	r3, #48	; 0x30
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d94e      	bls.n	8007f46 <_svfiprintf_r+0x17e>
 8007ea8:	b1b0      	cbz	r0, 8007ed8 <_svfiprintf_r+0x110>
 8007eaa:	9207      	str	r2, [sp, #28]
 8007eac:	e014      	b.n	8007ed8 <_svfiprintf_r+0x110>
 8007eae:	eba0 0308 	sub.w	r3, r0, r8
 8007eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	46a2      	mov	sl, r4
 8007ebc:	e7d2      	b.n	8007e64 <_svfiprintf_r+0x9c>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d19      	adds	r1, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9103      	str	r1, [sp, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbb      	ittet	lt
 8007eca:	425b      	neglt	r3, r3
 8007ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed0:	9307      	strge	r3, [sp, #28]
 8007ed2:	9307      	strlt	r3, [sp, #28]
 8007ed4:	bfb8      	it	lt
 8007ed6:	9204      	strlt	r2, [sp, #16]
 8007ed8:	7823      	ldrb	r3, [r4, #0]
 8007eda:	2b2e      	cmp	r3, #46	; 0x2e
 8007edc:	d10c      	bne.n	8007ef8 <_svfiprintf_r+0x130>
 8007ede:	7863      	ldrb	r3, [r4, #1]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d135      	bne.n	8007f50 <_svfiprintf_r+0x188>
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	9203      	str	r2, [sp, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb8      	it	lt
 8007ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef4:	3402      	adds	r4, #2
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fc4 <_svfiprintf_r+0x1fc>
 8007efc:	7821      	ldrb	r1, [r4, #0]
 8007efe:	2203      	movs	r2, #3
 8007f00:	4650      	mov	r0, sl
 8007f02:	f7f8 f975 	bl	80001f0 <memchr>
 8007f06:	b140      	cbz	r0, 8007f1a <_svfiprintf_r+0x152>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	eba0 000a 	sub.w	r0, r0, sl
 8007f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	4303      	orrs	r3, r0
 8007f16:	3401      	adds	r4, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	4826      	ldr	r0, [pc, #152]	; (8007fb8 <_svfiprintf_r+0x1f0>)
 8007f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f24:	2206      	movs	r2, #6
 8007f26:	f7f8 f963 	bl	80001f0 <memchr>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d038      	beq.n	8007fa0 <_svfiprintf_r+0x1d8>
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <_svfiprintf_r+0x1f4>)
 8007f30:	bb1b      	cbnz	r3, 8007f7a <_svfiprintf_r+0x1b2>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	3307      	adds	r3, #7
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	4433      	add	r3, r6
 8007f42:	9309      	str	r3, [sp, #36]	; 0x24
 8007f44:	e767      	b.n	8007e16 <_svfiprintf_r+0x4e>
 8007f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e7a5      	b.n	8007e9c <_svfiprintf_r+0xd4>
 8007f50:	2300      	movs	r3, #0
 8007f52:	3401      	adds	r4, #1
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	4619      	mov	r1, r3
 8007f58:	f04f 0c0a 	mov.w	ip, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f62:	3a30      	subs	r2, #48	; 0x30
 8007f64:	2a09      	cmp	r2, #9
 8007f66:	d903      	bls.n	8007f70 <_svfiprintf_r+0x1a8>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0c5      	beq.n	8007ef8 <_svfiprintf_r+0x130>
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e7c3      	b.n	8007ef8 <_svfiprintf_r+0x130>
 8007f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f74:	4604      	mov	r4, r0
 8007f76:	2301      	movs	r3, #1
 8007f78:	e7f0      	b.n	8007f5c <_svfiprintf_r+0x194>
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7fd ffc9 	bl	8005f1c <_printf_float>
 8007f8a:	1c42      	adds	r2, r0, #1
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	d1d6      	bne.n	8007f3e <_svfiprintf_r+0x176>
 8007f90:	89ab      	ldrh	r3, [r5, #12]
 8007f92:	065b      	lsls	r3, r3, #25
 8007f94:	f53f af2c 	bmi.w	8007df0 <_svfiprintf_r+0x28>
 8007f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f9a:	b01d      	add	sp, #116	; 0x74
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7fe fa5c 	bl	8006468 <_printf_i>
 8007fb0:	e7eb      	b.n	8007f8a <_svfiprintf_r+0x1c2>
 8007fb2:	bf00      	nop
 8007fb4:	0800a9a4 	.word	0x0800a9a4
 8007fb8:	0800a9ae 	.word	0x0800a9ae
 8007fbc:	08005f1d 	.word	0x08005f1d
 8007fc0:	08007d11 	.word	0x08007d11
 8007fc4:	0800a9aa 	.word	0x0800a9aa

08007fc8 <_sbrk_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	; (8007fe4 <_sbrk_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f002 f842 	bl	800a05c <_sbrk>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_sbrk_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_sbrk_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200002c4 	.word	0x200002c4

08007fe8 <__assert_func>:
 8007fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fea:	4614      	mov	r4, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <__assert_func+0x2c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	68d8      	ldr	r0, [r3, #12]
 8007ff6:	b14c      	cbz	r4, 800800c <__assert_func+0x24>
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <__assert_func+0x30>)
 8007ffa:	9100      	str	r1, [sp, #0]
 8007ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008000:	4906      	ldr	r1, [pc, #24]	; (800801c <__assert_func+0x34>)
 8008002:	462b      	mov	r3, r5
 8008004:	f000 f80e 	bl	8008024 <fiprintf>
 8008008:	f000 faac 	bl	8008564 <abort>
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <__assert_func+0x38>)
 800800e:	461c      	mov	r4, r3
 8008010:	e7f3      	b.n	8007ffa <__assert_func+0x12>
 8008012:	bf00      	nop
 8008014:	20000038 	.word	0x20000038
 8008018:	0800a9b5 	.word	0x0800a9b5
 800801c:	0800a9c2 	.word	0x0800a9c2
 8008020:	0800a9f0 	.word	0x0800a9f0

08008024 <fiprintf>:
 8008024:	b40e      	push	{r1, r2, r3}
 8008026:	b503      	push	{r0, r1, lr}
 8008028:	4601      	mov	r1, r0
 800802a:	ab03      	add	r3, sp, #12
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <fiprintf+0x20>)
 800802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008032:	6800      	ldr	r0, [r0, #0]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f000 f897 	bl	8008168 <_vfiprintf_r>
 800803a:	b002      	add	sp, #8
 800803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008040:	b003      	add	sp, #12
 8008042:	4770      	bx	lr
 8008044:	20000038 	.word	0x20000038

08008048 <__ascii_mbtowc>:
 8008048:	b082      	sub	sp, #8
 800804a:	b901      	cbnz	r1, 800804e <__ascii_mbtowc+0x6>
 800804c:	a901      	add	r1, sp, #4
 800804e:	b142      	cbz	r2, 8008062 <__ascii_mbtowc+0x1a>
 8008050:	b14b      	cbz	r3, 8008066 <__ascii_mbtowc+0x1e>
 8008052:	7813      	ldrb	r3, [r2, #0]
 8008054:	600b      	str	r3, [r1, #0]
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	1e10      	subs	r0, r2, #0
 800805a:	bf18      	it	ne
 800805c:	2001      	movne	r0, #1
 800805e:	b002      	add	sp, #8
 8008060:	4770      	bx	lr
 8008062:	4610      	mov	r0, r2
 8008064:	e7fb      	b.n	800805e <__ascii_mbtowc+0x16>
 8008066:	f06f 0001 	mvn.w	r0, #1
 800806a:	e7f8      	b.n	800805e <__ascii_mbtowc+0x16>

0800806c <memmove>:
 800806c:	4288      	cmp	r0, r1
 800806e:	b510      	push	{r4, lr}
 8008070:	eb01 0402 	add.w	r4, r1, r2
 8008074:	d902      	bls.n	800807c <memmove+0x10>
 8008076:	4284      	cmp	r4, r0
 8008078:	4623      	mov	r3, r4
 800807a:	d807      	bhi.n	800808c <memmove+0x20>
 800807c:	1e43      	subs	r3, r0, #1
 800807e:	42a1      	cmp	r1, r4
 8008080:	d008      	beq.n	8008094 <memmove+0x28>
 8008082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800808a:	e7f8      	b.n	800807e <memmove+0x12>
 800808c:	4402      	add	r2, r0
 800808e:	4601      	mov	r1, r0
 8008090:	428a      	cmp	r2, r1
 8008092:	d100      	bne.n	8008096 <memmove+0x2a>
 8008094:	bd10      	pop	{r4, pc}
 8008096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800809a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800809e:	e7f7      	b.n	8008090 <memmove+0x24>

080080a0 <__malloc_lock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_lock+0x8>)
 80080a2:	f000 bc1f 	b.w	80088e4 <__retarget_lock_acquire_recursive>
 80080a6:	bf00      	nop
 80080a8:	200002c8 	.word	0x200002c8

080080ac <__malloc_unlock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__malloc_unlock+0x8>)
 80080ae:	f000 bc1a 	b.w	80088e6 <__retarget_lock_release_recursive>
 80080b2:	bf00      	nop
 80080b4:	200002c8 	.word	0x200002c8

080080b8 <_realloc_r>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	4680      	mov	r8, r0
 80080be:	4614      	mov	r4, r2
 80080c0:	460e      	mov	r6, r1
 80080c2:	b921      	cbnz	r1, 80080ce <_realloc_r+0x16>
 80080c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	4611      	mov	r1, r2
 80080ca:	f7ff bdad 	b.w	8007c28 <_malloc_r>
 80080ce:	b92a      	cbnz	r2, 80080dc <_realloc_r+0x24>
 80080d0:	f7ff fd3e 	bl	8007b50 <_free_r>
 80080d4:	4625      	mov	r5, r4
 80080d6:	4628      	mov	r0, r5
 80080d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080dc:	f000 fc6a 	bl	80089b4 <_malloc_usable_size_r>
 80080e0:	4284      	cmp	r4, r0
 80080e2:	4607      	mov	r7, r0
 80080e4:	d802      	bhi.n	80080ec <_realloc_r+0x34>
 80080e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080ea:	d812      	bhi.n	8008112 <_realloc_r+0x5a>
 80080ec:	4621      	mov	r1, r4
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7ff fd9a 	bl	8007c28 <_malloc_r>
 80080f4:	4605      	mov	r5, r0
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0ed      	beq.n	80080d6 <_realloc_r+0x1e>
 80080fa:	42bc      	cmp	r4, r7
 80080fc:	4622      	mov	r2, r4
 80080fe:	4631      	mov	r1, r6
 8008100:	bf28      	it	cs
 8008102:	463a      	movcs	r2, r7
 8008104:	f7ff f97e 	bl	8007404 <memcpy>
 8008108:	4631      	mov	r1, r6
 800810a:	4640      	mov	r0, r8
 800810c:	f7ff fd20 	bl	8007b50 <_free_r>
 8008110:	e7e1      	b.n	80080d6 <_realloc_r+0x1e>
 8008112:	4635      	mov	r5, r6
 8008114:	e7df      	b.n	80080d6 <_realloc_r+0x1e>

08008116 <__sfputc_r>:
 8008116:	6893      	ldr	r3, [r2, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	b410      	push	{r4}
 800811e:	6093      	str	r3, [r2, #8]
 8008120:	da08      	bge.n	8008134 <__sfputc_r+0x1e>
 8008122:	6994      	ldr	r4, [r2, #24]
 8008124:	42a3      	cmp	r3, r4
 8008126:	db01      	blt.n	800812c <__sfputc_r+0x16>
 8008128:	290a      	cmp	r1, #10
 800812a:	d103      	bne.n	8008134 <__sfputc_r+0x1e>
 800812c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008130:	f000 b94a 	b.w	80083c8 <__swbuf_r>
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	1c58      	adds	r0, r3, #1
 8008138:	6010      	str	r0, [r2, #0]
 800813a:	7019      	strb	r1, [r3, #0]
 800813c:	4608      	mov	r0, r1
 800813e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008142:	4770      	bx	lr

08008144 <__sfputs_r>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4606      	mov	r6, r0
 8008148:	460f      	mov	r7, r1
 800814a:	4614      	mov	r4, r2
 800814c:	18d5      	adds	r5, r2, r3
 800814e:	42ac      	cmp	r4, r5
 8008150:	d101      	bne.n	8008156 <__sfputs_r+0x12>
 8008152:	2000      	movs	r0, #0
 8008154:	e007      	b.n	8008166 <__sfputs_r+0x22>
 8008156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815a:	463a      	mov	r2, r7
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffda 	bl	8008116 <__sfputc_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d1f3      	bne.n	800814e <__sfputs_r+0xa>
 8008166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008168 <_vfiprintf_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	460d      	mov	r5, r1
 800816e:	b09d      	sub	sp, #116	; 0x74
 8008170:	4614      	mov	r4, r2
 8008172:	4698      	mov	r8, r3
 8008174:	4606      	mov	r6, r0
 8008176:	b118      	cbz	r0, 8008180 <_vfiprintf_r+0x18>
 8008178:	6983      	ldr	r3, [r0, #24]
 800817a:	b90b      	cbnz	r3, 8008180 <_vfiprintf_r+0x18>
 800817c:	f000 fb14 	bl	80087a8 <__sinit>
 8008180:	4b89      	ldr	r3, [pc, #548]	; (80083a8 <_vfiprintf_r+0x240>)
 8008182:	429d      	cmp	r5, r3
 8008184:	d11b      	bne.n	80081be <_vfiprintf_r+0x56>
 8008186:	6875      	ldr	r5, [r6, #4]
 8008188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800818a:	07d9      	lsls	r1, r3, #31
 800818c:	d405      	bmi.n	800819a <_vfiprintf_r+0x32>
 800818e:	89ab      	ldrh	r3, [r5, #12]
 8008190:	059a      	lsls	r2, r3, #22
 8008192:	d402      	bmi.n	800819a <_vfiprintf_r+0x32>
 8008194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008196:	f000 fba5 	bl	80088e4 <__retarget_lock_acquire_recursive>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	071b      	lsls	r3, r3, #28
 800819e:	d501      	bpl.n	80081a4 <_vfiprintf_r+0x3c>
 80081a0:	692b      	ldr	r3, [r5, #16]
 80081a2:	b9eb      	cbnz	r3, 80081e0 <_vfiprintf_r+0x78>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 f96e 	bl	8008488 <__swsetup_r>
 80081ac:	b1c0      	cbz	r0, 80081e0 <_vfiprintf_r+0x78>
 80081ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b0:	07dc      	lsls	r4, r3, #31
 80081b2:	d50e      	bpl.n	80081d2 <_vfiprintf_r+0x6a>
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	b01d      	add	sp, #116	; 0x74
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	4b7b      	ldr	r3, [pc, #492]	; (80083ac <_vfiprintf_r+0x244>)
 80081c0:	429d      	cmp	r5, r3
 80081c2:	d101      	bne.n	80081c8 <_vfiprintf_r+0x60>
 80081c4:	68b5      	ldr	r5, [r6, #8]
 80081c6:	e7df      	b.n	8008188 <_vfiprintf_r+0x20>
 80081c8:	4b79      	ldr	r3, [pc, #484]	; (80083b0 <_vfiprintf_r+0x248>)
 80081ca:	429d      	cmp	r5, r3
 80081cc:	bf08      	it	eq
 80081ce:	68f5      	ldreq	r5, [r6, #12]
 80081d0:	e7da      	b.n	8008188 <_vfiprintf_r+0x20>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	0598      	lsls	r0, r3, #22
 80081d6:	d4ed      	bmi.n	80081b4 <_vfiprintf_r+0x4c>
 80081d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081da:	f000 fb84 	bl	80088e6 <__retarget_lock_release_recursive>
 80081de:	e7e9      	b.n	80081b4 <_vfiprintf_r+0x4c>
 80081e0:	2300      	movs	r3, #0
 80081e2:	9309      	str	r3, [sp, #36]	; 0x24
 80081e4:	2320      	movs	r3, #32
 80081e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ee:	2330      	movs	r3, #48	; 0x30
 80081f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083b4 <_vfiprintf_r+0x24c>
 80081f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081f8:	f04f 0901 	mov.w	r9, #1
 80081fc:	4623      	mov	r3, r4
 80081fe:	469a      	mov	sl, r3
 8008200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008204:	b10a      	cbz	r2, 800820a <_vfiprintf_r+0xa2>
 8008206:	2a25      	cmp	r2, #37	; 0x25
 8008208:	d1f9      	bne.n	80081fe <_vfiprintf_r+0x96>
 800820a:	ebba 0b04 	subs.w	fp, sl, r4
 800820e:	d00b      	beq.n	8008228 <_vfiprintf_r+0xc0>
 8008210:	465b      	mov	r3, fp
 8008212:	4622      	mov	r2, r4
 8008214:	4629      	mov	r1, r5
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ff94 	bl	8008144 <__sfputs_r>
 800821c:	3001      	adds	r0, #1
 800821e:	f000 80aa 	beq.w	8008376 <_vfiprintf_r+0x20e>
 8008222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008224:	445a      	add	r2, fp
 8008226:	9209      	str	r2, [sp, #36]	; 0x24
 8008228:	f89a 3000 	ldrb.w	r3, [sl]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80a2 	beq.w	8008376 <_vfiprintf_r+0x20e>
 8008232:	2300      	movs	r3, #0
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800823c:	f10a 0a01 	add.w	sl, sl, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008248:	931a      	str	r3, [sp, #104]	; 0x68
 800824a:	4654      	mov	r4, sl
 800824c:	2205      	movs	r2, #5
 800824e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008252:	4858      	ldr	r0, [pc, #352]	; (80083b4 <_vfiprintf_r+0x24c>)
 8008254:	f7f7 ffcc 	bl	80001f0 <memchr>
 8008258:	9a04      	ldr	r2, [sp, #16]
 800825a:	b9d8      	cbnz	r0, 8008294 <_vfiprintf_r+0x12c>
 800825c:	06d1      	lsls	r1, r2, #27
 800825e:	bf44      	itt	mi
 8008260:	2320      	movmi	r3, #32
 8008262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008266:	0713      	lsls	r3, r2, #28
 8008268:	bf44      	itt	mi
 800826a:	232b      	movmi	r3, #43	; 0x2b
 800826c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008270:	f89a 3000 	ldrb.w	r3, [sl]
 8008274:	2b2a      	cmp	r3, #42	; 0x2a
 8008276:	d015      	beq.n	80082a4 <_vfiprintf_r+0x13c>
 8008278:	9a07      	ldr	r2, [sp, #28]
 800827a:	4654      	mov	r4, sl
 800827c:	2000      	movs	r0, #0
 800827e:	f04f 0c0a 	mov.w	ip, #10
 8008282:	4621      	mov	r1, r4
 8008284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008288:	3b30      	subs	r3, #48	; 0x30
 800828a:	2b09      	cmp	r3, #9
 800828c:	d94e      	bls.n	800832c <_vfiprintf_r+0x1c4>
 800828e:	b1b0      	cbz	r0, 80082be <_vfiprintf_r+0x156>
 8008290:	9207      	str	r2, [sp, #28]
 8008292:	e014      	b.n	80082be <_vfiprintf_r+0x156>
 8008294:	eba0 0308 	sub.w	r3, r0, r8
 8008298:	fa09 f303 	lsl.w	r3, r9, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	46a2      	mov	sl, r4
 80082a2:	e7d2      	b.n	800824a <_vfiprintf_r+0xe2>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1d19      	adds	r1, r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	9103      	str	r1, [sp, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bfbb      	ittet	lt
 80082b0:	425b      	neglt	r3, r3
 80082b2:	f042 0202 	orrlt.w	r2, r2, #2
 80082b6:	9307      	strge	r3, [sp, #28]
 80082b8:	9307      	strlt	r3, [sp, #28]
 80082ba:	bfb8      	it	lt
 80082bc:	9204      	strlt	r2, [sp, #16]
 80082be:	7823      	ldrb	r3, [r4, #0]
 80082c0:	2b2e      	cmp	r3, #46	; 0x2e
 80082c2:	d10c      	bne.n	80082de <_vfiprintf_r+0x176>
 80082c4:	7863      	ldrb	r3, [r4, #1]
 80082c6:	2b2a      	cmp	r3, #42	; 0x2a
 80082c8:	d135      	bne.n	8008336 <_vfiprintf_r+0x1ce>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	1d1a      	adds	r2, r3, #4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	9203      	str	r2, [sp, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	bfb8      	it	lt
 80082d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80082da:	3402      	adds	r4, #2
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083c4 <_vfiprintf_r+0x25c>
 80082e2:	7821      	ldrb	r1, [r4, #0]
 80082e4:	2203      	movs	r2, #3
 80082e6:	4650      	mov	r0, sl
 80082e8:	f7f7 ff82 	bl	80001f0 <memchr>
 80082ec:	b140      	cbz	r0, 8008300 <_vfiprintf_r+0x198>
 80082ee:	2340      	movs	r3, #64	; 0x40
 80082f0:	eba0 000a 	sub.w	r0, r0, sl
 80082f4:	fa03 f000 	lsl.w	r0, r3, r0
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	4303      	orrs	r3, r0
 80082fc:	3401      	adds	r4, #1
 80082fe:	9304      	str	r3, [sp, #16]
 8008300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008304:	482c      	ldr	r0, [pc, #176]	; (80083b8 <_vfiprintf_r+0x250>)
 8008306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800830a:	2206      	movs	r2, #6
 800830c:	f7f7 ff70 	bl	80001f0 <memchr>
 8008310:	2800      	cmp	r0, #0
 8008312:	d03f      	beq.n	8008394 <_vfiprintf_r+0x22c>
 8008314:	4b29      	ldr	r3, [pc, #164]	; (80083bc <_vfiprintf_r+0x254>)
 8008316:	bb1b      	cbnz	r3, 8008360 <_vfiprintf_r+0x1f8>
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	3307      	adds	r3, #7
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	3308      	adds	r3, #8
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008326:	443b      	add	r3, r7
 8008328:	9309      	str	r3, [sp, #36]	; 0x24
 800832a:	e767      	b.n	80081fc <_vfiprintf_r+0x94>
 800832c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008330:	460c      	mov	r4, r1
 8008332:	2001      	movs	r0, #1
 8008334:	e7a5      	b.n	8008282 <_vfiprintf_r+0x11a>
 8008336:	2300      	movs	r3, #0
 8008338:	3401      	adds	r4, #1
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	4619      	mov	r1, r3
 800833e:	f04f 0c0a 	mov.w	ip, #10
 8008342:	4620      	mov	r0, r4
 8008344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008348:	3a30      	subs	r2, #48	; 0x30
 800834a:	2a09      	cmp	r2, #9
 800834c:	d903      	bls.n	8008356 <_vfiprintf_r+0x1ee>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0c5      	beq.n	80082de <_vfiprintf_r+0x176>
 8008352:	9105      	str	r1, [sp, #20]
 8008354:	e7c3      	b.n	80082de <_vfiprintf_r+0x176>
 8008356:	fb0c 2101 	mla	r1, ip, r1, r2
 800835a:	4604      	mov	r4, r0
 800835c:	2301      	movs	r3, #1
 800835e:	e7f0      	b.n	8008342 <_vfiprintf_r+0x1da>
 8008360:	ab03      	add	r3, sp, #12
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	462a      	mov	r2, r5
 8008366:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <_vfiprintf_r+0x258>)
 8008368:	a904      	add	r1, sp, #16
 800836a:	4630      	mov	r0, r6
 800836c:	f7fd fdd6 	bl	8005f1c <_printf_float>
 8008370:	4607      	mov	r7, r0
 8008372:	1c78      	adds	r0, r7, #1
 8008374:	d1d6      	bne.n	8008324 <_vfiprintf_r+0x1bc>
 8008376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	d405      	bmi.n	8008388 <_vfiprintf_r+0x220>
 800837c:	89ab      	ldrh	r3, [r5, #12]
 800837e:	059a      	lsls	r2, r3, #22
 8008380:	d402      	bmi.n	8008388 <_vfiprintf_r+0x220>
 8008382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008384:	f000 faaf 	bl	80088e6 <__retarget_lock_release_recursive>
 8008388:	89ab      	ldrh	r3, [r5, #12]
 800838a:	065b      	lsls	r3, r3, #25
 800838c:	f53f af12 	bmi.w	80081b4 <_vfiprintf_r+0x4c>
 8008390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008392:	e711      	b.n	80081b8 <_vfiprintf_r+0x50>
 8008394:	ab03      	add	r3, sp, #12
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	462a      	mov	r2, r5
 800839a:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <_vfiprintf_r+0x258>)
 800839c:	a904      	add	r1, sp, #16
 800839e:	4630      	mov	r0, r6
 80083a0:	f7fe f862 	bl	8006468 <_printf_i>
 80083a4:	e7e4      	b.n	8008370 <_vfiprintf_r+0x208>
 80083a6:	bf00      	nop
 80083a8:	0800ab1c 	.word	0x0800ab1c
 80083ac:	0800ab3c 	.word	0x0800ab3c
 80083b0:	0800aafc 	.word	0x0800aafc
 80083b4:	0800a9a4 	.word	0x0800a9a4
 80083b8:	0800a9ae 	.word	0x0800a9ae
 80083bc:	08005f1d 	.word	0x08005f1d
 80083c0:	08008145 	.word	0x08008145
 80083c4:	0800a9aa 	.word	0x0800a9aa

080083c8 <__swbuf_r>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	460e      	mov	r6, r1
 80083cc:	4614      	mov	r4, r2
 80083ce:	4605      	mov	r5, r0
 80083d0:	b118      	cbz	r0, 80083da <__swbuf_r+0x12>
 80083d2:	6983      	ldr	r3, [r0, #24]
 80083d4:	b90b      	cbnz	r3, 80083da <__swbuf_r+0x12>
 80083d6:	f000 f9e7 	bl	80087a8 <__sinit>
 80083da:	4b21      	ldr	r3, [pc, #132]	; (8008460 <__swbuf_r+0x98>)
 80083dc:	429c      	cmp	r4, r3
 80083de:	d12b      	bne.n	8008438 <__swbuf_r+0x70>
 80083e0:	686c      	ldr	r4, [r5, #4]
 80083e2:	69a3      	ldr	r3, [r4, #24]
 80083e4:	60a3      	str	r3, [r4, #8]
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	071a      	lsls	r2, r3, #28
 80083ea:	d52f      	bpl.n	800844c <__swbuf_r+0x84>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	b36b      	cbz	r3, 800844c <__swbuf_r+0x84>
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	1ac0      	subs	r0, r0, r3
 80083f6:	6963      	ldr	r3, [r4, #20]
 80083f8:	b2f6      	uxtb	r6, r6
 80083fa:	4283      	cmp	r3, r0
 80083fc:	4637      	mov	r7, r6
 80083fe:	dc04      	bgt.n	800840a <__swbuf_r+0x42>
 8008400:	4621      	mov	r1, r4
 8008402:	4628      	mov	r0, r5
 8008404:	f000 f93c 	bl	8008680 <_fflush_r>
 8008408:	bb30      	cbnz	r0, 8008458 <__swbuf_r+0x90>
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	3b01      	subs	r3, #1
 800840e:	60a3      	str	r3, [r4, #8]
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	6022      	str	r2, [r4, #0]
 8008416:	701e      	strb	r6, [r3, #0]
 8008418:	6963      	ldr	r3, [r4, #20]
 800841a:	3001      	adds	r0, #1
 800841c:	4283      	cmp	r3, r0
 800841e:	d004      	beq.n	800842a <__swbuf_r+0x62>
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	07db      	lsls	r3, r3, #31
 8008424:	d506      	bpl.n	8008434 <__swbuf_r+0x6c>
 8008426:	2e0a      	cmp	r6, #10
 8008428:	d104      	bne.n	8008434 <__swbuf_r+0x6c>
 800842a:	4621      	mov	r1, r4
 800842c:	4628      	mov	r0, r5
 800842e:	f000 f927 	bl	8008680 <_fflush_r>
 8008432:	b988      	cbnz	r0, 8008458 <__swbuf_r+0x90>
 8008434:	4638      	mov	r0, r7
 8008436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <__swbuf_r+0x9c>)
 800843a:	429c      	cmp	r4, r3
 800843c:	d101      	bne.n	8008442 <__swbuf_r+0x7a>
 800843e:	68ac      	ldr	r4, [r5, #8]
 8008440:	e7cf      	b.n	80083e2 <__swbuf_r+0x1a>
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <__swbuf_r+0xa0>)
 8008444:	429c      	cmp	r4, r3
 8008446:	bf08      	it	eq
 8008448:	68ec      	ldreq	r4, [r5, #12]
 800844a:	e7ca      	b.n	80083e2 <__swbuf_r+0x1a>
 800844c:	4621      	mov	r1, r4
 800844e:	4628      	mov	r0, r5
 8008450:	f000 f81a 	bl	8008488 <__swsetup_r>
 8008454:	2800      	cmp	r0, #0
 8008456:	d0cb      	beq.n	80083f0 <__swbuf_r+0x28>
 8008458:	f04f 37ff 	mov.w	r7, #4294967295
 800845c:	e7ea      	b.n	8008434 <__swbuf_r+0x6c>
 800845e:	bf00      	nop
 8008460:	0800ab1c 	.word	0x0800ab1c
 8008464:	0800ab3c 	.word	0x0800ab3c
 8008468:	0800aafc 	.word	0x0800aafc

0800846c <__ascii_wctomb>:
 800846c:	b149      	cbz	r1, 8008482 <__ascii_wctomb+0x16>
 800846e:	2aff      	cmp	r2, #255	; 0xff
 8008470:	bf85      	ittet	hi
 8008472:	238a      	movhi	r3, #138	; 0x8a
 8008474:	6003      	strhi	r3, [r0, #0]
 8008476:	700a      	strbls	r2, [r1, #0]
 8008478:	f04f 30ff 	movhi.w	r0, #4294967295
 800847c:	bf98      	it	ls
 800847e:	2001      	movls	r0, #1
 8008480:	4770      	bx	lr
 8008482:	4608      	mov	r0, r1
 8008484:	4770      	bx	lr
	...

08008488 <__swsetup_r>:
 8008488:	4b32      	ldr	r3, [pc, #200]	; (8008554 <__swsetup_r+0xcc>)
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	681d      	ldr	r5, [r3, #0]
 800848e:	4606      	mov	r6, r0
 8008490:	460c      	mov	r4, r1
 8008492:	b125      	cbz	r5, 800849e <__swsetup_r+0x16>
 8008494:	69ab      	ldr	r3, [r5, #24]
 8008496:	b913      	cbnz	r3, 800849e <__swsetup_r+0x16>
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f985 	bl	80087a8 <__sinit>
 800849e:	4b2e      	ldr	r3, [pc, #184]	; (8008558 <__swsetup_r+0xd0>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	d10f      	bne.n	80084c4 <__swsetup_r+0x3c>
 80084a4:	686c      	ldr	r4, [r5, #4]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ac:	0719      	lsls	r1, r3, #28
 80084ae:	d42c      	bmi.n	800850a <__swsetup_r+0x82>
 80084b0:	06dd      	lsls	r5, r3, #27
 80084b2:	d411      	bmi.n	80084d8 <__swsetup_r+0x50>
 80084b4:	2309      	movs	r3, #9
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	e03e      	b.n	8008542 <__swsetup_r+0xba>
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <__swsetup_r+0xd4>)
 80084c6:	429c      	cmp	r4, r3
 80084c8:	d101      	bne.n	80084ce <__swsetup_r+0x46>
 80084ca:	68ac      	ldr	r4, [r5, #8]
 80084cc:	e7eb      	b.n	80084a6 <__swsetup_r+0x1e>
 80084ce:	4b24      	ldr	r3, [pc, #144]	; (8008560 <__swsetup_r+0xd8>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	bf08      	it	eq
 80084d4:	68ec      	ldreq	r4, [r5, #12]
 80084d6:	e7e6      	b.n	80084a6 <__swsetup_r+0x1e>
 80084d8:	0758      	lsls	r0, r3, #29
 80084da:	d512      	bpl.n	8008502 <__swsetup_r+0x7a>
 80084dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084de:	b141      	cbz	r1, 80084f2 <__swsetup_r+0x6a>
 80084e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d002      	beq.n	80084ee <__swsetup_r+0x66>
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff fb31 	bl	8007b50 <_free_r>
 80084ee:	2300      	movs	r3, #0
 80084f0:	6363      	str	r3, [r4, #52]	; 0x34
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	2300      	movs	r3, #0
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f043 0308 	orr.w	r3, r3, #8
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	b94b      	cbnz	r3, 8008522 <__swsetup_r+0x9a>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008518:	d003      	beq.n	8008522 <__swsetup_r+0x9a>
 800851a:	4621      	mov	r1, r4
 800851c:	4630      	mov	r0, r6
 800851e:	f000 fa09 	bl	8008934 <__smakebuf_r>
 8008522:	89a0      	ldrh	r0, [r4, #12]
 8008524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008528:	f010 0301 	ands.w	r3, r0, #1
 800852c:	d00a      	beq.n	8008544 <__swsetup_r+0xbc>
 800852e:	2300      	movs	r3, #0
 8008530:	60a3      	str	r3, [r4, #8]
 8008532:	6963      	ldr	r3, [r4, #20]
 8008534:	425b      	negs	r3, r3
 8008536:	61a3      	str	r3, [r4, #24]
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	b943      	cbnz	r3, 800854e <__swsetup_r+0xc6>
 800853c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008540:	d1ba      	bne.n	80084b8 <__swsetup_r+0x30>
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	0781      	lsls	r1, r0, #30
 8008546:	bf58      	it	pl
 8008548:	6963      	ldrpl	r3, [r4, #20]
 800854a:	60a3      	str	r3, [r4, #8]
 800854c:	e7f4      	b.n	8008538 <__swsetup_r+0xb0>
 800854e:	2000      	movs	r0, #0
 8008550:	e7f7      	b.n	8008542 <__swsetup_r+0xba>
 8008552:	bf00      	nop
 8008554:	20000038 	.word	0x20000038
 8008558:	0800ab1c 	.word	0x0800ab1c
 800855c:	0800ab3c 	.word	0x0800ab3c
 8008560:	0800aafc 	.word	0x0800aafc

08008564 <abort>:
 8008564:	b508      	push	{r3, lr}
 8008566:	2006      	movs	r0, #6
 8008568:	f000 fa54 	bl	8008a14 <raise>
 800856c:	2001      	movs	r0, #1
 800856e:	f001 fd8b 	bl	800a088 <_exit>
	...

08008574 <__sflush_r>:
 8008574:	898a      	ldrh	r2, [r1, #12]
 8008576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	0710      	lsls	r0, r2, #28
 800857e:	460c      	mov	r4, r1
 8008580:	d458      	bmi.n	8008634 <__sflush_r+0xc0>
 8008582:	684b      	ldr	r3, [r1, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dc05      	bgt.n	8008594 <__sflush_r+0x20>
 8008588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc02      	bgt.n	8008594 <__sflush_r+0x20>
 800858e:	2000      	movs	r0, #0
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008596:	2e00      	cmp	r6, #0
 8008598:	d0f9      	beq.n	800858e <__sflush_r+0x1a>
 800859a:	2300      	movs	r3, #0
 800859c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085a0:	682f      	ldr	r7, [r5, #0]
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	d032      	beq.n	800860c <__sflush_r+0x98>
 80085a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	075a      	lsls	r2, r3, #29
 80085ac:	d505      	bpl.n	80085ba <__sflush_r+0x46>
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085b4:	b10b      	cbz	r3, 80085ba <__sflush_r+0x46>
 80085b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085b8:	1ac0      	subs	r0, r0, r3
 80085ba:	2300      	movs	r3, #0
 80085bc:	4602      	mov	r2, r0
 80085be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c0:	6a21      	ldr	r1, [r4, #32]
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b0      	blx	r6
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	d106      	bne.n	80085da <__sflush_r+0x66>
 80085cc:	6829      	ldr	r1, [r5, #0]
 80085ce:	291d      	cmp	r1, #29
 80085d0:	d82c      	bhi.n	800862c <__sflush_r+0xb8>
 80085d2:	4a2a      	ldr	r2, [pc, #168]	; (800867c <__sflush_r+0x108>)
 80085d4:	40ca      	lsrs	r2, r1
 80085d6:	07d6      	lsls	r6, r2, #31
 80085d8:	d528      	bpl.n	800862c <__sflush_r+0xb8>
 80085da:	2200      	movs	r2, #0
 80085dc:	6062      	str	r2, [r4, #4]
 80085de:	04d9      	lsls	r1, r3, #19
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	d504      	bpl.n	80085f0 <__sflush_r+0x7c>
 80085e6:	1c42      	adds	r2, r0, #1
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0x7a>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b903      	cbnz	r3, 80085f0 <__sflush_r+0x7c>
 80085ee:	6560      	str	r0, [r4, #84]	; 0x54
 80085f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d0ca      	beq.n	800858e <__sflush_r+0x1a>
 80085f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d002      	beq.n	8008606 <__sflush_r+0x92>
 8008600:	4628      	mov	r0, r5
 8008602:	f7ff faa5 	bl	8007b50 <_free_r>
 8008606:	2000      	movs	r0, #0
 8008608:	6360      	str	r0, [r4, #52]	; 0x34
 800860a:	e7c1      	b.n	8008590 <__sflush_r+0x1c>
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	2301      	movs	r3, #1
 8008610:	4628      	mov	r0, r5
 8008612:	47b0      	blx	r6
 8008614:	1c41      	adds	r1, r0, #1
 8008616:	d1c7      	bne.n	80085a8 <__sflush_r+0x34>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0c4      	beq.n	80085a8 <__sflush_r+0x34>
 800861e:	2b1d      	cmp	r3, #29
 8008620:	d001      	beq.n	8008626 <__sflush_r+0xb2>
 8008622:	2b16      	cmp	r3, #22
 8008624:	d101      	bne.n	800862a <__sflush_r+0xb6>
 8008626:	602f      	str	r7, [r5, #0]
 8008628:	e7b1      	b.n	800858e <__sflush_r+0x1a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e7ad      	b.n	8008590 <__sflush_r+0x1c>
 8008634:	690f      	ldr	r7, [r1, #16]
 8008636:	2f00      	cmp	r7, #0
 8008638:	d0a9      	beq.n	800858e <__sflush_r+0x1a>
 800863a:	0793      	lsls	r3, r2, #30
 800863c:	680e      	ldr	r6, [r1, #0]
 800863e:	bf08      	it	eq
 8008640:	694b      	ldreq	r3, [r1, #20]
 8008642:	600f      	str	r7, [r1, #0]
 8008644:	bf18      	it	ne
 8008646:	2300      	movne	r3, #0
 8008648:	eba6 0807 	sub.w	r8, r6, r7
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	dd9c      	ble.n	800858e <__sflush_r+0x1a>
 8008654:	6a21      	ldr	r1, [r4, #32]
 8008656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008658:	4643      	mov	r3, r8
 800865a:	463a      	mov	r2, r7
 800865c:	4628      	mov	r0, r5
 800865e:	47b0      	blx	r6
 8008660:	2800      	cmp	r0, #0
 8008662:	dc06      	bgt.n	8008672 <__sflush_r+0xfe>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e78e      	b.n	8008590 <__sflush_r+0x1c>
 8008672:	4407      	add	r7, r0
 8008674:	eba8 0800 	sub.w	r8, r8, r0
 8008678:	e7e9      	b.n	800864e <__sflush_r+0xda>
 800867a:	bf00      	nop
 800867c:	20400001 	.word	0x20400001

08008680 <_fflush_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b913      	cbnz	r3, 8008690 <_fflush_r+0x10>
 800868a:	2500      	movs	r5, #0
 800868c:	4628      	mov	r0, r5
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	b118      	cbz	r0, 800869a <_fflush_r+0x1a>
 8008692:	6983      	ldr	r3, [r0, #24]
 8008694:	b90b      	cbnz	r3, 800869a <_fflush_r+0x1a>
 8008696:	f000 f887 	bl	80087a8 <__sinit>
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <_fflush_r+0x6c>)
 800869c:	429c      	cmp	r4, r3
 800869e:	d11b      	bne.n	80086d8 <_fflush_r+0x58>
 80086a0:	686c      	ldr	r4, [r5, #4]
 80086a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0ef      	beq.n	800868a <_fflush_r+0xa>
 80086aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ac:	07d0      	lsls	r0, r2, #31
 80086ae:	d404      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b0:	0599      	lsls	r1, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086b6:	f000 f915 	bl	80088e4 <__retarget_lock_acquire_recursive>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7ff ff59 	bl	8008574 <__sflush_r>
 80086c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c4:	07da      	lsls	r2, r3, #31
 80086c6:	4605      	mov	r5, r0
 80086c8:	d4e0      	bmi.n	800868c <_fflush_r+0xc>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	d4dd      	bmi.n	800868c <_fflush_r+0xc>
 80086d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d2:	f000 f908 	bl	80088e6 <__retarget_lock_release_recursive>
 80086d6:	e7d9      	b.n	800868c <_fflush_r+0xc>
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_fflush_r+0x70>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <_fflush_r+0x62>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7df      	b.n	80086a2 <_fflush_r+0x22>
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <_fflush_r+0x74>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7da      	b.n	80086a2 <_fflush_r+0x22>
 80086ec:	0800ab1c 	.word	0x0800ab1c
 80086f0:	0800ab3c 	.word	0x0800ab3c
 80086f4:	0800aafc 	.word	0x0800aafc

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	6643      	str	r3, [r0, #100]	; 0x64
 800870c:	81c2      	strh	r2, [r0, #14]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	; 0x5c
 8008716:	f7fd fb59 	bl	8005dcc <memset>
 800871a:	4b05      	ldr	r3, [pc, #20]	; (8008730 <std+0x38>)
 800871c:	6263      	str	r3, [r4, #36]	; 0x24
 800871e:	4b05      	ldr	r3, [pc, #20]	; (8008734 <std+0x3c>)
 8008720:	62a3      	str	r3, [r4, #40]	; 0x28
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <std+0x40>)
 8008724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <std+0x44>)
 8008728:	6224      	str	r4, [r4, #32]
 800872a:	6323      	str	r3, [r4, #48]	; 0x30
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	08008a4d 	.word	0x08008a4d
 8008734:	08008a6f 	.word	0x08008a6f
 8008738:	08008aa7 	.word	0x08008aa7
 800873c:	08008acb 	.word	0x08008acb

08008740 <_cleanup_r>:
 8008740:	4901      	ldr	r1, [pc, #4]	; (8008748 <_cleanup_r+0x8>)
 8008742:	f000 b8af 	b.w	80088a4 <_fwalk_reent>
 8008746:	bf00      	nop
 8008748:	08008681 	.word	0x08008681

0800874c <__sfmoreglue>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	2268      	movs	r2, #104	; 0x68
 8008750:	1e4d      	subs	r5, r1, #1
 8008752:	4355      	muls	r5, r2
 8008754:	460e      	mov	r6, r1
 8008756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800875a:	f7ff fa65 	bl	8007c28 <_malloc_r>
 800875e:	4604      	mov	r4, r0
 8008760:	b140      	cbz	r0, 8008774 <__sfmoreglue+0x28>
 8008762:	2100      	movs	r1, #0
 8008764:	e9c0 1600 	strd	r1, r6, [r0]
 8008768:	300c      	adds	r0, #12
 800876a:	60a0      	str	r0, [r4, #8]
 800876c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008770:	f7fd fb2c 	bl	8005dcc <memset>
 8008774:	4620      	mov	r0, r4
 8008776:	bd70      	pop	{r4, r5, r6, pc}

08008778 <__sfp_lock_acquire>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__sfp_lock_acquire+0x8>)
 800877a:	f000 b8b3 	b.w	80088e4 <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	200002c9 	.word	0x200002c9

08008784 <__sfp_lock_release>:
 8008784:	4801      	ldr	r0, [pc, #4]	; (800878c <__sfp_lock_release+0x8>)
 8008786:	f000 b8ae 	b.w	80088e6 <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	200002c9 	.word	0x200002c9

08008790 <__sinit_lock_acquire>:
 8008790:	4801      	ldr	r0, [pc, #4]	; (8008798 <__sinit_lock_acquire+0x8>)
 8008792:	f000 b8a7 	b.w	80088e4 <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	200002ca 	.word	0x200002ca

0800879c <__sinit_lock_release>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__sinit_lock_release+0x8>)
 800879e:	f000 b8a2 	b.w	80088e6 <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	200002ca 	.word	0x200002ca

080087a8 <__sinit>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	f7ff fff0 	bl	8008790 <__sinit_lock_acquire>
 80087b0:	69a3      	ldr	r3, [r4, #24]
 80087b2:	b11b      	cbz	r3, 80087bc <__sinit+0x14>
 80087b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b8:	f7ff bff0 	b.w	800879c <__sinit_lock_release>
 80087bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087c0:	6523      	str	r3, [r4, #80]	; 0x50
 80087c2:	4b13      	ldr	r3, [pc, #76]	; (8008810 <__sinit+0x68>)
 80087c4:	4a13      	ldr	r2, [pc, #76]	; (8008814 <__sinit+0x6c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	bf04      	itt	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	61a3      	streq	r3, [r4, #24]
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f820 	bl	8008818 <__sfp>
 80087d8:	6060      	str	r0, [r4, #4]
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 f81c 	bl	8008818 <__sfp>
 80087e0:	60a0      	str	r0, [r4, #8]
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 f818 	bl	8008818 <__sfp>
 80087e8:	2200      	movs	r2, #0
 80087ea:	60e0      	str	r0, [r4, #12]
 80087ec:	2104      	movs	r1, #4
 80087ee:	6860      	ldr	r0, [r4, #4]
 80087f0:	f7ff ff82 	bl	80086f8 <std>
 80087f4:	68a0      	ldr	r0, [r4, #8]
 80087f6:	2201      	movs	r2, #1
 80087f8:	2109      	movs	r1, #9
 80087fa:	f7ff ff7d 	bl	80086f8 <std>
 80087fe:	68e0      	ldr	r0, [r4, #12]
 8008800:	2202      	movs	r2, #2
 8008802:	2112      	movs	r1, #18
 8008804:	f7ff ff78 	bl	80086f8 <std>
 8008808:	2301      	movs	r3, #1
 800880a:	61a3      	str	r3, [r4, #24]
 800880c:	e7d2      	b.n	80087b4 <__sinit+0xc>
 800880e:	bf00      	nop
 8008810:	0800a780 	.word	0x0800a780
 8008814:	08008741 	.word	0x08008741

08008818 <__sfp>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	4607      	mov	r7, r0
 800881c:	f7ff ffac 	bl	8008778 <__sfp_lock_acquire>
 8008820:	4b1e      	ldr	r3, [pc, #120]	; (800889c <__sfp+0x84>)
 8008822:	681e      	ldr	r6, [r3, #0]
 8008824:	69b3      	ldr	r3, [r6, #24]
 8008826:	b913      	cbnz	r3, 800882e <__sfp+0x16>
 8008828:	4630      	mov	r0, r6
 800882a:	f7ff ffbd 	bl	80087a8 <__sinit>
 800882e:	3648      	adds	r6, #72	; 0x48
 8008830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008834:	3b01      	subs	r3, #1
 8008836:	d503      	bpl.n	8008840 <__sfp+0x28>
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	b30b      	cbz	r3, 8008880 <__sfp+0x68>
 800883c:	6836      	ldr	r6, [r6, #0]
 800883e:	e7f7      	b.n	8008830 <__sfp+0x18>
 8008840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008844:	b9d5      	cbnz	r5, 800887c <__sfp+0x64>
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <__sfp+0x88>)
 8008848:	60e3      	str	r3, [r4, #12]
 800884a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800884e:	6665      	str	r5, [r4, #100]	; 0x64
 8008850:	f000 f847 	bl	80088e2 <__retarget_lock_init_recursive>
 8008854:	f7ff ff96 	bl	8008784 <__sfp_lock_release>
 8008858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800885c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008860:	6025      	str	r5, [r4, #0]
 8008862:	61a5      	str	r5, [r4, #24]
 8008864:	2208      	movs	r2, #8
 8008866:	4629      	mov	r1, r5
 8008868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800886c:	f7fd faae 	bl	8005dcc <memset>
 8008870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008878:	4620      	mov	r0, r4
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887c:	3468      	adds	r4, #104	; 0x68
 800887e:	e7d9      	b.n	8008834 <__sfp+0x1c>
 8008880:	2104      	movs	r1, #4
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ff62 	bl	800874c <__sfmoreglue>
 8008888:	4604      	mov	r4, r0
 800888a:	6030      	str	r0, [r6, #0]
 800888c:	2800      	cmp	r0, #0
 800888e:	d1d5      	bne.n	800883c <__sfp+0x24>
 8008890:	f7ff ff78 	bl	8008784 <__sfp_lock_release>
 8008894:	230c      	movs	r3, #12
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	e7ee      	b.n	8008878 <__sfp+0x60>
 800889a:	bf00      	nop
 800889c:	0800a780 	.word	0x0800a780
 80088a0:	ffff0001 	.word	0xffff0001

080088a4 <_fwalk_reent>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4606      	mov	r6, r0
 80088aa:	4688      	mov	r8, r1
 80088ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088b0:	2700      	movs	r7, #0
 80088b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b6:	f1b9 0901 	subs.w	r9, r9, #1
 80088ba:	d505      	bpl.n	80088c8 <_fwalk_reent+0x24>
 80088bc:	6824      	ldr	r4, [r4, #0]
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d1f7      	bne.n	80088b2 <_fwalk_reent+0xe>
 80088c2:	4638      	mov	r0, r7
 80088c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c8:	89ab      	ldrh	r3, [r5, #12]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d907      	bls.n	80088de <_fwalk_reent+0x3a>
 80088ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d2:	3301      	adds	r3, #1
 80088d4:	d003      	beq.n	80088de <_fwalk_reent+0x3a>
 80088d6:	4629      	mov	r1, r5
 80088d8:	4630      	mov	r0, r6
 80088da:	47c0      	blx	r8
 80088dc:	4307      	orrs	r7, r0
 80088de:	3568      	adds	r5, #104	; 0x68
 80088e0:	e7e9      	b.n	80088b6 <_fwalk_reent+0x12>

080088e2 <__retarget_lock_init_recursive>:
 80088e2:	4770      	bx	lr

080088e4 <__retarget_lock_acquire_recursive>:
 80088e4:	4770      	bx	lr

080088e6 <__retarget_lock_release_recursive>:
 80088e6:	4770      	bx	lr

080088e8 <__swhatbuf_r>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	460e      	mov	r6, r1
 80088ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f0:	2900      	cmp	r1, #0
 80088f2:	b096      	sub	sp, #88	; 0x58
 80088f4:	4614      	mov	r4, r2
 80088f6:	461d      	mov	r5, r3
 80088f8:	da08      	bge.n	800890c <__swhatbuf_r+0x24>
 80088fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	061a      	lsls	r2, r3, #24
 8008904:	d410      	bmi.n	8008928 <__swhatbuf_r+0x40>
 8008906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890a:	e00e      	b.n	800892a <__swhatbuf_r+0x42>
 800890c:	466a      	mov	r2, sp
 800890e:	f000 f903 	bl	8008b18 <_fstat_r>
 8008912:	2800      	cmp	r0, #0
 8008914:	dbf1      	blt.n	80088fa <__swhatbuf_r+0x12>
 8008916:	9a01      	ldr	r2, [sp, #4]
 8008918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800891c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008920:	425a      	negs	r2, r3
 8008922:	415a      	adcs	r2, r3
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	e7ee      	b.n	8008906 <__swhatbuf_r+0x1e>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	2000      	movs	r0, #0
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	b016      	add	sp, #88	; 0x58
 8008930:	bd70      	pop	{r4, r5, r6, pc}
	...

08008934 <__smakebuf_r>:
 8008934:	898b      	ldrh	r3, [r1, #12]
 8008936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008938:	079d      	lsls	r5, r3, #30
 800893a:	4606      	mov	r6, r0
 800893c:	460c      	mov	r4, r1
 800893e:	d507      	bpl.n	8008950 <__smakebuf_r+0x1c>
 8008940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	2301      	movs	r3, #1
 800894a:	6163      	str	r3, [r4, #20]
 800894c:	b002      	add	sp, #8
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	ab01      	add	r3, sp, #4
 8008952:	466a      	mov	r2, sp
 8008954:	f7ff ffc8 	bl	80088e8 <__swhatbuf_r>
 8008958:	9900      	ldr	r1, [sp, #0]
 800895a:	4605      	mov	r5, r0
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff f963 	bl	8007c28 <_malloc_r>
 8008962:	b948      	cbnz	r0, 8008978 <__smakebuf_r+0x44>
 8008964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008968:	059a      	lsls	r2, r3, #22
 800896a:	d4ef      	bmi.n	800894c <__smakebuf_r+0x18>
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	f043 0302 	orr.w	r3, r3, #2
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	e7e3      	b.n	8008940 <__smakebuf_r+0xc>
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <__smakebuf_r+0x7c>)
 800897a:	62b3      	str	r3, [r6, #40]	; 0x28
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	9b00      	ldr	r3, [sp, #0]
 8008988:	6163      	str	r3, [r4, #20]
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	6120      	str	r0, [r4, #16]
 800898e:	b15b      	cbz	r3, 80089a8 <__smakebuf_r+0x74>
 8008990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f8d1 	bl	8008b3c <_isatty_r>
 800899a:	b128      	cbz	r0, 80089a8 <__smakebuf_r+0x74>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	89a0      	ldrh	r0, [r4, #12]
 80089aa:	4305      	orrs	r5, r0
 80089ac:	81a5      	strh	r5, [r4, #12]
 80089ae:	e7cd      	b.n	800894c <__smakebuf_r+0x18>
 80089b0:	08008741 	.word	0x08008741

080089b4 <_malloc_usable_size_r>:
 80089b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b8:	1f18      	subs	r0, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bfbc      	itt	lt
 80089be:	580b      	ldrlt	r3, [r1, r0]
 80089c0:	18c0      	addlt	r0, r0, r3
 80089c2:	4770      	bx	lr

080089c4 <_raise_r>:
 80089c4:	291f      	cmp	r1, #31
 80089c6:	b538      	push	{r3, r4, r5, lr}
 80089c8:	4604      	mov	r4, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	d904      	bls.n	80089d8 <_raise_r+0x14>
 80089ce:	2316      	movs	r3, #22
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089da:	b112      	cbz	r2, 80089e2 <_raise_r+0x1e>
 80089dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089e0:	b94b      	cbnz	r3, 80089f6 <_raise_r+0x32>
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 f830 	bl	8008a48 <_getpid_r>
 80089e8:	462a      	mov	r2, r5
 80089ea:	4601      	mov	r1, r0
 80089ec:	4620      	mov	r0, r4
 80089ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f2:	f000 b817 	b.w	8008a24 <_kill_r>
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d00a      	beq.n	8008a10 <_raise_r+0x4c>
 80089fa:	1c59      	adds	r1, r3, #1
 80089fc:	d103      	bne.n	8008a06 <_raise_r+0x42>
 80089fe:	2316      	movs	r3, #22
 8008a00:	6003      	str	r3, [r0, #0]
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7e7      	b.n	80089d6 <_raise_r+0x12>
 8008a06:	2400      	movs	r4, #0
 8008a08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	4798      	blx	r3
 8008a10:	2000      	movs	r0, #0
 8008a12:	e7e0      	b.n	80089d6 <_raise_r+0x12>

08008a14 <raise>:
 8008a14:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <raise+0xc>)
 8008a16:	4601      	mov	r1, r0
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	f7ff bfd3 	b.w	80089c4 <_raise_r>
 8008a1e:	bf00      	nop
 8008a20:	20000038 	.word	0x20000038

08008a24 <_kill_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d07      	ldr	r5, [pc, #28]	; (8008a44 <_kill_r+0x20>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	f001 fafb 	bl	800a02c <_kill>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d102      	bne.n	8008a40 <_kill_r+0x1c>
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	b103      	cbz	r3, 8008a40 <_kill_r+0x1c>
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	bd38      	pop	{r3, r4, r5, pc}
 8008a42:	bf00      	nop
 8008a44:	200002c4 	.word	0x200002c4

08008a48 <_getpid_r>:
 8008a48:	f001 bae0 	b.w	800a00c <_getpid>

08008a4c <__sread>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	460c      	mov	r4, r1
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	f000 f894 	bl	8008b80 <_read_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	bfab      	itete	ge
 8008a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a60:	181b      	addge	r3, r3, r0
 8008a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a66:	bfac      	ite	ge
 8008a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a6a:	81a3      	strhlt	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__swrite>:
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	461f      	mov	r7, r3
 8008a74:	898b      	ldrh	r3, [r1, #12]
 8008a76:	05db      	lsls	r3, r3, #23
 8008a78:	4605      	mov	r5, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	d505      	bpl.n	8008a8c <__swrite+0x1e>
 8008a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a84:	2302      	movs	r3, #2
 8008a86:	2200      	movs	r2, #0
 8008a88:	f000 f868 	bl	8008b5c <_lseek_r>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	f000 b817 	b.w	8008ad4 <_write_r>

08008aa6 <__sseek>:
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	f000 f855 	bl	8008b5c <_lseek_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	bf15      	itete	ne
 8008ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strheq	r3, [r4, #12]
 8008ac4:	bf18      	it	ne
 8008ac6:	81a3      	strhne	r3, [r4, #12]
 8008ac8:	bd10      	pop	{r4, pc}

08008aca <__sclose>:
 8008aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ace:	f000 b813 	b.w	8008af8 <_close_r>
	...

08008ad4 <_write_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d07      	ldr	r5, [pc, #28]	; (8008af4 <_write_r+0x20>)
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4608      	mov	r0, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f001 fac8 	bl	800a078 <_write>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_write_r+0x1e>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_write_r+0x1e>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	200002c4 	.word	0x200002c4

08008af8 <_close_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	; (8008b14 <_close_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f001 fa72 	bl	8009fec <_close>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_close_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_close_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	200002c4 	.word	0x200002c4

08008b18 <_fstat_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	; (8008b38 <_fstat_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f001 fa69 	bl	8009ffc <_fstat>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_fstat_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_fstat_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	200002c4 	.word	0x200002c4

08008b3c <_isatty_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	; (8008b58 <_isatty_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f001 fa68 	bl	800a01c <_isatty>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_isatty_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_isatty_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200002c4 	.word	0x200002c4

08008b5c <_lseek_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_lseek_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f001 fa66 	bl	800a03c <_lseek>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_lseek_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_lseek_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	200002c4 	.word	0x200002c4

08008b80 <_read_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_read_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f001 fa5c 	bl	800a04c <_read>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_read_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_read_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200002c4 	.word	0x200002c4
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <atan>:
 8008ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	4bbc      	ldr	r3, [pc, #752]	; (8008ea0 <atan+0x2f8>)
 8008bae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bb2:	429e      	cmp	r6, r3
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	468b      	mov	fp, r1
 8008bba:	dd18      	ble.n	8008bee <atan+0x46>
 8008bbc:	4bb9      	ldr	r3, [pc, #740]	; (8008ea4 <atan+0x2fc>)
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	dc01      	bgt.n	8008bc6 <atan+0x1e>
 8008bc2:	d109      	bne.n	8008bd8 <atan+0x30>
 8008bc4:	b140      	cbz	r0, 8008bd8 <atan+0x30>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fb65 	bl	800029c <__adddf3>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	e006      	b.n	8008be6 <atan+0x3e>
 8008bd8:	f1bb 0f00 	cmp.w	fp, #0
 8008bdc:	f300 8123 	bgt.w	8008e26 <atan+0x27e>
 8008be0:	a593      	add	r5, pc, #588	; (adr r5, 8008e30 <atan+0x288>)
 8008be2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	4bae      	ldr	r3, [pc, #696]	; (8008ea8 <atan+0x300>)
 8008bf0:	429e      	cmp	r6, r3
 8008bf2:	dc11      	bgt.n	8008c18 <atan+0x70>
 8008bf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	dc0a      	bgt.n	8008c12 <atan+0x6a>
 8008bfc:	a38e      	add	r3, pc, #568	; (adr r3, 8008e38 <atan+0x290>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb4b 	bl	800029c <__adddf3>
 8008c06:	4ba9      	ldr	r3, [pc, #676]	; (8008eac <atan+0x304>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f7f7 ff8d 	bl	8000b28 <__aeabi_dcmpgt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d1e9      	bne.n	8008be6 <atan+0x3e>
 8008c12:	f04f 3aff 	mov.w	sl, #4294967295
 8008c16:	e027      	b.n	8008c68 <atan+0xc0>
 8008c18:	f000 f99c 	bl	8008f54 <fabs>
 8008c1c:	4ba4      	ldr	r3, [pc, #656]	; (8008eb0 <atan+0x308>)
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	f300 80b8 	bgt.w	8008d98 <atan+0x1f0>
 8008c28:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c2c:	429e      	cmp	r6, r3
 8008c2e:	f300 809c 	bgt.w	8008d6a <atan+0x1c2>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	f7f7 fb31 	bl	800029c <__adddf3>
 8008c3a:	4b9c      	ldr	r3, [pc, #624]	; (8008eac <atan+0x304>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f7f7 fb2b 	bl	8000298 <__aeabi_dsub>
 8008c42:	2200      	movs	r2, #0
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 fb24 	bl	800029c <__adddf3>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fdfe 	bl	800085c <__aeabi_ddiv>
 8008c60:	f04f 0a00 	mov.w	sl, #0
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	4622      	mov	r2, r4
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4689      	mov	r9, r1
 8008c7c:	f7f7 fcc4 	bl	8000608 <__aeabi_dmul>
 8008c80:	a36f      	add	r3, pc, #444	; (adr r3, 8008e40 <atan+0x298>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	f7f7 fcbd 	bl	8000608 <__aeabi_dmul>
 8008c8e:	a36e      	add	r3, pc, #440	; (adr r3, 8008e48 <atan+0x2a0>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fb02 	bl	800029c <__adddf3>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	f7f7 fcb4 	bl	8000608 <__aeabi_dmul>
 8008ca0:	a36b      	add	r3, pc, #428	; (adr r3, 8008e50 <atan+0x2a8>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 faf9 	bl	800029c <__adddf3>
 8008caa:	4632      	mov	r2, r6
 8008cac:	463b      	mov	r3, r7
 8008cae:	f7f7 fcab 	bl	8000608 <__aeabi_dmul>
 8008cb2:	a369      	add	r3, pc, #420	; (adr r3, 8008e58 <atan+0x2b0>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 faf0 	bl	800029c <__adddf3>
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	f7f7 fca2 	bl	8000608 <__aeabi_dmul>
 8008cc4:	a366      	add	r3, pc, #408	; (adr r3, 8008e60 <atan+0x2b8>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fae7 	bl	800029c <__adddf3>
 8008cce:	4632      	mov	r2, r6
 8008cd0:	463b      	mov	r3, r7
 8008cd2:	f7f7 fc99 	bl	8000608 <__aeabi_dmul>
 8008cd6:	a364      	add	r3, pc, #400	; (adr r3, 8008e68 <atan+0x2c0>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fade 	bl	800029c <__adddf3>
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	a361      	add	r3, pc, #388	; (adr r3, 8008e70 <atan+0x2c8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4689      	mov	r9, r1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 fc87 	bl	8000608 <__aeabi_dmul>
 8008cfa:	a35f      	add	r3, pc, #380	; (adr r3, 8008e78 <atan+0x2d0>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 faca 	bl	8000298 <__aeabi_dsub>
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	f7f7 fc7e 	bl	8000608 <__aeabi_dmul>
 8008d0c:	a35c      	add	r3, pc, #368	; (adr r3, 8008e80 <atan+0x2d8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fac1 	bl	8000298 <__aeabi_dsub>
 8008d16:	4632      	mov	r2, r6
 8008d18:	463b      	mov	r3, r7
 8008d1a:	f7f7 fc75 	bl	8000608 <__aeabi_dmul>
 8008d1e:	a35a      	add	r3, pc, #360	; (adr r3, 8008e88 <atan+0x2e0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 fab8 	bl	8000298 <__aeabi_dsub>
 8008d28:	4632      	mov	r2, r6
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	f7f7 fc6c 	bl	8000608 <__aeabi_dmul>
 8008d30:	a357      	add	r3, pc, #348	; (adr r3, 8008e90 <atan+0x2e8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 faa7 	bl	800029c <__adddf3>
 8008d4e:	4622      	mov	r2, r4
 8008d50:	462b      	mov	r3, r5
 8008d52:	f7f7 fc59 	bl	8000608 <__aeabi_dmul>
 8008d56:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	d144      	bne.n	8008dea <atan+0x242>
 8008d60:	4620      	mov	r0, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	f7f7 fa98 	bl	8000298 <__aeabi_dsub>
 8008d68:	e733      	b.n	8008bd2 <atan+0x2a>
 8008d6a:	4b50      	ldr	r3, [pc, #320]	; (8008eac <atan+0x304>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	4b4e      	ldr	r3, [pc, #312]	; (8008eac <atan+0x304>)
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fa8d 	bl	800029c <__adddf3>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4630      	mov	r0, r6
 8008d88:	4639      	mov	r1, r7
 8008d8a:	f7f7 fd67 	bl	800085c <__aeabi_ddiv>
 8008d8e:	f04f 0a01 	mov.w	sl, #1
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	e767      	b.n	8008c68 <atan+0xc0>
 8008d98:	4b46      	ldr	r3, [pc, #280]	; (8008eb4 <atan+0x30c>)
 8008d9a:	429e      	cmp	r6, r3
 8008d9c:	da1a      	bge.n	8008dd4 <atan+0x22c>
 8008d9e:	4b46      	ldr	r3, [pc, #280]	; (8008eb8 <atan+0x310>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	f7f7 fa79 	bl	8000298 <__aeabi_dsub>
 8008da6:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <atan+0x310>)
 8008da8:	4606      	mov	r6, r0
 8008daa:	460f      	mov	r7, r1
 8008dac:	2200      	movs	r2, #0
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	4b3d      	ldr	r3, [pc, #244]	; (8008eac <atan+0x304>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	f7f7 fa6f 	bl	800029c <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fd49 	bl	800085c <__aeabi_ddiv>
 8008dca:	f04f 0a02 	mov.w	sl, #2
 8008dce:	4604      	mov	r4, r0
 8008dd0:	460d      	mov	r5, r1
 8008dd2:	e749      	b.n	8008c68 <atan+0xc0>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4938      	ldr	r1, [pc, #224]	; (8008ebc <atan+0x314>)
 8008ddc:	f7f7 fd3e 	bl	800085c <__aeabi_ddiv>
 8008de0:	f04f 0a03 	mov.w	sl, #3
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	e73e      	b.n	8008c68 <atan+0xc0>
 8008dea:	4b35      	ldr	r3, [pc, #212]	; (8008ec0 <atan+0x318>)
 8008dec:	4e35      	ldr	r6, [pc, #212]	; (8008ec4 <atan+0x31c>)
 8008dee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008df2:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008df6:	e9da 2300 	ldrd	r2, r3, [sl]
 8008dfa:	f7f7 fa4d 	bl	8000298 <__aeabi_dsub>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	f7f7 fa49 	bl	8000298 <__aeabi_dsub>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e0e:	f7f7 fa43 	bl	8000298 <__aeabi_dsub>
 8008e12:	f1bb 0f00 	cmp.w	fp, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	f6bf aee4 	bge.w	8008be6 <atan+0x3e>
 8008e1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e22:	461d      	mov	r5, r3
 8008e24:	e6df      	b.n	8008be6 <atan+0x3e>
 8008e26:	a51c      	add	r5, pc, #112	; (adr r5, 8008e98 <atan+0x2f0>)
 8008e28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e2c:	e6db      	b.n	8008be6 <atan+0x3e>
 8008e2e:	bf00      	nop
 8008e30:	54442d18 	.word	0x54442d18
 8008e34:	bff921fb 	.word	0xbff921fb
 8008e38:	8800759c 	.word	0x8800759c
 8008e3c:	7e37e43c 	.word	0x7e37e43c
 8008e40:	e322da11 	.word	0xe322da11
 8008e44:	3f90ad3a 	.word	0x3f90ad3a
 8008e48:	24760deb 	.word	0x24760deb
 8008e4c:	3fa97b4b 	.word	0x3fa97b4b
 8008e50:	a0d03d51 	.word	0xa0d03d51
 8008e54:	3fb10d66 	.word	0x3fb10d66
 8008e58:	c54c206e 	.word	0xc54c206e
 8008e5c:	3fb745cd 	.word	0x3fb745cd
 8008e60:	920083ff 	.word	0x920083ff
 8008e64:	3fc24924 	.word	0x3fc24924
 8008e68:	5555550d 	.word	0x5555550d
 8008e6c:	3fd55555 	.word	0x3fd55555
 8008e70:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e74:	bfa2b444 	.word	0xbfa2b444
 8008e78:	52defd9a 	.word	0x52defd9a
 8008e7c:	3fadde2d 	.word	0x3fadde2d
 8008e80:	af749a6d 	.word	0xaf749a6d
 8008e84:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e88:	fe231671 	.word	0xfe231671
 8008e8c:	3fbc71c6 	.word	0x3fbc71c6
 8008e90:	9998ebc4 	.word	0x9998ebc4
 8008e94:	3fc99999 	.word	0x3fc99999
 8008e98:	54442d18 	.word	0x54442d18
 8008e9c:	3ff921fb 	.word	0x3ff921fb
 8008ea0:	440fffff 	.word	0x440fffff
 8008ea4:	7ff00000 	.word	0x7ff00000
 8008ea8:	3fdbffff 	.word	0x3fdbffff
 8008eac:	3ff00000 	.word	0x3ff00000
 8008eb0:	3ff2ffff 	.word	0x3ff2ffff
 8008eb4:	40038000 	.word	0x40038000
 8008eb8:	3ff80000 	.word	0x3ff80000
 8008ebc:	bff00000 	.word	0xbff00000
 8008ec0:	0800ab80 	.word	0x0800ab80
 8008ec4:	0800ab60 	.word	0x0800ab60

08008ec8 <cos>:
 8008ec8:	b530      	push	{r4, r5, lr}
 8008eca:	4d20      	ldr	r5, [pc, #128]	; (8008f4c <cos+0x84>)
 8008ecc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008ed0:	42ac      	cmp	r4, r5
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	dc06      	bgt.n	8008ee8 <cos+0x20>
 8008eda:	2200      	movs	r2, #0
 8008edc:	2300      	movs	r3, #0
 8008ede:	b007      	add	sp, #28
 8008ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ee4:	f000 bac4 	b.w	8009470 <__kernel_cos>
 8008ee8:	4d19      	ldr	r5, [pc, #100]	; (8008f50 <cos+0x88>)
 8008eea:	42ac      	cmp	r4, r5
 8008eec:	dd03      	ble.n	8008ef6 <cos+0x2e>
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	b007      	add	sp, #28
 8008ef4:	bd30      	pop	{r4, r5, pc}
 8008ef6:	aa02      	add	r2, sp, #8
 8008ef8:	f000 f8ba 	bl	8009070 <__ieee754_rem_pio2>
 8008efc:	f000 0003 	and.w	r0, r0, #3
 8008f00:	2801      	cmp	r0, #1
 8008f02:	d009      	beq.n	8008f18 <cos+0x50>
 8008f04:	2802      	cmp	r0, #2
 8008f06:	d011      	beq.n	8008f2c <cos+0x64>
 8008f08:	b9b8      	cbnz	r0, 8008f3a <cos+0x72>
 8008f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f12:	f000 faad 	bl	8009470 <__kernel_cos>
 8008f16:	e7ec      	b.n	8008ef2 <cos+0x2a>
 8008f18:	9000      	str	r0, [sp, #0]
 8008f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f22:	f000 fea9 	bl	8009c78 <__kernel_sin>
 8008f26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008f2a:	e7e2      	b.n	8008ef2 <cos+0x2a>
 8008f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f34:	f000 fa9c 	bl	8009470 <__kernel_cos>
 8008f38:	e7f5      	b.n	8008f26 <cos+0x5e>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f46:	f000 fe97 	bl	8009c78 <__kernel_sin>
 8008f4a:	e7d2      	b.n	8008ef2 <cos+0x2a>
 8008f4c:	3fe921fb 	.word	0x3fe921fb
 8008f50:	7fefffff 	.word	0x7fefffff

08008f54 <fabs>:
 8008f54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008f58:	4770      	bx	lr

08008f5a <lround>:
 8008f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5c:	1e0b      	subs	r3, r1, #0
 8008f5e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f62:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008f66:	bfb4      	ite	lt
 8008f68:	f04f 36ff 	movlt.w	r6, #4294967295
 8008f6c:	2601      	movge	r6, #1
 8008f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f72:	2f13      	cmp	r7, #19
 8008f74:	4604      	mov	r4, r0
 8008f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f7a:	dc10      	bgt.n	8008f9e <lround+0x44>
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	da04      	bge.n	8008f8a <lround+0x30>
 8008f80:	3701      	adds	r7, #1
 8008f82:	bf18      	it	ne
 8008f84:	2600      	movne	r6, #0
 8008f86:	4630      	mov	r0, r6
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f8e:	413a      	asrs	r2, r7
 8008f90:	441a      	add	r2, r3
 8008f92:	f1c7 0314 	rsb	r3, r7, #20
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	435e      	muls	r6, r3
 8008f9c:	e7f3      	b.n	8008f86 <lround+0x2c>
 8008f9e:	2f1e      	cmp	r7, #30
 8008fa0:	d819      	bhi.n	8008fd6 <lround+0x7c>
 8008fa2:	2f33      	cmp	r7, #51	; 0x33
 8008fa4:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8008fa8:	dd05      	ble.n	8008fb6 <lround+0x5c>
 8008faa:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 8008fae:	4094      	lsls	r4, r2
 8008fb0:	408b      	lsls	r3, r1
 8008fb2:	4323      	orrs	r3, r4
 8008fb4:	e7f1      	b.n	8008f9a <lround+0x40>
 8008fb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fba:	40ca      	lsrs	r2, r1
 8008fbc:	1812      	adds	r2, r2, r0
 8008fbe:	bf28      	it	cs
 8008fc0:	3301      	addcs	r3, #1
 8008fc2:	f1c7 0434 	rsb	r4, r7, #52	; 0x34
 8008fc6:	2f14      	cmp	r7, #20
 8008fc8:	fa03 f301 	lsl.w	r3, r3, r1
 8008fcc:	bf14      	ite	ne
 8008fce:	40e2      	lsrne	r2, r4
 8008fd0:	2200      	moveq	r2, #0
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	e7e1      	b.n	8008f9a <lround+0x40>
 8008fd6:	f7f7 fdc7 	bl	8000b68 <__aeabi_d2iz>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	e7d3      	b.n	8008f86 <lround+0x2c>
	...

08008fe0 <sin>:
 8008fe0:	b530      	push	{r4, r5, lr}
 8008fe2:	4d20      	ldr	r5, [pc, #128]	; (8009064 <sin+0x84>)
 8008fe4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008fe8:	42ac      	cmp	r4, r5
 8008fea:	b087      	sub	sp, #28
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	dc06      	bgt.n	8009000 <sin+0x20>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f000 fe3d 	bl	8009c78 <__kernel_sin>
 8008ffe:	e004      	b.n	800900a <sin+0x2a>
 8009000:	4d19      	ldr	r5, [pc, #100]	; (8009068 <sin+0x88>)
 8009002:	42ac      	cmp	r4, r5
 8009004:	dd03      	ble.n	800900e <sin+0x2e>
 8009006:	f7f7 f947 	bl	8000298 <__aeabi_dsub>
 800900a:	b007      	add	sp, #28
 800900c:	bd30      	pop	{r4, r5, pc}
 800900e:	aa02      	add	r2, sp, #8
 8009010:	f000 f82e 	bl	8009070 <__ieee754_rem_pio2>
 8009014:	f000 0003 	and.w	r0, r0, #3
 8009018:	2801      	cmp	r0, #1
 800901a:	d009      	beq.n	8009030 <sin+0x50>
 800901c:	2802      	cmp	r0, #2
 800901e:	d00e      	beq.n	800903e <sin+0x5e>
 8009020:	b9c0      	cbnz	r0, 8009054 <sin+0x74>
 8009022:	2301      	movs	r3, #1
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800902a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800902e:	e7e4      	b.n	8008ffa <sin+0x1a>
 8009030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009038:	f000 fa1a 	bl	8009470 <__kernel_cos>
 800903c:	e7e5      	b.n	800900a <sin+0x2a>
 800903e:	2301      	movs	r3, #1
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800904a:	f000 fe15 	bl	8009c78 <__kernel_sin>
 800904e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009052:	e7da      	b.n	800900a <sin+0x2a>
 8009054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800905c:	f000 fa08 	bl	8009470 <__kernel_cos>
 8009060:	e7f5      	b.n	800904e <sin+0x6e>
 8009062:	bf00      	nop
 8009064:	3fe921fb 	.word	0x3fe921fb
 8009068:	7fefffff 	.word	0x7fefffff
 800906c:	00000000 	.word	0x00000000

08009070 <__ieee754_rem_pio2>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	ed2d 8b02 	vpush	{d8}
 8009078:	4bc7      	ldr	r3, [pc, #796]	; (8009398 <__ieee754_rem_pio2+0x328>)
 800907a:	b08b      	sub	sp, #44	; 0x2c
 800907c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009080:	4598      	cmp	r8, r3
 8009082:	4604      	mov	r4, r0
 8009084:	460d      	mov	r5, r1
 8009086:	4692      	mov	sl, r2
 8009088:	9102      	str	r1, [sp, #8]
 800908a:	dc08      	bgt.n	800909e <__ieee754_rem_pio2+0x2e>
 800908c:	e9c2 4500 	strd	r4, r5, [r2]
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009098:	f04f 0b00 	mov.w	fp, #0
 800909c:	e025      	b.n	80090ea <__ieee754_rem_pio2+0x7a>
 800909e:	4bbf      	ldr	r3, [pc, #764]	; (800939c <__ieee754_rem_pio2+0x32c>)
 80090a0:	4598      	cmp	r8, r3
 80090a2:	dc75      	bgt.n	8009190 <__ieee754_rem_pio2+0x120>
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	4ebe      	ldr	r6, [pc, #760]	; (80093a0 <__ieee754_rem_pio2+0x330>)
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	a3ad      	add	r3, pc, #692	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2f0>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	dd39      	ble.n	8009126 <__ieee754_rem_pio2+0xb6>
 80090b2:	f7f7 f8f1 	bl	8000298 <__aeabi_dsub>
 80090b6:	45b0      	cmp	r8, r6
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	d01b      	beq.n	80090f6 <__ieee754_rem_pio2+0x86>
 80090be:	a3aa      	add	r3, pc, #680	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f8>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f7f7 f8e8 	bl	8000298 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9ca 2300 	strd	r2, r3, [sl]
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 f8e0 	bl	8000298 <__aeabi_dsub>
 80090d8:	a3a3      	add	r3, pc, #652	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f8>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f8db 	bl	8000298 <__aeabi_dsub>
 80090e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090e6:	f04f 0b01 	mov.w	fp, #1
 80090ea:	4658      	mov	r0, fp
 80090ec:	b00b      	add	sp, #44	; 0x2c
 80090ee:	ecbd 8b02 	vpop	{d8}
 80090f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f6:	a39e      	add	r3, pc, #632	; (adr r3, 8009370 <__ieee754_rem_pio2+0x300>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 f8cc 	bl	8000298 <__aeabi_dsub>
 8009100:	a39d      	add	r3, pc, #628	; (adr r3, 8009378 <__ieee754_rem_pio2+0x308>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	4604      	mov	r4, r0
 8009108:	460d      	mov	r5, r1
 800910a:	f7f7 f8c5 	bl	8000298 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	e9ca 2300 	strd	r2, r3, [sl]
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 f8bd 	bl	8000298 <__aeabi_dsub>
 800911e:	a396      	add	r3, pc, #600	; (adr r3, 8009378 <__ieee754_rem_pio2+0x308>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	e7db      	b.n	80090de <__ieee754_rem_pio2+0x6e>
 8009126:	f7f7 f8b9 	bl	800029c <__adddf3>
 800912a:	45b0      	cmp	r8, r6
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	d016      	beq.n	8009160 <__ieee754_rem_pio2+0xf0>
 8009132:	a38d      	add	r3, pc, #564	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f8>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 f8b0 	bl	800029c <__adddf3>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9ca 2300 	strd	r2, r3, [sl]
 8009144:	4620      	mov	r0, r4
 8009146:	4629      	mov	r1, r5
 8009148:	f7f7 f8a6 	bl	8000298 <__aeabi_dsub>
 800914c:	a386      	add	r3, pc, #536	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	f04f 3bff 	mov.w	fp, #4294967295
 800915a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800915e:	e7c4      	b.n	80090ea <__ieee754_rem_pio2+0x7a>
 8009160:	a383      	add	r3, pc, #524	; (adr r3, 8009370 <__ieee754_rem_pio2+0x300>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 f899 	bl	800029c <__adddf3>
 800916a:	a383      	add	r3, pc, #524	; (adr r3, 8009378 <__ieee754_rem_pio2+0x308>)
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	e9ca 2300 	strd	r2, r3, [sl]
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 f888 	bl	8000298 <__aeabi_dsub>
 8009188:	a37b      	add	r3, pc, #492	; (adr r3, 8009378 <__ieee754_rem_pio2+0x308>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	e7e0      	b.n	8009152 <__ieee754_rem_pio2+0xe2>
 8009190:	4b84      	ldr	r3, [pc, #528]	; (80093a4 <__ieee754_rem_pio2+0x334>)
 8009192:	4598      	cmp	r8, r3
 8009194:	f300 80d6 	bgt.w	8009344 <__ieee754_rem_pio2+0x2d4>
 8009198:	f7ff fedc 	bl	8008f54 <fabs>
 800919c:	a378      	add	r3, pc, #480	; (adr r3, 8009380 <__ieee754_rem_pio2+0x310>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	f7f7 fa2f 	bl	8000608 <__aeabi_dmul>
 80091aa:	4b7f      	ldr	r3, [pc, #508]	; (80093a8 <__ieee754_rem_pio2+0x338>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7f7 f875 	bl	800029c <__adddf3>
 80091b2:	f7f7 fcd9 	bl	8000b68 <__aeabi_d2iz>
 80091b6:	4683      	mov	fp, r0
 80091b8:	f7f7 f9bc 	bl	8000534 <__aeabi_i2d>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	ec43 2b18 	vmov	d8, r2, r3
 80091c4:	a366      	add	r3, pc, #408	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2f0>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 fa1d 	bl	8000608 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f7 f85f 	bl	8000298 <__aeabi_dsub>
 80091da:	a363      	add	r3, pc, #396	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f8>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	4606      	mov	r6, r0
 80091e2:	460f      	mov	r7, r1
 80091e4:	ec51 0b18 	vmov	r0, r1, d8
 80091e8:	f7f7 fa0e 	bl	8000608 <__aeabi_dmul>
 80091ec:	f1bb 0f1f 	cmp.w	fp, #31
 80091f0:	4604      	mov	r4, r0
 80091f2:	460d      	mov	r5, r1
 80091f4:	dc0d      	bgt.n	8009212 <__ieee754_rem_pio2+0x1a2>
 80091f6:	4b6d      	ldr	r3, [pc, #436]	; (80093ac <__ieee754_rem_pio2+0x33c>)
 80091f8:	f10b 32ff 	add.w	r2, fp, #4294967295
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	4543      	cmp	r3, r8
 8009202:	d006      	beq.n	8009212 <__ieee754_rem_pio2+0x1a2>
 8009204:	4622      	mov	r2, r4
 8009206:	462b      	mov	r3, r5
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 f844 	bl	8000298 <__aeabi_dsub>
 8009210:	e00f      	b.n	8009232 <__ieee754_rem_pio2+0x1c2>
 8009212:	462b      	mov	r3, r5
 8009214:	4622      	mov	r2, r4
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 f83d 	bl	8000298 <__aeabi_dsub>
 800921e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009228:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800922c:	f1b8 0f10 	cmp.w	r8, #16
 8009230:	dc02      	bgt.n	8009238 <__ieee754_rem_pio2+0x1c8>
 8009232:	e9ca 0100 	strd	r0, r1, [sl]
 8009236:	e039      	b.n	80092ac <__ieee754_rem_pio2+0x23c>
 8009238:	a34d      	add	r3, pc, #308	; (adr r3, 8009370 <__ieee754_rem_pio2+0x300>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	ec51 0b18 	vmov	r0, r1, d8
 8009242:	f7f7 f9e1 	bl	8000608 <__aeabi_dmul>
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4630      	mov	r0, r6
 8009250:	4639      	mov	r1, r7
 8009252:	f7f7 f821 	bl	8000298 <__aeabi_dsub>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4680      	mov	r8, r0
 800925c:	4689      	mov	r9, r1
 800925e:	4630      	mov	r0, r6
 8009260:	4639      	mov	r1, r7
 8009262:	f7f7 f819 	bl	8000298 <__aeabi_dsub>
 8009266:	4622      	mov	r2, r4
 8009268:	462b      	mov	r3, r5
 800926a:	f7f7 f815 	bl	8000298 <__aeabi_dsub>
 800926e:	a342      	add	r3, pc, #264	; (adr r3, 8009378 <__ieee754_rem_pio2+0x308>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	ec51 0b18 	vmov	r0, r1, d8
 800927c:	f7f7 f9c4 	bl	8000608 <__aeabi_dmul>
 8009280:	4622      	mov	r2, r4
 8009282:	462b      	mov	r3, r5
 8009284:	f7f7 f808 	bl	8000298 <__aeabi_dsub>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f7 f800 	bl	8000298 <__aeabi_dsub>
 8009298:	9a03      	ldr	r2, [sp, #12]
 800929a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b31      	cmp	r3, #49	; 0x31
 80092a2:	dc24      	bgt.n	80092ee <__ieee754_rem_pio2+0x27e>
 80092a4:	e9ca 0100 	strd	r0, r1, [sl]
 80092a8:	4646      	mov	r6, r8
 80092aa:	464f      	mov	r7, r9
 80092ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80092b0:	4630      	mov	r0, r6
 80092b2:	4642      	mov	r2, r8
 80092b4:	464b      	mov	r3, r9
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f6 ffee 	bl	8000298 <__aeabi_dsub>
 80092bc:	462b      	mov	r3, r5
 80092be:	4622      	mov	r2, r4
 80092c0:	f7f6 ffea 	bl	8000298 <__aeabi_dsub>
 80092c4:	9b02      	ldr	r3, [sp, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092cc:	f6bf af0d 	bge.w	80090ea <__ieee754_rem_pio2+0x7a>
 80092d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80092d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80092d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092dc:	f8ca 8000 	str.w	r8, [sl]
 80092e0:	f8ca 0008 	str.w	r0, [sl, #8]
 80092e4:	f8ca 300c 	str.w	r3, [sl, #12]
 80092e8:	f1cb 0b00 	rsb	fp, fp, #0
 80092ec:	e6fd      	b.n	80090ea <__ieee754_rem_pio2+0x7a>
 80092ee:	a326      	add	r3, pc, #152	; (adr r3, 8009388 <__ieee754_rem_pio2+0x318>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	ec51 0b18 	vmov	r0, r1, d8
 80092f8:	f7f7 f986 	bl	8000608 <__aeabi_dmul>
 80092fc:	4604      	mov	r4, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	f7f6 ffc6 	bl	8000298 <__aeabi_dsub>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4606      	mov	r6, r0
 8009312:	460f      	mov	r7, r1
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f6 ffbe 	bl	8000298 <__aeabi_dsub>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f6 ffba 	bl	8000298 <__aeabi_dsub>
 8009324:	a31a      	add	r3, pc, #104	; (adr r3, 8009390 <__ieee754_rem_pio2+0x320>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	ec51 0b18 	vmov	r0, r1, d8
 8009332:	f7f7 f969 	bl	8000608 <__aeabi_dmul>
 8009336:	4622      	mov	r2, r4
 8009338:	462b      	mov	r3, r5
 800933a:	f7f6 ffad 	bl	8000298 <__aeabi_dsub>
 800933e:	4604      	mov	r4, r0
 8009340:	460d      	mov	r5, r1
 8009342:	e75f      	b.n	8009204 <__ieee754_rem_pio2+0x194>
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <__ieee754_rem_pio2+0x340>)
 8009346:	4598      	cmp	r8, r3
 8009348:	dd34      	ble.n	80093b4 <__ieee754_rem_pio2+0x344>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	f7f6 ffa3 	bl	8000298 <__aeabi_dsub>
 8009352:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009356:	e9ca 0100 	strd	r0, r1, [sl]
 800935a:	e69d      	b.n	8009098 <__ieee754_rem_pio2+0x28>
 800935c:	f3af 8000 	nop.w
 8009360:	54400000 	.word	0x54400000
 8009364:	3ff921fb 	.word	0x3ff921fb
 8009368:	1a626331 	.word	0x1a626331
 800936c:	3dd0b461 	.word	0x3dd0b461
 8009370:	1a600000 	.word	0x1a600000
 8009374:	3dd0b461 	.word	0x3dd0b461
 8009378:	2e037073 	.word	0x2e037073
 800937c:	3ba3198a 	.word	0x3ba3198a
 8009380:	6dc9c883 	.word	0x6dc9c883
 8009384:	3fe45f30 	.word	0x3fe45f30
 8009388:	2e000000 	.word	0x2e000000
 800938c:	3ba3198a 	.word	0x3ba3198a
 8009390:	252049c1 	.word	0x252049c1
 8009394:	397b839a 	.word	0x397b839a
 8009398:	3fe921fb 	.word	0x3fe921fb
 800939c:	4002d97b 	.word	0x4002d97b
 80093a0:	3ff921fb 	.word	0x3ff921fb
 80093a4:	413921fb 	.word	0x413921fb
 80093a8:	3fe00000 	.word	0x3fe00000
 80093ac:	0800aba0 	.word	0x0800aba0
 80093b0:	7fefffff 	.word	0x7fefffff
 80093b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80093b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80093bc:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80093c0:	460f      	mov	r7, r1
 80093c2:	4606      	mov	r6, r0
 80093c4:	f7f7 fbd0 	bl	8000b68 <__aeabi_d2iz>
 80093c8:	f7f7 f8b4 	bl	8000534 <__aeabi_i2d>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093d8:	f7f6 ff5e 	bl	8000298 <__aeabi_dsub>
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <__ieee754_rem_pio2+0x3f8>)
 80093de:	2200      	movs	r2, #0
 80093e0:	f7f7 f912 	bl	8000608 <__aeabi_dmul>
 80093e4:	460f      	mov	r7, r1
 80093e6:	4606      	mov	r6, r0
 80093e8:	f7f7 fbbe 	bl	8000b68 <__aeabi_d2iz>
 80093ec:	f7f7 f8a2 	bl	8000534 <__aeabi_i2d>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4630      	mov	r0, r6
 80093f6:	4639      	mov	r1, r7
 80093f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093fc:	f7f6 ff4c 	bl	8000298 <__aeabi_dsub>
 8009400:	4b19      	ldr	r3, [pc, #100]	; (8009468 <__ieee754_rem_pio2+0x3f8>)
 8009402:	2200      	movs	r2, #0
 8009404:	f7f7 f900 	bl	8000608 <__aeabi_dmul>
 8009408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800940c:	ad04      	add	r5, sp, #16
 800940e:	f04f 0803 	mov.w	r8, #3
 8009412:	46a9      	mov	r9, r5
 8009414:	2600      	movs	r6, #0
 8009416:	2700      	movs	r7, #0
 8009418:	4632      	mov	r2, r6
 800941a:	463b      	mov	r3, r7
 800941c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009420:	46c3      	mov	fp, r8
 8009422:	3d08      	subs	r5, #8
 8009424:	f108 38ff 	add.w	r8, r8, #4294967295
 8009428:	f7f7 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800942c:	2800      	cmp	r0, #0
 800942e:	d1f3      	bne.n	8009418 <__ieee754_rem_pio2+0x3a8>
 8009430:	4b0e      	ldr	r3, [pc, #56]	; (800946c <__ieee754_rem_pio2+0x3fc>)
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	2302      	movs	r3, #2
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4622      	mov	r2, r4
 800943a:	465b      	mov	r3, fp
 800943c:	4651      	mov	r1, sl
 800943e:	4648      	mov	r0, r9
 8009440:	f000 f8d6 	bl	80095f0 <__kernel_rem_pio2>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	4683      	mov	fp, r0
 800944a:	f6bf ae4e 	bge.w	80090ea <__ieee754_rem_pio2+0x7a>
 800944e:	e9da 2100 	ldrd	r2, r1, [sl]
 8009452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009456:	e9ca 2300 	strd	r2, r3, [sl]
 800945a:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800945e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009462:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009466:	e73f      	b.n	80092e8 <__ieee754_rem_pio2+0x278>
 8009468:	41700000 	.word	0x41700000
 800946c:	0800ac20 	.word	0x0800ac20

08009470 <__kernel_cos>:
 8009470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009478:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800947c:	ed2d 8b02 	vpush	{d8}
 8009480:	4680      	mov	r8, r0
 8009482:	ec43 2b18 	vmov	d8, r2, r3
 8009486:	4689      	mov	r9, r1
 8009488:	da04      	bge.n	8009494 <__kernel_cos+0x24>
 800948a:	f7f7 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800948e:	2800      	cmp	r0, #0
 8009490:	f000 8087 	beq.w	80095a2 <__kernel_cos+0x132>
 8009494:	4642      	mov	r2, r8
 8009496:	464b      	mov	r3, r9
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f7 f8b4 	bl	8000608 <__aeabi_dmul>
 80094a0:	4b4d      	ldr	r3, [pc, #308]	; (80095d8 <__kernel_cos+0x168>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	f7f7 f8ae 	bl	8000608 <__aeabi_dmul>
 80094ac:	a33e      	add	r3, pc, #248	; (adr r3, 80095a8 <__kernel_cos+0x138>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 f8a5 	bl	8000608 <__aeabi_dmul>
 80094be:	a33c      	add	r3, pc, #240	; (adr r3, 80095b0 <__kernel_cos+0x140>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f6 feea 	bl	800029c <__adddf3>
 80094c8:	4622      	mov	r2, r4
 80094ca:	462b      	mov	r3, r5
 80094cc:	f7f7 f89c 	bl	8000608 <__aeabi_dmul>
 80094d0:	a339      	add	r3, pc, #228	; (adr r3, 80095b8 <__kernel_cos+0x148>)
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f7f6 fedf 	bl	8000298 <__aeabi_dsub>
 80094da:	4622      	mov	r2, r4
 80094dc:	462b      	mov	r3, r5
 80094de:	f7f7 f893 	bl	8000608 <__aeabi_dmul>
 80094e2:	a337      	add	r3, pc, #220	; (adr r3, 80095c0 <__kernel_cos+0x150>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f6 fed8 	bl	800029c <__adddf3>
 80094ec:	4622      	mov	r2, r4
 80094ee:	462b      	mov	r3, r5
 80094f0:	f7f7 f88a 	bl	8000608 <__aeabi_dmul>
 80094f4:	a334      	add	r3, pc, #208	; (adr r3, 80095c8 <__kernel_cos+0x158>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fecd 	bl	8000298 <__aeabi_dsub>
 80094fe:	4622      	mov	r2, r4
 8009500:	462b      	mov	r3, r5
 8009502:	f7f7 f881 	bl	8000608 <__aeabi_dmul>
 8009506:	a332      	add	r3, pc, #200	; (adr r3, 80095d0 <__kernel_cos+0x160>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	f7f6 fec6 	bl	800029c <__adddf3>
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	f7f7 f878 	bl	8000608 <__aeabi_dmul>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f7 f874 	bl	8000608 <__aeabi_dmul>
 8009520:	ec53 2b18 	vmov	r2, r3, d8
 8009524:	4604      	mov	r4, r0
 8009526:	460d      	mov	r5, r1
 8009528:	4640      	mov	r0, r8
 800952a:	4649      	mov	r1, r9
 800952c:	f7f7 f86c 	bl	8000608 <__aeabi_dmul>
 8009530:	460b      	mov	r3, r1
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	f7f6 feae 	bl	8000298 <__aeabi_dsub>
 800953c:	4b27      	ldr	r3, [pc, #156]	; (80095dc <__kernel_cos+0x16c>)
 800953e:	429e      	cmp	r6, r3
 8009540:	4680      	mov	r8, r0
 8009542:	4689      	mov	r9, r1
 8009544:	dc0f      	bgt.n	8009566 <__kernel_cos+0xf6>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4650      	mov	r0, sl
 800954c:	4659      	mov	r1, fp
 800954e:	f7f6 fea3 	bl	8000298 <__aeabi_dsub>
 8009552:	460b      	mov	r3, r1
 8009554:	4922      	ldr	r1, [pc, #136]	; (80095e0 <__kernel_cos+0x170>)
 8009556:	4602      	mov	r2, r0
 8009558:	2000      	movs	r0, #0
 800955a:	f7f6 fe9d 	bl	8000298 <__aeabi_dsub>
 800955e:	ecbd 8b02 	vpop	{d8}
 8009562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	4b1f      	ldr	r3, [pc, #124]	; (80095e4 <__kernel_cos+0x174>)
 8009568:	491d      	ldr	r1, [pc, #116]	; (80095e0 <__kernel_cos+0x170>)
 800956a:	429e      	cmp	r6, r3
 800956c:	bfcc      	ite	gt
 800956e:	4d1e      	ldrgt	r5, [pc, #120]	; (80095e8 <__kernel_cos+0x178>)
 8009570:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009574:	2400      	movs	r4, #0
 8009576:	4622      	mov	r2, r4
 8009578:	462b      	mov	r3, r5
 800957a:	2000      	movs	r0, #0
 800957c:	f7f6 fe8c 	bl	8000298 <__aeabi_dsub>
 8009580:	4622      	mov	r2, r4
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	462b      	mov	r3, r5
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	f7f6 fe84 	bl	8000298 <__aeabi_dsub>
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	f7f6 fe80 	bl	8000298 <__aeabi_dsub>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	e7db      	b.n	800955a <__kernel_cos+0xea>
 80095a2:	490f      	ldr	r1, [pc, #60]	; (80095e0 <__kernel_cos+0x170>)
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7da      	b.n	800955e <__kernel_cos+0xee>
 80095a8:	be8838d4 	.word	0xbe8838d4
 80095ac:	bda8fae9 	.word	0xbda8fae9
 80095b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80095b4:	3e21ee9e 	.word	0x3e21ee9e
 80095b8:	809c52ad 	.word	0x809c52ad
 80095bc:	3e927e4f 	.word	0x3e927e4f
 80095c0:	19cb1590 	.word	0x19cb1590
 80095c4:	3efa01a0 	.word	0x3efa01a0
 80095c8:	16c15177 	.word	0x16c15177
 80095cc:	3f56c16c 	.word	0x3f56c16c
 80095d0:	5555554c 	.word	0x5555554c
 80095d4:	3fa55555 	.word	0x3fa55555
 80095d8:	3fe00000 	.word	0x3fe00000
 80095dc:	3fd33332 	.word	0x3fd33332
 80095e0:	3ff00000 	.word	0x3ff00000
 80095e4:	3fe90000 	.word	0x3fe90000
 80095e8:	3fd20000 	.word	0x3fd20000
 80095ec:	00000000 	.word	0x00000000

080095f0 <__kernel_rem_pio2>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	ed2d 8b02 	vpush	{d8}
 80095f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80095fc:	f112 0f14 	cmn.w	r2, #20
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	9101      	str	r1, [sp, #4]
 8009604:	4bc4      	ldr	r3, [pc, #784]	; (8009918 <__kernel_rem_pio2+0x328>)
 8009606:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009608:	900b      	str	r0, [sp, #44]	; 0x2c
 800960a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	f103 33ff 	add.w	r3, r3, #4294967295
 8009616:	bfa8      	it	ge
 8009618:	1ed4      	subge	r4, r2, #3
 800961a:	9306      	str	r3, [sp, #24]
 800961c:	bfb2      	itee	lt
 800961e:	2400      	movlt	r4, #0
 8009620:	2318      	movge	r3, #24
 8009622:	fb94 f4f3 	sdivge	r4, r4, r3
 8009626:	f06f 0317 	mvn.w	r3, #23
 800962a:	fb04 3303 	mla	r3, r4, r3, r3
 800962e:	eb03 0a02 	add.w	sl, r3, r2
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	9a06      	ldr	r2, [sp, #24]
 8009636:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009910 <__kernel_rem_pio2+0x320>
 800963a:	eb03 0802 	add.w	r8, r3, r2
 800963e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009640:	1aa7      	subs	r7, r4, r2
 8009642:	ae22      	add	r6, sp, #136	; 0x88
 8009644:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009648:	2500      	movs	r5, #0
 800964a:	4545      	cmp	r5, r8
 800964c:	dd13      	ble.n	8009676 <__kernel_rem_pio2+0x86>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8009910 <__kernel_rem_pio2+0x320>
 8009654:	aa22      	add	r2, sp, #136	; 0x88
 8009656:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800965a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	4598      	cmp	r8, r3
 8009666:	dc2f      	bgt.n	80096c8 <__kernel_rem_pio2+0xd8>
 8009668:	ed8d 8b04 	vstr	d8, [sp, #16]
 800966c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009670:	462f      	mov	r7, r5
 8009672:	2600      	movs	r6, #0
 8009674:	e01b      	b.n	80096ae <__kernel_rem_pio2+0xbe>
 8009676:	42ef      	cmn	r7, r5
 8009678:	d407      	bmi.n	800968a <__kernel_rem_pio2+0x9a>
 800967a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800967e:	f7f6 ff59 	bl	8000534 <__aeabi_i2d>
 8009682:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009686:	3501      	adds	r5, #1
 8009688:	e7df      	b.n	800964a <__kernel_rem_pio2+0x5a>
 800968a:	ec51 0b18 	vmov	r0, r1, d8
 800968e:	e7f8      	b.n	8009682 <__kernel_rem_pio2+0x92>
 8009690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009694:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009698:	f7f6 ffb6 	bl	8000608 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096a4:	f7f6 fdfa 	bl	800029c <__adddf3>
 80096a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ac:	3601      	adds	r6, #1
 80096ae:	9b06      	ldr	r3, [sp, #24]
 80096b0:	429e      	cmp	r6, r3
 80096b2:	f1a7 0708 	sub.w	r7, r7, #8
 80096b6:	ddeb      	ble.n	8009690 <__kernel_rem_pio2+0xa0>
 80096b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80096bc:	f108 0801 	add.w	r8, r8, #1
 80096c0:	ecab 7b02 	vstmia	fp!, {d7}
 80096c4:	3508      	adds	r5, #8
 80096c6:	e7cc      	b.n	8009662 <__kernel_rem_pio2+0x72>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	aa0e      	add	r2, sp, #56	; 0x38
 80096cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096d0:	930d      	str	r3, [sp, #52]	; 0x34
 80096d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80096d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096d8:	9c02      	ldr	r4, [sp, #8]
 80096da:	930c      	str	r3, [sp, #48]	; 0x30
 80096dc:	00e3      	lsls	r3, r4, #3
 80096de:	930a      	str	r3, [sp, #40]	; 0x28
 80096e0:	ab9a      	add	r3, sp, #616	; 0x268
 80096e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80096ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80096ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80096f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80096f4:	46c3      	mov	fp, r8
 80096f6:	46a1      	mov	r9, r4
 80096f8:	f1b9 0f00 	cmp.w	r9, #0
 80096fc:	f1a5 0508 	sub.w	r5, r5, #8
 8009700:	dc70      	bgt.n	80097e4 <__kernel_rem_pio2+0x1f4>
 8009702:	4652      	mov	r2, sl
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f000 fbee 	bl	8009ee8 <scalbn>
 800970c:	2200      	movs	r2, #0
 800970e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f7f6 ff77 	bl	8000608 <__aeabi_dmul>
 800971a:	f000 fb65 	bl	8009de8 <floor>
 800971e:	4b7f      	ldr	r3, [pc, #508]	; (800991c <__kernel_rem_pio2+0x32c>)
 8009720:	2200      	movs	r2, #0
 8009722:	f7f6 ff71 	bl	8000608 <__aeabi_dmul>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f6 fdb3 	bl	8000298 <__aeabi_dsub>
 8009732:	460f      	mov	r7, r1
 8009734:	4606      	mov	r6, r0
 8009736:	f7f7 fa17 	bl	8000b68 <__aeabi_d2iz>
 800973a:	9004      	str	r0, [sp, #16]
 800973c:	f7f6 fefa 	bl	8000534 <__aeabi_i2d>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4630      	mov	r0, r6
 8009746:	4639      	mov	r1, r7
 8009748:	f7f6 fda6 	bl	8000298 <__aeabi_dsub>
 800974c:	f1ba 0f00 	cmp.w	sl, #0
 8009750:	4606      	mov	r6, r0
 8009752:	460f      	mov	r7, r1
 8009754:	dd6d      	ble.n	8009832 <__kernel_rem_pio2+0x242>
 8009756:	1e62      	subs	r2, r4, #1
 8009758:	ab0e      	add	r3, sp, #56	; 0x38
 800975a:	9d04      	ldr	r5, [sp, #16]
 800975c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009760:	f1ca 0118 	rsb	r1, sl, #24
 8009764:	fa40 f301 	asr.w	r3, r0, r1
 8009768:	441d      	add	r5, r3
 800976a:	408b      	lsls	r3, r1
 800976c:	1ac0      	subs	r0, r0, r3
 800976e:	ab0e      	add	r3, sp, #56	; 0x38
 8009770:	9504      	str	r5, [sp, #16]
 8009772:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009776:	f1ca 0317 	rsb	r3, sl, #23
 800977a:	fa40 fb03 	asr.w	fp, r0, r3
 800977e:	f1bb 0f00 	cmp.w	fp, #0
 8009782:	dd65      	ble.n	8009850 <__kernel_rem_pio2+0x260>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	2200      	movs	r2, #0
 8009788:	3301      	adds	r3, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	4615      	mov	r5, r2
 800978e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009792:	4294      	cmp	r4, r2
 8009794:	f300 809c 	bgt.w	80098d0 <__kernel_rem_pio2+0x2e0>
 8009798:	f1ba 0f00 	cmp.w	sl, #0
 800979c:	dd07      	ble.n	80097ae <__kernel_rem_pio2+0x1be>
 800979e:	f1ba 0f01 	cmp.w	sl, #1
 80097a2:	f000 80a8 	beq.w	80098f6 <__kernel_rem_pio2+0x306>
 80097a6:	f1ba 0f02 	cmp.w	sl, #2
 80097aa:	f000 80c3 	beq.w	8009934 <__kernel_rem_pio2+0x344>
 80097ae:	f1bb 0f02 	cmp.w	fp, #2
 80097b2:	d14d      	bne.n	8009850 <__kernel_rem_pio2+0x260>
 80097b4:	4632      	mov	r2, r6
 80097b6:	463b      	mov	r3, r7
 80097b8:	4959      	ldr	r1, [pc, #356]	; (8009920 <__kernel_rem_pio2+0x330>)
 80097ba:	2000      	movs	r0, #0
 80097bc:	f7f6 fd6c 	bl	8000298 <__aeabi_dsub>
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d043      	beq.n	8009850 <__kernel_rem_pio2+0x260>
 80097c8:	4652      	mov	r2, sl
 80097ca:	4955      	ldr	r1, [pc, #340]	; (8009920 <__kernel_rem_pio2+0x330>)
 80097cc:	2000      	movs	r0, #0
 80097ce:	f000 fb8b 	bl	8009ee8 <scalbn>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 fd5d 	bl	8000298 <__aeabi_dsub>
 80097de:	4606      	mov	r6, r0
 80097e0:	460f      	mov	r7, r1
 80097e2:	e035      	b.n	8009850 <__kernel_rem_pio2+0x260>
 80097e4:	4b4f      	ldr	r3, [pc, #316]	; (8009924 <__kernel_rem_pio2+0x334>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f6 ff0c 	bl	8000608 <__aeabi_dmul>
 80097f0:	f7f7 f9ba 	bl	8000b68 <__aeabi_d2iz>
 80097f4:	f7f6 fe9e 	bl	8000534 <__aeabi_i2d>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	ec43 2b18 	vmov	d8, r2, r3
 8009800:	4b49      	ldr	r3, [pc, #292]	; (8009928 <__kernel_rem_pio2+0x338>)
 8009802:	2200      	movs	r2, #0
 8009804:	f7f6 ff00 	bl	8000608 <__aeabi_dmul>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4630      	mov	r0, r6
 800980e:	4639      	mov	r1, r7
 8009810:	f7f6 fd42 	bl	8000298 <__aeabi_dsub>
 8009814:	f7f7 f9a8 	bl	8000b68 <__aeabi_d2iz>
 8009818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800981c:	f84b 0b04 	str.w	r0, [fp], #4
 8009820:	ec51 0b18 	vmov	r0, r1, d8
 8009824:	f7f6 fd3a 	bl	800029c <__adddf3>
 8009828:	f109 39ff 	add.w	r9, r9, #4294967295
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	e762      	b.n	80096f8 <__kernel_rem_pio2+0x108>
 8009832:	d106      	bne.n	8009842 <__kernel_rem_pio2+0x252>
 8009834:	1e63      	subs	r3, r4, #1
 8009836:	aa0e      	add	r2, sp, #56	; 0x38
 8009838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800983c:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009840:	e79d      	b.n	800977e <__kernel_rem_pio2+0x18e>
 8009842:	4b3a      	ldr	r3, [pc, #232]	; (800992c <__kernel_rem_pio2+0x33c>)
 8009844:	2200      	movs	r2, #0
 8009846:	f7f7 f965 	bl	8000b14 <__aeabi_dcmpge>
 800984a:	2800      	cmp	r0, #0
 800984c:	d13d      	bne.n	80098ca <__kernel_rem_pio2+0x2da>
 800984e:	4683      	mov	fp, r0
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f7 f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800985c:	2800      	cmp	r0, #0
 800985e:	f000 80bd 	beq.w	80099dc <__kernel_rem_pio2+0x3ec>
 8009862:	1e65      	subs	r5, r4, #1
 8009864:	462b      	mov	r3, r5
 8009866:	2200      	movs	r2, #0
 8009868:	9902      	ldr	r1, [sp, #8]
 800986a:	428b      	cmp	r3, r1
 800986c:	da69      	bge.n	8009942 <__kernel_rem_pio2+0x352>
 800986e:	2a00      	cmp	r2, #0
 8009870:	f000 8086 	beq.w	8009980 <__kernel_rem_pio2+0x390>
 8009874:	ab0e      	add	r3, sp, #56	; 0x38
 8009876:	f1aa 0a18 	sub.w	sl, sl, #24
 800987a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80aa 	beq.w	80099d8 <__kernel_rem_pio2+0x3e8>
 8009884:	4652      	mov	r2, sl
 8009886:	4926      	ldr	r1, [pc, #152]	; (8009920 <__kernel_rem_pio2+0x330>)
 8009888:	2000      	movs	r0, #0
 800988a:	f000 fb2d 	bl	8009ee8 <scalbn>
 800988e:	ab9a      	add	r3, sp, #616	; 0x268
 8009890:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	00ec      	lsls	r4, r5, #3
 800989a:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800989e:	46aa      	mov	sl, r5
 80098a0:	f1ba 0f00 	cmp.w	sl, #0
 80098a4:	f280 80d0 	bge.w	8009a48 <__kernel_rem_pio2+0x458>
 80098a8:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009910 <__kernel_rem_pio2+0x320>
 80098ac:	462e      	mov	r6, r5
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	f2c0 80fe 	blt.w	8009ab0 <__kernel_rem_pio2+0x4c0>
 80098b4:	ab72      	add	r3, sp, #456	; 0x1c8
 80098b6:	ed8d 8b06 	vstr	d8, [sp, #24]
 80098ba:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009930 <__kernel_rem_pio2+0x340>
 80098be:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80098c2:	f04f 0800 	mov.w	r8, #0
 80098c6:	1baf      	subs	r7, r5, r6
 80098c8:	e0e4      	b.n	8009a94 <__kernel_rem_pio2+0x4a4>
 80098ca:	f04f 0b02 	mov.w	fp, #2
 80098ce:	e759      	b.n	8009784 <__kernel_rem_pio2+0x194>
 80098d0:	f8d8 3000 	ldr.w	r3, [r8]
 80098d4:	b955      	cbnz	r5, 80098ec <__kernel_rem_pio2+0x2fc>
 80098d6:	b123      	cbz	r3, 80098e2 <__kernel_rem_pio2+0x2f2>
 80098d8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80098dc:	f8c8 3000 	str.w	r3, [r8]
 80098e0:	2301      	movs	r3, #1
 80098e2:	3201      	adds	r2, #1
 80098e4:	f108 0804 	add.w	r8, r8, #4
 80098e8:	461d      	mov	r5, r3
 80098ea:	e752      	b.n	8009792 <__kernel_rem_pio2+0x1a2>
 80098ec:	1acb      	subs	r3, r1, r3
 80098ee:	f8c8 3000 	str.w	r3, [r8]
 80098f2:	462b      	mov	r3, r5
 80098f4:	e7f5      	b.n	80098e2 <__kernel_rem_pio2+0x2f2>
 80098f6:	1e62      	subs	r2, r4, #1
 80098f8:	ab0e      	add	r3, sp, #56	; 0x38
 80098fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009902:	a90e      	add	r1, sp, #56	; 0x38
 8009904:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009908:	e751      	b.n	80097ae <__kernel_rem_pio2+0x1be>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
	...
 8009918:	0800ad68 	.word	0x0800ad68
 800991c:	40200000 	.word	0x40200000
 8009920:	3ff00000 	.word	0x3ff00000
 8009924:	3e700000 	.word	0x3e700000
 8009928:	41700000 	.word	0x41700000
 800992c:	3fe00000 	.word	0x3fe00000
 8009930:	0800ad28 	.word	0x0800ad28
 8009934:	1e62      	subs	r2, r4, #1
 8009936:	ab0e      	add	r3, sp, #56	; 0x38
 8009938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009940:	e7df      	b.n	8009902 <__kernel_rem_pio2+0x312>
 8009942:	a90e      	add	r1, sp, #56	; 0x38
 8009944:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009948:	3b01      	subs	r3, #1
 800994a:	430a      	orrs	r2, r1
 800994c:	e78c      	b.n	8009868 <__kernel_rem_pio2+0x278>
 800994e:	3301      	adds	r3, #1
 8009950:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009954:	2900      	cmp	r1, #0
 8009956:	d0fa      	beq.n	800994e <__kernel_rem_pio2+0x35e>
 8009958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995a:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800995e:	446a      	add	r2, sp
 8009960:	3a98      	subs	r2, #152	; 0x98
 8009962:	920a      	str	r2, [sp, #40]	; 0x28
 8009964:	9a08      	ldr	r2, [sp, #32]
 8009966:	18e3      	adds	r3, r4, r3
 8009968:	18a5      	adds	r5, r4, r2
 800996a:	aa22      	add	r2, sp, #136	; 0x88
 800996c:	f104 0801 	add.w	r8, r4, #1
 8009970:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	4543      	cmp	r3, r8
 800997a:	da04      	bge.n	8009986 <__kernel_rem_pio2+0x396>
 800997c:	461c      	mov	r4, r3
 800997e:	e6ad      	b.n	80096dc <__kernel_rem_pio2+0xec>
 8009980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009982:	2301      	movs	r3, #1
 8009984:	e7e4      	b.n	8009950 <__kernel_rem_pio2+0x360>
 8009986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009988:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800998c:	f7f6 fdd2 	bl	8000534 <__aeabi_i2d>
 8009990:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009996:	46ab      	mov	fp, r5
 8009998:	461c      	mov	r4, r3
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	2600      	movs	r6, #0
 80099a0:	2700      	movs	r7, #0
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	4599      	cmp	r9, r3
 80099a6:	dd06      	ble.n	80099b6 <__kernel_rem_pio2+0x3c6>
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	e8e3 6702 	strd	r6, r7, [r3], #8
 80099ae:	f108 0801 	add.w	r8, r8, #1
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	e7df      	b.n	8009976 <__kernel_rem_pio2+0x386>
 80099b6:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80099ba:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80099be:	f7f6 fe23 	bl	8000608 <__aeabi_dmul>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4630      	mov	r0, r6
 80099c8:	4639      	mov	r1, r7
 80099ca:	f7f6 fc67 	bl	800029c <__adddf3>
 80099ce:	f109 0901 	add.w	r9, r9, #1
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	e7e4      	b.n	80099a2 <__kernel_rem_pio2+0x3b2>
 80099d8:	3d01      	subs	r5, #1
 80099da:	e74b      	b.n	8009874 <__kernel_rem_pio2+0x284>
 80099dc:	f1ca 0200 	rsb	r2, sl, #0
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f000 fa80 	bl	8009ee8 <scalbn>
 80099e8:	4ba0      	ldr	r3, [pc, #640]	; (8009c6c <__kernel_rem_pio2+0x67c>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	460f      	mov	r7, r1
 80099f0:	f7f7 f890 	bl	8000b14 <__aeabi_dcmpge>
 80099f4:	b1f8      	cbz	r0, 8009a36 <__kernel_rem_pio2+0x446>
 80099f6:	4b9e      	ldr	r3, [pc, #632]	; (8009c70 <__kernel_rem_pio2+0x680>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fe03 	bl	8000608 <__aeabi_dmul>
 8009a02:	f7f7 f8b1 	bl	8000b68 <__aeabi_d2iz>
 8009a06:	4680      	mov	r8, r0
 8009a08:	f7f6 fd94 	bl	8000534 <__aeabi_i2d>
 8009a0c:	4b97      	ldr	r3, [pc, #604]	; (8009c6c <__kernel_rem_pio2+0x67c>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f7f6 fdfa 	bl	8000608 <__aeabi_dmul>
 8009a14:	460b      	mov	r3, r1
 8009a16:	4602      	mov	r2, r0
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7f6 fc3c 	bl	8000298 <__aeabi_dsub>
 8009a20:	f7f7 f8a2 	bl	8000b68 <__aeabi_d2iz>
 8009a24:	1c65      	adds	r5, r4, #1
 8009a26:	ab0e      	add	r3, sp, #56	; 0x38
 8009a28:	f10a 0a18 	add.w	sl, sl, #24
 8009a2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a30:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009a34:	e726      	b.n	8009884 <__kernel_rem_pio2+0x294>
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f7 f895 	bl	8000b68 <__aeabi_d2iz>
 8009a3e:	ab0e      	add	r3, sp, #56	; 0x38
 8009a40:	4625      	mov	r5, r4
 8009a42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a46:	e71d      	b.n	8009884 <__kernel_rem_pio2+0x294>
 8009a48:	ab0e      	add	r3, sp, #56	; 0x38
 8009a4a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009a4e:	f7f6 fd71 	bl	8000534 <__aeabi_i2d>
 8009a52:	4632      	mov	r2, r6
 8009a54:	463b      	mov	r3, r7
 8009a56:	f7f6 fdd7 	bl	8000608 <__aeabi_dmul>
 8009a5a:	4b85      	ldr	r3, [pc, #532]	; (8009c70 <__kernel_rem_pio2+0x680>)
 8009a5c:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009a60:	2200      	movs	r2, #0
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fdcf 	bl	8000608 <__aeabi_dmul>
 8009a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	e715      	b.n	80098a0 <__kernel_rem_pio2+0x2b0>
 8009a74:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009a78:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a88:	f7f6 fc08 	bl	800029c <__adddf3>
 8009a8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a90:	f108 0801 	add.w	r8, r8, #1
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	4598      	cmp	r8, r3
 8009a98:	dc01      	bgt.n	8009a9e <__kernel_rem_pio2+0x4ae>
 8009a9a:	45b8      	cmp	r8, r7
 8009a9c:	ddea      	ble.n	8009a74 <__kernel_rem_pio2+0x484>
 8009a9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009aa2:	ab4a      	add	r3, sp, #296	; 0x128
 8009aa4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009aa8:	ed87 7b00 	vstr	d7, [r7]
 8009aac:	3e01      	subs	r6, #1
 8009aae:	e6fe      	b.n	80098ae <__kernel_rem_pio2+0x2be>
 8009ab0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	dc0b      	bgt.n	8009ace <__kernel_rem_pio2+0x4de>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc35      	bgt.n	8009b26 <__kernel_rem_pio2+0x536>
 8009aba:	d059      	beq.n	8009b70 <__kernel_rem_pio2+0x580>
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	f003 0007 	and.w	r0, r3, #7
 8009ac2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009ac6:	ecbd 8b02 	vpop	{d8}
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d1f3      	bne.n	8009abc <__kernel_rem_pio2+0x4cc>
 8009ad4:	ab4a      	add	r3, sp, #296	; 0x128
 8009ad6:	4423      	add	r3, r4
 8009ad8:	9306      	str	r3, [sp, #24]
 8009ada:	461c      	mov	r4, r3
 8009adc:	469a      	mov	sl, r3
 8009ade:	9502      	str	r5, [sp, #8]
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f1aa 0a08 	sub.w	sl, sl, #8
 8009ae8:	dc6b      	bgt.n	8009bc2 <__kernel_rem_pio2+0x5d2>
 8009aea:	46aa      	mov	sl, r5
 8009aec:	f1ba 0f01 	cmp.w	sl, #1
 8009af0:	f1a4 0408 	sub.w	r4, r4, #8
 8009af4:	f300 8085 	bgt.w	8009c02 <__kernel_rem_pio2+0x612>
 8009af8:	9c06      	ldr	r4, [sp, #24]
 8009afa:	2000      	movs	r0, #0
 8009afc:	3408      	adds	r4, #8
 8009afe:	2100      	movs	r1, #0
 8009b00:	2d01      	cmp	r5, #1
 8009b02:	f300 809d 	bgt.w	8009c40 <__kernel_rem_pio2+0x650>
 8009b06:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009b0a:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009b0e:	f1bb 0f00 	cmp.w	fp, #0
 8009b12:	f040 809b 	bne.w	8009c4c <__kernel_rem_pio2+0x65c>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	e9c3 5600 	strd	r5, r6, [r3]
 8009b1c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009b20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b24:	e7ca      	b.n	8009abc <__kernel_rem_pio2+0x4cc>
 8009b26:	3408      	adds	r4, #8
 8009b28:	ab4a      	add	r3, sp, #296	; 0x128
 8009b2a:	441c      	add	r4, r3
 8009b2c:	462e      	mov	r6, r5
 8009b2e:	2000      	movs	r0, #0
 8009b30:	2100      	movs	r1, #0
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	da36      	bge.n	8009ba4 <__kernel_rem_pio2+0x5b4>
 8009b36:	f1bb 0f00 	cmp.w	fp, #0
 8009b3a:	d039      	beq.n	8009bb0 <__kernel_rem_pio2+0x5c0>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b42:	9c01      	ldr	r4, [sp, #4]
 8009b44:	e9c4 2300 	strd	r2, r3, [r4]
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009b50:	f7f6 fba2 	bl	8000298 <__aeabi_dsub>
 8009b54:	ae4c      	add	r6, sp, #304	; 0x130
 8009b56:	2401      	movs	r4, #1
 8009b58:	42a5      	cmp	r5, r4
 8009b5a:	da2c      	bge.n	8009bb6 <__kernel_rem_pio2+0x5c6>
 8009b5c:	f1bb 0f00 	cmp.w	fp, #0
 8009b60:	d002      	beq.n	8009b68 <__kernel_rem_pio2+0x578>
 8009b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b66:	4619      	mov	r1, r3
 8009b68:	9b01      	ldr	r3, [sp, #4]
 8009b6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009b6e:	e7a5      	b.n	8009abc <__kernel_rem_pio2+0x4cc>
 8009b70:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009b74:	eb0d 0403 	add.w	r4, sp, r3
 8009b78:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	2100      	movs	r1, #0
 8009b80:	2d00      	cmp	r5, #0
 8009b82:	da09      	bge.n	8009b98 <__kernel_rem_pio2+0x5a8>
 8009b84:	f1bb 0f00 	cmp.w	fp, #0
 8009b88:	d002      	beq.n	8009b90 <__kernel_rem_pio2+0x5a0>
 8009b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b8e:	4619      	mov	r1, r3
 8009b90:	9b01      	ldr	r3, [sp, #4]
 8009b92:	e9c3 0100 	strd	r0, r1, [r3]
 8009b96:	e791      	b.n	8009abc <__kernel_rem_pio2+0x4cc>
 8009b98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009b9c:	f7f6 fb7e 	bl	800029c <__adddf3>
 8009ba0:	3d01      	subs	r5, #1
 8009ba2:	e7ed      	b.n	8009b80 <__kernel_rem_pio2+0x590>
 8009ba4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ba8:	f7f6 fb78 	bl	800029c <__adddf3>
 8009bac:	3e01      	subs	r6, #1
 8009bae:	e7c0      	b.n	8009b32 <__kernel_rem_pio2+0x542>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	e7c5      	b.n	8009b42 <__kernel_rem_pio2+0x552>
 8009bb6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009bba:	f7f6 fb6f 	bl	800029c <__adddf3>
 8009bbe:	3401      	adds	r4, #1
 8009bc0:	e7ca      	b.n	8009b58 <__kernel_rem_pio2+0x568>
 8009bc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bc6:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	9302      	str	r3, [sp, #8]
 8009bd0:	4632      	mov	r2, r6
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fb60 	bl	800029c <__adddf3>
 8009bdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fb56 	bl	8000298 <__aeabi_dsub>
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	f7f6 fb54 	bl	800029c <__adddf3>
 8009bf4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009bf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bfc:	ed8a 7b00 	vstr	d7, [sl]
 8009c00:	e76e      	b.n	8009ae0 <__kernel_rem_pio2+0x4f0>
 8009c02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c06:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 fb43 	bl	800029c <__adddf3>
 8009c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 fb39 	bl	8000298 <__aeabi_dsub>
 8009c26:	4632      	mov	r2, r6
 8009c28:	463b      	mov	r3, r7
 8009c2a:	f7f6 fb37 	bl	800029c <__adddf3>
 8009c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c36:	ed84 7b00 	vstr	d7, [r4]
 8009c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c3e:	e755      	b.n	8009aec <__kernel_rem_pio2+0x4fc>
 8009c40:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c44:	f7f6 fb2a 	bl	800029c <__adddf3>
 8009c48:	3d01      	subs	r5, #1
 8009c4a:	e759      	b.n	8009b00 <__kernel_rem_pio2+0x510>
 8009c4c:	9b01      	ldr	r3, [sp, #4]
 8009c4e:	9a01      	ldr	r2, [sp, #4]
 8009c50:	601d      	str	r5, [r3, #0]
 8009c52:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009c56:	605c      	str	r4, [r3, #4]
 8009c58:	609f      	str	r7, [r3, #8]
 8009c5a:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009c5e:	60d3      	str	r3, [r2, #12]
 8009c60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c64:	6110      	str	r0, [r2, #16]
 8009c66:	6153      	str	r3, [r2, #20]
 8009c68:	e728      	b.n	8009abc <__kernel_rem_pio2+0x4cc>
 8009c6a:	bf00      	nop
 8009c6c:	41700000 	.word	0x41700000
 8009c70:	3e700000 	.word	0x3e700000
 8009c74:	00000000 	.word	0x00000000

08009c78 <__kernel_sin>:
 8009c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	461f      	mov	r7, r3
 8009c7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009c86:	ed2d 8b04 	vpush	{d8-d9}
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	4616      	mov	r6, r2
 8009c90:	da03      	bge.n	8009c9a <__kernel_sin+0x22>
 8009c92:	f7f6 ff69 	bl	8000b68 <__aeabi_d2iz>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d051      	beq.n	8009d3e <__kernel_sin+0xc6>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 fcb1 	bl	8000608 <__aeabi_dmul>
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 fca9 	bl	8000608 <__aeabi_dmul>
 8009cb6:	a341      	add	r3, pc, #260	; (adr r3, 8009dbc <__kernel_sin+0x144>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	f7f6 fca0 	bl	8000608 <__aeabi_dmul>
 8009cc8:	a33e      	add	r3, pc, #248	; (adr r3, 8009dc4 <__kernel_sin+0x14c>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fae3 	bl	8000298 <__aeabi_dsub>
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	f7f6 fc97 	bl	8000608 <__aeabi_dmul>
 8009cda:	a33c      	add	r3, pc, #240	; (adr r3, 8009dcc <__kernel_sin+0x154>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f7f6 fadc 	bl	800029c <__adddf3>
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	465b      	mov	r3, fp
 8009ce8:	f7f6 fc8e 	bl	8000608 <__aeabi_dmul>
 8009cec:	a339      	add	r3, pc, #228	; (adr r3, 8009dd4 <__kernel_sin+0x15c>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fad1 	bl	8000298 <__aeabi_dsub>
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	465b      	mov	r3, fp
 8009cfa:	f7f6 fc85 	bl	8000608 <__aeabi_dmul>
 8009cfe:	a337      	add	r3, pc, #220	; (adr r3, 8009ddc <__kernel_sin+0x164>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 faca 	bl	800029c <__adddf3>
 8009d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d0a:	ec41 0b18 	vmov	d8, r0, r1
 8009d0e:	b9e3      	cbnz	r3, 8009d4a <__kernel_sin+0xd2>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4650      	mov	r0, sl
 8009d16:	4659      	mov	r1, fp
 8009d18:	f7f6 fc76 	bl	8000608 <__aeabi_dmul>
 8009d1c:	a324      	add	r3, pc, #144	; (adr r3, 8009db0 <__kernel_sin+0x138>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fab9 	bl	8000298 <__aeabi_dsub>
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	f7f6 fc6d 	bl	8000608 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fab1 	bl	800029c <__adddf3>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	ecbd 8b04 	vpop	{d8-d9}
 8009d42:	4620      	mov	r0, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <__kernel_sin+0x140>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 fc59 	bl	8000608 <__aeabi_dmul>
 8009d56:	ec53 2b18 	vmov	r2, r3, d8
 8009d5a:	ec41 0b19 	vmov	d9, r0, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fc51 	bl	8000608 <__aeabi_dmul>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	ec51 0b19 	vmov	r0, r1, d9
 8009d6e:	f7f6 fa93 	bl	8000298 <__aeabi_dsub>
 8009d72:	4652      	mov	r2, sl
 8009d74:	465b      	mov	r3, fp
 8009d76:	f7f6 fc47 	bl	8000608 <__aeabi_dmul>
 8009d7a:	4632      	mov	r2, r6
 8009d7c:	463b      	mov	r3, r7
 8009d7e:	f7f6 fa8b 	bl	8000298 <__aeabi_dsub>
 8009d82:	a30b      	add	r3, pc, #44	; (adr r3, 8009db0 <__kernel_sin+0x138>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	4606      	mov	r6, r0
 8009d8a:	460f      	mov	r7, r1
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 fc3a 	bl	8000608 <__aeabi_dmul>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fa7e 	bl	800029c <__adddf3>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fa76 	bl	8000298 <__aeabi_dsub>
 8009dac:	e7c5      	b.n	8009d3a <__kernel_sin+0xc2>
 8009dae:	bf00      	nop
 8009db0:	55555549 	.word	0x55555549
 8009db4:	3fc55555 	.word	0x3fc55555
 8009db8:	3fe00000 	.word	0x3fe00000
 8009dbc:	5acfd57c 	.word	0x5acfd57c
 8009dc0:	3de5d93a 	.word	0x3de5d93a
 8009dc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009dc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009dcc:	57b1fe7d 	.word	0x57b1fe7d
 8009dd0:	3ec71de3 	.word	0x3ec71de3
 8009dd4:	19c161d5 	.word	0x19c161d5
 8009dd8:	3f2a01a0 	.word	0x3f2a01a0
 8009ddc:	1110f8a6 	.word	0x1110f8a6
 8009de0:	3f811111 	.word	0x3f811111
 8009de4:	00000000 	.word	0x00000000

08009de8 <floor>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009df0:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009df4:	2e13      	cmp	r6, #19
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	4680      	mov	r8, r0
 8009e00:	dc33      	bgt.n	8009e6a <floor+0x82>
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	da14      	bge.n	8009e30 <floor+0x48>
 8009e06:	a334      	add	r3, pc, #208	; (adr r3, 8009ed8 <floor+0xf0>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f7f6 fa46 	bl	800029c <__adddf3>
 8009e10:	2200      	movs	r2, #0
 8009e12:	2300      	movs	r3, #0
 8009e14:	f7f6 fe88 	bl	8000b28 <__aeabi_dcmpgt>
 8009e18:	b138      	cbz	r0, 8009e2a <floor+0x42>
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	da57      	bge.n	8009ece <floor+0xe6>
 8009e1e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e22:	431d      	orrs	r5, r3
 8009e24:	d001      	beq.n	8009e2a <floor+0x42>
 8009e26:	4c2e      	ldr	r4, [pc, #184]	; (8009ee0 <floor+0xf8>)
 8009e28:	2500      	movs	r5, #0
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	462a      	mov	r2, r5
 8009e2e:	e025      	b.n	8009e7c <floor+0x94>
 8009e30:	4f2c      	ldr	r7, [pc, #176]	; (8009ee4 <floor+0xfc>)
 8009e32:	4137      	asrs	r7, r6
 8009e34:	ea01 0c07 	and.w	ip, r1, r7
 8009e38:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009e3c:	d01e      	beq.n	8009e7c <floor+0x94>
 8009e3e:	a326      	add	r3, pc, #152	; (adr r3, 8009ed8 <floor+0xf0>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 fa2a 	bl	800029c <__adddf3>
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f7f6 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d0ea      	beq.n	8009e2a <floor+0x42>
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	bfbe      	ittt	lt
 8009e58:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009e5c:	fa43 f606 	asrlt.w	r6, r3, r6
 8009e60:	19a4      	addlt	r4, r4, r6
 8009e62:	ea24 0407 	bic.w	r4, r4, r7
 8009e66:	2500      	movs	r5, #0
 8009e68:	e7df      	b.n	8009e2a <floor+0x42>
 8009e6a:	2e33      	cmp	r6, #51	; 0x33
 8009e6c:	dd0a      	ble.n	8009e84 <floor+0x9c>
 8009e6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e72:	d103      	bne.n	8009e7c <floor+0x94>
 8009e74:	f7f6 fa12 	bl	800029c <__adddf3>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4619      	mov	r1, r3
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009e88:	f04f 3cff 	mov.w	ip, #4294967295
 8009e8c:	fa2c f707 	lsr.w	r7, ip, r7
 8009e90:	4207      	tst	r7, r0
 8009e92:	d0f3      	beq.n	8009e7c <floor+0x94>
 8009e94:	a310      	add	r3, pc, #64	; (adr r3, 8009ed8 <floor+0xf0>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 f9ff 	bl	800029c <__adddf3>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f7f6 fe41 	bl	8000b28 <__aeabi_dcmpgt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0bf      	beq.n	8009e2a <floor+0x42>
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	da02      	bge.n	8009eb4 <floor+0xcc>
 8009eae:	2e14      	cmp	r6, #20
 8009eb0:	d103      	bne.n	8009eba <floor+0xd2>
 8009eb2:	3401      	adds	r4, #1
 8009eb4:	ea25 0507 	bic.w	r5, r5, r7
 8009eb8:	e7b7      	b.n	8009e2a <floor+0x42>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009ec0:	fa03 f606 	lsl.w	r6, r3, r6
 8009ec4:	4435      	add	r5, r6
 8009ec6:	4545      	cmp	r5, r8
 8009ec8:	bf38      	it	cc
 8009eca:	18e4      	addcc	r4, r4, r3
 8009ecc:	e7f2      	b.n	8009eb4 <floor+0xcc>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	462c      	mov	r4, r5
 8009ed2:	e7aa      	b.n	8009e2a <floor+0x42>
 8009ed4:	f3af 8000 	nop.w
 8009ed8:	8800759c 	.word	0x8800759c
 8009edc:	7e37e43c 	.word	0x7e37e43c
 8009ee0:	bff00000 	.word	0xbff00000
 8009ee4:	000fffff 	.word	0x000fffff

08009ee8 <scalbn>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009eee:	4604      	mov	r4, r0
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	4617      	mov	r7, r2
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	b986      	cbnz	r6, 8009f1a <scalbn+0x32>
 8009ef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009efc:	4303      	orrs	r3, r0
 8009efe:	d031      	beq.n	8009f64 <scalbn+0x7c>
 8009f00:	4b37      	ldr	r3, [pc, #220]	; (8009fe0 <scalbn+0xf8>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	f7f6 fb80 	bl	8000608 <__aeabi_dmul>
 8009f08:	4b36      	ldr	r3, [pc, #216]	; (8009fe4 <scalbn+0xfc>)
 8009f0a:	429f      	cmp	r7, r3
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	460d      	mov	r5, r1
 8009f10:	da0d      	bge.n	8009f2e <scalbn+0x46>
 8009f12:	a32b      	add	r3, pc, #172	; (adr r3, 8009fc0 <scalbn+0xd8>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	e038      	b.n	8009f8c <scalbn+0xa4>
 8009f1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009f1e:	4296      	cmp	r6, r2
 8009f20:	d10a      	bne.n	8009f38 <scalbn+0x50>
 8009f22:	4602      	mov	r2, r0
 8009f24:	f7f6 f9ba 	bl	800029c <__adddf3>
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	e01a      	b.n	8009f64 <scalbn+0x7c>
 8009f2e:	460b      	mov	r3, r1
 8009f30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009f34:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009f38:	19b9      	adds	r1, r7, r6
 8009f3a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	dd08      	ble.n	8009f54 <scalbn+0x6c>
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	a120      	add	r1, pc, #128	; (adr r1, 8009fc8 <scalbn+0xe0>)
 8009f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f4a:	da1c      	bge.n	8009f86 <scalbn+0x9e>
 8009f4c:	a120      	add	r1, pc, #128	; (adr r1, 8009fd0 <scalbn+0xe8>)
 8009f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f52:	e018      	b.n	8009f86 <scalbn+0x9e>
 8009f54:	2900      	cmp	r1, #0
 8009f56:	dd08      	ble.n	8009f6a <scalbn+0x82>
 8009f58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009f6e:	da19      	bge.n	8009fa4 <scalbn+0xbc>
 8009f70:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f74:	429f      	cmp	r7, r3
 8009f76:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009f7a:	dd0a      	ble.n	8009f92 <scalbn+0xaa>
 8009f7c:	a112      	add	r1, pc, #72	; (adr r1, 8009fc8 <scalbn+0xe0>)
 8009f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e2      	bne.n	8009f4c <scalbn+0x64>
 8009f86:	a310      	add	r3, pc, #64	; (adr r3, 8009fc8 <scalbn+0xe0>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	e7ca      	b.n	8009f28 <scalbn+0x40>
 8009f92:	a10b      	add	r1, pc, #44	; (adr r1, 8009fc0 <scalbn+0xd8>)
 8009f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0ba      	beq.n	8009f12 <scalbn+0x2a>
 8009f9c:	a10e      	add	r1, pc, #56	; (adr r1, 8009fd8 <scalbn+0xf0>)
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	e7b6      	b.n	8009f12 <scalbn+0x2a>
 8009fa4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fa8:	3136      	adds	r1, #54	; 0x36
 8009faa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fae:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <scalbn+0x100>)
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	2200      	movs	r2, #0
 8009fba:	e7e7      	b.n	8009f8c <scalbn+0xa4>
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	c2f8f359 	.word	0xc2f8f359
 8009fc4:	01a56e1f 	.word	0x01a56e1f
 8009fc8:	8800759c 	.word	0x8800759c
 8009fcc:	7e37e43c 	.word	0x7e37e43c
 8009fd0:	8800759c 	.word	0x8800759c
 8009fd4:	fe37e43c 	.word	0xfe37e43c
 8009fd8:	c2f8f359 	.word	0xc2f8f359
 8009fdc:	81a56e1f 	.word	0x81a56e1f
 8009fe0:	43500000 	.word	0x43500000
 8009fe4:	ffff3cb0 	.word	0xffff3cb0
 8009fe8:	3c900000 	.word	0x3c900000

08009fec <_close>:
 8009fec:	4b02      	ldr	r3, [pc, #8]	; (8009ff8 <_close+0xc>)
 8009fee:	2258      	movs	r2, #88	; 0x58
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	4770      	bx	lr
 8009ff8:	200002c4 	.word	0x200002c4

08009ffc <_fstat>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <_fstat+0xc>)
 8009ffe:	2258      	movs	r2, #88	; 0x58
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	4770      	bx	lr
 800a008:	200002c4 	.word	0x200002c4

0800a00c <_getpid>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	; (800a018 <_getpid+0xc>)
 800a00e:	2258      	movs	r2, #88	; 0x58
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	4770      	bx	lr
 800a018:	200002c4 	.word	0x200002c4

0800a01c <_isatty>:
 800a01c:	4b02      	ldr	r3, [pc, #8]	; (800a028 <_isatty+0xc>)
 800a01e:	2258      	movs	r2, #88	; 0x58
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	2000      	movs	r0, #0
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	200002c4 	.word	0x200002c4

0800a02c <_kill>:
 800a02c:	4b02      	ldr	r3, [pc, #8]	; (800a038 <_kill+0xc>)
 800a02e:	2258      	movs	r2, #88	; 0x58
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	f04f 30ff 	mov.w	r0, #4294967295
 800a036:	4770      	bx	lr
 800a038:	200002c4 	.word	0x200002c4

0800a03c <_lseek>:
 800a03c:	4b02      	ldr	r3, [pc, #8]	; (800a048 <_lseek+0xc>)
 800a03e:	2258      	movs	r2, #88	; 0x58
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	f04f 30ff 	mov.w	r0, #4294967295
 800a046:	4770      	bx	lr
 800a048:	200002c4 	.word	0x200002c4

0800a04c <_read>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <_read+0xc>)
 800a04e:	2258      	movs	r2, #88	; 0x58
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295
 800a056:	4770      	bx	lr
 800a058:	200002c4 	.word	0x200002c4

0800a05c <_sbrk>:
 800a05c:	4a04      	ldr	r2, [pc, #16]	; (800a070 <_sbrk+0x14>)
 800a05e:	6811      	ldr	r1, [r2, #0]
 800a060:	4603      	mov	r3, r0
 800a062:	b909      	cbnz	r1, 800a068 <_sbrk+0xc>
 800a064:	4903      	ldr	r1, [pc, #12]	; (800a074 <_sbrk+0x18>)
 800a066:	6011      	str	r1, [r2, #0]
 800a068:	6810      	ldr	r0, [r2, #0]
 800a06a:	4403      	add	r3, r0
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	4770      	bx	lr
 800a070:	200002cc 	.word	0x200002cc
 800a074:	200002d0 	.word	0x200002d0

0800a078 <_write>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <_write+0xc>)
 800a07a:	2258      	movs	r2, #88	; 0x58
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	4770      	bx	lr
 800a084:	200002c4 	.word	0x200002c4

0800a088 <_exit>:
 800a088:	e7fe      	b.n	800a088 <_exit>
	...

0800a08c <_init>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	bf00      	nop
 800a090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a092:	bc08      	pop	{r3}
 800a094:	469e      	mov	lr, r3
 800a096:	4770      	bx	lr

0800a098 <_fini>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr
